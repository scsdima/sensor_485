

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Wed Oct 14 23:01:40 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    77                           	psect	param0,global,class=BANK0,space=1,delta=1
    78                           	psect	pa_nodes,global,class=CODE,delta=1
    79  0000                     tosu	equ	0xFFF
    80                           tosh	equ	0xFFE
    81                           tosl	equ	0xFFD
    82                           pclath	equ	0xFFA
    83                           tblptru	equ	0xFF8
    84                           tblptrh	equ	0xFF7
    85                           tblptrl	equ	0xFF6
    86                           tablat	equ	0xFF5
    87                           prodh	equ	0xFF4
    88                           prodl	equ	0xFF3
    89                           intcon	equ	0xFF2
    90                           indf0	equ	0xFEF
    91                           fsr0h	equ	0xFEA
    92                           fsr0l	equ	0xFE9
    93                           wreg	equ	0xFE8
    94                           indf1	equ	0xFE7
    95                           postinc1	equ	0xFE6
    96                           postdec1	equ	0xFE5
    97                           fsr1h	equ	0xFE2
    98                           fsr1l	equ	0xFE1
    99                           indf2	equ	0xFDF
   100                           postinc2	equ	0xFDE
   101                           postdec2	equ	0xFDD
   102                           fsr2h	equ	0xFDA
   103                           fsr2l	equ	0xFD9
   104                           status	equ	0xFD8
   105                           
   106                           	psect	mediumconst
   107  007DB2                     __pmediumconst:
   108                           	opt stack 0
   109  007DB2                     _dpowers:
   110                           	opt stack 0
   111  007DB2  0001               	dw	1
   112  007DB4  000A               	dw	10
   113  007DB6  0064               	dw	100
   114  007DB8  03E8               	dw	1000
   115  007DBA  2710               	dw	10000
   116  007DBC                     __end_of_dpowers:
   117                           	opt stack 0
   118  007DBC                     _syx_param_list:
   119                           	opt stack 0
   120  007DBC  73                 	db	115
   121  007DBD  69                 	db	105
   122  007DBE  67                 	db	103
   123  007DBF  6E                 	db	110
   124  007DC0  61                 	db	97
   125  007DC1  6C                 	db	108
   126  007DC2  00                 	db	0
   127  007DC3  00                 	db	0
   128  007DC4  00                 	db	0
   129  007DC5  00                 	db	0
   130  007DC6  00                 	db	0
   131  007DC7  00                 	db	0
   132  007DC8  00                 	db	0
   133  007DC9  00                 	db	0
   134  007DCA  00                 	db	0
   135  007DCB  00                 	db	0
   136  007DCC  00                 	db	0
   137  007DCD  00                 	db	0
   138  007DCE  00                 	db	0
   139  007DCF  00                 	db	0
   140  007DD0  00                 	db	0
   141  007DD1  03                 	db	3
   142  007DD2  69                 	db	105
   143  007DD3  6D                 	db	109
   144  007DD4  70                 	db	112
   145  007DD5  00                 	db	0
   146  007DD6  00                 	db	0
   147  007DD7  00                 	db	0
   148  007DD8  00                 	db	0
   149  007DD9  00                 	db	0
   150  007DDA  00                 	db	0
   151  007DDB  00                 	db	0
   152  007DDC  00                 	db	0
   153  007DDD  00                 	db	0
   154  007DDE  00                 	db	0
   155  007DDF  00                 	db	0
   156  007DE0  00                 	db	0
   157  007DE1  00                 	db	0
   158  007DE2  00                 	db	0
   159  007DE3  00                 	db	0
   160  007DE4  00                 	db	0
   161  007DE5  00                 	db	0
   162  007DE6  01                 	db	1
   163  007DE7  03                 	db	3
   164  007DE8  70                 	db	112
   165  007DE9  77                 	db	119
   166  007DEA  72                 	db	114
   167  007DEB  00                 	db	0
   168  007DEC  00                 	db	0
   169  007DED  00                 	db	0
   170  007DEE  00                 	db	0
   171  007DEF  00                 	db	0
   172  007DF0  00                 	db	0
   173  007DF1  00                 	db	0
   174  007DF2  00                 	db	0
   175  007DF3  00                 	db	0
   176  007DF4  00                 	db	0
   177  007DF5  00                 	db	0
   178  007DF6  00                 	db	0
   179  007DF7  00                 	db	0
   180  007DF8  00                 	db	0
   181  007DF9  00                 	db	0
   182  007DFA  00                 	db	0
   183  007DFB  00                 	db	0
   184  007DFC  02                 	db	2
   185  007DFD  03                 	db	3
   186  007DFE  70                 	db	112
   187  007DFF  6F                 	db	111
   188  007E00  74                 	db	116
   189  007E01  00                 	db	0
   190  007E02  00                 	db	0
   191  007E03  00                 	db	0
   192  007E04  00                 	db	0
   193  007E05  00                 	db	0
   194  007E06  00                 	db	0
   195  007E07  00                 	db	0
   196  007E08  00                 	db	0
   197  007E09  00                 	db	0
   198  007E0A  00                 	db	0
   199  007E0B  00                 	db	0
   200  007E0C  00                 	db	0
   201  007E0D  00                 	db	0
   202  007E0E  00                 	db	0
   203  007E0F  00                 	db	0
   204  007E10  00                 	db	0
   205  007E11  00                 	db	0
   206  007E12  03                 	db	3
   207  007E13  03                 	db	3
   208  007E14  76                 	db	118
   209  007E15  65                 	db	101
   210  007E16  72                 	db	114
   211  007E17  00                 	db	0
   212  007E18  00                 	db	0
   213  007E19  00                 	db	0
   214  007E1A  00                 	db	0
   215  007E1B  00                 	db	0
   216  007E1C  00                 	db	0
   217  007E1D  00                 	db	0
   218  007E1E  00                 	db	0
   219  007E1F  00                 	db	0
   220  007E20  00                 	db	0
   221  007E21  00                 	db	0
   222  007E22  00                 	db	0
   223  007E23  00                 	db	0
   224  007E24  00                 	db	0
   225  007E25  00                 	db	0
   226  007E26  00                 	db	0
   227  007E27  00                 	db	0
   228  007E28  04                 	db	4
   229  007E29  03                 	db	3
   230  007E2A  73                 	db	115
   231  007E2B  74                 	db	116
   232  007E2C  61                 	db	97
   233  007E2D  74                 	db	116
   234  007E2E  75                 	db	117
   235  007E2F  73                 	db	115
   236  007E30  00                 	db	0
   237  007E31  00                 	db	0
   238  007E32  00                 	db	0
   239  007E33  00                 	db	0
   240  007E34  00                 	db	0
   241  007E35  00                 	db	0
   242  007E36  00                 	db	0
   243  007E37  00                 	db	0
   244  007E38  00                 	db	0
   245  007E39  00                 	db	0
   246  007E3A  00                 	db	0
   247  007E3B  00                 	db	0
   248  007E3C  00                 	db	0
   249  007E3D  00                 	db	0
   250  007E3E  05                 	db	5
   251  007E3F  03                 	db	3
   252  007E40  61                 	db	97
   253  007E41  63                 	db	99
   254  007E42  63                 	db	99
   255  007E43  00                 	db	0
   256  007E44  00                 	db	0
   257  007E45  00                 	db	0
   258  007E46  00                 	db	0
   259  007E47  00                 	db	0
   260  007E48  00                 	db	0
   261  007E49  00                 	db	0
   262  007E4A  00                 	db	0
   263  007E4B  00                 	db	0
   264  007E4C  00                 	db	0
   265  007E4D  00                 	db	0
   266  007E4E  00                 	db	0
   267  007E4F  00                 	db	0
   268  007E50  00                 	db	0
   269  007E51  00                 	db	0
   270  007E52  00                 	db	0
   271  007E53  00                 	db	0
   272  007E54  07                 	db	7
   273  007E55  03                 	db	3
   274  007E56  61                 	db	97
   275  007E57  64                 	db	100
   276  007E58  72                 	db	114
   277  007E59  00                 	db	0
   278  007E5A  00                 	db	0
   279  007E5B  00                 	db	0
   280  007E5C  00                 	db	0
   281  007E5D  00                 	db	0
   282  007E5E  00                 	db	0
   283  007E5F  00                 	db	0
   284  007E60  00                 	db	0
   285  007E61  00                 	db	0
   286  007E62  00                 	db	0
   287  007E63  00                 	db	0
   288  007E64  00                 	db	0
   289  007E65  00                 	db	0
   290  007E66  00                 	db	0
   291  007E67  00                 	db	0
   292  007E68  00                 	db	0
   293  007E69  00                 	db	0
   294  007E6A  08                 	db	8
   295  007E6B  03                 	db	3
   296  007E6C  65                 	db	101
   297  007E6D  72                 	db	114
   298  007E6E  72                 	db	114
   299  007E6F  6F                 	db	111
   300  007E70  72                 	db	114
   301  007E71  00                 	db	0
   302  007E72  00                 	db	0
   303  007E73  00                 	db	0
   304  007E74  00                 	db	0
   305  007E75  00                 	db	0
   306  007E76  00                 	db	0
   307  007E77  00                 	db	0
   308  007E78  00                 	db	0
   309  007E79  00                 	db	0
   310  007E7A  00                 	db	0
   311  007E7B  00                 	db	0
   312  007E7C  00                 	db	0
   313  007E7D  00                 	db	0
   314  007E7E  00                 	db	0
   315  007E7F  00                 	db	0
   316  007E80  06                 	db	6
   317  007E81  03                 	db	3
   318  007E82  64                 	db	100
   319  007E83  65                 	db	101
   320  007E84  66                 	db	102
   321  007E85  61                 	db	97
   322  007E86  75                 	db	117
   323  007E87  6C                 	db	108
   324  007E88  74                 	db	116
   325  007E89  73                 	db	115
   326  007E8A  00                 	db	0
   327  007E8B  00                 	db	0
   328  007E8C  00                 	db	0
   329  007E8D  00                 	db	0
   330  007E8E  00                 	db	0
   331  007E8F  00                 	db	0
   332  007E90  00                 	db	0
   333  007E91  00                 	db	0
   334  007E92  00                 	db	0
   335  007E93  00                 	db	0
   336  007E94  00                 	db	0
   337  007E95  00                 	db	0
   338  007E96  09                 	db	9
   339  007E97  03                 	db	3
   340  007E98  6D                 	db	109
   341  007E99  6F                 	db	111
   342  007E9A  64                 	db	100
   343  007E9B  00                 	db	0
   344  007E9C  00                 	db	0
   345  007E9D  00                 	db	0
   346  007E9E  00                 	db	0
   347  007E9F  00                 	db	0
   348  007EA0  00                 	db	0
   349  007EA1  00                 	db	0
   350  007EA2  00                 	db	0
   351  007EA3  00                 	db	0
   352  007EA4  00                 	db	0
   353  007EA5  00                 	db	0
   354  007EA6  00                 	db	0
   355  007EA7  00                 	db	0
   356  007EA8  00                 	db	0
   357  007EA9  00                 	db	0
   358  007EAA  00                 	db	0
   359  007EAB  00                 	db	0
   360  007EAC  0A                 	db	10
   361  007EAD  01                 	db	1
   362  007EAE  70                 	db	112
   363  007EAF  72                 	db	114
   364  007EB0  6F                 	db	111
   365  007EB1  66                 	db	102
   366  007EB2  69                 	db	105
   367  007EB3  6C                 	db	108
   368  007EB4  65                 	db	101
   369  007EB5  00                 	db	0
   370  007EB6  00                 	db	0
   371  007EB7  00                 	db	0
   372  007EB8  00                 	db	0
   373  007EB9  00                 	db	0
   374  007EBA  00                 	db	0
   375  007EBB  00                 	db	0
   376  007EBC  00                 	db	0
   377  007EBD  00                 	db	0
   378  007EBE  00                 	db	0
   379  007EBF  00                 	db	0
   380  007EC0  00                 	db	0
   381  007EC1  00                 	db	0
   382  007EC2  0B                 	db	11
   383  007EC3  03                 	db	3
   384  007EC4  70                 	db	112
   385  007EC5  77                 	db	119
   386  007EC6  72                 	db	114
   387  007EC7  74                 	db	116
   388  007EC8  72                 	db	114
   389  007EC9  69                 	db	105
   390  007ECA  67                 	db	103
   391  007ECB  00                 	db	0
   392  007ECC  00                 	db	0
   393  007ECD  00                 	db	0
   394  007ECE  00                 	db	0
   395  007ECF  00                 	db	0
   396  007ED0  00                 	db	0
   397  007ED1  00                 	db	0
   398  007ED2  00                 	db	0
   399  007ED3  00                 	db	0
   400  007ED4  00                 	db	0
   401  007ED5  00                 	db	0
   402  007ED6  00                 	db	0
   403  007ED7  00                 	db	0
   404  007ED8  0C                 	db	12
   405  007ED9  03                 	db	3
   406  007EDA  61                 	db	97
   407  007EDB  63                 	db	99
   408  007EDC  63                 	db	99
   409  007EDD  74                 	db	116
   410  007EDE  72                 	db	114
   411  007EDF  69                 	db	105
   412  007EE0  67                 	db	103
   413  007EE1  00                 	db	0
   414  007EE2  00                 	db	0
   415  007EE3  00                 	db	0
   416  007EE4  00                 	db	0
   417  007EE5  00                 	db	0
   418  007EE6  00                 	db	0
   419  007EE7  00                 	db	0
   420  007EE8  00                 	db	0
   421  007EE9  00                 	db	0
   422  007EEA  00                 	db	0
   423  007EEB  00                 	db	0
   424  007EEC  00                 	db	0
   425  007EED  00                 	db	0
   426  007EEE  0D                 	db	13
   427  007EEF  03                 	db	3
   428  007EF0  74                 	db	116
   429  007EF1  72                 	db	114
   430  007EF2  69                 	db	105
   431  007EF3  67                 	db	103
   432  007EF4  6C                 	db	108
   433  007EF5  65                 	db	101
   434  007EF6  76                 	db	118
   435  007EF7  00                 	db	0
   436  007EF8  00                 	db	0
   437  007EF9  00                 	db	0
   438  007EFA  00                 	db	0
   439  007EFB  00                 	db	0
   440  007EFC  00                 	db	0
   441  007EFD  00                 	db	0
   442  007EFE  00                 	db	0
   443  007EFF  00                 	db	0
   444  007F00  00                 	db	0
   445  007F01  00                 	db	0
   446  007F02  00                 	db	0
   447  007F03  00                 	db	0
   448  007F04  0E                 	db	14
   449  007F05  03                 	db	3
   450  007F06  74                 	db	116
   451  007F07  72                 	db	114
   452  007F08  69                 	db	105
   453  007F09  67                 	db	103
   454  007F0A  73                 	db	115
   455  007F0B  75                 	db	117
   456  007F0C  6D                 	db	109
   457  007F0D  00                 	db	0
   458  007F0E  00                 	db	0
   459  007F0F  00                 	db	0
   460  007F10  00                 	db	0
   461  007F11  00                 	db	0
   462  007F12  00                 	db	0
   463  007F13  00                 	db	0
   464  007F14  00                 	db	0
   465  007F15  00                 	db	0
   466  007F16  00                 	db	0
   467  007F17  00                 	db	0
   468  007F18  00                 	db	0
   469  007F19  00                 	db	0
   470  007F1A  0F                 	db	15
   471  007F1B  03                 	db	3
   472  007F1C  74                 	db	116
   473  007F1D  72                 	db	114
   474  007F1E  69                 	db	105
   475  007F1F  67                 	db	103
   476  007F20  63                 	db	99
   477  007F21  6E                 	db	110
   478  007F22  74                 	db	116
   479  007F23  00                 	db	0
   480  007F24  00                 	db	0
   481  007F25  00                 	db	0
   482  007F26  00                 	db	0
   483  007F27  00                 	db	0
   484  007F28  00                 	db	0
   485  007F29  00                 	db	0
   486  007F2A  00                 	db	0
   487  007F2B  00                 	db	0
   488  007F2C  00                 	db	0
   489  007F2D  00                 	db	0
   490  007F2E  00                 	db	0
   491  007F2F  00                 	db	0
   492  007F30  10                 	db	16
   493  007F31  03                 	db	3
   494  007F32  77                 	db	119
   495  007F33  61                 	db	97
   496  007F34  76                 	db	118
   497  007F35  74                 	db	116
   498  007F36  6F                 	db	111
   499  007F37  6C                 	db	108
   500  007F38  65                 	db	101
   501  007F39  00                 	db	0
   502  007F3A  00                 	db	0
   503  007F3B  00                 	db	0
   504  007F3C  00                 	db	0
   505  007F3D  00                 	db	0
   506  007F3E  00                 	db	0
   507  007F3F  00                 	db	0
   508  007F40  00                 	db	0
   509  007F41  00                 	db	0
   510  007F42  00                 	db	0
   511  007F43  00                 	db	0
   512  007F44  00                 	db	0
   513  007F45  00                 	db	0
   514  007F46  11                 	db	17
   515  007F47  03                 	db	3
   516  007F48  77                 	db	119
   517  007F49  61                 	db	97
   518  007F4A  76                 	db	118
   519  007F4B  74                 	db	116
   520  007F4C  72                 	db	114
   521  007F4D  69                 	db	105
   522  007F4E  67                 	db	103
   523  007F4F  00                 	db	0
   524  007F50  00                 	db	0
   525  007F51  00                 	db	0
   526  007F52  00                 	db	0
   527  007F53  00                 	db	0
   528  007F54  00                 	db	0
   529  007F55  00                 	db	0
   530  007F56  00                 	db	0
   531  007F57  00                 	db	0
   532  007F58  00                 	db	0
   533  007F59  00                 	db	0
   534  007F5A  00                 	db	0
   535  007F5B  00                 	db	0
   536  007F5C  12                 	db	18
   537  007F5D  03                 	db	3
   538  007F5E  77                 	db	119
   539  007F5F  61                 	db	97
   540  007F60  76                 	db	118
   541  007F61  6C                 	db	108
   542  007F62  63                 	db	99
   543  007F63  6E                 	db	110
   544  007F64  74                 	db	116
   545  007F65  00                 	db	0
   546  007F66  00                 	db	0
   547  007F67  00                 	db	0
   548  007F68  00                 	db	0
   549  007F69  00                 	db	0
   550  007F6A  00                 	db	0
   551  007F6B  00                 	db	0
   552  007F6C  00                 	db	0
   553  007F6D  00                 	db	0
   554  007F6E  00                 	db	0
   555  007F6F  00                 	db	0
   556  007F70  00                 	db	0
   557  007F71  00                 	db	0
   558  007F72  13                 	db	19
   559  007F73  03                 	db	3
   560  007F74  77                 	db	119
   561  007F75  61                 	db	97
   562  007F76  76                 	db	118
   563  007F77  72                 	db	114
   564  007F78  63                 	db	99
   565  007F79  6E                 	db	110
   566  007F7A  74                 	db	116
   567  007F7B  00                 	db	0
   568  007F7C  00                 	db	0
   569  007F7D  00                 	db	0
   570  007F7E  00                 	db	0
   571  007F7F  00                 	db	0
   572  007F80  00                 	db	0
   573  007F81  00                 	db	0
   574  007F82  00                 	db	0
   575  007F83  00                 	db	0
   576  007F84  00                 	db	0
   577  007F85  00                 	db	0
   578  007F86  00                 	db	0
   579  007F87  00                 	db	0
   580  007F88  14                 	db	20
   581  007F89  03                 	db	3
   582  007F8A  69                 	db	105
   583  007F8B  64                 	db	100
   584  007F8C  69                 	db	105
   585  007F8D  64                 	db	100
   586  007F8E  00                 	db	0
   587  007F8F  00                 	db	0
   588  007F90  00                 	db	0
   589  007F91  00                 	db	0
   590  007F92  00                 	db	0
   591  007F93  00                 	db	0
   592  007F94  00                 	db	0
   593  007F95  00                 	db	0
   594  007F96  00                 	db	0
   595  007F97  00                 	db	0
   596  007F98  00                 	db	0
   597  007F99  00                 	db	0
   598  007F9A  00                 	db	0
   599  007F9B  00                 	db	0
   600  007F9C  00                 	db	0
   601  007F9D  00                 	db	0
   602  007F9E  15                 	db	21
   603  007F9F  03                 	db	3
   604  007FA0  70                 	db	112
   605  007FA1  73                 	db	115
   606  007FA2  77                 	db	119
   607  007FA3  70                 	db	112
   608  007FA4  73                 	db	115
   609  007FA5  77                 	db	119
   610  007FA6  00                 	db	0
   611  007FA7  00                 	db	0
   612  007FA8  00                 	db	0
   613  007FA9  00                 	db	0
   614  007FAA  00                 	db	0
   615  007FAB  00                 	db	0
   616  007FAC  00                 	db	0
   617  007FAD  00                 	db	0
   618  007FAE  00                 	db	0
   619  007FAF  00                 	db	0
   620  007FB0  00                 	db	0
   621  007FB1  00                 	db	0
   622  007FB2  00                 	db	0
   623  007FB3  00                 	db	0
   624  007FB4  16                 	db	22
   625  007FB5  03                 	db	3
   626  007FB6  00                 	db	0
   627  007FB7  00                 	db	0
   628  007FB8  00                 	db	0
   629  007FB9  00                 	db	0
   630  007FBA  00                 	db	0
   631  007FBB  00                 	db	0
   632  007FBC  00                 	db	0
   633  007FBD  00                 	db	0
   634  007FBE  00                 	db	0
   635  007FBF  00                 	db	0
   636  007FC0  00                 	db	0
   637  007FC1  00                 	db	0
   638  007FC2  00                 	db	0
   639  007FC3  00                 	db	0
   640  007FC4  00                 	db	0
   641  007FC5  00                 	db	0
   642  007FC6  00                 	db	0
   643  007FC7  00                 	db	0
   644  007FC8  00                 	db	0
   645  007FC9  00                 	db	0
   646  007FCA  FF                 	db	255
   647  007FCB  FF                 	db	255
   648  007FCC                     __end_of_syx_param_list:
   649                           	opt stack 0
   650  0000                     _ADRES	set	4035
   651  0000                     _TMR0	set	4054
   652  0000                     _ADCON0	set	4034
   653  0000                     _ADCON0bits	set	4034
   654  0000                     _ADCON1	set	4033
   655  0000                     _ADCON2	set	4032
   656  0000                     _ANSEL	set	3966
   657  0000                     _ANSELH	set	3967
   658  0000                     _BAUDCON	set	4024
   659  0000                     _BAUDCTL	set	4024
   660  0000                     _INTCONbits	set	4082
   661  0000                     _LATC	set	3979
   662  0000                     _LATD	set	3980
   663  0000                     _OSCCON	set	4051
   664  0000                     _PIE1bits	set	3997
   665  0000                     _PIR1bits	set	3998
   666  0000                     _RCREG	set	4014
   667  0000                     _RCSTA	set	4011
   668  0000                     _RCSTAbits	set	4011
   669  0000                     _SPBRG	set	4015
   670  0000                     _STATUS	set	4056
   671  0000                     _TRISA	set	3986
   672  0000                     _TRISB	set	3987
   673  0000                     _TRISC	set	3988
   674  0000                     _TRISD	set	3989
   675  0000                     _TXREG	set	4013
   676  0000                     _TXSTA	set	4012
   677  0000                     _ADIF	set	31990
   678  0000                     _CREN	set	32092
   679  0000                     _GODONE	set	32273
   680  0000                     _RC1IF	set	31989
   681  0000                     _RCIF	set	31989
   682  0000                     _TXIF	set	31988
   683  007FCC                     __stringdata:
   684                           	opt stack 0
   685  007FCC                     STR_1:
   686  007FCC  6F                 	db	111	;'o'
   687  007FCD  70                 	db	112	;'p'
   688  007FCE  65                 	db	101	;'e'
   689  007FCF  72                 	db	114	;'r'
   690  007FD0  61                 	db	97	;'a'
   691  007FD1  74                 	db	116	;'t'
   692  007FD2  69                 	db	105	;'i'
   693  007FD3  6F                 	db	111	;'o'
   694  007FD4  6E                 	db	110	;'n'
   695  007FD5  3D                 	db	61	;'='
   696  007FD6  20                 	db	32
   697  007FD7  25                 	db	37
   698  007FD8  64                 	db	100	;'d'
   699  007FD9  20                 	db	32
   700  007FDA  63                 	db	99	;'c'
   701  007FDB  69                 	db	105	;'i'
   702  007FDC  64                 	db	100	;'d'
   703  007FDD  3D                 	db	61	;'='
   704  007FDE  25                 	db	37
   705  007FDF  64                 	db	100	;'d'
   706  007FE0  20                 	db	32
   707  007FE1  70                 	db	112	;'p'
   708  007FE2  69                 	db	105	;'i'
   709  007FE3  64                 	db	100	;'d'
   710  007FE4  3D                 	db	61	;'='
   711  007FE5  25                 	db	37
   712  007FE6  64                 	db	100	;'d'
   713  007FE7  00                 	db	0
   714  007FE8                     STR_6:
   715  007FE8  68                 	db	104	;'h'
   716  007FE9  65                 	db	101	;'e'
   717  007FEA  6C                 	db	108	;'l'
   718  007FEB  6C                 	db	108	;'l'
   719  007FEC  6F                 	db	111	;'o'
   720  007FED  00                 	db	0
   721  007FEE                     STR_4:
   722  007FEE  3A                 	db	58	;':'
   723  007FEF  65                 	db	101	;'e'
   724  007FF0  72                 	db	114	;'r'
   725  007FF1  72                 	db	114	;'r'
   726  007FF2  20                 	db	32
   727  007FF3  00                 	db	0
   728  007FF4                     STR_2:
   729  007FF4  65                 	db	101	;'e'
   730  007FF5  72                 	db	114	;'r'
   731  007FF6  72                 	db	114	;'r'
   732  007FF7  0A                 	db	10
   733  007FF8  00                 	db	0
   734  007FF9                     STR_3:
   735  007FF9  3A                 	db	58	;':'
   736  007FFA  6F                 	db	111	;'o'
   737  007FFB  6B                 	db	107	;'k'
   738  007FFC  20                 	db	32
   739  007FFD  00                 	db	0
   740  007FFE                     __end_of__stringdata:
   741                           	opt stack 0
   742                           
   743                           ; #config settings
   744  007FFE  00                 	db	0	; dummy byte at the end
   745  0000                     tosu	equ	0xFFF
   746                           tosh	equ	0xFFE
   747                           tosl	equ	0xFFD
   748                           pclath	equ	0xFFA
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           prodh	equ	0xFF4
   754                           prodl	equ	0xFF3
   755                           intcon	equ	0xFF2
   756                           indf0	equ	0xFEF
   757                           fsr0h	equ	0xFEA
   758                           fsr0l	equ	0xFE9
   759                           wreg	equ	0xFE8
   760                           indf1	equ	0xFE7
   761                           postinc1	equ	0xFE6
   762                           postdec1	equ	0xFE5
   763                           fsr1h	equ	0xFE2
   764                           fsr1l	equ	0xFE1
   765                           indf2	equ	0xFDF
   766                           postinc2	equ	0xFDE
   767                           postdec2	equ	0xFDD
   768                           fsr2h	equ	0xFDA
   769                           fsr2l	equ	0xFD9
   770                           status	equ	0xFD8
   771                           
   772                           	psect	nvBANK0
   773  0000ED                     __pnvBANK0:
   774                           	opt stack 0
   775  0000ED                     _this_delay_timer_ms:
   776                           	opt stack 0
   777  0000ED                     	ds	2
   778                           tosu	equ	0xFFF
   779                           tosh	equ	0xFFE
   780                           tosl	equ	0xFFD
   781                           pclath	equ	0xFFA
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           prodh	equ	0xFF4
   787                           prodl	equ	0xFF3
   788                           intcon	equ	0xFF2
   789                           indf0	equ	0xFEF
   790                           fsr0h	equ	0xFEA
   791                           fsr0l	equ	0xFE9
   792                           wreg	equ	0xFE8
   793                           indf1	equ	0xFE7
   794                           postinc1	equ	0xFE6
   795                           postdec1	equ	0xFE5
   796                           fsr1h	equ	0xFE2
   797                           fsr1l	equ	0xFE1
   798                           indf2	equ	0xFDF
   799                           postinc2	equ	0xFDE
   800                           postdec2	equ	0xFDD
   801                           fsr2h	equ	0xFDA
   802                           fsr2l	equ	0xFD9
   803                           status	equ	0xFD8
   804                           
   805                           	psect	cinit
   806  0016E4                     __pcinit:
   807                           	opt stack 0
   808  0016E4                     start_initialization:
   809                           	opt stack 0
   810  0016E4                     __initialization:
   811                           	opt stack 0
   812                           
   813                           ; Clear objects allocated to BANK5 (127 bytes)
   814  0016E4  EE05  F000         	lfsr	0,__pbssBANK5
   815  0016E8  0E7F               	movlw	127
   816  0016EA                     clear_0:
   817  0016EA  6AEE               	clrf	postinc0,c
   818  0016EC  06E8               	decf	wreg,f,c
   819  0016EE  E1FD               	bnz	clear_0
   820                           
   821                           ; Clear objects allocated to BANK4 (187 bytes)
   822  0016F0  EE04  F000         	lfsr	0,__pbssBANK4
   823  0016F4  0EBB               	movlw	187
   824  0016F6                     clear_1:
   825  0016F6  6AEE               	clrf	postinc0,c
   826  0016F8  06E8               	decf	wreg,f,c
   827  0016FA  E1FD               	bnz	clear_1
   828                           
   829                           ; Clear objects allocated to BANK3 (227 bytes)
   830  0016FC  EE03  F000         	lfsr	0,__pbssBANK3
   831  001700  0EE3               	movlw	227
   832  001702                     clear_2:
   833  001702  6AEE               	clrf	postinc0,c
   834  001704  06E8               	decf	wreg,f,c
   835  001706  E1FD               	bnz	clear_2
   836                           
   837                           ; Clear objects allocated to BANK2 (234 bytes)
   838  001708  EE02  F000         	lfsr	0,__pbssBANK2
   839  00170C  0EEA               	movlw	234
   840  00170E                     clear_3:
   841  00170E  6AEE               	clrf	postinc0,c
   842  001710  06E8               	decf	wreg,f,c
   843  001712  E1FD               	bnz	clear_3
   844                           
   845                           ; Clear objects allocated to BANK1 (208 bytes)
   846  001714  EE01  F000         	lfsr	0,__pbssBANK1
   847  001718  0ED0               	movlw	208
   848  00171A                     clear_4:
   849  00171A  6AEE               	clrf	postinc0,c
   850  00171C  06E8               	decf	wreg,f,c
   851  00171E  E1FD               	bnz	clear_4
   852                           
   853                           ; Clear objects allocated to BANK0 (68 bytes)
   854  001720  EE00  F0A9         	lfsr	0,__pbssBANK0
   855  001724  0E44               	movlw	68
   856  001726                     clear_5:
   857  001726  6AEE               	clrf	postinc0,c
   858  001728  06E8               	decf	wreg,f,c
   859  00172A  E1FD               	bnz	clear_5
   860                           
   861                           ; Clear objects allocated to COMRAM (24 bytes)
   862  00172C  EE00  F02B         	lfsr	0,__pbssCOMRAM
   863  001730  0E18               	movlw	24
   864  001732                     clear_6:
   865  001732  6AEE               	clrf	postinc0,c
   866  001734  06E8               	decf	wreg,f,c
   867  001736  E1FD               	bnz	clear_6
   868  001738                     end_of_initialization:
   869                           	opt stack 0
   870  001738                     __end_of__initialization:
   871                           	opt stack 0
   872  001738  0E00               	movlw	low (__Lmediumconst shr (0+16))
   873  00173A  6EF8               	movwf	tblptru,c
   874  00173C  0100               	movlb	0
   875  00173E  EF2A  F007         	goto	_main	;jump to C main() function
   876                           tosu	equ	0xFFF
   877                           tosh	equ	0xFFE
   878                           tosl	equ	0xFFD
   879                           pclath	equ	0xFFA
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           prodh	equ	0xFF4
   885                           prodl	equ	0xFF3
   886                           intcon	equ	0xFF2
   887                           indf0	equ	0xFEF
   888                           postinc0	equ	0xFEE
   889                           fsr0h	equ	0xFEA
   890                           fsr0l	equ	0xFE9
   891                           wreg	equ	0xFE8
   892                           indf1	equ	0xFE7
   893                           postinc1	equ	0xFE6
   894                           postdec1	equ	0xFE5
   895                           fsr1h	equ	0xFE2
   896                           fsr1l	equ	0xFE1
   897                           indf2	equ	0xFDF
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           fsr2h	equ	0xFDA
   901                           fsr2l	equ	0xFD9
   902                           status	equ	0xFD8
   903                           
   904                           	psect	bssCOMRAM
   905  00002B                     __pbssCOMRAM:
   906                           	opt stack 0
   907  00002B                     _event_miss:
   908                           	opt stack 0
   909  00002B                     	ds	8
   910  000033                     _pool:
   911                           	opt stack 0
   912  000033                     	ds	8
   913  00003B                     _g_STATUS:
   914                           	opt stack 0
   915  00003B                     	ds	2
   916  00003D                     _g_analog1:
   917                           	opt stack 0
   918  00003D                     	ds	2
   919  00003F                     _g_analog2:
   920                           	opt stack 0
   921  00003F                     	ds	2
   922  000041                     _bitcount:
   923                           	opt stack 0
   924  000041                     	ds	1
   925  000042                     _i2c_buff:
   926                           	opt stack 0
   927  000042                     	ds	1
   928                           tosu	equ	0xFFF
   929                           tosh	equ	0xFFE
   930                           tosl	equ	0xFFD
   931                           pclath	equ	0xFFA
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           prodh	equ	0xFF4
   937                           prodl	equ	0xFF3
   938                           intcon	equ	0xFF2
   939                           indf0	equ	0xFEF
   940                           postinc0	equ	0xFEE
   941                           fsr0h	equ	0xFEA
   942                           fsr0l	equ	0xFE9
   943                           wreg	equ	0xFE8
   944                           indf1	equ	0xFE7
   945                           postinc1	equ	0xFE6
   946                           postdec1	equ	0xFE5
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           indf2	equ	0xFDF
   950                           postinc2	equ	0xFDE
   951                           postdec2	equ	0xFDD
   952                           fsr2h	equ	0xFDA
   953                           fsr2l	equ	0xFD9
   954                           status	equ	0xFD8
   955                           
   956                           	psect	bssBANK0
   957  0000A9                     __pbssBANK0:
   958                           	opt stack 0
   959  0000A9                     _events:
   960                           	opt stack 0
   961  0000A9                     	ds	16
   962  0000B9                     _g_analog0:
   963                           	opt stack 0
   964  0000B9                     	ds	2
   965  0000BB                     _parameter_type:
   966                           	opt stack 0
   967  0000BB                     	ds	1
   968  0000BC                     _this_alarm:
   969                           	opt stack 0
   970  0000BC                     	ds	1
   971  0000BD                     _this_case_sensitive:
   972                           	opt stack 0
   973  0000BD                     	ds	1
   974  0000BE                     _this_contains_crlf:
   975                           	opt stack 0
   976  0000BE                     	ds	1
   977  0000BF                     _this_warning:
   978                           	opt stack 0
   979  0000BF                     	ds	1
   980  0000C0                     detection_task@alarm_cla:
   981                           	opt stack 0
   982  0000C0                     	ds	1
   983  0000C1                     detection_task@alarm_wav:
   984                           	opt stack 0
   985  0000C1                     	ds	1
   986  0000C2                     _cla_detector:
   987                           	opt stack 0
   988  0000C2                     	ds	21
   989  0000D7                     _g_CONFIG:
   990                           	opt stack 0
   991  0000D7                     	ds	20
   992  0000EB                     _command_id:
   993                           	opt stack 0
   994  0000EB                     	ds	1
   995  0000EC                     _parameter_id:
   996                           	opt stack 0
   997  0000EC                     	ds	1
   998                           tosu	equ	0xFFF
   999                           tosh	equ	0xFFE
  1000                           tosl	equ	0xFFD
  1001                           pclath	equ	0xFFA
  1002                           tblptru	equ	0xFF8
  1003                           tblptrh	equ	0xFF7
  1004                           tblptrl	equ	0xFF6
  1005                           tablat	equ	0xFF5
  1006                           prodh	equ	0xFF4
  1007                           prodl	equ	0xFF3
  1008                           intcon	equ	0xFF2
  1009                           indf0	equ	0xFEF
  1010                           postinc0	equ	0xFEE
  1011                           fsr0h	equ	0xFEA
  1012                           fsr0l	equ	0xFE9
  1013                           wreg	equ	0xFE8
  1014                           indf1	equ	0xFE7
  1015                           postinc1	equ	0xFE6
  1016                           postdec1	equ	0xFE5
  1017                           fsr1h	equ	0xFE2
  1018                           fsr1l	equ	0xFE1
  1019                           indf2	equ	0xFDF
  1020                           postinc2	equ	0xFDE
  1021                           postdec2	equ	0xFDD
  1022                           fsr2h	equ	0xFDA
  1023                           fsr2l	equ	0xFD9
  1024                           status	equ	0xFD8
  1025                           
  1026                           	psect	bssBANK1
  1027  000100                     __pbssBANK1:
  1028                           	opt stack 0
  1029  000100                     _g_tx_buffer:
  1030                           	opt stack 0
  1031  000100                     	ds	107
  1032  00016B                     _pd_detector:
  1033                           	opt stack 0
  1034  00016B                     	ds	101
  1035                           tosu	equ	0xFFF
  1036                           tosh	equ	0xFFE
  1037                           tosl	equ	0xFFD
  1038                           pclath	equ	0xFFA
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           prodh	equ	0xFF4
  1044                           prodl	equ	0xFF3
  1045                           intcon	equ	0xFF2
  1046                           indf0	equ	0xFEF
  1047                           postinc0	equ	0xFEE
  1048                           fsr0h	equ	0xFEA
  1049                           fsr0l	equ	0xFE9
  1050                           wreg	equ	0xFE8
  1051                           indf1	equ	0xFE7
  1052                           postinc1	equ	0xFE6
  1053                           postdec1	equ	0xFE5
  1054                           fsr1h	equ	0xFE2
  1055                           fsr1l	equ	0xFE1
  1056                           indf2	equ	0xFDF
  1057                           postinc2	equ	0xFDE
  1058                           postdec2	equ	0xFDD
  1059                           fsr2h	equ	0xFDA
  1060                           fsr2l	equ	0xFD9
  1061                           status	equ	0xFD8
  1062                           
  1063                           	psect	bssBANK2
  1064  000200                     __pbssBANK2:
  1065                           	opt stack 0
  1066  000200                     _parameter_value:
  1067                           	opt stack 0
  1068  000200                     	ds	127
  1069  00027F                     _g_rx_buffer:
  1070                           	opt stack 0
  1071  00027F                     	ds	107
  1072                           tosu	equ	0xFFF
  1073                           tosh	equ	0xFFE
  1074                           tosl	equ	0xFFD
  1075                           pclath	equ	0xFFA
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           indf0	equ	0xFEF
  1084                           postinc0	equ	0xFEE
  1085                           fsr0h	equ	0xFEA
  1086                           fsr0l	equ	0xFE9
  1087                           wreg	equ	0xFE8
  1088                           indf1	equ	0xFE7
  1089                           postinc1	equ	0xFE6
  1090                           postdec1	equ	0xFE5
  1091                           fsr1h	equ	0xFE2
  1092                           fsr1l	equ	0xFE1
  1093                           indf2	equ	0xFDF
  1094                           postinc2	equ	0xFDE
  1095                           postdec2	equ	0xFDD
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100                           	psect	bssBANK3
  1101  000300                     __pbssBANK3:
  1102                           	opt stack 0
  1103  000300                     _parameter_text:
  1104                           	opt stack 0
  1105  000300                     	ds	127
  1106  00037F                     _serialport_buffer:
  1107                           	opt stack 0
  1108  00037F                     	ds	100
  1109                           tosu	equ	0xFFF
  1110                           tosh	equ	0xFFE
  1111                           tosl	equ	0xFFD
  1112                           pclath	equ	0xFFA
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           prodh	equ	0xFF4
  1118                           prodl	equ	0xFF3
  1119                           intcon	equ	0xFF2
  1120                           indf0	equ	0xFEF
  1121                           postinc0	equ	0xFEE
  1122                           fsr0h	equ	0xFEA
  1123                           fsr0l	equ	0xFE9
  1124                           wreg	equ	0xFE8
  1125                           indf1	equ	0xFE7
  1126                           postinc1	equ	0xFE6
  1127                           postdec1	equ	0xFE5
  1128                           fsr1h	equ	0xFE2
  1129                           fsr1l	equ	0xFE1
  1130                           indf2	equ	0xFDF
  1131                           postinc2	equ	0xFDE
  1132                           postdec2	equ	0xFDD
  1133                           fsr2h	equ	0xFDA
  1134                           fsr2l	equ	0xFD9
  1135                           status	equ	0xFD8
  1136                           
  1137                           	psect	bssBANK4
  1138  000400                     __pbssBANK4:
  1139                           	opt stack 0
  1140  000400                     	ds	80
  1141  000450                     _meas_buffer:
  1142                           	opt stack 0
  1143  000450                     	ds	107
  1144                           tosu	equ	0xFFF
  1145                           tosh	equ	0xFFE
  1146                           tosl	equ	0xFFD
  1147                           pclath	equ	0xFFA
  1148                           tblptru	equ	0xFF8
  1149                           tblptrh	equ	0xFF7
  1150                           tblptrl	equ	0xFF6
  1151                           tablat	equ	0xFF5
  1152                           prodh	equ	0xFF4
  1153                           prodl	equ	0xFF3
  1154                           intcon	equ	0xFF2
  1155                           indf0	equ	0xFEF
  1156                           postinc0	equ	0xFEE
  1157                           fsr0h	equ	0xFEA
  1158                           fsr0l	equ	0xFE9
  1159                           wreg	equ	0xFE8
  1160                           indf1	equ	0xFE7
  1161                           postinc1	equ	0xFE6
  1162                           postdec1	equ	0xFE5
  1163                           fsr1h	equ	0xFE2
  1164                           fsr1l	equ	0xFE1
  1165                           indf2	equ	0xFDF
  1166                           postinc2	equ	0xFDE
  1167                           postdec2	equ	0xFDD
  1168                           fsr2h	equ	0xFDA
  1169                           fsr2l	equ	0xFD9
  1170                           status	equ	0xFD8
  1171                           
  1172                           	psect	bssBANK5
  1173  000500                     __pbssBANK5:
  1174                           	opt stack 0
  1175  000500                     _this_buf:
  1176                           	opt stack 0
  1177  000500                     	ds	127
  1178                           tosu	equ	0xFFF
  1179                           tosh	equ	0xFFE
  1180                           tosl	equ	0xFFD
  1181                           pclath	equ	0xFFA
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           prodh	equ	0xFF4
  1187                           prodl	equ	0xFF3
  1188                           intcon	equ	0xFF2
  1189                           indf0	equ	0xFEF
  1190                           postinc0	equ	0xFEE
  1191                           fsr0h	equ	0xFEA
  1192                           fsr0l	equ	0xFE9
  1193                           wreg	equ	0xFE8
  1194                           indf1	equ	0xFE7
  1195                           postinc1	equ	0xFE6
  1196                           postdec1	equ	0xFE5
  1197                           fsr1h	equ	0xFE2
  1198                           fsr1l	equ	0xFE1
  1199                           indf2	equ	0xFDF
  1200                           postinc2	equ	0xFDE
  1201                           postdec2	equ	0xFDD
  1202                           fsr2h	equ	0xFDA
  1203                           fsr2l	equ	0xFD9
  1204                           status	equ	0xFD8
  1205                           
  1206                           	psect	cstackBANK0
  1207  000060                     __pcstackBANK0:
  1208                           	opt stack 0
  1209  000060                     	ds	2
  1210  000062                     ??_serialport_service:
  1211  000062                     detection_obtain_analog_service@adc_data:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0x2
  1215  000062                     	ds	1
  1216  000063                     serialport_service@byte:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x3
  1220  000063                     	ds	1
  1221  000064                     ??interrupts@isr_high:
  1222                           
  1223                           ; 0 bytes @ 0x4
  1224  000064                     	ds	8
  1225  00006C                     ?_uart_set_baudrate:
  1226                           	opt stack 0
  1227  00006C                     ?_delay_ms:
  1228                           	opt stack 0
  1229  00006C                     ?_rd_buffer_get:
  1230                           	opt stack 0
  1231  00006C                     ?_rd_buffer_init:
  1232                           	opt stack 0
  1233  00006C                     ?_rd_buffer_put:
  1234                           	opt stack 0
  1235  00006C                     ?_cla_add_value:
  1236                           	opt stack 0
  1237  00006C                     ?___lbmod:
  1238                           	opt stack 0
  1239  00006C                     ?_rd_buffer_cnt:
  1240                           	opt stack 0
  1241  00006C                     ?_string_utils_copy:
  1242                           	opt stack 0
  1243  00006C                     ?_string_utils_split:
  1244                           	opt stack 0
  1245  00006C                     ?_string_utils_strchr:
  1246                           	opt stack 0
  1247  00006C                     ?_syntax_as_integer:
  1248                           	opt stack 0
  1249  00006C                     ?___awdiv:
  1250                           	opt stack 0
  1251  00006C                     ?___awmod:
  1252                           	opt stack 0
  1253  00006C                     ?___lwdiv:
  1254                           	opt stack 0
  1255  00006C                     ?___wmul:
  1256                           	opt stack 0
  1257  00006C                     sysclk_setup_intosc@frequency:
  1258                           	opt stack 0
  1259  00006C                     uart_putc@byte:
  1260                           	opt stack 0
  1261  00006C                     _string_utils_is_upper_case$750:
  1262                           	opt stack 0
  1263  00006C                     _string_utils_is_symbol$756:
  1264                           	opt stack 0
  1265  00006C                     symb_from_hex_to_bin@symb:
  1266                           	opt stack 0
  1267  00006C                     ___lbmod@divisor:
  1268                           	opt stack 0
  1269  00006C                     delay_ms@delay:
  1270                           	opt stack 0
  1271  00006C                     rd_buffer_init@pbuffer:
  1272                           	opt stack 0
  1273  00006C                     rd_buffer_cnt@pbuffer:
  1274                           	opt stack 0
  1275  00006C                     rd_buffer_get@pbuffer:
  1276                           	opt stack 0
  1277  00006C                     rd_buffer_put@pbuffer:
  1278                           	opt stack 0
  1279  00006C                     string_utils_copy@pdst:
  1280                           	opt stack 0
  1281  00006C                     string_utils_split@pbuf:
  1282                           	opt stack 0
  1283  00006C                     cla_add_value@val:
  1284                           	opt stack 0
  1285  00006C                     ___awdiv@dividend:
  1286                           	opt stack 0
  1287  00006C                     ___awmod@dividend:
  1288                           	opt stack 0
  1289  00006C                     ___lwdiv@dividend:
  1290                           	opt stack 0
  1291  00006C                     ___wmul@multiplier:
  1292                           	opt stack 0
  1293  00006C                     string_utils_strchr@pbuf:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0xC
  1297  00006C                     	ds	1
  1298  00006D                     ?_uart_puts:
  1299                           	opt stack 0
  1300  00006D                     string_utils_is_upper_case@symb:
  1301                           	opt stack 0
  1302  00006D                     string_utils_is_symbol@symb:
  1303                           	opt stack 0
  1304  00006D                     ___lbmod@dividend:
  1305                           	opt stack 0
  1306  00006D                     uart_puts@pstr:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0xD
  1310  00006D                     	ds	1
  1311  00006E                     ??_rd_buffer_cnt:
  1312  00006E                     ?_string_utils_strncmp:
  1313                           	opt stack 0
  1314  00006E                     ?_string_utils_strlen:
  1315                           	opt stack 0
  1316  00006E                     ___lbmod@counter:
  1317                           	opt stack 0
  1318  00006E                     rd_buffer_init@size:
  1319                           	opt stack 0
  1320  00006E                     rd_buffer_get@prec:
  1321                           	opt stack 0
  1322  00006E                     rd_buffer_put@prec:
  1323                           	opt stack 0
  1324  00006E                     string_utils_strlen@pstr:
  1325                           	opt stack 0
  1326  00006E                     string_utils_split@pstr:
  1327                           	opt stack 0
  1328  00006E                     string_utils_strncmp@pstr1:
  1329                           	opt stack 0
  1330  00006E                     cla_add_value@zero:
  1331                           	opt stack 0
  1332  00006E                     ___awdiv@divisor:
  1333                           	opt stack 0
  1334  00006E                     ___awmod@divisor:
  1335                           	opt stack 0
  1336  00006E                     ___lwdiv@divisor:
  1337                           	opt stack 0
  1338  00006E                     ___wmul@multiplicand:
  1339                           	opt stack 0
  1340  00006E                     string_utils_copy@psrc:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0xE
  1344  00006E                     	ds	1
  1345  00006F                     string_utils_strchr@delimeter:
  1346                           	opt stack 0
  1347  00006F                     ___lbmod@rem:
  1348                           	opt stack 0
  1349  00006F                     uart_puts@size:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0xF
  1353  00006F                     	ds	1
  1354  000070                     ??_rd_buffer_get:
  1355  000070                     ??_rd_buffer_put:
  1356  000070                     ??_string_utils_strlen:
  1357  000070                     ??_string_utils_strchr:
  1358  000070                     ??_cla_add_value:
  1359  000070                     rd_buffer_init@result:
  1360                           	opt stack 0
  1361  000070                     ___awdiv@counter:
  1362                           	opt stack 0
  1363  000070                     ___awmod@counter:
  1364                           	opt stack 0
  1365  000070                     string_utils_split@len:
  1366                           	opt stack 0
  1367  000070                     string_utils_strncmp@pstr2:
  1368                           	opt stack 0
  1369  000070                     ___lwdiv@quotient:
  1370                           	opt stack 0
  1371  000070                     ___wmul@product:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x10
  1375  000070                     	ds	1
  1376  000071                     ??_serialport_startup:
  1377  000071                     ___awdiv@sign:
  1378                           	opt stack 0
  1379  000071                     ___awmod@sign:
  1380                           	opt stack 0
  1381  000071                     string_utils_copy@maxlen:
  1382                           	opt stack 0
  1383                           
  1384                           ; 2 bytes @ 0x11
  1385  000071                     	ds	1
  1386  000072                     serialport_startup@result:
  1387                           	opt stack 0
  1388  000072                     string_utils_split@delimeter:
  1389                           	opt stack 0
  1390  000072                     ___lwdiv@counter:
  1391                           	opt stack 0
  1392  000072                     rd_buffer_cnt@sz:
  1393                           	opt stack 0
  1394  000072                     rd_buffer_get@last:
  1395                           	opt stack 0
  1396  000072                     string_utils_strlen@i:
  1397                           	opt stack 0
  1398  000072                     string_utils_strncmp@len:
  1399                           	opt stack 0
  1400  000072                     ___awdiv@quotient:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x12
  1404  000072                     	ds	1
  1405  000073                     ?___lwmod:
  1406                           	opt stack 0
  1407  000073                     startup@result:
  1408                           	opt stack 0
  1409  000073                     string_utils_copy@result:
  1410                           	opt stack 0
  1411  000073                     string_utils_split@i:
  1412                           	opt stack 0
  1413  000073                     string_utils_strchr@result:
  1414                           	opt stack 0
  1415  000073                     ___lwmod@dividend:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x13
  1419  000073                     	ds	1
  1420  000074                     ?_pd_add_value:
  1421                           	opt stack 0
  1422  000074                     ?_string_utils_from_hex:
  1423                           	opt stack 0
  1424  000074                     rd_buffer_get@result:
  1425                           	opt stack 0
  1426  000074                     string_utils_strncmp@case_sensitive:
  1427                           	opt stack 0
  1428  000074                     string_utils_from_hex@pdata:
  1429                           	opt stack 0
  1430  000074                     _cla_add_value$966:
  1431                           	opt stack 0
  1432  000074                     pd_add_value@d:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x14
  1436  000074                     	ds	1
  1437  000075                     ??_string_utils_strncmp:
  1438  000075                     rd_buffer_get@first:
  1439                           	opt stack 0
  1440  000075                     string_utils_split@chains:
  1441                           	opt stack 0
  1442  000075                     string_utils_strchr@pos:
  1443                           	opt stack 0
  1444  000075                     ___lwmod@divisor:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x15
  1448  000075                     	ds	1
  1449  000076                     rd_buffer_put@mes_rec:
  1450                           	opt stack 0
  1451  000076                     string_utils_from_hex@phex_str:
  1452                           	opt stack 0
  1453  000076                     _cla_add_value$967:
  1454                           	opt stack 0
  1455  000076                     pd_add_value@val:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x16
  1459  000076                     	ds	1
  1460  000077                     ?_rd_buffer_readline:
  1461                           	opt stack 0
  1462  000077                     ?_rd_buffer_getn:
  1463                           	opt stack 0
  1464  000077                     string_utils_split@prev:
  1465                           	opt stack 0
  1466  000077                     string_utils_strncmp@result:
  1467                           	opt stack 0
  1468  000077                     ___lwmod@counter:
  1469                           	opt stack 0
  1470  000077                     rd_buffer_readline@pbuffer:
  1471                           	opt stack 0
  1472  000077                     rd_buffer_getn@pbuffer:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x17
  1476  000077                     	ds	1
  1477  000078                     ??_string_utils_from_hex:
  1478  000078                     ??_pd_add_value:
  1479  000078                     _rd_buffer_put$482:
  1480                           	opt stack 0
  1481  000078                     string_utils_split@symb:
  1482                           	opt stack 0
  1483  000078                     cla_add_value@d:
  1484                           	opt stack 0
  1485  000078                     string_utils_strncmp@pos:
  1486                           	opt stack 0
  1487                           
  1488                           ; 2 bytes @ 0x18
  1489  000078                     	ds	1
  1490  000079                     rd_buffer_readline@pdata:
  1491                           	opt stack 0
  1492  000079                     rd_buffer_put@sz:
  1493                           	opt stack 0
  1494  000079                     rd_buffer_getn@prec:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x19
  1498  000079                     	ds	1
  1499  00007A                     string_utils_strncmp@symb1:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x1A
  1503  00007A                     	ds	1
  1504  00007B                     rd_buffer_readline@psize:
  1505                           	opt stack 0
  1506  00007B                     string_utils_strncmp@symb2:
  1507                           	opt stack 0
  1508  00007B                     rd_buffer_put@ind:
  1509                           	opt stack 0
  1510  00007B                     rd_buffer_getn@rec_count:
  1511                           	opt stack 0
  1512  00007B                     string_utils_from_hex@len:
  1513                           	opt stack 0
  1514                           
  1515                           ; 2 bytes @ 0x1B
  1516  00007B                     	ds	1
  1517  00007C                     rd_buffer_readline@ch:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x1C
  1521  00007C                     	ds	1
  1522  00007D                     ?_serialport_write:
  1523                           	opt stack 0
  1524  00007D                     putch@byte:
  1525                           	opt stack 0
  1526  00007D                     serialport_write@pstr:
  1527                           	opt stack 0
  1528  00007D                     string_utils_from_hex@j:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x1D
  1532  00007D                     	ds	1
  1533  00007E                     ?_printf:
  1534                           	opt stack 0
  1535  00007E                     rd_buffer_getn@i:
  1536                           	opt stack 0
  1537  00007E                     _pd_add_value$1080:
  1538                           	opt stack 0
  1539  00007E                     printf@f:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x1E
  1543  00007E                     	ds	1
  1544  00007F                     set_parameter@p_id:
  1545                           	opt stack 0
  1546  00007F                     get_parameter@p_id:
  1547                           	opt stack 0
  1548  00007F                     string_utils_from_hex@i:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x1F
  1552  00007F                     	ds	1
  1553  000080                     set_parameter@ok:
  1554                           	opt stack 0
  1555  000080                     _pd_add_value$1081:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x20
  1559  000080                     	ds	1
  1560  000081                     ?_this_variable_load_from_text:
  1561                           	opt stack 0
  1562  000081                     this_variable_load_from_text@pval:
  1563                           	opt stack 0
  1564                           
  1565                           ; 3 bytes @ 0x21
  1566  000081                     	ds	1
  1567  000082                     _pd_add_value$1082:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x22
  1571  000082                     	ds	2
  1572  000084                     this_variable_load_from_text@len:
  1573                           	opt stack 0
  1574  000084                     _pd_add_value$1083:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x24
  1578  000084                     	ds	2
  1579  000086                     ??_printf:
  1580  000086                     ?_this_parse_item:
  1581                           	opt stack 0
  1582  000086                     this_parse_item@pstr:
  1583                           	opt stack 0
  1584  000086                     _pd_add_value$1084:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x26
  1588  000086                     	ds	2
  1589  000088                     this_parse_item@pitem:
  1590                           	opt stack 0
  1591  000088                     printf@ap:
  1592                           	opt stack 0
  1593  000088                     pd_add_value@tmp:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x28
  1597  000088                     	ds	1
  1598  000089                     ??_this_parse_item:
  1599  000089                     printf@flag:
  1600                           	opt stack 0
  1601                           
  1602                           ; 1 bytes @ 0x29
  1603  000089                     	ds	1
  1604  00008A                     pd_add_value@i:
  1605                           	opt stack 0
  1606  00008A                     printf@prec:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x2A
  1610  00008A                     	ds	1
  1611  00008B                     this_parse_item@is_equal:
  1612                           	opt stack 0
  1613  00008B                     detection_task@zero:
  1614                           	opt stack 0
  1615  00008B                     printf@_val:
  1616                           	opt stack 0
  1617                           
  1618                           ; 5 bytes @ 0x2B
  1619  00008B                     	ds	1
  1620  00008C                     this_parse_item@result:
  1621                           	opt stack 0
  1622                           
  1623                           ; 1 bytes @ 0x2C
  1624  00008C                     	ds	1
  1625  00008D                     this_parse_item@pvar:
  1626                           	opt stack 0
  1627                           
  1628                           ; 2 bytes @ 0x2D
  1629  00008D                     	ds	2
  1630  00008F                     this_parse_item@str_len:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x2F
  1634  00008F                     	ds	1
  1635  000090                     printf@c:
  1636                           	opt stack 0
  1637                           
  1638                           ; 1 bytes @ 0x30
  1639  000090                     	ds	1
  1640  000091                     ?_on_parameter_found:
  1641                           	opt stack 0
  1642  000091                     on_parameter_found@cmd_id:
  1643                           	opt stack 0
  1644  000091                     this_parse_item@pval:
  1645                           	opt stack 0
  1646                           
  1647                           ; 3 bytes @ 0x31
  1648  000091                     	ds	1
  1649  000092                     on_parameter_found@p_id:
  1650                           	opt stack 0
  1651                           
  1652                           ; 1 bytes @ 0x32
  1653  000092                     	ds	1
  1654  000093                     
  1655                           ; 3 bytes @ 0x33
  1656  000093                     	ds	1
  1657  000094                     this_parse_item@i:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0x34
  1661  000094                     	ds	1
  1662  000095                     this_parse_item@var_len:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0x35
  1666  000095                     	ds	1
  1667  000096                     
  1668                           ; 1 bytes @ 0x36
  1669  000096                     	ds	1
  1670  000097                     on_parameter_found@operation:
  1671                           	opt stack 0
  1672                           
  1673                           ; 1 bytes @ 0x37
  1674  000097                     	ds	1
  1675  000098                     ?_syntax_string:
  1676                           	opt stack 0
  1677  000098                     syntax_string@pstr:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x38
  1681  000098                     	ds	2
  1682  00009A                     syntax_string@case_sensitive:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x3A
  1686  00009A                     	ds	1
  1687  00009B                     ??_syntax_string:
  1688                           
  1689                           ; 0 bytes @ 0x3B
  1690  00009B                     	ds	1
  1691  00009C                     syntax_string@str_len:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x3C
  1695  00009C                     	ds	2
  1696  00009E                     syntax_string@result:
  1697                           	opt stack 0
  1698                           
  1699                           ; 1 bytes @ 0x3E
  1700  00009E                     	ds	1
  1701  00009F                     syntax_string@pos:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x3F
  1705  00009F                     	ds	1
  1706  0000A0                     syntax_string@pchain:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0x40
  1710  0000A0                     	ds	2
  1711  0000A2                     syntax_string@chains:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x42
  1715  0000A2                     	ds	1
  1716  0000A3                     serialport_task@size:
  1717                           	opt stack 0
  1718                           
  1719                           ; 2 bytes @ 0x43
  1720  0000A3                     	ds	2
  1721  0000A5                     ??_main:
  1722                           
  1723                           ; 0 bytes @ 0x45
  1724  0000A5                     	ds	1
  1725  0000A6                     main@event_old:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x46
  1729  0000A6                     	ds	1
  1730  0000A7                     main@event_priority:
  1731                           	opt stack 0
  1732                           
  1733                           ; 1 bytes @ 0x47
  1734  0000A7                     	ds	1
  1735  0000A8                     main@i:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x48
  1739  0000A8                     	ds	1
  1740                           tosu	equ	0xFFF
  1741                           tosh	equ	0xFFE
  1742                           tosl	equ	0xFFD
  1743                           pclath	equ	0xFFA
  1744                           tblptru	equ	0xFF8
  1745                           tblptrh	equ	0xFF7
  1746                           tblptrl	equ	0xFF6
  1747                           tablat	equ	0xFF5
  1748                           prodh	equ	0xFF4
  1749                           prodl	equ	0xFF3
  1750                           intcon	equ	0xFF2
  1751                           indf0	equ	0xFEF
  1752                           postinc0	equ	0xFEE
  1753                           fsr0h	equ	0xFEA
  1754                           fsr0l	equ	0xFE9
  1755                           wreg	equ	0xFE8
  1756                           indf1	equ	0xFE7
  1757                           postinc1	equ	0xFE6
  1758                           postdec1	equ	0xFE5
  1759                           fsr1h	equ	0xFE2
  1760                           fsr1l	equ	0xFE1
  1761                           indf2	equ	0xFDF
  1762                           postinc2	equ	0xFDE
  1763                           postdec2	equ	0xFDD
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768                           	psect	cstackCOMRAM
  1769  000001                     __pcstackCOMRAM:
  1770                           	opt stack 0
  1771  000001                     ?_syntax_get_text:
  1772                           	opt stack 0
  1773  000001                     
  1774                           ; 2 bytes @ 0x0
  1775  000001                     	ds	17
  1776  000012                     ??_isr_high:
  1777                           
  1778                           ; 0 bytes @ 0x11
  1779  000012                     	ds	8
  1780  00001A                     ?i2_rd_buffer_put:
  1781                           	opt stack 0
  1782  00001A                     ?_adc_read:
  1783                           	opt stack 0
  1784  00001A                     _uart_error$257:
  1785                           	opt stack 0
  1786  00001A                     i2rd_buffer_put@pbuffer:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x19
  1790  00001A                     	ds	1
  1791  00001B                     uart_getc@pbyte:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x1A
  1795  00001B                     	ds	1
  1796  00001C                     ??_adc_read:
  1797  00001C                     uart_getc@result:
  1798                           	opt stack 0
  1799  00001C                     i2rd_buffer_put@prec:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x1B
  1803  00001C                     	ds	1
  1804  00001D                     adc_read@adc_number:
  1805                           	opt stack 0
  1806                           
  1807                           ; 1 bytes @ 0x1C
  1808  00001D                     	ds	1
  1809  00001E                     ??i2_rd_buffer_put:
  1810                           
  1811                           ; 0 bytes @ 0x1D
  1812  00001E                     	ds	6
  1813  000024                     i2rd_buffer_put@mes_rec:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x23
  1817  000024                     	ds	2
  1818  000026                     i2_rd_buffer_put$482:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0x25
  1822  000026                     	ds	1
  1823  000027                     i2rd_buffer_put@sz:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x26
  1827  000027                     	ds	2
  1828  000029                     i2rd_buffer_put@ind:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x28
  1832  000029                     	ds	2
  1833  00002B                     tosu	equ	0xFFF
  1834                           tosh	equ	0xFFE
  1835                           tosl	equ	0xFFD
  1836                           pclath	equ	0xFFA
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           prodh	equ	0xFF4
  1842                           prodl	equ	0xFF3
  1843                           intcon	equ	0xFF2
  1844                           indf0	equ	0xFEF
  1845                           postinc0	equ	0xFEE
  1846                           fsr0h	equ	0xFEA
  1847                           fsr0l	equ	0xFE9
  1848                           wreg	equ	0xFE8
  1849                           indf1	equ	0xFE7
  1850                           postinc1	equ	0xFE6
  1851                           postdec1	equ	0xFE5
  1852                           fsr1h	equ	0xFE2
  1853                           fsr1l	equ	0xFE1
  1854                           indf2	equ	0xFDF
  1855                           postinc2	equ	0xFDE
  1856                           postdec2	equ	0xFDD
  1857                           fsr2h	equ	0xFDA
  1858                           fsr2l	equ	0xFD9
  1859                           status	equ	0xFD8
  1860                           
  1861                           ; 0 bytes @ 0x2A
  1862 ;;
  1863 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1864 ;;
  1865 ;; *************** function _main *****************
  1866 ;; Defined at:
  1867 ;;		line 14 in file "src/main.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  i               1   72[BANK0 ] unsigned char 
  1872 ;;  event_priori    1   71[BANK0 ] char 
  1873 ;;  event_old       1   70[BANK0 ] char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  2  1011[COMRAM] int 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1883 ;;      Params:         0       0       0       0       0       0       0
  1884 ;;      Locals:         0       3       0       0       0       0       0
  1885 ;;      Temps:          0       1       0       0       0       0       0
  1886 ;;      Totals:         0       4       0       0       0       0       0
  1887 ;;Total ram usage:        4 bytes
  1888 ;; Hardware stack levels required when called:   12
  1889 ;; This function calls:
  1890 ;;		_delay_ms
  1891 ;;		_startup
  1892 ;;		_detection_task
  1893 ;;		_serialport_task
  1894 ;; This function is called by:
  1895 ;;		Startup code after reset
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           	psect	text0
  1900  000E54                     __ptext0:
  1901                           	opt stack 0
  1902  000E54                     _main:
  1903                           	opt stack 19
  1904                           
  1905                           ;main.c: 15: while(startup() != RESULT_SUCCESS)
  1906  000E54  D006               	goto	l5650
  1907  000E56                     l5648:
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 16: {
  1911                           ;main.c: 17: delay_ms(1000);
  1912  000E56  0E03               	movlw	3
  1913  000E58  6F6D               	movwf	(?_delay_ms+1)& (0+255),b
  1914  000E5A  0EE8               	movlw	232
  1915  000E5C  6F6C               	movwf	?_delay_ms& (0+255),b
  1916  000E5E  EC0D  F00E         	call	_delay_ms	;wreg free
  1917  000E62                     l5650:
  1918  000E62  EC6F  F00C         	call	_startup	;wreg free
  1919  000E66  6FA5               	movwf	??_main& (0+255),b
  1920  000E68  05A5               	decf	??_main& (0+255),w,b
  1921  000E6A  E1F5               	bnz	l5648
  1922                           
  1923                           ; BSR set to: 0
  1924                           
  1925                           ;main.c: 18: };
  1926                           ;main.c: 19: do{INTCONbits.GIEH=(1); INTCONbits.GIEL=(1);}while(0);;
  1927  000E6C  8EF2               	bsf	intcon,7,c	;volatile
  1928  000E6E  8CF2               	bsf	intcon,6,c	;volatile
  1929  000E70                     l1018:
  1930  000E70  0100               	movlb	0	; () banked
  1931  000E72  69A6               	setf	main@event_old& (0+255),b
  1932  000E74  69A7               	setf	main@event_priority& (0+255),b
  1933  000E76  6BA8               	clrf	main@i& (0+255),b
  1934  000E78                     l5656:
  1935                           
  1936                           ; BSR set to: 0
  1937  000E78  51A8               	movf	main@i& (0+255),w,b
  1938  000E7A  0F33               	addlw	low _pool	;volatile
  1939  000E7C  6ED9               	movwf	fsr2l,c
  1940  000E7E  6ADA               	clrf	fsr2h,c
  1941  000E80  0E01               	movlw	1
  1942  000E82  62DF               	cpfseq	indf2,c
  1943  000E84  D011               	goto	l5668
  1944                           
  1945                           ; BSR set to: 0
  1946  000E86  51A8               	movf	main@i& (0+255),w,b
  1947  000E88  0F2B               	addlw	low _event_miss	;volatile
  1948  000E8A  6ED9               	movwf	fsr2l,c
  1949  000E8C  6ADA               	clrf	fsr2h,c
  1950  000E8E  50DF               	movf	indf2,w,c
  1951  000E90  E103               	bnz	l5662
  1952                           
  1953                           ; BSR set to: 0
  1954  000E92  C0A8  F0A6         	movff	main@i,main@event_old
  1955  000E96  D005               	goto	l5664
  1956  000E98                     l5662:
  1957                           
  1958                           ; BSR set to: 0
  1959  000E98  51A8               	movf	main@i& (0+255),w,b
  1960  000E9A  0F2B               	addlw	low _event_miss	;volatile
  1961  000E9C  6ED9               	movwf	fsr2l,c
  1962  000E9E  6ADA               	clrf	fsr2h,c
  1963  000EA0  06DF               	decf	indf2,f,c
  1964  000EA2                     l5664:
  1965                           
  1966                           ; BSR set to: 0
  1967  000EA2  BFA7               	btfsc	main@event_priority& (0+255),7,b
  1968                           
  1969                           ; BSR set to: 0
  1970  000EA4  C0A8  F0A7         	movff	main@i,main@event_priority
  1971  000EA8                     l5668:
  1972                           
  1973                           ; BSR set to: 0
  1974  000EA8  2BA8               	incf	main@i& (0+255),f,b
  1975                           
  1976                           ; BSR set to: 0
  1977  000EAA  0E07               	movlw	7
  1978  000EAC  65A8               	cpfsgt	main@i& (0+255),b
  1979  000EAE  D7E4               	goto	l5656
  1980                           
  1981                           ; BSR set to: 0
  1982  000EB0  BFA6               	btfsc	main@event_old& (0+255),7,b
  1983  000EB2  D015               	goto	l1025
  1984                           
  1985                           ; BSR set to: 0
  1986  000EB4  51A6               	movf	main@event_old& (0+255),w,b
  1987  000EB6  0D02               	mullw	2
  1988  000EB8  50F3               	movf	prodl,w,c
  1989  000EBA  0FA9               	addlw	low _events	;volatile
  1990  000EBC  6ED9               	movwf	fsr2l,c
  1991  000EBE  6ADA               	clrf	fsr2h,c
  1992  000EC0  D801               	call	u5848
  1993  000EC2  D00A               	goto	u5849
  1994  000EC4                     u5848:
  1995  000EC4  0005               	push	
  1996  000EC6  6EFA               	movwf	pclath,c
  1997  000EC8  50DE               	movf	postinc2,w,c
  1998  000ECA  6EFD               	movwf	tosl,c
  1999  000ECC  50DE               	movf	postinc2,w,c
  2000  000ECE  6EFE               	movwf	tosh,c
  2001  000ED0  50F8               	movf	tblptru,w,c
  2002  000ED2  6EFF               	movwf	tosu,c
  2003  000ED4  50FA               	movf	pclath,w,c
  2004  000ED6  0012               	return		;indir
  2005  000ED8                     u5849:
  2006  000ED8  0100               	movlb	0	; () banked
  2007  000EDA  51A6               	movf	main@event_old& (0+255),w,b
  2008  000EDC  D016               	goto	L1
  2009  000EDE                     l1025:
  2010                           
  2011                           ; BSR set to: 0
  2012  000EDE  BFA7               	btfsc	main@event_priority& (0+255),7,b
  2013  000EE0  D018               	goto	l1028
  2014                           
  2015                           ; BSR set to: 0
  2016  000EE2  51A7               	movf	main@event_priority& (0+255),w,b
  2017  000EE4  0D02               	mullw	2
  2018  000EE6  50F3               	movf	prodl,w,c
  2019  000EE8  0FA9               	addlw	low _events	;volatile
  2020  000EEA  6ED9               	movwf	fsr2l,c
  2021  000EEC  6ADA               	clrf	fsr2h,c
  2022  000EEE  D801               	call	u5868
  2023  000EF0  D00A               	goto	u5869
  2024  000EF2                     u5868:
  2025  000EF2  0005               	push	
  2026  000EF4  6EFA               	movwf	pclath,c
  2027  000EF6  50DE               	movf	postinc2,w,c
  2028  000EF8  6EFD               	movwf	tosl,c
  2029  000EFA  50DE               	movf	postinc2,w,c
  2030  000EFC  6EFE               	movwf	tosh,c
  2031  000EFE  50F8               	movf	tblptru,w,c
  2032  000F00  6EFF               	movwf	tosu,c
  2033  000F02  50FA               	movf	pclath,w,c
  2034  000F04  0012               	return		;indir
  2035  000F06                     u5869:
  2036  000F06  0100               	movlb	0	; () banked
  2037  000F08  51A7               	movf	main@event_priority& (0+255),w,b
  2038  000F0A                     L1:
  2039  000F0A  0F33               	addlw	low _pool	;volatile
  2040  000F0C  6ED9               	movwf	fsr2l,c
  2041  000F0E  6ADA               	clrf	fsr2h,c
  2042  000F10  6ADF               	clrf	indf2,c
  2043  000F12                     l1028:
  2044                           
  2045                           ; BSR set to: 0
  2046  000F12  0004               	clrwdt		;# 
  2047  000F14  D7AD               	goto	l1018
  2048                           tosu	equ	0xFFF
  2049                           tosh	equ	0xFFE
  2050                           tosl	equ	0xFFD
  2051                           pclath	equ	0xFFA
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           indf0	equ	0xFEF
  2060                           postinc0	equ	0xFEE
  2061                           fsr0h	equ	0xFEA
  2062                           fsr0l	equ	0xFE9
  2063                           wreg	equ	0xFE8
  2064                           indf1	equ	0xFE7
  2065                           postinc1	equ	0xFE6
  2066                           postdec1	equ	0xFE5
  2067                           fsr1h	equ	0xFE2
  2068                           fsr1l	equ	0xFE1
  2069                           indf2	equ	0xFDF
  2070                           postinc2	equ	0xFDE
  2071                           postdec2	equ	0xFDD
  2072                           fsr2h	equ	0xFDA
  2073                           fsr2l	equ	0xFD9
  2074                           status	equ	0xFD8
  2075                           
  2076 ;; *************** function _delay_ms *****************
  2077 ;; Defined at:
  2078 ;;		line 28 in file "src/drivers/delay.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;  delay           2   12[BANK0 ] unsigned int 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;		None               void
  2085 ;; Registers used:
  2086 ;;		wreg, status,2, status,0
  2087 ;; Tracked objects:
  2088 ;;		On entry : F/0
  2089 ;;		On exit  : F/0
  2090 ;;		Unchanged: FFFFFFF0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2092 ;;      Params:         0       2       0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0
  2095 ;;      Totals:         0       2       0       0       0       0       0
  2096 ;;Total ram usage:        2 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    5
  2099 ;; This function calls:
  2100 ;;		Nothing
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text1
  2107  001C1A                     __ptext1:
  2108                           	opt stack 0
  2109  001C1A                     __end_of_main:
  2110                           	opt stack 0
  2111  001C1A                     _delay_ms:
  2112                           	opt stack 25
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;delay.c: 29: this_delay_timer_ms = delay;
  2116  001C1A  C06C  F0ED         	movff	delay_ms@delay,_this_delay_timer_ms	;volatile
  2117  001C1E  C06D  F0EE         	movff	delay_ms@delay+1,_this_delay_timer_ms+1	;volatile
  2118  001C22                     l2950:
  2119                           
  2120                           ; BSR set to: 0
  2121  001C22  51EE               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  2122  001C24  11ED               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  2123  001C26  B4D8               	btfsc	status,2,c
  2124  001C28  0012               	return	
  2125  001C2A  D7FB               	goto	l2950
  2126  001C2C                     __end_of_delay_ms:
  2127                           	opt stack 0
  2128                           tosu	equ	0xFFF
  2129                           tosh	equ	0xFFE
  2130                           tosl	equ	0xFFD
  2131                           pclath	equ	0xFFA
  2132                           tblptru	equ	0xFF8
  2133                           tblptrh	equ	0xFF7
  2134                           tblptrl	equ	0xFF6
  2135                           tablat	equ	0xFF5
  2136                           prodh	equ	0xFF4
  2137                           prodl	equ	0xFF3
  2138                           intcon	equ	0xFF2
  2139                           indf0	equ	0xFEF
  2140                           postinc0	equ	0xFEE
  2141                           fsr0h	equ	0xFEA
  2142                           fsr0l	equ	0xFE9
  2143                           wreg	equ	0xFE8
  2144                           indf1	equ	0xFE7
  2145                           postinc1	equ	0xFE6
  2146                           postdec1	equ	0xFE5
  2147                           fsr1h	equ	0xFE2
  2148                           fsr1l	equ	0xFE1
  2149                           indf2	equ	0xFDF
  2150                           postinc2	equ	0xFDE
  2151                           postdec2	equ	0xFDD
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _detection_task *****************
  2157 ;; Defined at:
  2158 ;;		line 81 in file "src/modules/detection.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  zero            3   43[BANK0 ] m
  2163 ;; Return value:  Size  Location     Type
  2164 ;;		None               void
  2165 ;; Registers used:
  2166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : F/0
  2169 ;;		On exit  : F/0
  2170 ;;		Unchanged: FFFFFFF0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2172 ;;      Params:         0       0       0       0       0       0       0
  2173 ;;      Locals:         0       3       0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0
  2175 ;;      Totals:         0       3       0       0       0       0       0
  2176 ;;Total ram usage:        3 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    7
  2179 ;; This function calls:
  2180 ;;		_pd_add_value
  2181 ;;		_cla_add_value
  2182 ;; This function is called by:
  2183 ;;		_startup
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text2
  2189  00152E                     __ptext2:
  2190                           	opt stack 0
  2191  00152E                     _detection_task:
  2192                           	opt stack 23
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;detection.c: 82: static CHAR alarm_cla;
  2196                           ;detection.c: 83: static CHAR alarm_wav;
  2197                           ;detection.c: 84: INT24 zero;
  2198                           ;detection.c: 86: alarm_wav = (CHAR)pd_add_value(&pd_detector, (INT24)g_analog0);
  2199                           
  2200                           ; BSR set to: 0
  2201  00152E  0E01               	movlw	high _pd_detector	;volatile
  2202  001530  0100               	movlb	0	; () banked
  2203  001532  6F75               	movwf	(?_pd_add_value+1)& (0+255),b
  2204  001534  0E6B               	movlw	low _pd_detector	;volatile
  2205  001536  6F74               	movwf	?_pd_add_value& (0+255),b
  2206  001538  C0B9  F076         	movff	_g_analog0,?_pd_add_value+2	;volatile
  2207  00153C  C0BA  F077         	movff	_g_analog0+1,?_pd_add_value+3	;volatile
  2208  001540  EC7A  F000         	call	_pd_add_value	;wreg free
  2209  001544  6FC1               	movwf	detection_task@alarm_wav& (0+255),b
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;detection.c: 87: zero = pd_detector.ref_v;
  2213  001546  C1BF  F08B         	movff	_pd_detector+84,detection_task@zero	;volatile
  2214  00154A  0100               	movlb	0	; () banked
  2215  00154C  C1C0  F08C         	movff	_pd_detector+85,detection_task@zero+1	;volatile
  2216  001550  6B8D               	clrf	(detection_task@zero+2)& (0+255),b
  2217  001552  BF8C               	btfsc	(detection_task@zero+1)& (0+255),7,b
  2218  001554  078D               	decf	(detection_task@zero+2)& (0+255),f,b
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;detection.c: 88: alarm_cla = (CHAR)cla_add_value(&cla_detector, (INT24)g_analog0, zero);
  2222  001556  C0B9  F06C         	movff	_g_analog0,?_cla_add_value	;volatile
  2223  00155A  C0BA  F06D         	movff	_g_analog0+1,?_cla_add_value+1	;volatile
  2224  00155E  C08B  F06E         	movff	detection_task@zero,?_cla_add_value+2
  2225  001562  C08C  F06F         	movff	detection_task@zero+1,?_cla_add_value+3
  2226  001566  0EC2               	movlw	_cla_detector& (0+255)	;volatile
  2227  001568  EC05  F003         	call	_cla_add_value
  2228  00156C  6FC0               	movwf	detection_task@alarm_cla& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;detection.c: 89: this_warning = cla_detector.status.over_trig;
  2232  00156E  0E00               	movlw	0
  2233  001570  B5D0               	btfsc	(_cla_detector+14)& (0+255),2,b	;volatile
  2234  001572  0E01               	movlw	1
  2235  001574  6FBF               	movwf	_this_warning& (0+255),b	;volatile
  2236                           
  2237                           ;detection.c: 91: switch (g_CONFIG.det_mode)
  2238  001576  D008               	goto	l3668
  2239  001578                     l823:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;detection.c: 97: this_alarm = FALSE;
  2243  001578  6BBC               	clrf	_this_alarm& (0+255),b	;volatile
  2244                           
  2245                           ;detection.c: 98: break;
  2246  00157A  D00D               	goto	l3670
  2247  00157C                     l825:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;detection.c: 102: this_alarm = alarm_cla;
  2251  00157C  C0C0  F0BC         	movff	detection_task@alarm_cla,_this_alarm	;volatile
  2252                           
  2253                           ;detection.c: 103: break;
  2254  001580  D00A               	goto	l3670
  2255  001582                     l826:
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;detection.c: 110: this_alarm= alarm_wav;
  2259  001582  C0C1  F0BC         	movff	detection_task@alarm_wav,_this_alarm	;volatile
  2260                           
  2261                           ;detection.c: 111: break;
  2262  001586  D007               	goto	l3670
  2263  001588                     l3668:
  2264                           
  2265                           ; BSR set to: 0
  2266  001588  51DE               	movf	(_g_CONFIG+7)& (0+255),w,b	;volatile
  2267                           
  2268                           ; Switch size 1, requested type "space"
  2269                           ; Number of cases is 3, Range of values is 0 to 2
  2270                           ; switch strategies available:
  2271                           ; Name         Instructions Cycles
  2272                           ; simple_byte           10     6 (average)
  2273                           ;	Chosen strategy is simple_byte
  2274  00158A  E0F6               	bz	l823
  2275  00158C  0A01               	xorlw	1	; case 1
  2276  00158E  E0F6               	bz	l825
  2277  001590  0A03               	xorlw	3	; case 2
  2278  001592  E0F7               	bz	l826
  2279  001594  D7F1               	goto	l823
  2280  001596                     l3670:
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;detection.c: 119: if(this_alarm) STATUS |= (1<<0);
  2284  001596  51BC               	movf	_this_alarm& (0+255),w,b	;volatile
  2285  001598  A4D8               	btfss	status,2,c
  2286                           
  2287                           ; BSR set to: 0
  2288  00159A  80D8               	bsf	status,0,c	;volatile
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;detection.c: 120: if(this_warning) STATUS |= (1<<1);
  2292  00159C  51BF               	movf	_this_warning& (0+255),w,b	;volatile
  2293  00159E  A4D8               	btfss	status,2,c
  2294                           
  2295                           ; BSR set to: 0
  2296  0015A0  82D8               	bsf	status,1,c	;volatile
  2297                           
  2298                           ; BSR set to: 0
  2299  0015A2  0012               	return	
  2300  0015A4                     __end_of_detection_task:
  2301                           	opt stack 0
  2302                           tosu	equ	0xFFF
  2303                           tosh	equ	0xFFE
  2304                           tosl	equ	0xFFD
  2305                           pclath	equ	0xFFA
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           intcon	equ	0xFF2
  2313                           indf0	equ	0xFEF
  2314                           postinc0	equ	0xFEE
  2315                           fsr0h	equ	0xFEA
  2316                           fsr0l	equ	0xFE9
  2317                           wreg	equ	0xFE8
  2318                           indf1	equ	0xFE7
  2319                           postinc1	equ	0xFE6
  2320                           postdec1	equ	0xFE5
  2321                           fsr1h	equ	0xFE2
  2322                           fsr1l	equ	0xFE1
  2323                           indf2	equ	0xFDF
  2324                           postinc2	equ	0xFDE
  2325                           postdec2	equ	0xFDD
  2326                           fsr2h	equ	0xFDA
  2327                           fsr2l	equ	0xFD9
  2328                           status	equ	0xFD8
  2329                           
  2330 ;; *************** function _serialport_task *****************
  2331 ;; Defined at:
  2332 ;;		line 35 in file "src/modules/serialport.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  size            2   67[BANK0 ] int 
  2337 ;; Return value:  Size  Location     Type
  2338 ;;		None               void
  2339 ;; Registers used:
  2340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  2341 ;; Tracked objects:
  2342 ;;		On entry : F/0
  2343 ;;		On exit  : 0/0
  2344 ;;		Unchanged: FFFFFFF0/0
  2345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2346 ;;      Params:         0       0       0       0       0       0       0
  2347 ;;      Locals:         0       2       0       0       0       0       0
  2348 ;;      Temps:          0       0       0       0       0       0       0
  2349 ;;      Totals:         0       2       0       0       0       0       0
  2350 ;;Total ram usage:        2 bytes
  2351 ;; Hardware stack levels used:    1
  2352 ;; Hardware stack levels required when called:   11
  2353 ;; This function calls:
  2354 ;;		_rd_buffer_readline
  2355 ;;		_syntax_string
  2356 ;;		_rd_buffer_cnt
  2357 ;;		_rd_buffer_getn
  2358 ;;		_uart_puts
  2359 ;; This function is called by:
  2360 ;;		_startup
  2361 ;;		_main
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365                           	psect	text3
  2366  0012A0                     __ptext3:
  2367                           	opt stack 0
  2368  0012A0                     _serialport_task:
  2369                           	opt stack 19
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;serialport.c: 36: SIZE size;
  2373                           ;serialport.c: 37: if (rd_buffer_readline(&g_rx_buffer, &serialport_buffer, &size)) {
  2374                           
  2375                           ; BSR set to: 0
  2376  0012A0  0E02               	movlw	high _g_rx_buffer
  2377  0012A2  0100               	movlb	0	; () banked
  2378  0012A4  6F78               	movwf	(?_rd_buffer_readline+1)& (0+255),b
  2379  0012A6  0E7F               	movlw	low _g_rx_buffer
  2380  0012A8  6F77               	movwf	?_rd_buffer_readline& (0+255),b
  2381  0012AA  0E03               	movlw	high _serialport_buffer
  2382  0012AC  6F7A               	movwf	(?_rd_buffer_readline+3)& (0+255),b
  2383  0012AE  0E7F               	movlw	low _serialport_buffer
  2384  0012B0  6F79               	movwf	(?_rd_buffer_readline+2)& (0+255),b
  2385  0012B2  0EA3               	movlw	low serialport_task@size
  2386  0012B4  6F7B               	movwf	(?_rd_buffer_readline+4)& (0+255),b
  2387  0012B6  ECB5  F00C         	call	_rd_buffer_readline	;wreg free
  2388  0012BA  0900               	iorlw	0
  2389  0012BC  E009               	bz	l5420
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;serialport.c: 38: syntax_string(serialport_buffer, FALSE);
  2393  0012BE  0E03               	movlw	high _serialport_buffer
  2394  0012C0  0100               	movlb	0	; () banked
  2395  0012C2  6F99               	movwf	(?_syntax_string+1)& (0+255),b
  2396  0012C4  0E7F               	movlw	low _serialport_buffer
  2397  0012C6  6F98               	movwf	?_syntax_string& (0+255),b
  2398  0012C8  0E00               	movlw	0
  2399  0012CA  6B9A               	clrf	(?_syntax_string+2)& (0+255),b
  2400  0012CC  ECBB  F004         	call	_syntax_string	;wreg free
  2401  0012D0                     l5420:
  2402                           
  2403                           ;serialport.c: 39: }
  2404                           ;serialport.c: 40: size = rd_buffer_cnt(&g_tx_buffer);
  2405  0012D0  0E01               	movlw	high _g_tx_buffer
  2406  0012D2  0100               	movlb	0	; () banked
  2407  0012D4  6F6D               	movwf	(?_rd_buffer_cnt+1)& (0+255),b
  2408  0012D6  0E00               	movlw	low _g_tx_buffer
  2409  0012D8  6F6C               	movwf	?_rd_buffer_cnt& (0+255),b
  2410  0012DA  ECFC  F00B         	call	_rd_buffer_cnt	;wreg free
  2411  0012DE  C06C  F0A3         	movff	?_rd_buffer_cnt,serialport_task@size
  2412  0012E2  C06D  F0A4         	movff	?_rd_buffer_cnt+1,serialport_task@size+1
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;serialport.c: 41: if (size > 0) {
  2416  0012E6  51A4               	movf	(serialport_task@size+1)& (0+255),w,b
  2417  0012E8  0A80               	xorlw	128
  2418  0012EA  0F80               	addlw	-128
  2419  0012EC  0E01               	movlw	1
  2420  0012EE  B4D8               	btfsc	status,2,c
  2421  0012F0  5DA3               	subwf	serialport_task@size& (0+255),w,b
  2422  0012F2  A0D8               	btfss	status,0,c
  2423  0012F4  0012               	return	
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;serialport.c: 42: rd_buffer_getn(&g_tx_buffer, &serialport_buffer, size);
  2427  0012F6  0E01               	movlw	high _g_tx_buffer
  2428  0012F8  0100               	movlb	0	; () banked
  2429  0012FA  6F78               	movwf	(?_rd_buffer_getn+1)& (0+255),b
  2430  0012FC  0E00               	movlw	low _g_tx_buffer
  2431  0012FE  6F77               	movwf	?_rd_buffer_getn& (0+255),b
  2432  001300  0E03               	movlw	high _serialport_buffer
  2433  001302  6F7A               	movwf	(?_rd_buffer_getn+3)& (0+255),b
  2434  001304  0E7F               	movlw	low _serialport_buffer
  2435  001306  6F79               	movwf	(?_rd_buffer_getn+2)& (0+255),b
  2436  001308  C0A3  F07B         	movff	serialport_task@size,?_rd_buffer_getn+4
  2437  00130C  C0A4  F07C         	movff	serialport_task@size+1,?_rd_buffer_getn+5
  2438  001310  EC15  F00D         	call	_rd_buffer_getn	;wreg free
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;serialport.c: 43: uart_puts(serialport_buffer, size);
  2442  001314  0E03               	movlw	high _serialport_buffer
  2443  001316  0100               	movlb	0	; () banked
  2444  001318  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  2445  00131A  0E7F               	movlw	low _serialport_buffer
  2446  00131C  6F6D               	movwf	?_uart_puts& (0+255),b
  2447  00131E  C0A3  F06F         	movff	serialport_task@size,?_uart_puts+2
  2448  001322  C0A4  F070         	movff	serialport_task@size+1,?_uart_puts+3
  2449  001326  EFB2  F00B         	goto	l2980	;wreg free
  2450  00132A                     __end_of_serialport_task:
  2451                           	opt stack 0
  2452                           tosu	equ	0xFFF
  2453                           tosh	equ	0xFFE
  2454                           tosl	equ	0xFFD
  2455                           pclath	equ	0xFFA
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           indf0	equ	0xFEF
  2464                           postinc0	equ	0xFEE
  2465                           fsr0h	equ	0xFEA
  2466                           fsr0l	equ	0xFE9
  2467                           wreg	equ	0xFE8
  2468                           indf1	equ	0xFE7
  2469                           postinc1	equ	0xFE6
  2470                           postdec1	equ	0xFE5
  2471                           fsr1h	equ	0xFE2
  2472                           fsr1l	equ	0xFE1
  2473                           indf2	equ	0xFDF
  2474                           postinc2	equ	0xFDE
  2475                           postdec2	equ	0xFDD
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function _rd_buffer_readline *****************
  2481 ;; Defined at:
  2482 ;;		line 39 in file "src/modules/rd_buffer.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  pbuffer         2   23[BANK0 ] PTR struct .
  2485 ;;		 -> g_rx_buffer(107), 
  2486 ;;  pdata           2   25[BANK0 ] PTR unsigned char 
  2487 ;;		 -> serialport_buffer(100), 
  2488 ;;  psize           1   27[BANK0 ] PTR int 
  2489 ;;		 -> serialport_task@size(2), 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  ch              1   28[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      unsigned char 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : F/0
  2498 ;;		On exit  : F/0
  2499 ;;		Unchanged: FFFFFFF0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2501 ;;      Params:         0       5       0       0       0       0       0
  2502 ;;      Locals:         0       1       0       0       0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0
  2504 ;;      Totals:         0       6       0       0       0       0       0
  2505 ;;Total ram usage:        6 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    6
  2508 ;; This function calls:
  2509 ;;		_rd_buffer_get
  2510 ;; This function is called by:
  2511 ;;		_serialport_task
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           	psect	text4
  2516  00196A                     __ptext4:
  2517                           	opt stack 0
  2518  00196A                     _rd_buffer_readline:
  2519                           	opt stack 23
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;rd_buffer.c: 40: if(this_contains_crlf && pdata && psize)
  2523  00196A  51BE               	movf	_this_contains_crlf& (0+255),w,b
  2524  00196C  E01E               	bz	l3068
  2525                           
  2526                           ; BSR set to: 0
  2527  00196E  517A               	movf	(rd_buffer_readline@pdata+1)& (0+255),w,b
  2528  001970  1179               	iorwf	rd_buffer_readline@pdata& (0+255),w,b
  2529  001972  E01B               	bz	l3068
  2530                           
  2531                           ; BSR set to: 0
  2532  001974  517B               	movf	rd_buffer_readline@psize& (0+255),w,b
  2533  001976  E10B               	bnz	l3062
  2534  001978  0C00               	retlw	0
  2535  00197A                     l3056:
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;rd_buffer.c: 44: {
  2539                           ;rd_buffer.c: 45: *pdata = ch;
  2540  00197A  C079  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2541  00197E  C07A  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2542  001982  C07C  FFDF         	movff	rd_buffer_readline@ch,indf2
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;rd_buffer.c: 46: pdata++;
  2546  001986  4B79               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2547  001988  2B7A               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;rd_buffer.c: 47: *psize++;
  2551  00198A  0E02               	movlw	2
  2552  00198C  277B               	addwf	rd_buffer_readline@psize& (0+255),f,b
  2553  00198E                     l3062:
  2554                           
  2555                           ; BSR set to: 0
  2556  00198E  C077  F06C         	movff	rd_buffer_readline@pbuffer,?_rd_buffer_get
  2557  001992  C078  F06D         	movff	rd_buffer_readline@pbuffer+1,?_rd_buffer_get+1
  2558  001996  0E00               	movlw	high rd_buffer_readline@ch
  2559  001998  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2560  00199A  0E7C               	movlw	low rd_buffer_readline@ch
  2561  00199C  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2562  00199E  EC8B  F007         	call	_rd_buffer_get	;wreg free
  2563  0019A2  0900               	iorlw	0
  2564  0019A4  E1EA               	bnz	l3056
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;rd_buffer.c: 48: }
  2568                           ;rd_buffer.c: 49: this_contains_crlf = FALSE;
  2569  0019A6  6BBE               	clrf	_this_contains_crlf& (0+255),b
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;rd_buffer.c: 50: return TRUE;
  2573  0019A8  0C01               	retlw	1
  2574  0019AA                     l3068:
  2575                           
  2576                           ; BSR set to: 0
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;rd_buffer.c: 51: }
  2580                           ;rd_buffer.c: 52: return FALSE;
  2581  0019AA  0C00               	retlw	0
  2582  0019AC                     __end_of_rd_buffer_readline:
  2583                           	opt stack 0
  2584                           tosu	equ	0xFFF
  2585                           tosh	equ	0xFFE
  2586                           tosl	equ	0xFFD
  2587                           pclath	equ	0xFFA
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           prodh	equ	0xFF4
  2593                           prodl	equ	0xFF3
  2594                           intcon	equ	0xFF2
  2595                           indf0	equ	0xFEF
  2596                           postinc0	equ	0xFEE
  2597                           fsr0h	equ	0xFEA
  2598                           fsr0l	equ	0xFE9
  2599                           wreg	equ	0xFE8
  2600                           indf1	equ	0xFE7
  2601                           postinc1	equ	0xFE6
  2602                           postdec1	equ	0xFE5
  2603                           fsr1h	equ	0xFE2
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           postdec2	equ	0xFDD
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _rd_buffer_cnt *****************
  2613 ;; Defined at:
  2614 ;;		line 63 in file "src/modules/rd_buffer.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2617 ;;		 -> g_tx_buffer(107), 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  sz              2   18[BANK0 ] int 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  2   12[BANK0 ] int 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2624 ;; Tracked objects:
  2625 ;;		On entry : F/0
  2626 ;;		On exit  : F/0
  2627 ;;		Unchanged: FFFFFFF0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2629 ;;      Params:         0       2       0       0       0       0       0
  2630 ;;      Locals:         0       2       0       0       0       0       0
  2631 ;;      Temps:          0       4       0       0       0       0       0
  2632 ;;      Totals:         0       8       0       0       0       0       0
  2633 ;;Total ram usage:        8 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    5
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_serialport_task
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text5
  2644  0017F8                     __ptext5:
  2645                           	opt stack 0
  2646  0017F8                     _rd_buffer_cnt:
  2647                           	opt stack 24
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;rd_buffer.c: 64: SIZE sz;
  2651                           ;rd_buffer.c: 65: sz = pbuffer->head.last - pbuffer->head.first;
  2652                           
  2653                           ; BSR set to: 0
  2654  0017F8  EE20 F002          	lfsr	2,2
  2655  0017FC  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2656  0017FE  26D9               	addwf	fsr2l,f,c
  2657  001800  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2658  001802  22DA               	addwfc	fsr2h,f,c
  2659  001804  CFDE F06E          	movff	postinc2,??_rd_buffer_cnt
  2660  001808  CFDD F06F          	movff	postdec2,??_rd_buffer_cnt+1
  2661  00180C  C06C  FFD9         	movff	rd_buffer_cnt@pbuffer,fsr2l
  2662  001810  C06D  FFDA         	movff	rd_buffer_cnt@pbuffer+1,fsr2h
  2663  001814  CFDE F070          	movff	postinc2,??_rd_buffer_cnt+2
  2664  001818  CFDD F071          	movff	postdec2,??_rd_buffer_cnt+3
  2665  00181C  516E               	movf	??_rd_buffer_cnt& (0+255),w,b
  2666  00181E  5D70               	subwf	(??_rd_buffer_cnt+2)& (0+255),w,b
  2667  001820  6F72               	movwf	rd_buffer_cnt@sz& (0+255),b
  2668  001822  516F               	movf	(??_rd_buffer_cnt+1)& (0+255),w,b
  2669  001824  5971               	subwfb	(??_rd_buffer_cnt+3)& (0+255),w,b
  2670  001826  6F73               	movwf	(rd_buffer_cnt@sz+1)& (0+255),b
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;rd_buffer.c: 66: if(sz < 0) {
  2674  001828  AF73               	btfss	(rd_buffer_cnt@sz+1)& (0+255),7,b
  2675  00182A  D00A               	goto	l3100
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;rd_buffer.c: 67: sz += pbuffer->head.size;
  2679  00182C  EE20 F004          	lfsr	2,4
  2680  001830  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2681  001832  26D9               	addwf	fsr2l,f,c
  2682  001834  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2683  001836  22DA               	addwfc	fsr2h,f,c
  2684  001838  50DE               	movf	postinc2,w,c
  2685  00183A  2772               	addwf	rd_buffer_cnt@sz& (0+255),f,b
  2686  00183C  50DD               	movf	postdec2,w,c
  2687  00183E  2373               	addwfc	(rd_buffer_cnt@sz+1)& (0+255),f,b
  2688  001840                     l3100:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;rd_buffer.c: 68: }
  2692                           ;rd_buffer.c: 69: return sz;
  2693  001840  C072  F06C         	movff	rd_buffer_cnt@sz,?_rd_buffer_cnt
  2694  001844  C073  F06D         	movff	rd_buffer_cnt@sz+1,?_rd_buffer_cnt+1
  2695                           
  2696                           ; BSR set to: 0
  2697  001848  0012               	return	
  2698  00184A                     __end_of_rd_buffer_cnt:
  2699                           	opt stack 0
  2700                           tosu	equ	0xFFF
  2701                           tosh	equ	0xFFE
  2702                           tosl	equ	0xFFD
  2703                           pclath	equ	0xFFA
  2704                           tblptru	equ	0xFF8
  2705                           tblptrh	equ	0xFF7
  2706                           tblptrl	equ	0xFF6
  2707                           tablat	equ	0xFF5
  2708                           prodh	equ	0xFF4
  2709                           prodl	equ	0xFF3
  2710                           intcon	equ	0xFF2
  2711                           indf0	equ	0xFEF
  2712                           postinc0	equ	0xFEE
  2713                           fsr0h	equ	0xFEA
  2714                           fsr0l	equ	0xFE9
  2715                           wreg	equ	0xFE8
  2716                           indf1	equ	0xFE7
  2717                           postinc1	equ	0xFE6
  2718                           postdec1	equ	0xFE5
  2719                           fsr1h	equ	0xFE2
  2720                           fsr1l	equ	0xFE1
  2721                           indf2	equ	0xFDF
  2722                           postinc2	equ	0xFDE
  2723                           postdec2	equ	0xFDD
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _rd_buffer_getn *****************
  2729 ;; Defined at:
  2730 ;;		line 185 in file "src/modules/rd_buffer.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  pbuffer         2   23[BANK0 ] PTR struct .
  2733 ;;		 -> g_tx_buffer(107), 
  2734 ;;  prec            2   25[BANK0 ] PTR unsigned char 
  2735 ;;		 -> serialport_buffer(100), 
  2736 ;;  rec_count       2   27[BANK0 ] int 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  i               2   30[BANK0 ] int 
  2739 ;;  result          1    0        unsigned char 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      unsigned char 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : F/0
  2746 ;;		On exit  : F/0
  2747 ;;		Unchanged: FFFFFFF0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       6       0       0       0       0       0
  2750 ;;      Locals:         0       3       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0
  2752 ;;      Totals:         0       9       0       0       0       0       0
  2753 ;;Total ram usage:        9 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    6
  2756 ;; This function calls:
  2757 ;;		_rd_buffer_get
  2758 ;; This function is called by:
  2759 ;;		_serialport_task
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text6
  2764  001A2A                     __ptext6:
  2765                           	opt stack 0
  2766  001A2A                     _rd_buffer_getn:
  2767                           	opt stack 23
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;rd_buffer.c: 186: SIZE i=0;
  2771                           
  2772                           ; BSR set to: 0
  2773  001A2A  6B7E               	clrf	rd_buffer_getn@i& (0+255),b
  2774  001A2C  6B7F               	clrf	(rd_buffer_getn@i+1)& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;rd_buffer.c: 188: while(rec_count--){
  2778  001A2E  D011               	goto	l3150
  2779  001A30                     l3144:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;rd_buffer.c: 189: if(rd_buffer_get(pbuffer, &prec[i]) == FALSE ) {
  2783  001A30  C077  F06C         	movff	rd_buffer_getn@pbuffer,?_rd_buffer_get
  2784  001A34  C078  F06D         	movff	rd_buffer_getn@pbuffer+1,?_rd_buffer_get+1
  2785  001A38  517E               	movf	rd_buffer_getn@i& (0+255),w,b
  2786  001A3A  2579               	addwf	rd_buffer_getn@prec& (0+255),w,b
  2787  001A3C  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2788  001A3E  517F               	movf	(rd_buffer_getn@i+1)& (0+255),w,b
  2789  001A40  217A               	addwfc	(rd_buffer_getn@prec+1)& (0+255),w,b
  2790  001A42  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2791  001A44  EC8B  F007         	call	_rd_buffer_get	;wreg free
  2792  001A48  0900               	iorlw	0
  2793  001A4A  B4D8               	btfsc	status,2,c
  2794  001A4C  0012               	return	
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;rd_buffer.c: 192: }
  2798                           ;rd_buffer.c: 193: i++;
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;rd_buffer.c: 191: break;
  2802  001A4E  4B7E               	infsnz	rd_buffer_getn@i& (0+255),f,b
  2803  001A50  2B7F               	incf	(rd_buffer_getn@i+1)& (0+255),f,b
  2804  001A52                     l3150:
  2805                           
  2806                           ; BSR set to: 0
  2807  001A52  077B               	decf	rd_buffer_getn@rec_count& (0+255),f,b
  2808  001A54  A0D8               	btfss	status,0,c
  2809  001A56  077C               	decf	(rd_buffer_getn@rec_count+1)& (0+255),f,b
  2810  001A58  0100               	movlb	0	; () banked
  2811  001A5A  297B               	incf	rd_buffer_getn@rec_count& (0+255),w,b
  2812  001A5C  B4D8               	btfsc	status,2,c
  2813  001A5E  297C               	incf	(rd_buffer_getn@rec_count+1)& (0+255),w,b
  2814  001A60  B4D8               	btfsc	status,2,c
  2815                           
  2816                           ; BSR set to: 0
  2817  001A62  0012               	return	
  2818  001A64  D7E5               	goto	l3144
  2819  001A66                     __end_of_rd_buffer_getn:
  2820                           	opt stack 0
  2821                           tosu	equ	0xFFF
  2822                           tosh	equ	0xFFE
  2823                           tosl	equ	0xFFD
  2824                           pclath	equ	0xFFA
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           intcon	equ	0xFF2
  2832                           indf0	equ	0xFEF
  2833                           postinc0	equ	0xFEE
  2834                           fsr0h	equ	0xFEA
  2835                           fsr0l	equ	0xFE9
  2836                           wreg	equ	0xFE8
  2837                           indf1	equ	0xFE7
  2838                           postinc1	equ	0xFE6
  2839                           postdec1	equ	0xFE5
  2840                           fsr1h	equ	0xFE2
  2841                           fsr1l	equ	0xFE1
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _rd_buffer_get *****************
  2850 ;; Defined at:
  2851 ;;		line 122 in file "src/modules/rd_buffer.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2854 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  2855 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  2856 ;;		 -> serialport_buffer(100), rd_buffer_readline@ch(1), 
  2857 ;; Auto vars:     Size  Location     Type
  2858 ;;  first           2   21[BANK0 ] int 
  2859 ;;  last            2   18[BANK0 ] int 
  2860 ;;  result          1   20[BANK0 ] unsigned char 
  2861 ;; Return value:  Size  Location     Type
  2862 ;;                  1    wreg      unsigned char 
  2863 ;; Registers used:
  2864 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2865 ;; Tracked objects:
  2866 ;;		On entry : F/0
  2867 ;;		On exit  : F/0
  2868 ;;		Unchanged: FFFFFFF0/0
  2869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2870 ;;      Params:         0       4       0       0       0       0       0
  2871 ;;      Locals:         0       5       0       0       0       0       0
  2872 ;;      Temps:          0       2       0       0       0       0       0
  2873 ;;      Totals:         0      11       0       0       0       0       0
  2874 ;;Total ram usage:       11 bytes
  2875 ;; Hardware stack levels used:    1
  2876 ;; Hardware stack levels required when called:    5
  2877 ;; This function calls:
  2878 ;;		Nothing
  2879 ;; This function is called by:
  2880 ;;		_rd_buffer_readline
  2881 ;;		_rd_buffer_getn
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text7
  2886  000F16                     __ptext7:
  2887                           	opt stack 0
  2888  000F16                     _rd_buffer_get:
  2889                           	opt stack 23
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;rd_buffer.c: 123: CHAR result = FALSE;
  2893                           
  2894                           ; BSR set to: 0
  2895  000F16  6B74               	clrf	rd_buffer_get@result& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;rd_buffer.c: 124: INT16 first = pbuffer->head.first;
  2899  000F18  EE20 F002          	lfsr	2,2
  2900  000F1C  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2901  000F1E  26D9               	addwf	fsr2l,f,c
  2902  000F20  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2903  000F22  22DA               	addwfc	fsr2h,f,c
  2904  000F24  CFDE F075          	movff	postinc2,rd_buffer_get@first
  2905  000F28  CFDD F076          	movff	postdec2,rd_buffer_get@first+1
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;rd_buffer.c: 125: INT16 last = pbuffer->head.last;
  2909  000F2C  C06C  FFD9         	movff	rd_buffer_get@pbuffer,fsr2l
  2910  000F30  C06D  FFDA         	movff	rd_buffer_get@pbuffer+1,fsr2h
  2911  000F34  CFDE F072          	movff	postinc2,rd_buffer_get@last
  2912  000F38  CFDD F073          	movff	postdec2,rd_buffer_get@last+1
  2913                           
  2914                           ;rd_buffer.c: 126: if(first != last) {
  2915  000F3C  5173               	movf	(rd_buffer_get@last+1)& (0+255),w,b
  2916  000F3E  1976               	xorwf	(rd_buffer_get@first+1)& (0+255),w,b
  2917  000F40  E102               	bnz	u1945
  2918  000F42  5172               	movf	rd_buffer_get@last& (0+255),w,b
  2919  000F44  1975               	xorwf	rd_buffer_get@first& (0+255),w,b
  2920  000F46                     u1945:
  2921  000F46  E039               	bz	l3090
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;rd_buffer.c: 127: (*prec) = pbuffer->list[first ];
  2925  000F48  C06C  F070         	movff	rd_buffer_get@pbuffer,??_rd_buffer_get
  2926  000F4C  C06D  F071         	movff	rd_buffer_get@pbuffer+1,??_rd_buffer_get+1
  2927  000F50  5175               	movf	rd_buffer_get@first& (0+255),w,b
  2928  000F52  2770               	addwf	??_rd_buffer_get& (0+255),f,b
  2929  000F54  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2930  000F56  2371               	addwfc	(??_rd_buffer_get+1)& (0+255),f,b
  2931  000F58  0E06               	movlw	6
  2932  000F5A  2570               	addwf	??_rd_buffer_get& (0+255),w,b
  2933  000F5C  6ED9               	movwf	fsr2l,c
  2934  000F5E  0E00               	movlw	0
  2935  000F60  2171               	addwfc	(??_rd_buffer_get+1)& (0+255),w,b
  2936  000F62  6EDA               	movwf	fsr2h,c
  2937  000F64  C06E  FFE1         	movff	rd_buffer_get@prec,fsr1l
  2938  000F68  C06F  FFE2         	movff	rd_buffer_get@prec+1,fsr1h
  2939  000F6C  CFDF FFE7          	movff	indf2,indf1
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;rd_buffer.c: 128: first ++;
  2943  000F70  4B75               	infsnz	rd_buffer_get@first& (0+255),f,b
  2944  000F72  2B76               	incf	(rd_buffer_get@first+1)& (0+255),f,b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;rd_buffer.c: 129: pbuffer->head.first = first ;
  2948  000F74  EE20 F002          	lfsr	2,2
  2949  000F78  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2950  000F7A  26D9               	addwf	fsr2l,f,c
  2951  000F7C  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2952  000F7E  22DA               	addwfc	fsr2h,f,c
  2953  000F80  C075  FFDE         	movff	rd_buffer_get@first,postinc2
  2954  000F84  C076  FFDD         	movff	rd_buffer_get@first+1,postdec2
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;rd_buffer.c: 130: if(first == pbuffer->head.size){
  2958  000F88  EE20 F004          	lfsr	2,4
  2959  000F8C  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2960  000F8E  26D9               	addwf	fsr2l,f,c
  2961  000F90  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2962  000F92  22DA               	addwfc	fsr2h,f,c
  2963  000F94  52DE               	movf	postinc2,f,c
  2964  000F96  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2965  000F98  18DD               	xorwf	postdec2,w,c
  2966  000F9A  C075  FFE8         	movff	rd_buffer_get@first,wreg
  2967  000F9E  B4D8               	btfsc	status,2,c
  2968  000FA0  18DF               	xorwf	indf2,w,c
  2969  000FA2  E109               	bnz	l3088
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;rd_buffer.c: 131: pbuffer->head.first = 0;
  2973  000FA4  EE20 F002          	lfsr	2,2
  2974  000FA8  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2975  000FAA  26D9               	addwf	fsr2l,f,c
  2976  000FAC  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2977  000FAE  22DA               	addwfc	fsr2h,f,c
  2978  000FB0  0E00               	movlw	0
  2979  000FB2  6EDE               	movwf	postinc2,c
  2980  000FB4  6EDD               	movwf	postdec2,c
  2981  000FB6                     l3088:
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;rd_buffer.c: 132: }
  2985                           ;rd_buffer.c: 133: result = TRUE;
  2986  000FB6  0E01               	movlw	1
  2987  000FB8  6F74               	movwf	rd_buffer_get@result& (0+255),b
  2988  000FBA                     l3090:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;rd_buffer.c: 134: }
  2992                           ;rd_buffer.c: 135: return result;
  2993  000FBA  5174               	movf	rd_buffer_get@result& (0+255),w,b
  2994                           
  2995                           ; BSR set to: 0
  2996  000FBC  0012               	return	
  2997  000FBE                     __end_of_rd_buffer_get:
  2998                           	opt stack 0
  2999                           tosu	equ	0xFFF
  3000                           tosh	equ	0xFFE
  3001                           tosl	equ	0xFFD
  3002                           pclath	equ	0xFFA
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           intcon	equ	0xFF2
  3010                           indf0	equ	0xFEF
  3011                           postinc0	equ	0xFEE
  3012                           fsr0h	equ	0xFEA
  3013                           fsr0l	equ	0xFE9
  3014                           wreg	equ	0xFE8
  3015                           indf1	equ	0xFE7
  3016                           postinc1	equ	0xFE6
  3017                           postdec1	equ	0xFE5
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           indf2	equ	0xFDF
  3021                           postinc2	equ	0xFDE
  3022                           postdec2	equ	0xFDD
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _syntax_string *****************
  3028 ;; Defined at:
  3029 ;;		line 137 in file "src/modules/syntax.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  pstr            2   56[BANK0 ] PTR const unsigned char 
  3032 ;;		 -> serialport_buffer(100), 
  3033 ;;  case_sensiti    1   58[BANK0 ] unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  pchain          2   64[BANK0 ] PTR unsigned char 
  3036 ;;		 -> this_buf(127), 
  3037 ;;  pos             1   63[BANK0 ] char 
  3038 ;;  str_len         2   60[BANK0 ] int 
  3039 ;;  chains          1   66[BANK0 ] char 
  3040 ;;  result          1   62[BANK0 ] char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      char 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : F/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: FFFFFFF0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3050 ;;      Params:         0       3       0       0       0       0       0
  3051 ;;      Locals:         0       7       0       0       0       0       0
  3052 ;;      Temps:          0       1       0       0       0       0       0
  3053 ;;      Totals:         0      11       0       0       0       0       0
  3054 ;;Total ram usage:       11 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:   10
  3057 ;; This function calls:
  3058 ;;		_string_utils_strlen
  3059 ;;		_string_utils_split
  3060 ;;		_this_parse_item
  3061 ;;		_on_parameter_found
  3062 ;;		_string_utils_strchr
  3063 ;; This function is called by:
  3064 ;;		_serialport_task
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text8
  3069  000976                     __ptext8:
  3070                           	opt stack 0
  3071  000976                     _syntax_string:
  3072                           	opt stack 19
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;syntax.c: 138: INT8 chains ;
  3076                           ;syntax.c: 139: INT8 result =0;
  3077                           
  3078                           ; BSR set to: 0
  3079  000976  6B9E               	clrf	syntax_string@result& (0+255),b
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;syntax.c: 140: SIZE str_len = string_utils_strlen(pstr);
  3083  000978  C098  F06E         	movff	syntax_string@pstr,?_string_utils_strlen
  3084  00097C  C099  F06F         	movff	syntax_string@pstr+1,?_string_utils_strlen+1
  3085  000980  ECCF  F00B         	call	_string_utils_strlen	;wreg free
  3086  000984  C06E  F09C         	movff	?_string_utils_strlen,syntax_string@str_len
  3087  000988  C06F  F09D         	movff	?_string_utils_strlen+1,syntax_string@str_len+1
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;syntax.c: 141: this_case_sensitive = case_sensitive;
  3091  00098C  C09A  F0BD         	movff	syntax_string@case_sensitive,_this_case_sensitive
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;syntax.c: 142: chains = string_utils_split(this_buf, pstr, str_len, ('$'));
  3095  000990  0E05               	movlw	high _this_buf
  3096  000992  0100               	movlb	0	; () banked
  3097  000994  6F6D               	movwf	(?_string_utils_split+1)& (0+255),b
  3098  000996  0E00               	movlw	low _this_buf
  3099  000998  6F6C               	movwf	?_string_utils_split& (0+255),b
  3100  00099A  C098  F06E         	movff	syntax_string@pstr,?_string_utils_split+2
  3101  00099E  C099  F06F         	movff	syntax_string@pstr+1,?_string_utils_split+3
  3102  0009A2  C09C  F070         	movff	syntax_string@str_len,?_string_utils_split+4
  3103  0009A6  C09D  F071         	movff	syntax_string@str_len+1,?_string_utils_split+5
  3104  0009AA  0E24               	movlw	36
  3105  0009AC  6F72               	movwf	(?_string_utils_split+6)& (0+255),b
  3106  0009AE  ECD9  F009         	call	_string_utils_split	;wreg free
  3107  0009B2  516C               	movf	?_string_utils_split& (0+255),w,b
  3108  0009B4  6FA2               	movwf	syntax_string@chains& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;syntax.c: 143: command_id = -1;
  3112  0009B6  69EB               	setf	_command_id& (0+255),b
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;syntax.c: 144: parameter_id = -1;
  3116  0009B8  69EC               	setf	_parameter_id& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;syntax.c: 145: parameter_value[0] = '\0';
  3120  0009BA  0102               	movlb	2	; () banked
  3121  0009BC  6B00               	clrf	_parameter_value& (0+255),b
  3122                           
  3123                           ; BSR set to: 2
  3124                           ;syntax.c: 146: parameter_text[0] = '\0';
  3125  0009BE  0103               	movlb	3	; () banked
  3126  0009C0  6B00               	clrf	_parameter_text& (0+255),b
  3127                           
  3128                           ; BSR set to: 3
  3129                           ;syntax.c: 147: if (chains >= 1 ) {
  3130  0009C2  0100               	movlb	0	; () banked
  3131  0009C4  51A2               	movf	syntax_string@chains& (0+255),w,b
  3132  0009C6  0A80               	xorlw	128
  3133  0009C8  0F7F               	addlw	-129
  3134  0009CA  E369               	bnc	l5472
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;syntax.c: 148: INT8 pos = 0;
  3138  0009CC  6B9F               	clrf	syntax_string@pos& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;syntax.c: 149: char *pchain;
  3142                           ;syntax.c: 150: result = chains -1;
  3143  0009CE  05A2               	decf	syntax_string@chains& (0+255),w,b
  3144  0009D0  6F9E               	movwf	syntax_string@result& (0+255),b
  3145                           
  3146                           ;syntax.c: 151: while ( chains-- ) {
  3147  0009D2  D061               	goto	l5470
  3148  0009D4                     l5450:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;syntax.c: 152: pchain = &this_buf[pos];
  3152  0009D4  0E00               	movlw	low _this_buf
  3153  0009D6  0100               	movlb	0	; () banked
  3154  0009D8  259F               	addwf	syntax_string@pos& (0+255),w,b
  3155  0009DA  6FA0               	movwf	syntax_string@pchain& (0+255),b
  3156  0009DC  6BA1               	clrf	(syntax_string@pchain+1)& (0+255),b
  3157  0009DE  0E05               	movlw	high _this_buf
  3158  0009E0  23A1               	addwfc	(syntax_string@pchain+1)& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;syntax.c: 153: if (pos == 0 ) {
  3162  0009E2  679F               	tstfsz	syntax_string@pos& (0+255),b
  3163  0009E4  D011               	goto	l5460
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;syntax.c: 155: if ( !this_parse_item( pchain, &command_id ) ) {result =0;break;}
  3167  0009E6  C0A0  F086         	movff	syntax_string@pchain,?_this_parse_item
  3168  0009EA  C0A1  F087         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3169  0009EE  0EEB               	movlw	low _command_id
  3170  0009F0  6F88               	movwf	(?_this_parse_item+2)& (0+255),b
  3171  0009F2  EC0A  F004         	call	_this_parse_item	;wreg free
  3172  0009F6  0900               	iorlw	0
  3173  0009F8  E102               	bnz	l5458
  3174                           
  3175                           ; BSR set to: 0
  3176  0009FA  6B9E               	clrf	syntax_string@result& (0+255),b
  3177  0009FC  D050               	goto	l5472
  3178  0009FE                     l5458:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;syntax.c: 156: on_parameter_found(PARSER_START, command_id, -1, (void*)(0), PARSER_TYPE
      +                          _NO_TYPE);
  3182  0009FE  D860               	call	PL50	;call to abstracted procedure
  3183  000A00  0E01               	movlw	1
  3184  000A02  EC40  F00B         	call	_on_parameter_found
  3185                           
  3186                           ;syntax.c: 157: }
  3187  000A06  D039               	goto	l5468
  3188  000A08                     l5460:
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;syntax.c: 158: else {
  3192                           ;syntax.c: 160: if (this_parse_item( pchain, &parameter_id ) == TRUE) {
  3193  000A08  C0A0  F086         	movff	syntax_string@pchain,?_this_parse_item
  3194  000A0C  C0A1  F087         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3195  000A10  0EEC               	movlw	low _parameter_id
  3196  000A12  6F88               	movwf	(?_this_parse_item+2)& (0+255),b
  3197  000A14  EC0A  F004         	call	_this_parse_item	;wreg free
  3198  000A18  6F9B               	movwf	??_syntax_string& (0+255),b
  3199  000A1A  059B               	decf	??_syntax_string& (0+255),w,b
  3200  000A1C  E120               	bnz	l5466
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;syntax.c: 161: parameter_type= syx_param_list[parameter_id].type;
  3204  000A1E  51EC               	movf	_parameter_id& (0+255),w,b
  3205  000A20  0D16               	mullw	22
  3206  000A22  0E15               	movlw	21
  3207  000A24  26F3               	addwf	prodl,f,c
  3208  000A26  0E00               	movlw	0
  3209  000A28  22F4               	addwfc	prodh,f,c
  3210  000A2A  0EBC               	movlw	low _syx_param_list
  3211  000A2C  24F3               	addwf	prodl,w,c
  3212  000A2E  6EF6               	movwf	tblptrl,c
  3213  000A30  0E7D               	movlw	high _syx_param_list
  3214  000A32  20F4               	addwfc	prodh,w,c
  3215  000A34  6EF7               	movwf	tblptrh,c
  3216  000A36  0008               	tblrd		*
  3217  000A38  CFF5 F0BB          	movff	tablat,_parameter_type
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;syntax.c: 162: on_parameter_found(PARSER_PARAMETER, command_id, parameter_id, (void*)pa
      +                          rameter_value, parameter_type);
  3221  000A3C  C0EB  F091         	movff	_command_id,?_on_parameter_found
  3222  000A40  C0EC  F092         	movff	_parameter_id,?_on_parameter_found+1
  3223  000A44  0E00               	movlw	low _parameter_value
  3224  000A46  0100               	movlb	0	; () banked
  3225  000A48  6F93               	movwf	(?_on_parameter_found+2)& (0+255),b
  3226  000A4A  0E02               	movlw	high _parameter_value
  3227  000A4C  6F94               	movwf	(?_on_parameter_found+3)& (0+255),b
  3228  000A4E  0E20               	movlw	32
  3229  000A50  6F95               	movwf	(?_on_parameter_found+4)& (0+255),b
  3230  000A52  C0BB  F096         	movff	_parameter_type,?_on_parameter_found+5
  3231  000A56  0E00               	movlw	0
  3232  000A58  EC40  F00B         	call	_on_parameter_found
  3233                           
  3234                           ;syntax.c: 163: }
  3235  000A5C  D00E               	goto	l5468
  3236  000A5E                     l5466:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;syntax.c: 165: else {
  3240                           ;syntax.c: 166: on_parameter_found(PARSER_PARAMETER, command_id, -1 , (void*)parameter_t
      +                          ext, PARSER_TYPE_NO_TYPE);
  3241  000A5E  C0EB  F091         	movff	_command_id,?_on_parameter_found
  3242  000A62  6992               	setf	(?_on_parameter_found+1)& (0+255),b
  3243  000A64  0E00               	movlw	low _parameter_text
  3244  000A66  0100               	movlb	0	; () banked
  3245  000A68  6F93               	movwf	(?_on_parameter_found+2)& (0+255),b
  3246  000A6A  0E03               	movlw	high _parameter_text
  3247  000A6C  6F94               	movwf	(?_on_parameter_found+3)& (0+255),b
  3248  000A6E  0E20               	movlw	32
  3249  000A70  6F95               	movwf	(?_on_parameter_found+4)& (0+255),b
  3250  000A72  0E00               	movlw	0
  3251  000A74  6B96               	clrf	(?_on_parameter_found+5)& (0+255),b
  3252  000A76  EC40  F00B         	call	_on_parameter_found
  3253  000A7A                     l5468:
  3254                           
  3255                           ;syntax.c: 167: }
  3256                           ;syntax.c: 168: }
  3257                           ;syntax.c: 170: pos += string_utils_strchr(pchain, ('$')) + 1;
  3258  000A7A  0100               	movlb	0	; () banked
  3259  000A7C  51A0               	movf	syntax_string@pchain& (0+255),w,b
  3260  000A7E  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  3261  000A80  51A1               	movf	(syntax_string@pchain+1)& (0+255),w,b
  3262  000A82  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  3263  000A84  0E20               	movlw	32
  3264  000A86  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3265  000A88  0E24               	movlw	36
  3266  000A8A  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3267  000A8C  EC2A  F008         	call	_string_utils_strchr	;wreg free
  3268  000A90  0100               	movlb	0	; () banked
  3269  000A92  296C               	incf	?_string_utils_strchr& (0+255),w,b
  3270  000A94  279F               	addwf	syntax_string@pos& (0+255),f,b
  3271  000A96                     l5470:
  3272                           
  3273                           ; BSR set to: 0
  3274  000A96  07A2               	decf	syntax_string@chains& (0+255),f,b
  3275  000A98  0100               	movlb	0	; () banked
  3276  000A9A  29A2               	incf	syntax_string@chains& (0+255),w,b
  3277  000A9C  E19B               	bnz	l5450
  3278  000A9E                     l5472:
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;syntax.c: 171: }
  3282                           ;syntax.c: 172: }
  3283                           ;syntax.c: 173: if (result>0 )
  3284  000A9E  519E               	movf	syntax_string@result& (0+255),w,b
  3285  000AA0  0A80               	xorlw	128
  3286  000AA2  0F7F               	addlw	-129
  3287  000AA4  E304               	bnc	l5476
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;syntax.c: 174: {
  3291                           ;syntax.c: 175: on_parameter_found(PARSER_STOP, command_id, -1, (void*)(0), PARSER_TYPE_
      +                          NO_TYPE);
  3292  000AA6  D80C               	call	PL50	;call to abstracted procedure
  3293  000AA8  0E02               	movlw	2
  3294  000AAA  EF40  F00B         	goto	_on_parameter_found
  3295  000AAE                     l5476:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;syntax.c: 177: else {
  3299                           ;syntax.c: 178: on_parameter_found(PARSER_ERROR,-1, -1, (void*)(0), PARSER_TYPE_NO_TYPE);
  3300  000AAE  6991               	setf	?_on_parameter_found& (0+255),b
  3301  000AB0  6992               	setf	(?_on_parameter_found+1)& (0+255),b
  3302  000AB2  6B93               	clrf	(?_on_parameter_found+2)& (0+255),b
  3303  000AB4  6B94               	clrf	(?_on_parameter_found+3)& (0+255),b
  3304  000AB6  6B95               	clrf	(?_on_parameter_found+4)& (0+255),b
  3305  000AB8  6B96               	clrf	(?_on_parameter_found+5)& (0+255),b
  3306  000ABA  0E03               	movlw	3
  3307  000ABC  EF40  F00B         	goto	_on_parameter_found
  3308  000AC0                     __end_of_syntax_string:
  3309                           	opt stack 0
  3310  000AC0                     PL50:
  3311                           	opt stack 19
  3312  000AC0  C0EB  F091         	movff	_command_id,?_on_parameter_found
  3313  000AC4  6992               	setf	(?_on_parameter_found+1)& (0+255),b
  3314  000AC6  6B93               	clrf	(?_on_parameter_found+2)& (0+255),b
  3315  000AC8  6B94               	clrf	(?_on_parameter_found+3)& (0+255),b
  3316  000ACA  6B95               	clrf	(?_on_parameter_found+4)& (0+255),b
  3317  000ACC  6B96               	clrf	(?_on_parameter_found+5)& (0+255),b
  3318  000ACE  0012               	return	
  3319  000AD0                     __end_ofPL50:
  3320                           	opt stack 0
  3321                           tosu	equ	0xFFF
  3322                           tosh	equ	0xFFE
  3323                           tosl	equ	0xFFD
  3324                           pclath	equ	0xFFA
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           indf0	equ	0xFEF
  3333                           postinc0	equ	0xFEE
  3334                           fsr0h	equ	0xFEA
  3335                           fsr0l	equ	0xFE9
  3336                           wreg	equ	0xFE8
  3337                           indf1	equ	0xFE7
  3338                           postinc1	equ	0xFE6
  3339                           postdec1	equ	0xFE5
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           fsr2h	equ	0xFDA
  3346                           fsr2l	equ	0xFD9
  3347                           status	equ	0xFD8
  3348                           
  3349 ;; *************** function _string_utils_split *****************
  3350 ;; Defined at:
  3351 ;;		line 94 in file "src/modules/string_utils.c"
  3352 ;; Parameters:    Size  Location     Type
  3353 ;;  pbuf            2   12[BANK0 ] PTR unsigned char 
  3354 ;;		 -> this_buf(127), 
  3355 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  3356 ;;		 -> serialport_buffer(100), 
  3357 ;;  len             2   16[BANK0 ] int 
  3358 ;;  delimeter       1   18[BANK0 ] unsigned char 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;  symb            1   24[BANK0 ] unsigned char 
  3361 ;;  chains          2   21[BANK0 ] int 
  3362 ;;  i               2   19[BANK0 ] int 
  3363 ;;  prev            1   23[BANK0 ] unsigned char 
  3364 ;; Return value:  Size  Location     Type
  3365 ;;                  2   12[BANK0 ] int 
  3366 ;; Registers used:
  3367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3368 ;; Tracked objects:
  3369 ;;		On entry : F/0
  3370 ;;		On exit  : F/0
  3371 ;;		Unchanged: FFFFFFF0/0
  3372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3373 ;;      Params:         0       7       0       0       0       0       0
  3374 ;;      Locals:         0       6       0       0       0       0       0
  3375 ;;      Temps:          0       0       0       0       0       0       0
  3376 ;;      Totals:         0      13       0       0       0       0       0
  3377 ;;Total ram usage:       13 bytes
  3378 ;; Hardware stack levels used:    1
  3379 ;; Hardware stack levels required when called:    5
  3380 ;; This function calls:
  3381 ;;		Nothing
  3382 ;; This function is called by:
  3383 ;;		_syntax_string
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           	psect	text9
  3388  0013B2                     __ptext9:
  3389                           	opt stack 0
  3390  0013B2                     _string_utils_split:
  3391                           	opt stack 23
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;string_utils.c: 95: INT16 i = 0;
  3395  0013B2  6B73               	clrf	string_utils_split@i& (0+255),b
  3396  0013B4  6B74               	clrf	(string_utils_split@i+1)& (0+255),b
  3397                           
  3398                           ;string_utils.c: 96: INT16 chains = 0;
  3399  0013B6  6B75               	clrf	string_utils_split@chains& (0+255),b
  3400  0013B8  6B76               	clrf	(string_utils_split@chains+1)& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;string_utils.c: 97: char prev = ' ';
  3404  0013BA  0E20               	movlw	32
  3405  0013BC  6F77               	movwf	string_utils_split@prev& (0+255),b
  3406  0013BE                     l3288:
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;string_utils.c: 99: {
  3410                           ;string_utils.c: 100: char symb = pstr[i];
  3411  0013BE  5173               	movf	string_utils_split@i& (0+255),w,b
  3412  0013C0  256E               	addwf	string_utils_split@pstr& (0+255),w,b
  3413  0013C2  6ED9               	movwf	fsr2l,c
  3414  0013C4  5174               	movf	(string_utils_split@i+1)& (0+255),w,b
  3415  0013C6  216F               	addwfc	(string_utils_split@pstr+1)& (0+255),w,b
  3416  0013C8  6EDA               	movwf	fsr2h,c
  3417  0013CA  50DF               	movf	indf2,w,c
  3418  0013CC  6F78               	movwf	string_utils_split@symb& (0+255),b
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;string_utils.c: 101: if (symb == ' ' || len == 0)
  3422  0013CE  5178               	movf	string_utils_split@symb& (0+255),w,b
  3423  0013D0  0A20               	xorlw	32
  3424  0013D2  E003               	bz	l3294
  3425                           
  3426                           ; BSR set to: 0
  3427  0013D4  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3428  0013D6  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3429  0013D8  E10E               	bnz	l3302
  3430  0013DA                     l3294:
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;string_utils.c: 102: {
  3434                           ;string_utils.c: 103: if (prev != ' ')
  3435  0013DA  5177               	movf	string_utils_split@prev& (0+255),w,b
  3436  0013DC  0A20               	xorlw	32
  3437  0013DE  E013               	bz	l3306
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;string_utils.c: 104: {
  3441                           ;string_utils.c: 105: *pbuf = delimeter;
  3442  0013E0  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3443  0013E4  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3444  0013E8  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;string_utils.c: 106: pbuf++;
  3448  0013EC  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3449  0013EE  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;string_utils.c: 107: chains++;
  3453  0013F0  4B75               	infsnz	string_utils_split@chains& (0+255),f,b
  3454  0013F2  2B76               	incf	(string_utils_split@chains+1)& (0+255),f,b
  3455  0013F4  D008               	goto	l3306
  3456  0013F6                     l3302:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;string_utils.c: 110: else
  3460                           ;string_utils.c: 111: {
  3461                           ;string_utils.c: 112: *pbuf++ = symb;
  3462  0013F6  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3463  0013FA  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3464  0013FE  C078  FFDF         	movff	string_utils_split@symb,indf2
  3465                           
  3466                           ; BSR set to: 0
  3467  001402  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3468  001404  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3469  001406                     l3306:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;string_utils.c: 113: }
  3473                           ;string_utils.c: 114: if (len == 0)
  3474  001406  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3475  001408  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3476  00140A  E008               	bz	l3316
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;string_utils.c: 118: else
  3480                           ;string_utils.c: 119: {
  3481                           ;string_utils.c: 120: len--;
  3482  00140C  0770               	decf	string_utils_split@len& (0+255),f,b
  3483  00140E  A0D8               	btfss	status,0,c
  3484  001410  0771               	decf	(string_utils_split@len+1)& (0+255),f,b
  3485                           
  3486                           ;string_utils.c: 121: i++;
  3487  001412  4B73               	infsnz	string_utils_split@i& (0+255),f,b
  3488  001414  2B74               	incf	(string_utils_split@i+1)& (0+255),f,b
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;string_utils.c: 122: prev = symb;
  3492  001416  C078  F077         	movff	string_utils_split@symb,string_utils_split@prev
  3493  00141A  D7D1               	goto	l3288
  3494  00141C                     l3316:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;string_utils.c: 123: }
  3498                           ;string_utils.c: 124: }
  3499                           ;string_utils.c: 125: *pbuf++ = delimeter;
  3500  00141C  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3501  001420  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3502  001424  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3503                           
  3504                           ; BSR set to: 0
  3505  001428  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3506  00142A  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;string_utils.c: 126: return chains;
  3510  00142C  C075  F06C         	movff	string_utils_split@chains,?_string_utils_split
  3511  001430  C076  F06D         	movff	string_utils_split@chains+1,?_string_utils_split+1
  3512                           
  3513                           ; BSR set to: 0
  3514  001434  0012               	return	
  3515  001436                     __end_of_string_utils_split:
  3516                           	opt stack 0
  3517                           tosu	equ	0xFFF
  3518                           tosh	equ	0xFFE
  3519                           tosl	equ	0xFFD
  3520                           pclath	equ	0xFFA
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           prodh	equ	0xFF4
  3526                           prodl	equ	0xFF3
  3527                           intcon	equ	0xFF2
  3528                           indf0	equ	0xFEF
  3529                           postinc0	equ	0xFEE
  3530                           fsr0h	equ	0xFEA
  3531                           fsr0l	equ	0xFE9
  3532                           wreg	equ	0xFE8
  3533                           indf1	equ	0xFE7
  3534                           postinc1	equ	0xFE6
  3535                           postdec1	equ	0xFE5
  3536                           fsr1h	equ	0xFE2
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _this_parse_item *****************
  3546 ;; Defined at:
  3547 ;;		line 93 in file "src/modules/syntax.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  pstr            2   38[BANK0 ] PTR const unsigned char 
  3550 ;;		 -> this_buf(127), 
  3551 ;;  pitem           1   40[BANK0 ] PTR char 
  3552 ;;		 -> parameter_id(1), command_id(1), 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  is_equal        1   43[BANK0 ] unsigned char 
  3555 ;;  pval            3   49[BANK0 ] PTR const unsigned char 
  3556 ;;		 -> this_buf(127), ROM(32767), 
  3557 ;;  var_len         2   53[BANK0 ] int 
  3558 ;;  str_len         2   47[BANK0 ] int 
  3559 ;;  pvar            2   45[BANK0 ] PTR const unsigned char 
  3560 ;;		 -> this_buf(127), 
  3561 ;;  i               1   52[BANK0 ] char 
  3562 ;;  result          1   44[BANK0 ] unsigned char 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  1    wreg      unsigned char 
  3565 ;; Registers used:
  3566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3567 ;; Tracked objects:
  3568 ;;		On entry : F/0
  3569 ;;		On exit  : F/0
  3570 ;;		Unchanged: FFFFFFF0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         0       3       0       0       0       0       0
  3573 ;;      Locals:         0      12       0       0       0       0       0
  3574 ;;      Temps:          0       2       0       0       0       0       0
  3575 ;;      Totals:         0      17       0       0       0       0       0
  3576 ;;Total ram usage:       17 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; Hardware stack levels required when called:    9
  3579 ;; This function calls:
  3580 ;;		_string_utils_strchr
  3581 ;;		_string_utils_copy
  3582 ;;		_string_utils_strlen
  3583 ;;		_string_utils_strncmp
  3584 ;;		_this_variable_load_from_text
  3585 ;; This function is called by:
  3586 ;;		_syntax_string
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text10
  3591  000814                     __ptext10:
  3592                           	opt stack 0
  3593  000814                     _this_parse_item:
  3594                           	opt stack 19
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;syntax.c: 94: CHAR result = FALSE;
  3598                           
  3599                           ; BSR set to: 0
  3600  000814  6B8C               	clrf	this_parse_item@result& (0+255),b
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;syntax.c: 95: if (pstr != (0)) {
  3604  000816  5187               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3605  000818  1186               	iorwf	this_parse_item@pstr& (0+255),w,b
  3606  00081A  E101 D0A3          	bz	l3472
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;syntax.c: 96: const char *pvar = pstr;
  3610  00081E  C086  F08D         	movff	this_parse_item@pstr,this_parse_item@pvar
  3611  000822  C087  F08E         	movff	this_parse_item@pstr+1,this_parse_item@pvar+1
  3612                           
  3613                           ;syntax.c: 97: const char *pval = (0);
  3614  000826  6B91               	clrf	this_parse_item@pval& (0+255),b
  3615  000828  6B92               	clrf	(this_parse_item@pval+1)& (0+255),b
  3616  00082A  6B93               	clrf	(this_parse_item@pval+2)& (0+255),b
  3617                           
  3618                           ;syntax.c: 98: SIZE var_len;
  3619                           ;syntax.c: 99: INT8 i = 0;
  3620  00082C  6B94               	clrf	this_parse_item@i& (0+255),b
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;syntax.c: 100: SIZE str_len = string_utils_strchr(pstr, ('$'));
  3624  00082E  D89C               	call	PL58	;call to abstracted procedure
  3625  000830  0E24               	movlw	36
  3626  000832  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3627  000834  EC2A  F008         	call	_string_utils_strchr	;wreg free
  3628  000838  0100               	movlb	0	; () banked
  3629  00083A  C06C  F08F         	movff	?_string_utils_strchr,this_parse_item@str_len
  3630  00083E  C06D  F090         	movff	?_string_utils_strchr+1,this_parse_item@str_len+1
  3631                           
  3632                           ;syntax.c: 102: var_len = string_utils_strchr(pstr, '=');
  3633  000842  D892               	call	PL58	;call to abstracted procedure
  3634  000844  0E3D               	movlw	61
  3635  000846  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3636  000848  EC2A  F008         	call	_string_utils_strchr	;wreg free
  3637  00084C  0100               	movlb	0	; () banked
  3638  00084E  C06C  F095         	movff	?_string_utils_strchr,this_parse_item@var_len
  3639  000852  C06D  F096         	movff	?_string_utils_strchr+1,this_parse_item@var_len+1
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;syntax.c: 103: if (var_len >= 0 && var_len < str_len) {
  3643  000856  BF96               	btfsc	(this_parse_item@var_len+1)& (0+255),7,b
  3644  000858  D01B               	goto	l652
  3645                           
  3646                           ; BSR set to: 0
  3647  00085A  5196               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3648  00085C  0A80               	xorlw	128
  3649  00085E  6F89               	movwf	??_this_parse_item& (0+255),b
  3650  000860  518F               	movf	this_parse_item@str_len& (0+255),w,b
  3651  000862  5D95               	subwf	this_parse_item@var_len& (0+255),w,b
  3652  000864  5190               	movf	(this_parse_item@str_len+1)& (0+255),w,b
  3653  000866  0A80               	xorlw	128
  3654  000868  5989               	subwfb	??_this_parse_item& (0+255),w,b
  3655  00086A  E212               	bc	l652
  3656                           
  3657                           ; BSR set to: 0
  3658                           ;syntax.c: 104: pval = &pstr[ var_len + 1 ] ;
  3659  00086C  C086  F089         	movff	this_parse_item@pstr,??_this_parse_item
  3660  000870  C087  F08A         	movff	this_parse_item@pstr+1,??_this_parse_item+1
  3661  000874  5195               	movf	this_parse_item@var_len& (0+255),w,b
  3662  000876  2789               	addwf	??_this_parse_item& (0+255),f,b
  3663  000878  5196               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3664  00087A  238A               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3665  00087C  2B89               	incf	??_this_parse_item& (0+255),f,b
  3666  00087E  0E00               	movlw	0
  3667  000880  238A               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3668  000882  5189               	movf	??_this_parse_item& (0+255),w,b
  3669  000884  6F91               	movwf	this_parse_item@pval& (0+255),b
  3670  000886  518A               	movf	(??_this_parse_item+1)& (0+255),w,b
  3671  000888  6F92               	movwf	(this_parse_item@pval+1)& (0+255),b
  3672  00088A  0E20               	movlw	32
  3673  00088C  6F93               	movwf	(this_parse_item@pval+2)& (0+255),b
  3674                           
  3675                           ;syntax.c: 105: } else {
  3676  00088E  D004               	goto	l3450
  3677  000890                     l652:
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;syntax.c: 107: var_len = str_len;
  3681  000890  C08F  F095         	movff	this_parse_item@str_len,this_parse_item@var_len
  3682  000894  C090  F096         	movff	this_parse_item@str_len+1,this_parse_item@var_len+1
  3683  000898                     l3450:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;syntax.c: 108: }
  3687                           ;syntax.c: 110: string_utils_copy(parameter_text, pvar, var_len);
  3688  000898  0E03               	movlw	high _parameter_text
  3689  00089A  0100               	movlb	0	; () banked
  3690  00089C  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  3691  00089E  0E00               	movlw	low _parameter_text
  3692  0008A0  6F6C               	movwf	?_string_utils_copy& (0+255),b
  3693  0008A2  518D               	movf	this_parse_item@pvar& (0+255),w,b
  3694  0008A4  6F6E               	movwf	(?_string_utils_copy+2)& (0+255),b
  3695  0008A6  518E               	movf	(this_parse_item@pvar+1)& (0+255),w,b
  3696  0008A8  6F6F               	movwf	(?_string_utils_copy+3)& (0+255),b
  3697  0008AA  0E20               	movlw	32
  3698  0008AC  6F70               	movwf	(?_string_utils_copy+4)& (0+255),b
  3699  0008AE  C095  F071         	movff	this_parse_item@var_len,?_string_utils_copy+5
  3700  0008B2  C096  F072         	movff	this_parse_item@var_len+1,?_string_utils_copy+6
  3701  0008B6  EC95  F009         	call	_string_utils_copy	;wreg free
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;syntax.c: 111: parameter_text[var_len] = '\0';
  3705  0008BA  0E00               	movlw	low _parameter_text
  3706  0008BC  0100               	movlb	0	; () banked
  3707  0008BE  2595               	addwf	this_parse_item@var_len& (0+255),w,b
  3708  0008C0  6ED9               	movwf	fsr2l,c
  3709  0008C2  0E03               	movlw	high _parameter_text
  3710  0008C4  2196               	addwfc	(this_parse_item@var_len+1)& (0+255),w,b
  3711  0008C6  6EDA               	movwf	fsr2h,c
  3712  0008C8  6ADF               	clrf	indf2,c
  3713  0008CA                     l3454:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;syntax.c: 113: if (string_utils_strlen( syx_param_list[i].name ) == var_len){
  3717  0008CA  5194               	movf	this_parse_item@i& (0+255),w,b
  3718  0008CC  0D16               	mullw	22
  3719  0008CE  0EBC               	movlw	low _syx_param_list
  3720  0008D0  24F3               	addwf	prodl,w,c
  3721  0008D2  6F6E               	movwf	?_string_utils_strlen& (0+255),b
  3722  0008D4  0E7D               	movlw	high _syx_param_list
  3723  0008D6  20F4               	addwfc	prodh,w,c
  3724  0008D8  6F6F               	movwf	(?_string_utils_strlen+1)& (0+255),b
  3725  0008DA  ECCF  F00B         	call	_string_utils_strlen	;wreg free
  3726  0008DE  5196               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3727  0008E0  196F               	xorwf	(?_string_utils_strlen+1)& (0+255),w,b
  3728  0008E2  E102               	bnz	u2555
  3729  0008E4  5195               	movf	this_parse_item@var_len& (0+255),w,b
  3730  0008E6  196E               	xorwf	?_string_utils_strlen& (0+255),w,b
  3731  0008E8                     u2555:
  3732  0008E8  E13B               	bnz	l3470
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;syntax.c: 114: CHAR is_equal = string_utils_strncmp(syx_param_list[i].name, pvar, var_l
      +                          en, this_case_sensitive);
  3736  0008EA  5194               	movf	this_parse_item@i& (0+255),w,b
  3737  0008EC  0D16               	mullw	22
  3738  0008EE  0EBC               	movlw	low _syx_param_list
  3739  0008F0  24F3               	addwf	prodl,w,c
  3740  0008F2  6F6E               	movwf	?_string_utils_strncmp& (0+255),b
  3741  0008F4  0E7D               	movlw	high _syx_param_list
  3742  0008F6  20F4               	addwfc	prodh,w,c
  3743  0008F8  6F6F               	movwf	(?_string_utils_strncmp+1)& (0+255),b
  3744  0008FA  C08D  F070         	movff	this_parse_item@pvar,?_string_utils_strncmp+2
  3745  0008FE  C08E  F071         	movff	this_parse_item@pvar+1,?_string_utils_strncmp+3
  3746  000902  C095  F072         	movff	this_parse_item@var_len,?_string_utils_strncmp+4
  3747  000906  C096  F073         	movff	this_parse_item@var_len+1,?_string_utils_strncmp+5
  3748  00090A  C0BD  F074         	movff	_this_case_sensitive,?_string_utils_strncmp+6
  3749  00090E  ECDF  F007         	call	_string_utils_strncmp	;wreg free
  3750  000912  6F8B               	movwf	this_parse_item@is_equal& (0+255),b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;syntax.c: 115: if ( is_equal ) {
  3754  000914  518B               	movf	this_parse_item@is_equal& (0+255),w,b
  3755  000916  E024               	bz	l3470
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;syntax.c: 116: if(pitem) *pitem = syx_param_list[i].id;
  3759  000918  5188               	movf	this_parse_item@pitem& (0+255),w,b
  3760  00091A  E012               	bz	l3464
  3761                           
  3762                           ; BSR set to: 0
  3763  00091C  5194               	movf	this_parse_item@i& (0+255),w,b
  3764  00091E  0D16               	mullw	22
  3765  000920  0E14               	movlw	20
  3766  000922  26F3               	addwf	prodl,f,c
  3767  000924  0E00               	movlw	0
  3768  000926  22F4               	addwfc	prodh,f,c
  3769  000928  0EBC               	movlw	low _syx_param_list
  3770  00092A  24F3               	addwf	prodl,w,c
  3771  00092C  6EF6               	movwf	tblptrl,c
  3772  00092E  0E7D               	movlw	high _syx_param_list
  3773  000930  20F4               	addwfc	prodh,w,c
  3774  000932  6EF7               	movwf	tblptrh,c
  3775  000934  5188               	movf	this_parse_item@pitem& (0+255),w,b
  3776  000936  6ED9               	movwf	fsr2l,c
  3777  000938  6ADA               	clrf	fsr2h,c
  3778  00093A  0008               	tblrd		*
  3779  00093C  CFF5 FFDF          	movff	tablat,indf2
  3780  000940                     l3464:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;syntax.c: 117: if (pval) this_variable_load_from_text(pval);
  3784  000940  5191               	movf	this_parse_item@pval& (0+255),w,b
  3785  000942  1192               	iorwf	(this_parse_item@pval+1)& (0+255),w,b
  3786  000944  1193               	iorwf	(this_parse_item@pval+2)& (0+255),w,b
  3787  000946  E008               	bz	l3468
  3788                           
  3789                           ; BSR set to: 0
  3790  000948  C091  F081         	movff	this_parse_item@pval,?_this_variable_load_from_text
  3791  00094C  C092  F082         	movff	this_parse_item@pval+1,?_this_variable_load_from_text+1
  3792  000950  C093  F083         	movff	this_parse_item@pval+2,?_this_variable_load_from_text+2
  3793  000954  ECBE  F008         	call	_this_variable_load_from_text	;wreg free
  3794  000958                     l3468:
  3795                           
  3796                           ;syntax.c: 118: result = TRUE;
  3797  000958  0E01               	movlw	1
  3798  00095A  0100               	movlb	0	; () banked
  3799  00095C  6F8C               	movwf	this_parse_item@result& (0+255),b
  3800                           
  3801                           ;syntax.c: 119: break;
  3802  00095E  D002               	goto	l3472
  3803  000960                     l3470:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;syntax.c: 120: }
  3807                           ;syntax.c: 121: }
  3808                           ;syntax.c: 122: i++;
  3809  000960  2B94               	incf	this_parse_item@i& (0+255),f,b
  3810  000962  D7B3               	goto	l3454
  3811  000964                     l3472:
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;syntax.c: 123: }
  3815                           ;syntax.c: 124: }
  3816                           ;syntax.c: 125: return result;
  3817  000964  518C               	movf	this_parse_item@result& (0+255),w,b
  3818                           
  3819                           ; BSR set to: 0
  3820  000966  0012               	return	
  3821  000968                     __end_of_this_parse_item:
  3822                           	opt stack 0
  3823  000968                     PL58:
  3824                           	opt stack 19
  3825  000968  5186               	movf	this_parse_item@pstr& (0+255),w,b
  3826  00096A  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  3827  00096C  5187               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3828  00096E  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  3829  000970  0E20               	movlw	32
  3830  000972  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3831  000974  0C20               	retlw	32
  3832  000976                     __end_ofPL58:
  3833                           	opt stack 0
  3834                           tosu	equ	0xFFF
  3835                           tosh	equ	0xFFE
  3836                           tosl	equ	0xFFD
  3837                           pclath	equ	0xFFA
  3838                           tblptru	equ	0xFF8
  3839                           tblptrh	equ	0xFF7
  3840                           tblptrl	equ	0xFF6
  3841                           tablat	equ	0xFF5
  3842                           prodh	equ	0xFF4
  3843                           prodl	equ	0xFF3
  3844                           intcon	equ	0xFF2
  3845                           indf0	equ	0xFEF
  3846                           postinc0	equ	0xFEE
  3847                           fsr0h	equ	0xFEA
  3848                           fsr0l	equ	0xFE9
  3849                           wreg	equ	0xFE8
  3850                           indf1	equ	0xFE7
  3851                           postinc1	equ	0xFE6
  3852                           postdec1	equ	0xFE5
  3853                           fsr1h	equ	0xFE2
  3854                           fsr1l	equ	0xFE1
  3855                           indf2	equ	0xFDF
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _string_utils_strncmp *****************
  3863 ;; Defined at:
  3864 ;;		line 292 in file "src/modules/string_utils.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  pstr1           2   14[BANK0 ] PTR const unsigned char 
  3867 ;;		 -> syx_param_list(528), 
  3868 ;;  pstr2           2   16[BANK0 ] PTR const unsigned char 
  3869 ;;		 -> this_buf(127), 
  3870 ;;  len             2   18[BANK0 ] int 
  3871 ;;  case_sensiti    1   20[BANK0 ] unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  symb2           1   27[BANK0 ] unsigned char 
  3874 ;;  symb1           1   26[BANK0 ] unsigned char 
  3875 ;;  pos             2   24[BANK0 ] int 
  3876 ;;  result          1   23[BANK0 ] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  1    wreg      unsigned char 
  3879 ;; Registers used:
  3880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : F/0
  3883 ;;		On exit  : F/0
  3884 ;;		Unchanged: FFFFFFF0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3886 ;;      Params:         0       7       0       0       0       0       0
  3887 ;;      Locals:         0       5       0       0       0       0       0
  3888 ;;      Temps:          0       2       0       0       0       0       0
  3889 ;;      Totals:         0      14       0       0       0       0       0
  3890 ;;Total ram usage:       14 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    6
  3893 ;; This function calls:
  3894 ;;		_string_utils_is_upper_case
  3895 ;; This function is called by:
  3896 ;;		_this_parse_item
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text11
  3901  000FBE                     __ptext11:
  3902                           	opt stack 0
  3903  000FBE                     _string_utils_strncmp:
  3904                           	opt stack 21
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;string_utils.c: 293: CHAR result = FALSE;
  3908                           
  3909                           ; BSR set to: 0
  3910  000FBE  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;string_utils.c: 294: if (pstr1 != (0) && pstr2 != (0) )
  3914  000FC0  516F               	movf	(string_utils_strncmp@pstr1+1)& (0+255),w,b
  3915  000FC2  116E               	iorwf	string_utils_strncmp@pstr1& (0+255),w,b
  3916  000FC4  E045               	bz	l3384
  3917                           
  3918                           ; BSR set to: 0
  3919  000FC6  5171               	movf	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  3920  000FC8  1170               	iorwf	string_utils_strncmp@pstr2& (0+255),w,b
  3921  000FCA  E042               	bz	l3384
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;string_utils.c: 295: {
  3925                           ;string_utils.c: 296: INT16 pos = 0;
  3926  000FCC  6B78               	clrf	string_utils_strncmp@pos& (0+255),b
  3927  000FCE  6B79               	clrf	(string_utils_strncmp@pos+1)& (0+255),b
  3928                           
  3929                           ;string_utils.c: 297: while ( len-- )
  3930  000FD0  D037               	goto	l3382
  3931  000FD2                     l3358:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;string_utils.c: 298: {
  3935                           ;string_utils.c: 299: char symb1 = pstr1[pos];
  3936  000FD2  C06E  F075         	movff	string_utils_strncmp@pstr1,??_string_utils_strncmp
  3937  000FD6  C06F  F076         	movff	string_utils_strncmp@pstr1+1,??_string_utils_strncmp+1
  3938  000FDA  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  3939  000FDC  2775               	addwf	??_string_utils_strncmp& (0+255),f,b
  3940  000FDE  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  3941  000FE0  2376               	addwfc	(??_string_utils_strncmp+1)& (0+255),f,b
  3942  000FE2  C075  FFF6         	movff	??_string_utils_strncmp,tblptrl
  3943  000FE6  C076  FFF7         	movff	??_string_utils_strncmp+1,tblptrh
  3944  000FEA  0008               	tblrd		*
  3945  000FEC  CFF5 F07A          	movff	tablat,string_utils_strncmp@symb1
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;string_utils.c: 300: char symb2 = pstr2[pos];
  3949  000FF0  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  3950  000FF2  2570               	addwf	string_utils_strncmp@pstr2& (0+255),w,b
  3951  000FF4  6ED9               	movwf	fsr2l,c
  3952  000FF6  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  3953  000FF8  2171               	addwfc	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  3954  000FFA  6EDA               	movwf	fsr2h,c
  3955  000FFC  50DF               	movf	indf2,w,c
  3956  000FFE  6F7B               	movwf	string_utils_strncmp@symb2& (0+255),b
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;string_utils.c: 302: if ( !case_sensitive )
  3960  001000  6774               	tstfsz	string_utils_strncmp@case_sensitive& (0+255),b
  3961  001002  D00E               	goto	l3372
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;string_utils.c: 303: {
  3965                           ;string_utils.c: 304: if ( string_utils_is_upper_case(symb1) )
  3966  001004  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  3967  001006  ECE9  F00D         	call	_string_utils_is_upper_case
  3968  00100A  0900               	iorlw	0
  3969  00100C  E002               	bz	l3368
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;string_utils.c: 305: {
  3973                           ;string_utils.c: 306: symb1 = (symb1+('a' - 'A'));
  3974  00100E  0E20               	movlw	32
  3975  001010  277A               	addwf	string_utils_strncmp@symb1& (0+255),f,b
  3976  001012                     l3368:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;string_utils.c: 307: }
  3980                           ;string_utils.c: 308: if ( string_utils_is_upper_case(symb2) )
  3981  001012  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  3982  001014  ECE9  F00D         	call	_string_utils_is_upper_case
  3983  001018  0900               	iorlw	0
  3984  00101A  E002               	bz	l3372
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;string_utils.c: 309: {
  3988                           ;string_utils.c: 310: symb2 = (symb2+('a' - 'A'));
  3989  00101C  0E20               	movlw	32
  3990  00101E  277B               	addwf	string_utils_strncmp@symb2& (0+255),f,b
  3991  001020                     l3372:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;string_utils.c: 311: }
  3995                           ;string_utils.c: 312: }
  3996                           ;string_utils.c: 313: if (symb1 == symb2 || symb1 == '?' || symb2 == '?')
  3997  001020  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  3998  001022  197B               	xorwf	string_utils_strncmp@symb2& (0+255),w,b
  3999  001024  E006               	bz	l3378
  4000                           
  4001                           ; BSR set to: 0
  4002  001026  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4003  001028  0A3F               	xorlw	63
  4004  00102A  E003               	bz	l3378
  4005                           
  4006                           ; BSR set to: 0
  4007  00102C  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4008  00102E  0A3F               	xorlw	63
  4009  001030  E103               	bnz	l540
  4010  001032                     l3378:
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;string_utils.c: 314: {
  4014                           ;string_utils.c: 315: result = TRUE;
  4015  001032  0E01               	movlw	1
  4016  001034  6F77               	movwf	string_utils_strncmp@result& (0+255),b
  4017                           
  4018                           ;string_utils.c: 316: }
  4019  001036  D002               	goto	l3380
  4020  001038                     l540:
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;string_utils.c: 317: else
  4024                           ;string_utils.c: 318: {
  4025                           ;string_utils.c: 319: result = FALSE;
  4026  001038  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  4027                           
  4028                           ;string_utils.c: 320: break;
  4029  00103A  D00A               	goto	l3384
  4030  00103C                     l3380:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;string_utils.c: 321: }
  4034                           ;string_utils.c: 322: pos++;
  4035  00103C  4B78               	infsnz	string_utils_strncmp@pos& (0+255),f,b
  4036  00103E  2B79               	incf	(string_utils_strncmp@pos+1)& (0+255),f,b
  4037  001040                     l3382:
  4038                           
  4039                           ; BSR set to: 0
  4040  001040  0772               	decf	string_utils_strncmp@len& (0+255),f,b
  4041  001042  A0D8               	btfss	status,0,c
  4042  001044  0773               	decf	(string_utils_strncmp@len+1)& (0+255),f,b
  4043  001046  0100               	movlb	0	; () banked
  4044  001048  2972               	incf	string_utils_strncmp@len& (0+255),w,b
  4045  00104A  B4D8               	btfsc	status,2,c
  4046  00104C  2973               	incf	(string_utils_strncmp@len+1)& (0+255),w,b
  4047  00104E  E1C1               	bnz	l3358
  4048  001050                     l3384:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;string_utils.c: 323: }
  4052                           ;string_utils.c: 324: }
  4053                           ;string_utils.c: 325: return result;
  4054  001050  5177               	movf	string_utils_strncmp@result& (0+255),w,b
  4055                           
  4056                           ; BSR set to: 0
  4057  001052  0012               	return	
  4058  001054                     __end_of_string_utils_strncmp:
  4059                           	opt stack 0
  4060                           tosu	equ	0xFFF
  4061                           tosh	equ	0xFFE
  4062                           tosl	equ	0xFFD
  4063                           pclath	equ	0xFFA
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           intcon	equ	0xFF2
  4071                           indf0	equ	0xFEF
  4072                           postinc0	equ	0xFEE
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           indf1	equ	0xFE7
  4077                           postinc1	equ	0xFE6
  4078                           postdec1	equ	0xFE5
  4079                           fsr1h	equ	0xFE2
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           postdec2	equ	0xFDD
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _string_utils_is_upper_case *****************
  4089 ;; Defined at:
  4090 ;;		line 167 in file "src/modules/string_utils.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  symb            1    wreg     unsigned char 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  symb            1   13[BANK0 ] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      unsigned char 
  4097 ;; Registers used:
  4098 ;;		wreg, status,2
  4099 ;; Tracked objects:
  4100 ;;		On entry : F/0
  4101 ;;		On exit  : F/0
  4102 ;;		Unchanged: FFFFFFF0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         0       0       0       0       0       0       0
  4105 ;;      Locals:         0       2       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0
  4107 ;;      Totals:         0       2       0       0       0       0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    5
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_string_utils_strncmp
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text12
  4119  001BD2                     __ptext12:
  4120                           	opt stack 0
  4121  001BD2                     _string_utils_is_upper_case:
  4122                           	opt stack 21
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;string_utils_is_upper_case@symb stored from wreg
  4126  001BD2  CFE8 F06D          	movff	wreg,string_utils_is_upper_case@symb
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;string_utils.c: 168: return (symb >= 'A') && (symb <= 'Z');
  4130  001BD6  6B6C               	clrf	_string_utils_is_upper_case$750& (0+255),b
  4131                           
  4132                           ; BSR set to: 0
  4133  001BD8  0E40               	movlw	64
  4134  001BDA  656D               	cpfsgt	string_utils_is_upper_case@symb& (0+255),b
  4135  001BDC  D005               	goto	l492
  4136                           
  4137                           ; BSR set to: 0
  4138  001BDE  0E5B               	movlw	91
  4139  001BE0  616D               	cpfslt	string_utils_is_upper_case@symb& (0+255),b
  4140  001BE2  D002               	goto	l492
  4141                           
  4142                           ; BSR set to: 0
  4143  001BE4  0E01               	movlw	1
  4144  001BE6  6F6C               	movwf	_string_utils_is_upper_case$750& (0+255),b
  4145  001BE8                     l492:
  4146                           
  4147                           ; BSR set to: 0
  4148  001BE8  516C               	movf	_string_utils_is_upper_case$750& (0+255),w,b
  4149                           
  4150                           ; BSR set to: 0
  4151  001BEA  0012               	return	
  4152  001BEC                     __end_of_string_utils_is_upper_case:
  4153                           	opt stack 0
  4154                           tosu	equ	0xFFF
  4155                           tosh	equ	0xFFE
  4156                           tosl	equ	0xFFD
  4157                           pclath	equ	0xFFA
  4158                           tblptru	equ	0xFF8
  4159                           tblptrh	equ	0xFF7
  4160                           tblptrl	equ	0xFF6
  4161                           tablat	equ	0xFF5
  4162                           prodh	equ	0xFF4
  4163                           prodl	equ	0xFF3
  4164                           intcon	equ	0xFF2
  4165                           indf0	equ	0xFEF
  4166                           postinc0	equ	0xFEE
  4167                           fsr0h	equ	0xFEA
  4168                           fsr0l	equ	0xFE9
  4169                           wreg	equ	0xFE8
  4170                           indf1	equ	0xFE7
  4171                           postinc1	equ	0xFE6
  4172                           postdec1	equ	0xFE5
  4173                           fsr1h	equ	0xFE2
  4174                           fsr1l	equ	0xFE1
  4175                           indf2	equ	0xFDF
  4176                           postinc2	equ	0xFDE
  4177                           postdec2	equ	0xFDD
  4178                           fsr2h	equ	0xFDA
  4179                           fsr2l	equ	0xFD9
  4180                           status	equ	0xFD8
  4181                           
  4182 ;; *************** function _this_variable_load_from_text *****************
  4183 ;; Defined at:
  4184 ;;		line 40 in file "src/modules/syntax.c"
  4185 ;; Parameters:    Size  Location     Type
  4186 ;;  pval            3   33[BANK0 ] PTR const unsigned char 
  4187 ;;		 -> this_buf(127), ROM(32767), 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  len             2   36[BANK0 ] int 
  4190 ;; Return value:  Size  Location     Type
  4191 ;;		None               void
  4192 ;; Registers used:
  4193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4194 ;; Tracked objects:
  4195 ;;		On entry : F/0
  4196 ;;		On exit  : D/0
  4197 ;;		Unchanged: FFFFFFF0/0
  4198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4199 ;;      Params:         0       3       0       0       0       0       0
  4200 ;;      Locals:         0       2       0       0       0       0       0
  4201 ;;      Temps:          0       0       0       0       0       0       0
  4202 ;;      Totals:         0       5       0       0       0       0       0
  4203 ;;Total ram usage:        5 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    8
  4206 ;; This function calls:
  4207 ;;		_string_utils_strchr
  4208 ;;		_string_utils_copy
  4209 ;;		_string_utils_from_hex
  4210 ;; This function is called by:
  4211 ;;		_this_parse_item
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text13
  4216  00117C                     __ptext13:
  4217                           	opt stack 0
  4218  00117C                     _this_variable_load_from_text:
  4219                           	opt stack 19
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;syntax.c: 42: if (pval != (0) ) {
  4223                           
  4224                           ; BSR set to: 0
  4225  00117C  5181               	movf	this_variable_load_from_text@pval& (0+255),w,b
  4226  00117E  1182               	iorwf	(this_variable_load_from_text@pval+1)& (0+255),w,b
  4227  001180  1183               	iorwf	(this_variable_load_from_text@pval+2)& (0+255),w,b
  4228  001182  B4D8               	btfsc	status,2,c
  4229  001184  0012               	return	
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;syntax.c: 43: INT16 len = string_utils_strchr(pval, ('$'));
  4233  001186  C081  F06C         	movff	this_variable_load_from_text@pval,?_string_utils_strchr
  4234  00118A  C082  F06D         	movff	this_variable_load_from_text@pval+1,?_string_utils_strchr+1
  4235  00118E  C083  F06E         	movff	this_variable_load_from_text@pval+2,?_string_utils_strchr+2
  4236  001192  0E24               	movlw	36
  4237  001194  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  4238  001196  EC2A  F008         	call	_string_utils_strchr	;wreg free
  4239  00119A  C06C  F084         	movff	?_string_utils_strchr,this_variable_load_from_text@len
  4240  00119E  C06D  F085         	movff	?_string_utils_strchr+1,this_variable_load_from_text@len+1
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;syntax.c: 44: string_utils_copy(parameter_value , pval, len);
  4244  0011A2  0E02               	movlw	high _parameter_value
  4245  0011A4  0100               	movlb	0	; () banked
  4246  0011A6  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  4247  0011A8  0E00               	movlw	low _parameter_value
  4248  0011AA  6F6C               	movwf	?_string_utils_copy& (0+255),b
  4249  0011AC  C081  F06E         	movff	this_variable_load_from_text@pval,?_string_utils_copy+2
  4250  0011B0  C082  F06F         	movff	this_variable_load_from_text@pval+1,?_string_utils_copy+3
  4251  0011B4  C083  F070         	movff	this_variable_load_from_text@pval+2,?_string_utils_copy+4
  4252  0011B8  C084  F071         	movff	this_variable_load_from_text@len,?_string_utils_copy+5
  4253  0011BC  C085  F072         	movff	this_variable_load_from_text@len+1,?_string_utils_copy+6
  4254  0011C0  EC95  F009         	call	_string_utils_copy	;wreg free
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;syntax.c: 45: parameter_value[len] = '\0';
  4258  0011C4  0E00               	movlw	low _parameter_value
  4259  0011C6  0100               	movlb	0	; () banked
  4260  0011C8  2584               	addwf	this_variable_load_from_text@len& (0+255),w,b
  4261  0011CA  6ED9               	movwf	fsr2l,c
  4262  0011CC  0E02               	movlw	high _parameter_value
  4263  0011CE  2185               	addwfc	(this_variable_load_from_text@len+1)& (0+255),w,b
  4264  0011D0  6EDA               	movwf	fsr2h,c
  4265  0011D2  6ADF               	clrf	indf2,c
  4266                           
  4267                           ;syntax.c: 49: switch (parameter_type) {
  4268  0011D4  D00F               	goto	l3434
  4269  0011D6                     l3430:
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;syntax.c: 72: {
  4273                           ;syntax.c: 73: string_utils_from_hex(parameter_value, parameter_value );
  4274  0011D6  0E02               	movlw	high _parameter_value
  4275  0011D8  0100               	movlb	0	; () banked
  4276  0011DA  6F75               	movwf	(?_string_utils_from_hex+1)& (0+255),b
  4277  0011DC  0E00               	movlw	low _parameter_value
  4278  0011DE  6F74               	movwf	?_string_utils_from_hex& (0+255),b
  4279  0011E0  0E02               	movlw	high _parameter_value
  4280  0011E2  6F77               	movwf	(?_string_utils_from_hex+3)& (0+255),b
  4281  0011E4  0E00               	movlw	low _parameter_value
  4282  0011E6  6F76               	movwf	(?_string_utils_from_hex+2)& (0+255),b
  4283  0011E8  EF74  F008         	goto	_string_utils_from_hex	;wreg free
  4284  0011EC                     l647:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;syntax.c: 78: *((INT16*)parameter_value) = 0u;
  4288  0011EC  0102               	movlb	2	; () banked
  4289  0011EE  6B00               	clrf	_parameter_value& (0+255),b
  4290  0011F0  6B01               	clrf	(_parameter_value+1)& (0+255),b
  4291                           
  4292                           ;syntax.c: 79: break;
  4293  0011F2  0012               	return	
  4294  0011F4                     l3434:
  4295                           
  4296                           ; BSR set to: 0
  4297  0011F4  51BB               	movf	_parameter_type& (0+255),w,b
  4298                           
  4299                           ; Switch size 1, requested type "space"
  4300                           ; Number of cases is 4, Range of values is 1 to 5
  4301                           ; switch strategies available:
  4302                           ; Name         Instructions Cycles
  4303                           ; simple_byte           13     7 (average)
  4304                           ;	Chosen strategy is simple_byte
  4305  0011F6  0A01               	xorlw	1	; case 1
  4306  0011F8  B4D8               	btfsc	status,2,c
  4307  0011FA  0012               	return	
  4308  0011FC  0A03               	xorlw	3	; case 2
  4309  0011FE  E0EB               	bz	l3430
  4310  001200  0A01               	xorlw	1	; case 3
  4311  001202  B4D8               	btfsc	status,2,c
  4312  001204  0012               	return	
  4313  001206  0A06               	xorlw	6	; case 5
  4314  001208  B4D8               	btfsc	status,2,c
  4315                           
  4316                           ; BSR set to: 0
  4317  00120A  0012               	return	
  4318  00120C  D7EF               	goto	l647
  4319  00120E                     __end_of_this_variable_load_from_text:
  4320                           	opt stack 0
  4321                           tosu	equ	0xFFF
  4322                           tosh	equ	0xFFE
  4323                           tosl	equ	0xFFD
  4324                           pclath	equ	0xFFA
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           indf0	equ	0xFEF
  4333                           postinc0	equ	0xFEE
  4334                           fsr0h	equ	0xFEA
  4335                           fsr0l	equ	0xFE9
  4336                           wreg	equ	0xFE8
  4337                           indf1	equ	0xFE7
  4338                           postinc1	equ	0xFE6
  4339                           postdec1	equ	0xFE5
  4340                           fsr1h	equ	0xFE2
  4341                           fsr1l	equ	0xFE1
  4342                           indf2	equ	0xFDF
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _string_utils_copy *****************
  4350 ;; Defined at:
  4351 ;;		line 67 in file "src/modules/string_utils.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  pdst            2   12[BANK0 ] PTR unsigned char 
  4354 ;;		 -> parameter_text(127), parameter_value(127), 
  4355 ;;  psrc            3   14[BANK0 ] PTR const unsigned char 
  4356 ;;		 -> this_buf(127), ROM(32767), 
  4357 ;;  maxlen          2   17[BANK0 ] int 
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;  result          2   19[BANK0 ] int 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  2   12[BANK0 ] int 
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4364 ;; Tracked objects:
  4365 ;;		On entry : F/0
  4366 ;;		On exit  : F/0
  4367 ;;		Unchanged: FFFFFFF0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4369 ;;      Params:         0       7       0       0       0       0       0
  4370 ;;      Locals:         0       2       0       0       0       0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0
  4372 ;;      Totals:         0       9       0       0       0       0       0
  4373 ;;Total ram usage:        9 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    5
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_this_variable_load_from_text
  4380 ;;		_this_parse_item
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text14
  4385  00132A                     __ptext14:
  4386                           	opt stack 0
  4387  00132A                     _string_utils_copy:
  4388                           	opt stack 21
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;string_utils.c: 68: INT16 result = -1;
  4392  00132A  6973               	setf	string_utils_copy@result& (0+255),b
  4393  00132C  6974               	setf	(string_utils_copy@result+1)& (0+255),b
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;string_utils.c: 69: if (psrc != (0))
  4397  00132E  516E               	movf	string_utils_copy@psrc& (0+255),w,b
  4398  001330  116F               	iorwf	(string_utils_copy@psrc+1)& (0+255),w,b
  4399  001332  1170               	iorwf	(string_utils_copy@psrc+2)& (0+255),w,b
  4400  001334  B4D8               	btfsc	status,2,c
  4401  001336  0012               	return	
  4402  001338  D01E               	goto	l3276
  4403  00133A                     l3268:
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;string_utils.c: 72: {
  4407                           ;string_utils.c: 73: result++;
  4408  00133A  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4409  00133C  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;string_utils.c: 74: *pdst++ = *psrc++;
  4413  00133E  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4414  001342  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4415  001346  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4416  00134A  BAF8               	btfsc	tblptru,5,c
  4417  00134C  D003               	bra	u2257
  4418  00134E  0008               	tblrd		*
  4419  001350  50F5               	movf	tablat,w,c
  4420  001352  D005               	bra	u2250
  4421  001354                     u2257:
  4422  001354  CFF6 FFE9          	movff	tblptrl,fsr0l
  4423  001358  CFF7 FFEA          	movff	tblptrh,fsr0h
  4424  00135C  50EF               	movf	indf0,w,c
  4425  00135E                     u2250:
  4426  00135E  C06C  FFD9         	movff	string_utils_copy@pdst,fsr2l
  4427  001362  C06D  FFDA         	movff	string_utils_copy@pdst+1,fsr2h
  4428  001366  6EDF               	movwf	indf2,c
  4429  001368  0100               	movlb	0	; () banked
  4430  00136A  2B6E               	incf	string_utils_copy@psrc& (0+255),f,b
  4431  00136C  0E00               	movlw	0
  4432  00136E  236F               	addwfc	(string_utils_copy@psrc+1)& (0+255),f,b
  4433  001370  2370               	addwfc	(string_utils_copy@psrc+2)& (0+255),f,b
  4434                           
  4435                           ; BSR set to: 0
  4436  001372  4B6C               	infsnz	string_utils_copy@pdst& (0+255),f,b
  4437  001374  2B6D               	incf	(string_utils_copy@pdst+1)& (0+255),f,b
  4438  001376                     l3276:
  4439                           
  4440                           ; BSR set to: 0
  4441  001376  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4442  00137A  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4443  00137E  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4444  001382  BAF8               	btfsc	tblptru,5,c
  4445  001384  D003               	bra	u2267
  4446  001386  0008               	tblrd		*
  4447  001388  50F5               	movf	tablat,w,c
  4448  00138A  D005               	bra	u2260
  4449  00138C                     u2267:
  4450  00138C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4451  001390  CFF7 FFEA          	movff	tblptrh,fsr0h
  4452  001394  50EF               	movf	indf0,w,c
  4453  001396                     u2260:
  4454  001396  0900               	iorlw	0
  4455  001398  E008               	bz	l3280
  4456  00139A  0100               	movlb	0	; () banked
  4457  00139C  0771               	decf	string_utils_copy@maxlen& (0+255),f,b
  4458  00139E  A0D8               	btfss	status,0,c
  4459  0013A0  0772               	decf	(string_utils_copy@maxlen+1)& (0+255),f,b
  4460  0013A2  2971               	incf	string_utils_copy@maxlen& (0+255),w,b
  4461  0013A4  B4D8               	btfsc	status,2,c
  4462  0013A6  2972               	incf	(string_utils_copy@maxlen+1)& (0+255),w,b
  4463  0013A8  E1C8               	bnz	l3268
  4464  0013AA                     l3280:
  4465                           
  4466                           ;string_utils.c: 75: }
  4467                           ;string_utils.c: 76: result++;
  4468  0013AA  0100               	movlb	0	; () banked
  4469  0013AC  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4470  0013AE  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4471                           
  4472                           ; BSR set to: 0
  4473  0013B0  0012               	return	
  4474  0013B2                     __end_of_string_utils_copy:
  4475                           	opt stack 0
  4476                           tosu	equ	0xFFF
  4477                           tosh	equ	0xFFE
  4478                           tosl	equ	0xFFD
  4479                           pclath	equ	0xFFA
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           intcon	equ	0xFF2
  4487                           indf0	equ	0xFEF
  4488                           postinc0	equ	0xFEE
  4489                           fsr0h	equ	0xFEA
  4490                           fsr0l	equ	0xFE9
  4491                           wreg	equ	0xFE8
  4492                           indf1	equ	0xFE7
  4493                           postinc1	equ	0xFE6
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           indf2	equ	0xFDF
  4498                           postinc2	equ	0xFDE
  4499                           postdec2	equ	0xFDD
  4500                           fsr2h	equ	0xFDA
  4501                           fsr2l	equ	0xFD9
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function _string_utils_strchr *****************
  4505 ;; Defined at:
  4506 ;;		line 140 in file "src/modules/string_utils.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  pbuf            3   12[BANK0 ] PTR const unsigned char 
  4509 ;;		 -> this_buf(127), ROM(32767), 
  4510 ;;  delimeter       1   15[BANK0 ] unsigned char 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  pos             2   21[BANK0 ] int 
  4513 ;;  result          2   19[BANK0 ] int 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  2   12[BANK0 ] int 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  4518 ;; Tracked objects:
  4519 ;;		On entry : F/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: FFFFFFF0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4523 ;;      Params:         0       4       0       0       0       0       0
  4524 ;;      Locals:         0       4       0       0       0       0       0
  4525 ;;      Temps:          0       3       0       0       0       0       0
  4526 ;;      Totals:         0      11       0       0       0       0       0
  4527 ;;Total ram usage:       11 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    5
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_this_variable_load_from_text
  4534 ;;		_this_parse_item
  4535 ;;		_syntax_string
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text15
  4540  001054                     __ptext15:
  4541                           	opt stack 0
  4542  001054                     _string_utils_strchr:
  4543                           	opt stack 23
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;string_utils.c: 141: INT16 result = -1;
  4547                           
  4548                           ; BSR set to: 0
  4549  001054  6973               	setf	string_utils_strchr@result& (0+255),b
  4550  001056  6974               	setf	(string_utils_strchr@result+1)& (0+255),b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;string_utils.c: 142: if (pbuf != (0))
  4554  001058  516C               	movf	string_utils_strchr@pbuf& (0+255),w,b
  4555  00105A  116D               	iorwf	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4556  00105C  116E               	iorwf	(string_utils_strchr@pbuf+2)& (0+255),w,b
  4557  00105E  E02D               	bz	l481
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;string_utils.c: 143: {
  4561                           ;string_utils.c: 144: INT16 pos;
  4562                           ;string_utils.c: 145: for (pos = 0; (pos < (1000)) && pbuf[pos]; pos++)
  4563  001060  6B75               	clrf	string_utils_strchr@pos& (0+255),b
  4564  001062  6B76               	clrf	(string_utils_strchr@pos+1)& (0+255),b
  4565  001064  D016               	goto	l3336
  4566  001066                     l3330:
  4567                           
  4568                           ;string_utils.c: 146: {
  4569                           ;string_utils.c: 147: if (pbuf[pos] == delimeter)
  4570  001066  0100               	movlb	0	; () banked
  4571  001068  D82D               	call	PL16	;call to abstracted procedure
  4572  00106A  BAF8               	btfsc	tblptru,5,c
  4573  00106C  D003               	bra	u2347
  4574  00106E  0008               	tblrd		*
  4575  001070  50F5               	movf	tablat,w,c
  4576  001072  D005               	bra	u2340
  4577  001074                     u2347:
  4578  001074  CFF6 FFE9          	movff	tblptrl,fsr0l
  4579  001078  CFF7 FFEA          	movff	tblptrh,fsr0h
  4580  00107C  50EF               	movf	indf0,w,c
  4581  00107E                     u2340:
  4582  00107E  0100               	movlb	0	; () banked
  4583  001080  196F               	xorwf	string_utils_strchr@delimeter& (0+255),w,b
  4584  001082  E105               	bnz	l3334
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;string_utils.c: 148: {
  4588                           ;string_utils.c: 149: result = pos;
  4589  001084  C075  F073         	movff	string_utils_strchr@pos,string_utils_strchr@result
  4590  001088  C076  F074         	movff	string_utils_strchr@pos+1,string_utils_strchr@result+1
  4591                           
  4592                           ;string_utils.c: 150: break;
  4593  00108C  D016               	goto	l481
  4594  00108E                     l3334:
  4595                           
  4596                           ; BSR set to: 0
  4597  00108E  4B75               	infsnz	string_utils_strchr@pos& (0+255),f,b
  4598  001090  2B76               	incf	(string_utils_strchr@pos+1)& (0+255),f,b
  4599  001092                     l3336:
  4600                           
  4601                           ; BSR set to: 0
  4602  001092  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4603  001094  0A80               	xorlw	128
  4604  001096  0F7D               	addlw	-131
  4605  001098  0EE8               	movlw	232
  4606  00109A  B4D8               	btfsc	status,2,c
  4607  00109C  5D75               	subwf	string_utils_strchr@pos& (0+255),w,b
  4608  00109E  E20D               	bc	l481
  4609                           
  4610                           ; BSR set to: 0
  4611  0010A0  D811               	call	PL16	;call to abstracted procedure
  4612  0010A2  BAF8               	btfsc	tblptru,5,c
  4613  0010A4  D003               	bra	u2377
  4614  0010A6  0008               	tblrd		*
  4615  0010A8  50F5               	movf	tablat,w,c
  4616  0010AA  D005               	bra	u2370
  4617  0010AC                     u2377:
  4618  0010AC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4619  0010B0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4620  0010B4  50EF               	movf	indf0,w,c
  4621  0010B6                     u2370:
  4622  0010B6  0900               	iorlw	0
  4623  0010B8  E1D6               	bnz	l3330
  4624  0010BA                     l481:
  4625                           
  4626                           ;string_utils.c: 151: }
  4627                           ;string_utils.c: 152: }
  4628                           ;string_utils.c: 153: }
  4629                           ;string_utils.c: 154: return result;
  4630  0010BA  C073  F06C         	movff	string_utils_strchr@result,?_string_utils_strchr
  4631  0010BE  C074  F06D         	movff	string_utils_strchr@result+1,?_string_utils_strchr+1
  4632  0010C2  0012               	return	
  4633  0010C4                     __end_of_string_utils_strchr:
  4634                           	opt stack 0
  4635  0010C4                     PL16:
  4636                           	opt stack 23
  4637  0010C4  5175               	movf	string_utils_strchr@pos& (0+255),w,b
  4638  0010C6  256C               	addwf	string_utils_strchr@pbuf& (0+255),w,b
  4639  0010C8  6F70               	movwf	??_string_utils_strchr& (0+255),b
  4640  0010CA  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4641  0010CC  216D               	addwfc	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4642  0010CE  6F71               	movwf	(??_string_utils_strchr+1)& (0+255),b
  4643  0010D0  0E00               	movlw	0
  4644  0010D2  BF76               	btfsc	(string_utils_strchr@pos+1)& (0+255),7,b
  4645  0010D4  0EFF               	movlw	255
  4646  0010D6  216E               	addwfc	(string_utils_strchr@pbuf+2)& (0+255),w,b
  4647  0010D8  6F72               	movwf	(??_string_utils_strchr+2)& (0+255),b
  4648  0010DA  C070  FFF6         	movff	??_string_utils_strchr,tblptrl
  4649  0010DE  C071  FFF7         	movff	??_string_utils_strchr+1,tblptrh
  4650  0010E2  C072  FFF8         	movff	??_string_utils_strchr+2,tblptru
  4651  0010E6  0012               	return	
  4652  0010E8                     __end_ofPL16:
  4653                           	opt stack 0
  4654                           tosu	equ	0xFFF
  4655                           tosh	equ	0xFFE
  4656                           tosl	equ	0xFFD
  4657                           pclath	equ	0xFFA
  4658                           tblptru	equ	0xFF8
  4659                           tblptrh	equ	0xFF7
  4660                           tblptrl	equ	0xFF6
  4661                           tablat	equ	0xFF5
  4662                           prodh	equ	0xFF4
  4663                           prodl	equ	0xFF3
  4664                           intcon	equ	0xFF2
  4665                           indf0	equ	0xFEF
  4666                           postinc0	equ	0xFEE
  4667                           fsr0h	equ	0xFEA
  4668                           fsr0l	equ	0xFE9
  4669                           wreg	equ	0xFE8
  4670                           indf1	equ	0xFE7
  4671                           postinc1	equ	0xFE6
  4672                           postdec1	equ	0xFE5
  4673                           fsr1h	equ	0xFE2
  4674                           fsr1l	equ	0xFE1
  4675                           indf2	equ	0xFDF
  4676                           postinc2	equ	0xFDE
  4677                           postdec2	equ	0xFDD
  4678                           fsr2h	equ	0xFDA
  4679                           fsr2l	equ	0xFD9
  4680                           status	equ	0xFD8
  4681                           
  4682 ;; *************** function _string_utils_from_hex *****************
  4683 ;; Defined at:
  4684 ;;		line 400 in file "src/modules/string_utils.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  pdata           2   20[BANK0 ] PTR unsigned char 
  4687 ;;		 -> parameter_value(127), 
  4688 ;;  phex_str        2   22[BANK0 ] PTR const unsigned char 
  4689 ;;		 -> parameter_value(127), 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  i               2   31[BANK0 ] int 
  4692 ;;  j               2   29[BANK0 ] int 
  4693 ;;  len             2   27[BANK0 ] int 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  2   20[BANK0 ] int 
  4696 ;; Registers used:
  4697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : F/0
  4700 ;;		On exit  : F/0
  4701 ;;		Unchanged: FFFFFFF0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4703 ;;      Params:         0       4       0       0       0       0       0
  4704 ;;      Locals:         0       6       0       0       0       0       0
  4705 ;;      Temps:          0       3       0       0       0       0       0
  4706 ;;      Totals:         0      13       0       0       0       0       0
  4707 ;;Total ram usage:       13 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    7
  4710 ;; This function calls:
  4711 ;;		_string_utils_strlen
  4712 ;;		_symb_from_hex_to_bin
  4713 ;; This function is called by:
  4714 ;;		_this_variable_load_from_text
  4715 ;; This function uses a non-reentrant model
  4716 ;;
  4717                           
  4718                           	psect	text16
  4719  0010E8                     __ptext16:
  4720                           	opt stack 0
  4721  0010E8                     _string_utils_from_hex:
  4722                           	opt stack 19
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;string_utils.c: 401: INT16 i = 0;
  4726  0010E8  6B7F               	clrf	string_utils_from_hex@i& (0+255),b
  4727  0010EA  6B80               	clrf	(string_utils_from_hex@i+1)& (0+255),b
  4728                           
  4729                           ;string_utils.c: 402: INT16 j = 0;
  4730  0010EC  6B7D               	clrf	string_utils_from_hex@j& (0+255),b
  4731  0010EE  6B7E               	clrf	(string_utils_from_hex@j+1)& (0+255),b
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;string_utils.c: 403: INT16 len = string_utils_strlen(phex_str);
  4735  0010F0  C076  F06E         	movff	string_utils_from_hex@phex_str,?_string_utils_strlen
  4736  0010F4  C077  F06F         	movff	string_utils_from_hex@phex_str+1,?_string_utils_strlen+1
  4737  0010F8  ECCF  F00B         	call	_string_utils_strlen	;wreg free
  4738  0010FC  C06E  F07B         	movff	?_string_utils_strlen,string_utils_from_hex@len
  4739  001100  C06F  F07C         	movff	?_string_utils_strlen+1,string_utils_from_hex@len+1
  4740                           
  4741                           ;string_utils.c: 404: while (i < (len - 1))
  4742  001104  D02A               	goto	l3420
  4743  001106                     l3414:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;string_utils.c: 405: {
  4747                           ;string_utils.c: 406: pdata[j] = symb_from_hex_to_bin(phex_str[i]) * 16
  4748                           ;string_utils.c: 407: + symb_from_hex_to_bin(phex_str[i + 1]);
  4749  001106  517D               	movf	string_utils_from_hex@j& (0+255),w,b
  4750  001108  2574               	addwf	string_utils_from_hex@pdata& (0+255),w,b
  4751  00110A  6ED9               	movwf	fsr2l,c
  4752  00110C  517E               	movf	(string_utils_from_hex@j+1)& (0+255),w,b
  4753  00110E  2175               	addwfc	(string_utils_from_hex@pdata+1)& (0+255),w,b
  4754  001110  6EDA               	movwf	fsr2h,c
  4755  001112  C076  F078         	movff	string_utils_from_hex@phex_str,??_string_utils_from_hex
  4756  001116  C077  F079         	movff	string_utils_from_hex@phex_str+1,??_string_utils_from_hex+1
  4757  00111A  517F               	movf	string_utils_from_hex@i& (0+255),w,b
  4758  00111C  2778               	addwf	??_string_utils_from_hex& (0+255),f,b
  4759  00111E  5180               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4760  001120  2379               	addwfc	(??_string_utils_from_hex+1)& (0+255),f,b
  4761  001122  2978               	incf	??_string_utils_from_hex& (0+255),w,b
  4762  001124  6EE1               	movwf	fsr1l,c
  4763  001126  0E00               	movlw	0
  4764  001128  2179               	addwfc	(??_string_utils_from_hex+1)& (0+255),w,b
  4765  00112A  6EE2               	movwf	fsr1h,c
  4766  00112C  50E7               	movf	indf1,w,c
  4767  00112E  ECD2  F00A         	call	_symb_from_hex_to_bin
  4768  001132  6F7A               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4769  001134  517F               	movf	string_utils_from_hex@i& (0+255),w,b
  4770  001136  2576               	addwf	string_utils_from_hex@phex_str& (0+255),w,b
  4771  001138  6EE1               	movwf	fsr1l,c
  4772  00113A  5180               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4773  00113C  2177               	addwfc	(string_utils_from_hex@phex_str+1)& (0+255),w,b
  4774  00113E  6EE2               	movwf	fsr1h,c
  4775  001140  50E7               	movf	indf1,w,c
  4776  001142  ECD2  F00A         	call	_symb_from_hex_to_bin
  4777  001146  0D10               	mullw	16
  4778  001148  50F3               	movf	prodl,w,c
  4779  00114A  257A               	addwf	(??_string_utils_from_hex+2)& (0+255),w,b
  4780  00114C  6EDF               	movwf	indf2,c
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;string_utils.c: 408: i += 2; j++;
  4784  00114E  0E02               	movlw	2
  4785  001150  277F               	addwf	string_utils_from_hex@i& (0+255),f,b
  4786  001152  0E00               	movlw	0
  4787  001154  2380               	addwfc	(string_utils_from_hex@i+1)& (0+255),f,b
  4788                           
  4789                           ; BSR set to: 0
  4790  001156  4B7D               	infsnz	string_utils_from_hex@j& (0+255),f,b
  4791  001158  2B7E               	incf	(string_utils_from_hex@j+1)& (0+255),f,b
  4792  00115A                     l3420:
  4793                           
  4794                           ; BSR set to: 0
  4795  00115A  0EFF               	movlw	255
  4796  00115C  257B               	addwf	string_utils_from_hex@len& (0+255),w,b
  4797  00115E  6F78               	movwf	??_string_utils_from_hex& (0+255),b
  4798  001160  0EFF               	movlw	255
  4799  001162  217C               	addwfc	(string_utils_from_hex@len+1)& (0+255),w,b
  4800  001164  6F79               	movwf	(??_string_utils_from_hex+1)& (0+255),b
  4801  001166  5180               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4802  001168  0A80               	xorlw	128
  4803  00116A  6F7A               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4804  00116C  5178               	movf	??_string_utils_from_hex& (0+255),w,b
  4805  00116E  5D7F               	subwf	string_utils_from_hex@i& (0+255),w,b
  4806  001170  5179               	movf	(??_string_utils_from_hex+1)& (0+255),w,b
  4807  001172  0A80               	xorlw	128
  4808  001174  597A               	subwfb	(??_string_utils_from_hex+2)& (0+255),w,b
  4809  001176  B0D8               	btfsc	status,0,c
  4810  001178  0012               	return	
  4811  00117A  D7C5               	goto	l3414
  4812  00117C                     __end_of_string_utils_from_hex:
  4813                           	opt stack 0
  4814                           tosu	equ	0xFFF
  4815                           tosh	equ	0xFFE
  4816                           tosl	equ	0xFFD
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           indf0	equ	0xFEF
  4826                           postinc0	equ	0xFEE
  4827                           fsr0h	equ	0xFEA
  4828                           fsr0l	equ	0xFE9
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           postinc1	equ	0xFE6
  4832                           postdec1	equ	0xFE5
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _string_utils_strlen *****************
  4843 ;; Defined at:
  4844 ;;		line 12 in file "src/modules/string_utils.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  4847 ;;		 -> parameter_value(127), syx_param_list(528), serialport_buffer(100), 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  i               2   18[BANK0 ] int 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  2   14[BANK0 ] int 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : F/0
  4856 ;;		On exit  : F/0
  4857 ;;		Unchanged: FFFFFFF0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4859 ;;      Params:         0       2       0       0       0       0       0
  4860 ;;      Locals:         0       2       0       0       0       0       0
  4861 ;;      Temps:          0       2       0       0       0       0       0
  4862 ;;      Totals:         0       6       0       0       0       0       0
  4863 ;;Total ram usage:        6 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    6
  4866 ;; This function calls:
  4867 ;;		_string_utils_is_symbol
  4868 ;; This function is called by:
  4869 ;;		_string_utils_from_hex
  4870 ;;		_this_parse_item
  4871 ;;		_syntax_string
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text17
  4876  00179E                     __ptext17:
  4877                           	opt stack 0
  4878  00179E                     _string_utils_strlen:
  4879                           	opt stack 19
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;string_utils.c: 13: INT16 i = 0;
  4883                           
  4884                           ; BSR set to: 0
  4885  00179E  6B72               	clrf	string_utils_strlen@i& (0+255),b
  4886  0017A0  6B73               	clrf	(string_utils_strlen@i+1)& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;string_utils.c: 14: if (pstr)
  4890  0017A2  516F               	movf	(string_utils_strlen@pstr+1)& (0+255),w,b
  4891  0017A4  116E               	iorwf	string_utils_strlen@pstr& (0+255),w,b
  4892  0017A6  E023               	bz	l444
  4893  0017A8                     l3244:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;string_utils.c: 17: {
  4897                           ;string_utils.c: 18: if (! string_utils_is_symbol(pstr[i]))
  4898  0017A8  C06E  F070         	movff	string_utils_strlen@pstr,??_string_utils_strlen
  4899  0017AC  C06F  F071         	movff	string_utils_strlen@pstr+1,??_string_utils_strlen+1
  4900  0017B0  5172               	movf	string_utils_strlen@i& (0+255),w,b
  4901  0017B2  2770               	addwf	??_string_utils_strlen& (0+255),f,b
  4902  0017B4  5173               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4903  0017B6  2371               	addwfc	(??_string_utils_strlen+1)& (0+255),f,b
  4904  0017B8  5170               	movf	??_string_utils_strlen& (0+255),w,b
  4905  0017BA  6EF6               	movwf	tblptrl,c
  4906  0017BC  6EE9               	movwf	fsr0l,c
  4907  0017BE  0E05               	movlw	(high __ramtop+-1)
  4908  0017C0  6EEA               	movwf	fsr0h,c
  4909  0017C2  5171               	movf	(??_string_utils_strlen+1)& (0+255),w,b
  4910  0017C4  64EA               	cpfsgt	fsr0h,c
  4911  0017C6  D003               	bra	u2197
  4912  0017C8  6EEA               	movwf	fsr0h,c
  4913  0017CA  50EF               	movf	indf0,w,c
  4914  0017CC  D003               	bra	u2190
  4915  0017CE                     u2197:
  4916  0017CE  6EF7               	movwf	tblptrh,c
  4917  0017D0  0008               	tblrd		*
  4918  0017D2  50F5               	movf	tablat,w,c
  4919  0017D4                     u2190:
  4920  0017D4  ECDB  F00D         	call	_string_utils_is_symbol
  4921  0017D8  0900               	iorlw	0
  4922  0017DA  E009               	bz	l444
  4923                           
  4924                           ; BSR set to: 0
  4925  0017DC  4B72               	infsnz	string_utils_strlen@i& (0+255),f,b
  4926  0017DE  2B73               	incf	(string_utils_strlen@i+1)& (0+255),f,b
  4927                           
  4928                           ; BSR set to: 0
  4929  0017E0  5173               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4930  0017E2  0A80               	xorlw	128
  4931  0017E4  0F7D               	addlw	-131
  4932  0017E6  0EE8               	movlw	232
  4933  0017E8  B4D8               	btfsc	status,2,c
  4934  0017EA  5D72               	subwf	string_utils_strlen@i& (0+255),w,b
  4935  0017EC  E3DD               	bnc	l3244
  4936  0017EE                     l444:
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;string_utils.c: 21: }
  4940                           ;string_utils.c: 22: }
  4941                           ;string_utils.c: 23: }
  4942                           ;string_utils.c: 24: return i;
  4943  0017EE  C072  F06E         	movff	string_utils_strlen@i,?_string_utils_strlen
  4944  0017F2  C073  F06F         	movff	string_utils_strlen@i+1,?_string_utils_strlen+1
  4945                           
  4946                           ; BSR set to: 0
  4947  0017F6  0012               	return	
  4948  0017F8                     __end_of_string_utils_strlen:
  4949                           	opt stack 0
  4950                           tosu	equ	0xFFF
  4951                           tosh	equ	0xFFE
  4952                           tosl	equ	0xFFD
  4953                           pclath	equ	0xFFA
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           indf0	equ	0xFEF
  4962                           postinc0	equ	0xFEE
  4963                           fsr0h	equ	0xFEA
  4964                           fsr0l	equ	0xFE9
  4965                           wreg	equ	0xFE8
  4966                           indf1	equ	0xFE7
  4967                           postinc1	equ	0xFE6
  4968                           postdec1	equ	0xFE5
  4969                           fsr1h	equ	0xFE2
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _string_utils_is_symbol *****************
  4979 ;; Defined at:
  4980 ;;		line 194 in file "src/modules/string_utils.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  symb            1    wreg     unsigned char 
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  symb            1   13[BANK0 ] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      unsigned char 
  4987 ;; Registers used:
  4988 ;;		wreg, status,2
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : F/0
  4992 ;;		Unchanged: FFFFFFF0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4994 ;;      Params:         0       0       0       0       0       0       0
  4995 ;;      Locals:         0       2       0       0       0       0       0
  4996 ;;      Temps:          0       0       0       0       0       0       0
  4997 ;;      Totals:         0       2       0       0       0       0       0
  4998 ;;Total ram usage:        2 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    5
  5001 ;; This function calls:
  5002 ;;		Nothing
  5003 ;; This function is called by:
  5004 ;;		_string_utils_strlen
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text18
  5009  001BB6                     __ptext18:
  5010                           	opt stack 0
  5011  001BB6                     _string_utils_is_symbol:
  5012                           	opt stack 19
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;string_utils_is_symbol@symb stored from wreg
  5016  001BB6  CFE8 F06D          	movff	wreg,string_utils_is_symbol@symb
  5017                           
  5018                           ;string_utils.c: 195: return (symb >= ' ') && (symb <= '~');
  5019  001BBA  0100               	movlb	0	; () banked
  5020  001BBC  6B6C               	clrf	_string_utils_is_symbol$756& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023  001BBE  0E1F               	movlw	31
  5024  001BC0  656D               	cpfsgt	string_utils_is_symbol@symb& (0+255),b
  5025  001BC2  D005               	goto	l502
  5026                           
  5027                           ; BSR set to: 0
  5028  001BC4  0E7F               	movlw	127
  5029  001BC6  616D               	cpfslt	string_utils_is_symbol@symb& (0+255),b
  5030  001BC8  D002               	goto	l502
  5031                           
  5032                           ; BSR set to: 0
  5033  001BCA  0E01               	movlw	1
  5034  001BCC  6F6C               	movwf	_string_utils_is_symbol$756& (0+255),b
  5035  001BCE                     l502:
  5036                           
  5037                           ; BSR set to: 0
  5038  001BCE  516C               	movf	_string_utils_is_symbol$756& (0+255),w,b
  5039                           
  5040                           ; BSR set to: 0
  5041  001BD0  0012               	return	
  5042  001BD2                     __end_of_string_utils_is_symbol:
  5043                           	opt stack 0
  5044                           tosu	equ	0xFFF
  5045                           tosh	equ	0xFFE
  5046                           tosl	equ	0xFFD
  5047                           pclath	equ	0xFFA
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           indf0	equ	0xFEF
  5056                           postinc0	equ	0xFEE
  5057                           fsr0h	equ	0xFEA
  5058                           fsr0l	equ	0xFE9
  5059                           wreg	equ	0xFE8
  5060                           indf1	equ	0xFE7
  5061                           postinc1	equ	0xFE6
  5062                           postdec1	equ	0xFE5
  5063                           fsr1h	equ	0xFE2
  5064                           fsr1l	equ	0xFE1
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _symb_from_hex_to_bin *****************
  5073 ;; Defined at:
  5074 ;;		line 334 in file "src/modules/string_utils.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  symb            1    wreg     unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  symb            1   12[BANK0 ] unsigned char 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      unsigned char 
  5081 ;; Registers used:
  5082 ;;		wreg, status,2, status,0
  5083 ;; Tracked objects:
  5084 ;;		On entry : F/0
  5085 ;;		On exit  : F/0
  5086 ;;		Unchanged: FFFFFFF0/0
  5087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5088 ;;      Params:         0       0       0       0       0       0       0
  5089 ;;      Locals:         0       1       0       0       0       0       0
  5090 ;;      Temps:          0       0       0       0       0       0       0
  5091 ;;      Totals:         0       1       0       0       0       0       0
  5092 ;;Total ram usage:        1 bytes
  5093 ;; Hardware stack levels used:    1
  5094 ;; Hardware stack levels required when called:    5
  5095 ;; This function calls:
  5096 ;;		Nothing
  5097 ;; This function is called by:
  5098 ;;		_string_utils_from_hex
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text19
  5103  0015A4                     __ptext19:
  5104                           	opt stack 0
  5105  0015A4                     _symb_from_hex_to_bin:
  5106                           	opt stack 20
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;symb_from_hex_to_bin@symb stored from wreg
  5110  0015A4  CFE8 F06C          	movff	wreg,symb_from_hex_to_bin@symb
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;string_utils.c: 335: switch (symb)
  5114  0015A8  D009               	goto	l3404
  5115  0015AA                     l3390:
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;string_utils.c: 338: case '1':
  5119                           ;string_utils.c: 339: case '2':
  5120                           ;string_utils.c: 340: case '3':
  5121                           ;string_utils.c: 341: case '4':
  5122                           ;string_utils.c: 342: case '5':
  5123                           ;string_utils.c: 343: case '6':
  5124                           ;string_utils.c: 344: case '7':
  5125                           ;string_utils.c: 345: case '8':
  5126                           ;string_utils.c: 346: case '9':
  5127                           ;string_utils.c: 347: return (UINT8)(symb - '0');
  5128  0015AA  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5129  0015AC  0FD0               	addlw	208
  5130  0015AE  0012               	return	
  5131  0015B0                     l3394:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;string_utils.c: 349: case 'b':
  5135                           ;string_utils.c: 350: case 'c':
  5136                           ;string_utils.c: 351: case 'd':
  5137                           ;string_utils.c: 352: case 'e':
  5138                           ;string_utils.c: 353: case 'f':
  5139                           ;string_utils.c: 354: return (UINT8)(symb - 'a') + 10;
  5140  0015B0  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5141  0015B2  0FA9               	addlw	169
  5142  0015B4  0012               	return	
  5143  0015B6                     l3398:
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;string_utils.c: 356: case 'B':
  5147                           ;string_utils.c: 357: case 'C':
  5148                           ;string_utils.c: 358: case 'D':
  5149                           ;string_utils.c: 359: case 'E':
  5150                           ;string_utils.c: 360: case 'F':
  5151                           ;string_utils.c: 361: return (UINT8)(symb - 'A') + 10;
  5152  0015B6  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5153  0015B8  0FC9               	addlw	201
  5154  0015BA  0012               	return	
  5155  0015BC                     l3404:
  5156                           
  5157                           ; BSR set to: 0
  5158  0015BC  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5159                           
  5160                           ; Switch size 1, requested type "space"
  5161                           ; Number of cases is 22, Range of values is 48 to 102
  5162                           ; switch strategies available:
  5163                           ; Name         Instructions Cycles
  5164                           ; simple_byte           67    34 (average)
  5165                           ;	Chosen strategy is simple_byte
  5166  0015BE  0A30               	xorlw	48	; case 48
  5167  0015C0  E0F4               	bz	l3390
  5168  0015C2  0A01               	xorlw	1	; case 49
  5169  0015C4  E0F2               	bz	l3390
  5170  0015C6  0A03               	xorlw	3	; case 50
  5171  0015C8  E0F0               	bz	l3390
  5172  0015CA  0A01               	xorlw	1	; case 51
  5173  0015CC  E0EE               	bz	l3390
  5174  0015CE  0A07               	xorlw	7	; case 52
  5175  0015D0  E0EC               	bz	l3390
  5176  0015D2  0A01               	xorlw	1	; case 53
  5177  0015D4  E0EA               	bz	l3390
  5178  0015D6  0A03               	xorlw	3	; case 54
  5179  0015D8  E0E8               	bz	l3390
  5180  0015DA  0A01               	xorlw	1	; case 55
  5181  0015DC  E0E6               	bz	l3390
  5182  0015DE  0A0F               	xorlw	15	; case 56
  5183  0015E0  E0E4               	bz	l3390
  5184  0015E2  0A01               	xorlw	1	; case 57
  5185  0015E4  E0E2               	bz	l3390
  5186  0015E6  0A78               	xorlw	120	; case 65
  5187  0015E8  E0E6               	bz	l3398
  5188  0015EA  0A03               	xorlw	3	; case 66
  5189  0015EC  E0E4               	bz	l3398
  5190  0015EE  0A01               	xorlw	1	; case 67
  5191  0015F0  E0E2               	bz	l3398
  5192  0015F2  0A07               	xorlw	7	; case 68
  5193  0015F4  E0E0               	bz	l3398
  5194  0015F6  0A01               	xorlw	1	; case 69
  5195  0015F8  E0DE               	bz	l3398
  5196  0015FA  0A03               	xorlw	3	; case 70
  5197  0015FC  E0DC               	bz	l3398
  5198  0015FE  0A27               	xorlw	39	; case 97
  5199  001600  E0D7               	bz	l3394
  5200  001602  0A03               	xorlw	3	; case 98
  5201  001604  E0D5               	bz	l3394
  5202  001606  0A01               	xorlw	1	; case 99
  5203  001608  E0D3               	bz	l3394
  5204  00160A  0A07               	xorlw	7	; case 100
  5205  00160C  E0D1               	bz	l3394
  5206  00160E  0A01               	xorlw	1	; case 101
  5207  001610  E0CF               	bz	l3394
  5208  001612  0A03               	xorlw	3	; case 102
  5209  001614  E0CD               	bz	l3394
  5210                           
  5211                           ; BSR set to: 0
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;string_utils.c: 363: return 0;
  5215  001616  0C00               	retlw	0
  5216  001618                     __end_of_symb_from_hex_to_bin:
  5217                           	opt stack 0
  5218                           tosu	equ	0xFFF
  5219                           tosh	equ	0xFFE
  5220                           tosl	equ	0xFFD
  5221                           pclath	equ	0xFFA
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           indf0	equ	0xFEF
  5230                           postinc0	equ	0xFEE
  5231                           fsr0h	equ	0xFEA
  5232                           fsr0l	equ	0xFE9
  5233                           wreg	equ	0xFE8
  5234                           indf1	equ	0xFE7
  5235                           postinc1	equ	0xFE6
  5236                           postdec1	equ	0xFE5
  5237                           fsr1h	equ	0xFE2
  5238                           fsr1l	equ	0xFE1
  5239                           indf2	equ	0xFDF
  5240                           postinc2	equ	0xFDE
  5241                           postdec2	equ	0xFDD
  5242                           fsr2h	equ	0xFDA
  5243                           fsr2l	equ	0xFD9
  5244                           status	equ	0xFD8
  5245                           
  5246 ;; *************** function _on_parameter_found *****************
  5247 ;; Defined at:
  5248 ;;		line 14 in file "src/modules/on_parameter_found.c"
  5249 ;; Parameters:    Size  Location     Type
  5250 ;;  operation       1    wreg     enum E4396
  5251 ;;  cmd_id          1   49[BANK0 ] char 
  5252 ;;  p_id            1   50[BANK0 ] char 
  5253 ;;  p               3   51[BANK0 ] PTR const void 
  5254 ;;		 -> parameter_text(127), parameter_value(127), ROM(32767), 
  5255 ;;  type            1   54[BANK0 ] enum E4387
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  operation       1   55[BANK0 ] enum E4396
  5258 ;;  ok              1    0        unsigned char 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;		None               void
  5261 ;; Registers used:
  5262 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : F/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: FFFFFFF0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5268 ;;      Params:         0       6       0       0       0       0       0
  5269 ;;      Locals:         0       1       0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0
  5271 ;;      Totals:         0       7       0       0       0       0       0
  5272 ;;Total ram usage:        7 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    8
  5275 ;; This function calls:
  5276 ;;		_printf
  5277 ;;		_set_parameter
  5278 ;;		_get_parameter
  5279 ;;		_serialport_write
  5280 ;; This function is called by:
  5281 ;;		_syntax_string
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text20
  5286  001680                     __ptext20:
  5287                           	opt stack 0
  5288  001680                     _on_parameter_found:
  5289                           	opt stack 20
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;on_parameter_found@operation stored from wreg
  5293  001680  CFE8 F097          	movff	wreg,on_parameter_found@operation
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;on_parameter_found.c: 15: CHAR ok;
  5297                           ;on_parameter_found.c: 16: printf("operation= %d cid=%d pid=%d",operation,cmd_id,p_id);
  5298  001684  0E7F               	movlw	high STR_1
  5299  001686  6F7F               	movwf	(?_printf+1)& (0+255),b
  5300  001688  0ECC               	movlw	low STR_1
  5301  00168A  6F7E               	movwf	?_printf& (0+255),b
  5302  00168C  C097  F080         	movff	on_parameter_found@operation,?_printf+2
  5303  001690  6B81               	clrf	(?_printf+3)& (0+255),b
  5304  001692  5191               	movf	on_parameter_found@cmd_id& (0+255),w,b
  5305  001694  6F82               	movwf	(?_printf+4)& (0+255),b
  5306  001696  6B83               	clrf	(?_printf+5)& (0+255),b
  5307  001698  BF82               	btfsc	(?_printf+4)& (0+255),7,b
  5308  00169A  0783               	decf	(?_printf+5)& (0+255),f,b
  5309  00169C  5192               	movf	on_parameter_found@p_id& (0+255),w,b
  5310  00169E  6F84               	movwf	(?_printf+6)& (0+255),b
  5311  0016A0  6B85               	clrf	(?_printf+7)& (0+255),b
  5312  0016A2  BF84               	btfsc	(?_printf+6)& (0+255),7,b
  5313  0016A4  0785               	decf	(?_printf+7)& (0+255),f,b
  5314  0016A6  ECB3  F006         	call	_printf	;wreg free
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;on_parameter_found.c: 17: if (operation == PARSER_PARAMETER) {
  5318  0016AA  6797               	tstfsz	on_parameter_found@operation& (0+255),b
  5319  0016AC  D00D               	goto	l5506
  5320  0016AE  D006               	goto	l5504
  5321  0016B0                     l5498:
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;on_parameter_found.c: 20: ok = set_parameter(p_id);
  5325  0016B0  5192               	movf	on_parameter_found@p_id& (0+255),w,b
  5326  0016B2  EF07  F009         	goto	_set_parameter
  5327  0016B6                     l5500:
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;on_parameter_found.c: 24: ok = get_parameter(p_id);
  5331  0016B6  5192               	movf	on_parameter_found@p_id& (0+255),w,b
  5332  0016B8  EF1B  F00A         	goto	_get_parameter
  5333  0016BC                     l5504:
  5334                           
  5335                           ; BSR set to: 0
  5336  0016BC  5191               	movf	on_parameter_found@cmd_id& (0+255),w,b
  5337                           
  5338                           ; Switch size 1, requested type "space"
  5339                           ; Number of cases is 2, Range of values is 0 to 1
  5340                           ; switch strategies available:
  5341                           ; Name         Instructions Cycles
  5342                           ; simple_byte            7     4 (average)
  5343                           ;	Chosen strategy is simple_byte
  5344  0016BE  E0F8               	bz	l5498
  5345  0016C0  0A01               	xorlw	1	; case 1
  5346  0016C2  A4D8               	btfss	status,2,c
  5347  0016C4  0012               	return	
  5348  0016C6  D7F7               	goto	l5500
  5349  0016C8                     l5506:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;on_parameter_found.c: 32: else if (operation == PARSER_STOP) {
  5353  0016C8  5197               	movf	on_parameter_found@operation& (0+255),w,b
  5354  0016CA  0A02               	xorlw	2
  5355  0016CC  B4D8               	btfsc	status,2,c
  5356  0016CE  0012               	return	
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;on_parameter_found.c: 38: else if (operation == PARSER_ERROR) {
  5360  0016D0  5197               	movf	on_parameter_found@operation& (0+255),w,b
  5361  0016D2  0A03               	xorlw	3
  5362  0016D4  A4D8               	btfss	status,2,c
  5363  0016D6  0012               	return	
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;on_parameter_found.c: 39: serialport_write("err\n");
  5367  0016D8  0E7F               	movlw	high STR_2
  5368  0016DA  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  5369  0016DC  0EF4               	movlw	low STR_2
  5370  0016DE  6F7D               	movwf	?_serialport_write& (0+255),b
  5371  0016E0  EF33  F00C         	goto	l5486	;wreg free
  5372  0016E4                     __end_of_on_parameter_found:
  5373                           	opt stack 0
  5374                           tosu	equ	0xFFF
  5375                           tosh	equ	0xFFE
  5376                           tosl	equ	0xFFD
  5377                           pclath	equ	0xFFA
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           indf0	equ	0xFEF
  5386                           postinc0	equ	0xFEE
  5387                           fsr0h	equ	0xFEA
  5388                           fsr0l	equ	0xFE9
  5389                           wreg	equ	0xFE8
  5390                           indf1	equ	0xFE7
  5391                           postinc1	equ	0xFE6
  5392                           postdec1	equ	0xFE5
  5393                           fsr1h	equ	0xFE2
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _cla_add_value *****************
  5403 ;; Defined at:
  5404 ;;		line 33 in file "src/modules/classic_detector.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  d               1    wreg     PTR volatile struct .
  5407 ;;		 -> cla_detector(21), 
  5408 ;;  val             2   12[BANK0 ] int 
  5409 ;;  zero            2   14[BANK0 ] int 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  d               1   24[BANK0 ] PTR volatile struct .
  5412 ;;		 -> cla_detector(21), 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      unsigned char 
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5417 ;; Tracked objects:
  5418 ;;		On entry : F/0
  5419 ;;		On exit  : F/0
  5420 ;;		Unchanged: FFFFFFF0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5422 ;;      Params:         0       4       0       0       0       0       0
  5423 ;;      Locals:         0       5       0       0       0       0       0
  5424 ;;      Temps:          0       4       0       0       0       0       0
  5425 ;;      Totals:         0      13       0       0       0       0       0
  5426 ;;Total ram usage:       13 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    5
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_detection_task
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text21
  5437  00060A                     __ptext21:
  5438                           	opt stack 0
  5439  00060A                     _cla_add_value:
  5440                           	opt stack 24
  5441                           
  5442                           ;cla_add_value@d stored from wreg
  5443  00060A  CFE8 F078          	movff	wreg,cla_add_value@d
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;classic_detector.c: 34: d->cur_v = ((val- zero)<0?(-(val- zero)):(val- zero));
  5447  00060E  516E               	movf	cla_add_value@zero& (0+255),w,b
  5448  000610  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5449  000612  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5450  000614  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5451  000616  0B80               	andlw	128
  5452  000618  E107               	bnz	l3508
  5453                           
  5454                           ; BSR set to: 0
  5455  00061A  516E               	movf	cla_add_value@zero& (0+255),w,b
  5456  00061C  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5457  00061E  6F74               	movwf	_cla_add_value$966& (0+255),b
  5458  000620  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5459  000622  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5460  000624  6F75               	movwf	(_cla_add_value$966+1)& (0+255),b
  5461  000626  D010               	goto	l3510
  5462  000628                     l3508:
  5463                           
  5464                           ; BSR set to: 0
  5465  000628  C06C  F070         	movff	cla_add_value@val,??_cla_add_value
  5466  00062C  C06D  F071         	movff	cla_add_value@val+1,??_cla_add_value+1
  5467  000630  516E               	movf	cla_add_value@zero& (0+255),w,b
  5468  000632  5F70               	subwf	??_cla_add_value& (0+255),f,b
  5469  000634  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5470  000636  5B71               	subwfb	(??_cla_add_value+1)& (0+255),f,b
  5471  000638  1F70               	comf	??_cla_add_value& (0+255),f,b
  5472  00063A  1F71               	comf	(??_cla_add_value+1)& (0+255),f,b
  5473  00063C  4B70               	infsnz	??_cla_add_value& (0+255),f,b
  5474  00063E  2B71               	incf	(??_cla_add_value+1)& (0+255),f,b
  5475  000640  C070  F074         	movff	??_cla_add_value,_cla_add_value$966
  5476  000644  C071  F075         	movff	??_cla_add_value+1,_cla_add_value$966+1
  5477  000648                     l3510:
  5478                           
  5479                           ; BSR set to: 0
  5480  000648  5178               	movf	cla_add_value@d& (0+255),w,b
  5481  00064A  6ED9               	movwf	fsr2l,c
  5482  00064C  6ADA               	clrf	fsr2h,c
  5483  00064E  C074  FFDE         	movff	_cla_add_value$966,postinc2
  5484  000652  C075  FFDD         	movff	_cla_add_value$966+1,postdec2
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;classic_detector.c: 35: d->over_trig_value = (d->cur_v > d->config.sig_trig) ? (d->cur_
      +                          v - d->config.sig_trig):0;
  5488  000656  5178               	movf	cla_add_value@d& (0+255),w,b
  5489  000658  6ED9               	movwf	fsr2l,c
  5490  00065A  6ADA               	clrf	fsr2h,c
  5491  00065C  5178               	movf	cla_add_value@d& (0+255),w,b
  5492  00065E  6EE1               	movwf	fsr1l,c
  5493  000660  6AE2               	clrf	fsr1h,c
  5494  000662  0E13               	movlw	19
  5495  000664  D8A6               	call	PL12	;call to abstracted procedure
  5496  000666  E102               	bnz	u2635
  5497  000668  50DF               	movf	indf2,w,c
  5498  00066A  5CE7               	subwf	indf1,w,c
  5499  00066C                     u2635:
  5500  00066C  E303               	bnc	l3516
  5501                           
  5502                           ; BSR set to: 0
  5503  00066E  6B76               	clrf	_cla_add_value$967& (0+255),b	;volatile
  5504  000670  6B77               	clrf	(_cla_add_value$967+1)& (0+255),b	;volatile
  5505  000672  D017               	goto	l703
  5506  000674                     l3516:
  5507                           
  5508                           ; BSR set to: 0
  5509  000674  5178               	movf	cla_add_value@d& (0+255),w,b
  5510  000676  6ED9               	movwf	fsr2l,c
  5511  000678  6ADA               	clrf	fsr2h,c
  5512  00067A  0E13               	movlw	19
  5513  00067C  26D9               	addwf	fsr2l,f,c
  5514  00067E  6ADA               	clrf	fsr2h,c
  5515  000680  CFDE F070          	movff	postinc2,??_cla_add_value
  5516  000684  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5517  000688  5178               	movf	cla_add_value@d& (0+255),w,b
  5518  00068A  6ED9               	movwf	fsr2l,c
  5519  00068C  6ADA               	clrf	fsr2h,c
  5520  00068E  CFDE F072          	movff	postinc2,??_cla_add_value+2
  5521  000692  CFDD F073          	movff	postdec2,??_cla_add_value+3
  5522  000696  5170               	movf	??_cla_add_value& (0+255),w,b
  5523  000698  5D72               	subwf	(??_cla_add_value+2)& (0+255),w,b
  5524  00069A  6F76               	movwf	_cla_add_value$967& (0+255),b	;volatile
  5525  00069C  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5526  00069E  5973               	subwfb	(??_cla_add_value+3)& (0+255),w,b
  5527  0006A0  6F77               	movwf	(_cla_add_value$967+1)& (0+255),b	;volatile
  5528  0006A2                     l703:
  5529                           
  5530                           ; BSR set to: 0
  5531  0006A2  D8B1               	call	PL36	;call to abstracted procedure
  5532  0006A4  C076  FFDE         	movff	_cla_add_value$967,postinc2	;volatile
  5533  0006A8  C077  FFDD         	movff	_cla_add_value$967+1,postdec2	;volatile
  5534                           
  5535                           ;classic_detector.c: 36: if (d->status.over_trig)
  5536  0006AC  D88D               	call	PL14	;call to abstracted procedure
  5537  0006AE  50DF               	movf	indf2,w,c
  5538  0006B0  6F70               	movwf	??_cla_add_value& (0+255),b
  5539  0006B2  A570               	btfss	??_cla_add_value& (0+255),2,b
  5540  0006B4  D05D               	goto	l3538
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;classic_detector.c: 37: {
  5544                           ;classic_detector.c: 38: d->sig_count++;
  5545  0006B6  5178               	movf	cla_add_value@d& (0+255),w,b
  5546  0006B8  6ED9               	movwf	fsr2l,c
  5547  0006BA  6ADA               	clrf	fsr2h,c
  5548  0006BC  0E08               	movlw	8
  5549  0006BE  26D9               	addwf	fsr2l,f,c
  5550  0006C0  6ADA               	clrf	fsr2h,c
  5551  0006C2  2ADE               	incf	postinc2,f,c
  5552  0006C4  0E00               	movlw	0
  5553  0006C6  22DD               	addwfc	postdec2,f,c
  5554                           
  5555                           ;classic_detector.c: 39: d->sig_sum += d->over_trig_value;
  5556  0006C8  D89E               	call	PL36	;call to abstracted procedure
  5557  0006CA  CFDE F070          	movff	postinc2,??_cla_add_value
  5558  0006CE  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5559  0006D2  D881               	call	PL18	;call to abstracted procedure
  5560  0006D4  5170               	movf	??_cla_add_value& (0+255),w,b
  5561  0006D6  26DE               	addwf	postinc2,f,c
  5562  0006D8  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5563  0006DA  22DD               	addwfc	postdec2,f,c
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;classic_detector.c: 40: if (d->sig_sum > d->config.sig_sum_trig && d->status.alarm == F
      +                          ALSE)
  5567  0006DC  D87C               	call	PL18	;call to abstracted procedure
  5568  0006DE  5178               	movf	cla_add_value@d& (0+255),w,b
  5569  0006E0  6EE1               	movwf	fsr1l,c
  5570  0006E2  6AE2               	clrf	fsr1h,c
  5571  0006E4  0E11               	movlw	17
  5572  0006E6  D865               	call	PL12	;call to abstracted procedure
  5573  0006E8  E102               	bnz	u2655
  5574  0006EA  50DF               	movf	indf2,w,c
  5575  0006EC  5CE7               	subwf	indf1,w,c
  5576  0006EE                     u2655:
  5577  0006EE  E231               	bc	l3534
  5578                           
  5579                           ; BSR set to: 0
  5580  0006F0  D86B               	call	PL14	;call to abstracted procedure
  5581  0006F2  50DF               	movf	indf2,w,c
  5582  0006F4  6F70               	movwf	??_cla_add_value& (0+255),b
  5583  0006F6  B170               	btfsc	??_cla_add_value& (0+255),0,b
  5584  0006F8  D02C               	goto	l3534
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;classic_detector.c: 41: {
  5588                           ;classic_detector.c: 42: d->status.over_trig = FALSE;
  5589  0006FA  5178               	movf	cla_add_value@d& (0+255),w,b
  5590  0006FC  6ED9               	movwf	fsr2l,c
  5591  0006FE  6ADA               	clrf	fsr2h,c
  5592  000700  0E0E               	movlw	14
  5593  000702  26D9               	addwf	fsr2l,f,c
  5594  000704  6ADA               	clrf	fsr2h,c
  5595  000706  0EFB               	movlw	-5
  5596  000708  16DF               	andwf	223,f,c
  5597                           
  5598                           ;classic_detector.c: 43: d->status.alarm=TRUE;
  5599  00070A  D85E               	call	PL14	;call to abstracted procedure
  5600  00070C  0E01               	movlw	1
  5601  00070E  12DF               	iorwf	223,f,c
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;classic_detector.c: 44: d->last_sig_count = d->sig_count;
  5605  000710  5178               	movf	cla_add_value@d& (0+255),w,b
  5606  000712  D870               	call	PL22	;call to abstracted procedure
  5607  000714  0E0C               	movlw	12
  5608  000716  26E1               	addwf	fsr1l,f,c
  5609  000718  6AE2               	clrf	fsr1h,c
  5610  00071A  CFDE FFE6          	movff	postinc2,postinc1
  5611  00071E  CFDD FFE5          	movff	postdec2,postdec1
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;classic_detector.c: 45: d->last_sig_sum = d->sig_sum;
  5615  000722  D859               	call	PL18	;call to abstracted procedure
  5616  000724  5178               	movf	cla_add_value@d& (0+255),w,b
  5617  000726  6EE1               	movwf	fsr1l,c
  5618  000728  6AE2               	clrf	fsr1h,c
  5619  00072A  0E0A               	movlw	10
  5620  00072C  26E1               	addwf	fsr1l,f,c
  5621  00072E  6AE2               	clrf	fsr1h,c
  5622  000730  CFDE FFE6          	movff	postinc2,postinc1
  5623  000734  CFDD FFE5          	movff	postdec2,postdec1
  5624                           
  5625                           ;classic_detector.c: 46: d->sig_count = 0;
  5626  000738  5178               	movf	cla_add_value@d& (0+255),w,b
  5627  00073A  6ED9               	movwf	fsr2l,c
  5628  00073C  6ADA               	clrf	fsr2h,c
  5629  00073E  0E08               	movlw	8
  5630  000740  26D9               	addwf	fsr2l,f,c
  5631  000742  6ADA               	clrf	fsr2h,c
  5632  000744  6ADE               	clrf	postinc2,c
  5633  000746  6ADD               	clrf	postdec2,c
  5634                           
  5635                           ;classic_detector.c: 47: d->sig_sum = 0;
  5636  000748  D846               	call	PL18	;call to abstracted procedure
  5637  00074A  0E00               	movlw	0
  5638  00074C  6EDE               	movwf	postinc2,c
  5639  00074E  6EDD               	movwf	postdec2,c
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;classic_detector.c: 48: return TRUE;
  5643  000750  0C01               	retlw	1
  5644  000752                     l3534:
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;classic_detector.c: 49: }
  5648                           ;classic_detector.c: 51: if (d->sig_count > d->config.sig_max_count)
  5649  000752  5178               	movf	cla_add_value@d& (0+255),w,b
  5650  000754  D84F               	call	PL22	;call to abstracted procedure
  5651  000756  0E0F               	movlw	15
  5652  000758  D82C               	call	PL12	;call to abstracted procedure
  5653  00075A  E102               	bnz	u2675
  5654  00075C  50DF               	movf	indf2,w,c
  5655  00075E  5CE7               	subwf	indf1,w,c
  5656  000760                     u2675:
  5657  000760  E227               	bc	l3542
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;classic_detector.c: 52: {
  5661                           ;classic_detector.c: 53: d->status.over_trig = FALSE;
  5662  000762  D832               	call	PL14	;call to abstracted procedure
  5663  000764  0EFB               	movlw	-5
  5664  000766  16DF               	andwf	223,f,c
  5665                           
  5666                           ;classic_detector.c: 54: d->status.alarm = FALSE;
  5667  000768  D82F               	call	PL14	;call to abstracted procedure
  5668  00076A  0EFE               	movlw	-2
  5669  00076C  16DF               	andwf	223,f,c
  5670  00076E  0C00               	retlw	0
  5671  000770                     l3538:
  5672                           
  5673                           ; BSR set to: 0
  5674                           ;classic_detector.c: 59: else if (d->over_trig_value > d->config.sig_trig)
  5675  000770  D84A               	call	PL36	;call to abstracted procedure
  5676  000772  5178               	movf	cla_add_value@d& (0+255),w,b
  5677  000774  6EE1               	movwf	fsr1l,c
  5678  000776  6AE2               	clrf	fsr1h,c
  5679  000778  0E13               	movlw	19
  5680  00077A  D81B               	call	PL12	;call to abstracted procedure
  5681  00077C  E102               	bnz	u2685
  5682  00077E  50DF               	movf	indf2,w,c
  5683  000780  5CE7               	subwf	indf1,w,c
  5684  000782                     u2685:
  5685  000782  E216               	bc	l3542
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;classic_detector.c: 60: {
  5689                           ;classic_detector.c: 61: d->status.over_trig = TRUE;
  5690  000784  D821               	call	PL14	;call to abstracted procedure
  5691  000786  0E04               	movlw	4
  5692  000788  12DF               	iorwf	223,f,c
  5693                           
  5694                           ;classic_detector.c: 62: d->status.alarm = FALSE;
  5695  00078A  D81E               	call	PL14	;call to abstracted procedure
  5696  00078C  0EFE               	movlw	-2
  5697  00078E  16DF               	andwf	223,f,c
  5698                           
  5699                           ;classic_detector.c: 63: d->last_sig_count = 0;
  5700  000790  5178               	movf	cla_add_value@d& (0+255),w,b
  5701  000792  6ED9               	movwf	fsr2l,c
  5702  000794  6ADA               	clrf	fsr2h,c
  5703  000796  0E0C               	movlw	12
  5704                           
  5705                           ;classic_detector.c: 64: d->last_sig_sum = 0;
  5706  000798  D825               	call	PL20	;call to abstracted procedure
  5707  00079A  0E0A               	movlw	10
  5708                           
  5709                           ;classic_detector.c: 65: d->sig_count = 0;
  5710  00079C  D823               	call	PL20	;call to abstracted procedure
  5711  00079E  0E08               	movlw	8
  5712  0007A0  26D9               	addwf	fsr2l,f,c
  5713  0007A2  6ADA               	clrf	fsr2h,c
  5714  0007A4  6ADE               	clrf	postinc2,c
  5715  0007A6  6ADD               	clrf	postdec2,c
  5716                           
  5717                           ;classic_detector.c: 66: d->sig_sum = 0;
  5718  0007A8  D816               	call	PL18	;call to abstracted procedure
  5719  0007AA  0E00               	movlw	0
  5720  0007AC  6EDE               	movwf	postinc2,c
  5721  0007AE  6EDD               	movwf	postdec2,c
  5722  0007B0                     l3542:
  5723                           
  5724                           ; BSR set to: 0
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;classic_detector.c: 67: }
  5728                           ;classic_detector.c: 68: return FALSE;
  5729  0007B0  0C00               	retlw	0
  5730  0007B2                     __end_of_cla_add_value:
  5731                           	opt stack 0
  5732  0007B2                     PL12:
  5733                           	opt stack 24
  5734  0007B2  26E1               	addwf	fsr1l,f,c
  5735  0007B4  6AE2               	clrf	fsr1h,c
  5736  0007B6  52E6               	movf	postinc1,f,c
  5737  0007B8  52DE               	movf	postinc2,f,c
  5738  0007BA  50E5               	movf	postdec1,w,c
  5739  0007BC  0A80               	xorlw	128
  5740  0007BE  6F70               	movwf	??_cla_add_value& (0+255),b
  5741  0007C0  50DD               	movf	postdec2,w,c
  5742  0007C2  0A80               	xorlw	128
  5743  0007C4  5D70               	subwf	??_cla_add_value& (0+255),w,b
  5744  0007C6  0012               	return	
  5745  0007C8                     __end_ofPL12:
  5746                           	opt stack 0
  5747  0007C8                     PL14:
  5748                           	opt stack 24
  5749  0007C8  5178               	movf	cla_add_value@d& (0+255),w,b
  5750  0007CA  6ED9               	movwf	fsr2l,c
  5751  0007CC  6ADA               	clrf	fsr2h,c
  5752  0007CE  0E0E               	movlw	14
  5753  0007D0  26D9               	addwf	fsr2l,f,c
  5754  0007D2  6ADA               	clrf	fsr2h,c
  5755  0007D4  0012               	return	
  5756  0007D6                     __end_ofPL14:
  5757                           	opt stack 0
  5758  0007D6                     PL18:
  5759                           	opt stack 24
  5760  0007D6  5178               	movf	cla_add_value@d& (0+255),w,b
  5761  0007D8  6ED9               	movwf	fsr2l,c
  5762  0007DA  6ADA               	clrf	fsr2h,c
  5763  0007DC  0E06               	movlw	6
  5764  0007DE  26D9               	addwf	fsr2l,f,c
  5765  0007E0  6ADA               	clrf	fsr2h,c
  5766  0007E2  0012               	return	
  5767  0007E4                     __end_ofPL18:
  5768                           	opt stack 0
  5769  0007E4                     PL20:
  5770                           	opt stack 24
  5771  0007E4  26D9               	addwf	fsr2l,f,c
  5772  0007E6  6ADA               	clrf	fsr2h,c
  5773  0007E8  6ADE               	clrf	postinc2,c
  5774  0007EA  6ADD               	clrf	postdec2,c
  5775  0007EC  5178               	movf	cla_add_value@d& (0+255),w,b
  5776  0007EE  6ED9               	movwf	fsr2l,c
  5777  0007F0  6ADA               	clrf	fsr2h,c
  5778  0007F2  0012               	return	
  5779  0007F4                     __end_ofPL20:
  5780                           	opt stack 0
  5781  0007F4                     PL22:
  5782                           	opt stack 24
  5783  0007F4  6ED9               	movwf	fsr2l,c
  5784  0007F6  6ADA               	clrf	fsr2h,c
  5785  0007F8  0E08               	movlw	8
  5786  0007FA  26D9               	addwf	fsr2l,f,c
  5787  0007FC  6ADA               	clrf	fsr2h,c
  5788  0007FE  5178               	movf	cla_add_value@d& (0+255),w,b
  5789  000800  6EE1               	movwf	fsr1l,c
  5790  000802  6AE2               	clrf	fsr1h,c
  5791  000804  0012               	return	
  5792  000806                     __end_ofPL22:
  5793                           	opt stack 0
  5794  000806                     PL36:
  5795                           	opt stack 24
  5796  000806  5178               	movf	cla_add_value@d& (0+255),w,b
  5797  000808  6ED9               	movwf	fsr2l,c
  5798  00080A  6ADA               	clrf	fsr2h,c
  5799  00080C  0E04               	movlw	4
  5800  00080E  26D9               	addwf	fsr2l,f,c
  5801  000810  6ADA               	clrf	fsr2h,c
  5802  000812  0012               	return	
  5803  000814                     __end_ofPL36:
  5804                           	opt stack 0
  5805                           tosu	equ	0xFFF
  5806                           tosh	equ	0xFFE
  5807                           tosl	equ	0xFFD
  5808                           pclath	equ	0xFFA
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           indf0	equ	0xFEF
  5817                           postinc0	equ	0xFEE
  5818                           fsr0h	equ	0xFEA
  5819                           fsr0l	equ	0xFE9
  5820                           wreg	equ	0xFE8
  5821                           indf1	equ	0xFE7
  5822                           postinc1	equ	0xFE6
  5823                           postdec1	equ	0xFE5
  5824                           fsr1h	equ	0xFE2
  5825                           fsr1l	equ	0xFE1
  5826                           indf2	equ	0xFDF
  5827                           postinc2	equ	0xFDE
  5828                           postdec2	equ	0xFDD
  5829                           fsr2h	equ	0xFDA
  5830                           fsr2l	equ	0xFD9
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function _pd_add_value *****************
  5834 ;; Defined at:
  5835 ;;		line 33 in file "src/modules/peak_detector.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;  d               2   20[BANK0 ] PTR volatile struct .
  5838 ;;		 -> pd_detector(101), 
  5839 ;;  val             2   22[BANK0 ] int 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  tmp             2   40[BANK0 ] int 
  5842 ;;  i               1   42[BANK0 ] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      unsigned char 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : F/0
  5849 ;;		On exit  : F/0
  5850 ;;		Unchanged: FFFFFFF0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5852 ;;      Params:         0       4       0       0       0       0       0
  5853 ;;      Locals:         0      13       0       0       0       0       0
  5854 ;;      Temps:          0       6       0       0       0       0       0
  5855 ;;      Totals:         0      23       0       0       0       0       0
  5856 ;;Total ram usage:       23 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    6
  5859 ;; This function calls:
  5860 ;;		___lbmod
  5861 ;;		___awdiv
  5862 ;;		___wmul
  5863 ;;		___awmod
  5864 ;; This function is called by:
  5865 ;;		_detection_task
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text22
  5870  0000F4                     __ptext22:
  5871                           	opt stack 0
  5872  0000F4                     _pd_add_value:
  5873                           	opt stack 23
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;peak_detector.c: 34: IDX8 i;
  5877                           ;peak_detector.c: 35: INT16 tmp;
  5878                           ;peak_detector.c: 37: d->last_v_idx %= d->config.lval_cnt;
  5879                           
  5880                           ; BSR set to: 0
  5881  0000F4  EE20 F028          	lfsr	2,40
  5882  0000F8  5174               	movf	pd_add_value@d& (0+255),w,b
  5883  0000FA  26D9               	addwf	fsr2l,f,c
  5884  0000FC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5885  0000FE  22DA               	addwfc	fsr2h,f,c
  5886  000100  EE10 F063          	lfsr	1,99
  5887  000104  5174               	movf	pd_add_value@d& (0+255),w,b
  5888  000106  26E1               	addwf	fsr1l,f,c
  5889  000108  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5890  00010A  22E2               	addwfc	fsr1h,f,c
  5891  00010C  50E7               	movf	indf1,w,c
  5892  00010E  6F6C               	movwf	?___lbmod& (0+255),b
  5893  000110  EE10 F028          	lfsr	1,40
  5894  000114  5174               	movf	pd_add_value@d& (0+255),w,b
  5895  000116  26E1               	addwf	fsr1l,f,c
  5896  000118  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5897  00011A  22E2               	addwfc	fsr1h,f,c
  5898  00011C  50E7               	movf	indf1,w,c
  5899  00011E  EC97  F00D         	call	___lbmod
  5900  000122  6EDF               	movwf	indf2,c
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;peak_detector.c: 38: d->last_v_buf[d->last_v_idx] = (INT16) val;
  5904  000124  EE20 F028          	lfsr	2,40
  5905  000128  5174               	movf	pd_add_value@d& (0+255),w,b
  5906  00012A  26D9               	addwf	fsr2l,f,c
  5907  00012C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5908  00012E  22DA               	addwfc	fsr2h,f,c
  5909  000130  50DF               	movf	indf2,w,c
  5910  000132  DA4A               	call	PL48	;call to abstracted procedure
  5911  000134  C076  FFDE         	movff	pd_add_value@val,postinc2
  5912  000138  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;peak_detector.c: 39: d->last_v_idx++;
  5916  00013C  EE20 F028          	lfsr	2,40
  5917  000140  5174               	movf	pd_add_value@d& (0+255),w,b
  5918  000142  26D9               	addwf	fsr2l,f,c
  5919  000144  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5920  000146  22DA               	addwfc	fsr2h,f,c
  5921  000148  2ADF               	incf	indf2,f,c
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;peak_detector.c: 40: d->last_v = d->cur_v;
  5925  00014A  EE20 F058          	lfsr	2,88
  5926  00014E  5174               	movf	pd_add_value@d& (0+255),w,b
  5927  000150  26D9               	addwf	fsr2l,f,c
  5928  000152  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5929  000154  22DA               	addwfc	fsr2h,f,c
  5930  000156  EE10 F029          	lfsr	1,41
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;peak_detector.c: 41: d->cur_v = d->next_v;
  5934  00015A  D9ED               	call	PL24	;call to abstracted procedure
  5935  00015C  EE10 F058          	lfsr	1,88
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;peak_detector.c: 42: d->next_v = val;
  5939  000160  D9EA               	call	PL24	;call to abstracted procedure
  5940  000162  C076  FFDE         	movff	pd_add_value@val,postinc2
  5941  000166  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;peak_detector.c: 44: tmp = 0;
  5945  00016A  6B88               	clrf	pd_add_value@tmp& (0+255),b
  5946  00016C  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;peak_detector.c: 45: for (i = 0; i < d->config.lval_cnt; i++) {
  5950  00016E  6B8A               	clrf	pd_add_value@i& (0+255),b
  5951  000170  D003               	goto	l3576
  5952  000172                     l3572:
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;peak_detector.c: 46: tmp += d->last_v_buf[i];
  5956  000172  518A               	movf	pd_add_value@i& (0+255),w,b
  5957  000174  DA29               	call	PL48	;call to abstracted procedure
  5958                           
  5959                           ; BSR set to: 0
  5960  000176  DA3F               	call	PL64	;call to abstracted procedure
  5961  000178                     l3576:
  5962                           
  5963                           ; BSR set to: 0
  5964  000178  D9ED               	call	PL26	;call to abstracted procedure
  5965  00017A  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  5966  00017C  E3FA               	bnc	l3572
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;peak_detector.c: 47: }
  5970                           ;peak_detector.c: 48: d->avlv = tmp/d->config.lval_cnt;
  5971  00017E  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  5972  000182  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  5973  000186  D9E6               	call	PL26	;call to abstracted procedure
  5974  000188  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  5975  00018A  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  5976  00018C  EC5B  F00A         	call	___awdiv	;wreg free
  5977  000190  EE20 F056          	lfsr	2,86
  5978  000194  D9FD               	call	PL34	;call to abstracted procedure
  5979                           
  5980                           ;peak_detector.c: 50: d->wval = d->cur_v * d->cur_v - d->avlv * d->next_v;
  5981  000196  EE20 F058          	lfsr	2,88
  5982  00019A  5174               	movf	pd_add_value@d& (0+255),w,b
  5983  00019C  26D9               	addwf	fsr2l,f,c
  5984  00019E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5985  0001A0  22DA               	addwfc	fsr2h,f,c
  5986  0001A2  CFDE F06C          	movff	postinc2,?___wmul
  5987  0001A6  CFDD F06D          	movff	postdec2,?___wmul+1
  5988  0001AA  EE20 F058          	lfsr	2,88
  5989  0001AE  5174               	movf	pd_add_value@d& (0+255),w,b
  5990  0001B0  26D9               	addwf	fsr2l,f,c
  5991  0001B2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5992  0001B4  22DA               	addwfc	fsr2h,f,c
  5993  0001B6  CFDE F06E          	movff	postinc2,?___wmul+2
  5994  0001BA  CFDD F06F          	movff	postdec2,?___wmul+3
  5995  0001BE  EC81  F00D         	call	___wmul	;wreg free
  5996  0001C2  C06C  F078         	movff	?___wmul,??_pd_add_value
  5997  0001C6  C06D  F079         	movff	?___wmul+1,??_pd_add_value+1
  5998  0001CA  EE20 F056          	lfsr	2,86
  5999  0001CE  5174               	movf	pd_add_value@d& (0+255),w,b
  6000  0001D0  26D9               	addwf	fsr2l,f,c
  6001  0001D2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6002  0001D4  22DA               	addwfc	fsr2h,f,c
  6003  0001D6  CFDE F06C          	movff	postinc2,?___wmul
  6004  0001DA  CFDD F06D          	movff	postdec2,?___wmul+1
  6005  0001DE  EE20 F05A          	lfsr	2,90
  6006  0001E2  5174               	movf	pd_add_value@d& (0+255),w,b
  6007  0001E4  26D9               	addwf	fsr2l,f,c
  6008  0001E6  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6009  0001E8  22DA               	addwfc	fsr2h,f,c
  6010  0001EA  CFDE F06E          	movff	postinc2,?___wmul+2
  6011  0001EE  CFDD F06F          	movff	postdec2,?___wmul+3
  6012  0001F2  EC81  F00D         	call	___wmul	;wreg free
  6013  0001F6  516C               	movf	?___wmul& (0+255),w,b
  6014  0001F8  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6015  0001FA  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6016  0001FC  516D               	movf	(?___wmul+1)& (0+255),w,b
  6017  0001FE  5979               	subwfb	(??_pd_add_value+1)& (0+255),w,b
  6018  000200  6F7B               	movwf	(??_pd_add_value+3)& (0+255),b
  6019  000202  EE20 F05C          	lfsr	2,92
  6020  000206  5174               	movf	pd_add_value@d& (0+255),w,b
  6021  000208  26D9               	addwf	fsr2l,f,c
  6022  00020A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6023  00020C  22DA               	addwfc	fsr2h,f,c
  6024  00020E  C07A  FFDE         	movff	??_pd_add_value+2,postinc2
  6025  000212  C07B  FFDD         	movff	??_pd_add_value+3,postdec2
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;peak_detector.c: 52: if ((((d->wval)<0?(-(d->wval)):(d->wval))) > d->config.wtrigger) {
  6029  000216  D976               	call	PL8	;call to abstracted procedure
  6030  000218  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6031  00021A  D00B               	goto	l3584
  6032                           
  6033                           ; BSR set to: 0
  6034  00021C  EE20 F05C          	lfsr	2,92
  6035  000220  5174               	movf	pd_add_value@d& (0+255),w,b
  6036  000222  26D9               	addwf	fsr2l,f,c
  6037  000224  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6038  000226  22DA               	addwfc	fsr2h,f,c
  6039  000228  CFDE F07E          	movff	postinc2,_pd_add_value$1080	;volatile
  6040  00022C  CFDD F07F          	movff	postdec2,_pd_add_value$1080+1	;volatile
  6041  000230  D00B               	goto	l739
  6042  000232                     l3584:
  6043                           
  6044                           ; BSR set to: 0
  6045  000232  EE20 F05C          	lfsr	2,92
  6046  000236  5174               	movf	pd_add_value@d& (0+255),w,b
  6047  000238  26D9               	addwf	fsr2l,f,c
  6048  00023A  D95B               	call	PL6	;call to abstracted procedure
  6049  00023C  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6050  00023E  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6051  000240  C078  F07E         	movff	??_pd_add_value,_pd_add_value$1080	;volatile
  6052  000244  C079  F07F         	movff	??_pd_add_value+1,_pd_add_value$1080+1	;volatile
  6053  000248                     l739:
  6054                           
  6055                           ; BSR set to: 0
  6056  000248  EE20 F05F          	lfsr	2,95
  6057  00024C  5174               	movf	pd_add_value@d& (0+255),w,b
  6058  00024E  26D9               	addwf	fsr2l,f,c
  6059  000250  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6060  000252  22DA               	addwfc	fsr2h,f,c
  6061  000254  CFDE F078          	movff	postinc2,??_pd_add_value
  6062  000258  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6063  00025C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6064  00025E  0A80               	xorlw	128
  6065  000260  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6066  000262  517E               	movf	_pd_add_value$1080& (0+255),w,b	;volatile
  6067  000264  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6068  000266  517F               	movf	(_pd_add_value$1080+1)& (0+255),w,b	;volatile
  6069  000268  0A80               	xorlw	128
  6070  00026A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6071  00026C  E216               	bc	l3596
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;peak_detector.c: 53: if (!d->status.alarm && !d->status.firststart) {
  6075  00026E  D9A3               	call	PL46	;call to abstracted procedure
  6076  000270  B178               	btfsc	??_pd_add_value& (0+255),0,b
  6077  000272  D013               	goto	l3596
  6078                           
  6079                           ; BSR set to: 0
  6080  000274  EE20 F05E          	lfsr	2,94
  6081  000278  5174               	movf	pd_add_value@d& (0+255),w,b
  6082  00027A  26D9               	addwf	fsr2l,f,c
  6083  00027C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6084  00027E  22DA               	addwfc	fsr2h,f,c
  6085  000280  50DF               	movf	indf2,w,c
  6086  000282  6F78               	movwf	??_pd_add_value& (0+255),b
  6087  000284  B578               	btfsc	??_pd_add_value& (0+255),2,b
  6088  000286  D009               	goto	l3596
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;peak_detector.c: 54: d->status.alarm = 1;
  6092  000288  EE20 F05E          	lfsr	2,94
  6093  00028C  5174               	movf	pd_add_value@d& (0+255),w,b
  6094  00028E  26D9               	addwf	fsr2l,f,c
  6095  000290  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6096  000292  22DA               	addwfc	fsr2h,f,c
  6097  000294  0E01               	movlw	1
  6098  000296  12DF               	iorwf	223,f,c
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;peak_detector.c: 55: return TRUE;
  6102  000298  0C01               	retlw	1
  6103  00029A                     l3596:
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;peak_detector.c: 56: }
  6107                           ;peak_detector.c: 57: }
  6108                           ;peak_detector.c: 58: if (d->status.alarm && (((d->wval)<0?(-(d->wval)):(d->wval))) < (1
      +                          000)
  6109                           ;peak_detector.c: 59: && ((d->cur_v - d->ref_v)<0?(-(d->cur_v - d->ref_v)):(d->cur_v - d
      +                          ->ref_v)) < d->config.tolerance
  6110                           ;peak_detector.c: 60: && ((d->next_v - d->ref_v)<0?(-(d->next_v - d->ref_v)):(d->next_v 
      +                          - d->ref_v)) < d->config.tolerance) {
  6111  00029A  D98D               	call	PL46	;call to abstracted procedure
  6112  00029C  A178               	btfss	??_pd_add_value& (0+255),0,b
  6113  00029E  D09B               	goto	l742
  6114                           
  6115                           ; BSR set to: 0
  6116  0002A0  EE20 F05C          	lfsr	2,92
  6117  0002A4  5174               	movf	pd_add_value@d& (0+255),w,b
  6118  0002A6  26D9               	addwf	fsr2l,f,c
  6119  0002A8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6120  0002AA  22DA               	addwfc	fsr2h,f,c
  6121  0002AC  CFDE F078          	movff	postinc2,??_pd_add_value
  6122  0002B0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6123  0002B4  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6124  0002B6  D00B               	goto	l3602
  6125                           
  6126                           ; BSR set to: 0
  6127  0002B8  EE20 F05C          	lfsr	2,92
  6128  0002BC  5174               	movf	pd_add_value@d& (0+255),w,b
  6129  0002BE  26D9               	addwf	fsr2l,f,c
  6130  0002C0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6131  0002C2  22DA               	addwfc	fsr2h,f,c
  6132  0002C4  CFDE F080          	movff	postinc2,_pd_add_value$1081	;volatile
  6133  0002C8  CFDD F081          	movff	postdec2,_pd_add_value$1081+1	;volatile
  6134  0002CC  D00B               	goto	l3604
  6135  0002CE                     l3602:
  6136                           
  6137                           ; BSR set to: 0
  6138  0002CE  EE20 F05C          	lfsr	2,92
  6139  0002D2  5174               	movf	pd_add_value@d& (0+255),w,b
  6140  0002D4  26D9               	addwf	fsr2l,f,c
  6141  0002D6  D90D               	call	PL6	;call to abstracted procedure
  6142  0002D8  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6143  0002DA  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6144  0002DC  C078  F080         	movff	??_pd_add_value,_pd_add_value$1081	;volatile
  6145  0002E0  C079  F081         	movff	??_pd_add_value+1,_pd_add_value$1081+1	;volatile
  6146  0002E4                     l3604:
  6147                           
  6148                           ; BSR set to: 0
  6149  0002E4  5181               	movf	(_pd_add_value$1081+1)& (0+255),w,b	;volatile
  6150  0002E6  0A80               	xorlw	128
  6151  0002E8  0F7D               	addlw	-131
  6152  0002EA  0EE8               	movlw	232
  6153  0002EC  B4D8               	btfsc	status,2,c
  6154  0002EE  5D80               	subwf	_pd_add_value$1081& (0+255),w,b	;volatile
  6155  0002F0  E272               	bc	l742
  6156                           
  6157                           ; BSR set to: 0
  6158  0002F2  EE20 F054          	lfsr	2,84
  6159  0002F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6160  0002F8  D8DE               	call	PL2	;call to abstracted procedure
  6161  0002FA  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6162  0002FC  D982               	call	PL66	;call to abstracted procedure
  6163  0002FE  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6164  000300  D009               	goto	l3610
  6165                           
  6166                           ; BSR set to: 0
  6167  000302  EE20 F054          	lfsr	2,84
  6168  000306  5174               	movf	pd_add_value@d& (0+255),w,b
  6169  000308  D8D6               	call	PL2	;call to abstracted procedure
  6170  00030A  6F82               	movwf	_pd_add_value$1082& (0+255),b	;volatile
  6171  00030C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6172  00030E  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6173  000310  6F83               	movwf	(_pd_add_value$1082+1)& (0+255),b	;volatile
  6174  000312  D00B               	goto	l750
  6175  000314                     l3610:
  6176                           
  6177                           ; BSR set to: 0
  6178  000314  EE20 F054          	lfsr	2,84
  6179  000318  5174               	movf	pd_add_value@d& (0+255),w,b
  6180  00031A  D8CD               	call	PL2	;call to abstracted procedure
  6181  00031C  D965               	call	PL56	;call to abstracted procedure
  6182  00031E  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6183  000320  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6184  000322  C07C  F082         	movff	??_pd_add_value+4,_pd_add_value$1082	;volatile
  6185  000326  C07D  F083         	movff	??_pd_add_value+5,_pd_add_value$1082+1	;volatile
  6186  00032A                     l750:
  6187                           
  6188                           ; BSR set to: 0
  6189  00032A  D927               	call	PL32	;call to abstracted procedure
  6190  00032C  5183               	movf	(_pd_add_value$1082+1)& (0+255),w,b	;volatile
  6191  00032E  0A80               	xorlw	128
  6192  000330  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6193  000332  5178               	movf	??_pd_add_value& (0+255),w,b
  6194  000334  5D82               	subwf	_pd_add_value$1082& (0+255),w,b	;volatile
  6195  000336  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6196  000338  0A80               	xorlw	128
  6197  00033A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6198  00033C  E24C               	bc	l742
  6199                           
  6200                           ; BSR set to: 0
  6201  00033E  D8ED               	call	PL10	;call to abstracted procedure
  6202  000340  D8CE               	call	PL4	;call to abstracted procedure
  6203  000342  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6204  000344  D95E               	call	PL66	;call to abstracted procedure
  6205  000346  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6206  000348  D013               	goto	l3616
  6207                           
  6208                           ; BSR set to: 0
  6209  00034A  EE20 F054          	lfsr	2,84
  6210  00034E  5174               	movf	pd_add_value@d& (0+255),w,b
  6211  000350  26D9               	addwf	fsr2l,f,c
  6212  000352  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6213  000354  22DA               	addwfc	fsr2h,f,c
  6214  000356  CFDE F078          	movff	postinc2,??_pd_add_value
  6215  00035A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6216  00035E  EE20 F05A          	lfsr	2,90
  6217  000362  5174               	movf	pd_add_value@d& (0+255),w,b
  6218  000364  D8BC               	call	PL4	;call to abstracted procedure
  6219  000366  6F84               	movwf	_pd_add_value$1083& (0+255),b	;volatile
  6220  000368  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6221  00036A  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6222  00036C  6F85               	movwf	(_pd_add_value$1083+1)& (0+255),b	;volatile
  6223  00036E  D009               	goto	l754
  6224  000370                     l3616:
  6225                           
  6226                           ; BSR set to: 0
  6227  000370  D8D4               	call	PL10	;call to abstracted procedure
  6228  000372  D8B5               	call	PL4	;call to abstracted procedure
  6229  000374  D939               	call	PL56	;call to abstracted procedure
  6230  000376  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6231  000378  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6232  00037A  C07C  F084         	movff	??_pd_add_value+4,_pd_add_value$1083	;volatile
  6233  00037E  C07D  F085         	movff	??_pd_add_value+5,_pd_add_value$1083+1	;volatile
  6234  000382                     l754:
  6235                           
  6236                           ; BSR set to: 0
  6237  000382  D8FB               	call	PL32	;call to abstracted procedure
  6238  000384  5185               	movf	(_pd_add_value$1083+1)& (0+255),w,b	;volatile
  6239  000386  0A80               	xorlw	128
  6240  000388  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6241  00038A  5178               	movf	??_pd_add_value& (0+255),w,b
  6242  00038C  5D84               	subwf	_pd_add_value$1083& (0+255),w,b	;volatile
  6243  00038E  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6244  000390  0A80               	xorlw	128
  6245  000392  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6246  000394  E220               	bc	l742
  6247                           
  6248                           ; BSR set to: 0
  6249                           ;peak_detector.c: 62: for (i = 0; i < d->config.lval_cnt; i++) {
  6250  000396  6B8A               	clrf	pd_add_value@i& (0+255),b
  6251  000398  D013               	goto	l3624
  6252  00039A                     l3620:
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;peak_detector.c: 63: d->last_v_buf[i] = d->cur_v;
  6256  00039A  EE20 F058          	lfsr	2,88
  6257  00039E  5174               	movf	pd_add_value@d& (0+255),w,b
  6258  0003A0  26D9               	addwf	fsr2l,f,c
  6259  0003A2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6260  0003A4  22DA               	addwfc	fsr2h,f,c
  6261  0003A6  518A               	movf	pd_add_value@i& (0+255),w,b
  6262  0003A8  0D02               	mullw	2
  6263  0003AA  50F3               	movf	prodl,w,c
  6264  0003AC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6265  0003AE  6EE1               	movwf	fsr1l,c
  6266  0003B0  50F4               	movf	prodh,w,c
  6267  0003B2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6268  0003B4  6EE2               	movwf	fsr1h,c
  6269  0003B6  CFDE FFE6          	movff	postinc2,postinc1
  6270  0003BA  CFDD FFE5          	movff	postdec2,postdec1
  6271                           
  6272                           ; BSR set to: 0
  6273  0003BE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6274  0003C0                     l3624:
  6275                           
  6276                           ; BSR set to: 0
  6277  0003C0  D8C9               	call	PL26	;call to abstracted procedure
  6278  0003C2  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6279  0003C4  E3EA               	bnc	l3620
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;peak_detector.c: 64: }
  6283                           ;peak_detector.c: 65: d->status.alarm = FALSE;
  6284  0003C6  EE20 F05E          	lfsr	2,94
  6285  0003CA  5174               	movf	pd_add_value@d& (0+255),w,b
  6286  0003CC  26D9               	addwf	fsr2l,f,c
  6287  0003CE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6288  0003D0  22DA               	addwfc	fsr2h,f,c
  6289  0003D2  0EFE               	movlw	-2
  6290  0003D4  16DF               	andwf	223,f,c
  6291  0003D6                     l742:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;peak_detector.c: 66: }
  6295                           ;peak_detector.c: 69: if (((d->wval)<0?(-(d->wval)):(d->wval)) < (10)) {
  6296  0003D6  D896               	call	PL8	;call to abstracted procedure
  6297  0003D8  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6298  0003DA  D00B               	goto	l3630
  6299                           
  6300                           ; BSR set to: 0
  6301  0003DC  EE20 F05C          	lfsr	2,92
  6302  0003E0  5174               	movf	pd_add_value@d& (0+255),w,b
  6303  0003E2  26D9               	addwf	fsr2l,f,c
  6304  0003E4  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6305  0003E6  22DA               	addwfc	fsr2h,f,c
  6306  0003E8  CFDE F086          	movff	postinc2,_pd_add_value$1084	;volatile
  6307  0003EC  CFDD F087          	movff	postdec2,_pd_add_value$1084+1	;volatile
  6308  0003F0  D00B               	goto	l3632
  6309  0003F2                     l3630:
  6310                           
  6311                           ; BSR set to: 0
  6312  0003F2  EE20 F05C          	lfsr	2,92
  6313  0003F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6314  0003F8  26D9               	addwf	fsr2l,f,c
  6315  0003FA  D87B               	call	PL6	;call to abstracted procedure
  6316  0003FC  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6317  0003FE  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6318  000400  C078  F086         	movff	??_pd_add_value,_pd_add_value$1084	;volatile
  6319  000404  C079  F087         	movff	??_pd_add_value+1,_pd_add_value$1084+1	;volatile
  6320  000408                     l3632:
  6321                           
  6322                           ; BSR set to: 0
  6323  000408  5187               	movf	(_pd_add_value$1084+1)& (0+255),w,b	;volatile
  6324  00040A  0A80               	xorlw	128
  6325  00040C  0F80               	addlw	-128
  6326  00040E  0E0A               	movlw	10
  6327  000410  B4D8               	btfsc	status,2,c
  6328  000412  5D86               	subwf	_pd_add_value$1084& (0+255),w,b	;volatile
  6329  000414  E24F               	bc	l3654
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;peak_detector.c: 70: if (d->ref_v_idx == 9) {
  6333  000416  EE20 F053          	lfsr	2,83
  6334  00041A  5174               	movf	pd_add_value@d& (0+255),w,b
  6335  00041C  26D9               	addwf	fsr2l,f,c
  6336  00041E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6337  000420  22DA               	addwfc	fsr2h,f,c
  6338  000422  0E09               	movlw	9
  6339  000424  62DF               	cpfseq	indf2,c
  6340  000426  D008               	goto	l3638
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;peak_detector.c: 71: d->status.firststart = FALSE;
  6344  000428  EE20 F05E          	lfsr	2,94
  6345  00042C  5174               	movf	pd_add_value@d& (0+255),w,b
  6346  00042E  26D9               	addwf	fsr2l,f,c
  6347  000430  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6348  000432  22DA               	addwfc	fsr2h,f,c
  6349  000434  0EFB               	movlw	-5
  6350  000436  16DF               	andwf	223,f,c
  6351  000438                     l3638:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;peak_detector.c: 72: }
  6355                           ;peak_detector.c: 75: d->ref_v_buf[d->ref_v_idx] = d->cur_v;
  6356  000438  EE20 F058          	lfsr	2,88
  6357  00043C  5174               	movf	pd_add_value@d& (0+255),w,b
  6358  00043E  D892               	call	PL28	;call to abstracted procedure
  6359  000440  D8B0               	call	PL38	;call to abstracted procedure
  6360  000442  6EE1               	movwf	fsr1l,c
  6361  000444  0E00               	movlw	0
  6362  000446  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6363  000448  6EE2               	movwf	fsr1h,c
  6364  00044A  CFDE FFE6          	movff	postinc2,postinc1
  6365  00044E  CFDD FFE5          	movff	postdec2,postdec1
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;peak_detector.c: 76: d->ref_v_idx = (d->ref_v_idx + 1) % d->config.rval_cnt;
  6369  000452  EE20 F053          	lfsr	2,83
  6370  000456  5174               	movf	pd_add_value@d& (0+255),w,b
  6371  000458  D885               	call	PL28	;call to abstracted procedure
  6372  00045A  6F78               	movwf	??_pd_add_value& (0+255),b
  6373  00045C  2978               	incf	??_pd_add_value& (0+255),w,b
  6374  00045E  6F6C               	movwf	?___awmod& (0+255),b
  6375  000460  6B6D               	clrf	(?___awmod+1)& (0+255),b
  6376  000462  0E00               	movlw	0
  6377  000464  236D               	addwfc	(?___awmod+1)& (0+255),f,b
  6378  000466  EE10 F064          	lfsr	1,100
  6379  00046A  5174               	movf	pd_add_value@d& (0+255),w,b
  6380  00046C  26E1               	addwf	fsr1l,f,c
  6381  00046E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6382  000470  22E2               	addwfc	fsr1h,f,c
  6383  000472  50E7               	movf	indf1,w,c
  6384  000474  6F6E               	movwf	(?___awmod+2)& (0+255),b
  6385  000476  6B6F               	clrf	(?___awmod+3)& (0+255),b
  6386  000478  EC0C  F00B         	call	___awmod	;wreg free
  6387  00047C  516C               	movf	?___awmod& (0+255),w,b
  6388  00047E  6EDF               	movwf	indf2,c
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;peak_detector.c: 79: tmp = 0;
  6392  000480  6B88               	clrf	pd_add_value@tmp& (0+255),b
  6393  000482  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;peak_detector.c: 80: for (i = 0; i < d->config.rval_cnt; i++) {
  6397  000484  6B8A               	clrf	pd_add_value@i& (0+255),b
  6398  000486  D007               	goto	l3650
  6399  000488                     l3646:
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;peak_detector.c: 81: tmp += d->ref_v_buf[i];
  6403  000488  518A               	movf	pd_add_value@i& (0+255),w,b
  6404  00048A  D88B               	call	PL38	;call to abstracted procedure
  6405  00048C  6ED9               	movwf	fsr2l,c
  6406  00048E  0E00               	movlw	0
  6407  000490  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6408  000492  6EDA               	movwf	fsr2h,c
  6409                           
  6410                           ; BSR set to: 0
  6411  000494  D8B0               	call	PL64	;call to abstracted procedure
  6412  000496                     l3650:
  6413                           
  6414                           ; BSR set to: 0
  6415  000496  D8A0               	call	PL52	;call to abstracted procedure
  6416  000498  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6417  00049A  E3F6               	bnc	l3646
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;peak_detector.c: 82: }
  6421                           ;peak_detector.c: 84: d->ref_v = tmp/d->config.rval_cnt;
  6422  00049C  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  6423  0004A0  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  6424  0004A4  D899               	call	PL52	;call to abstracted procedure
  6425  0004A6  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  6426  0004A8  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  6427  0004AA  EC5B  F00A         	call	___awdiv	;wreg free
  6428  0004AE  EE20 F054          	lfsr	2,84
  6429  0004B2  D86E               	call	PL34	;call to abstracted procedure
  6430  0004B4                     l3654:
  6431                           
  6432                           ; BSR set to: 0
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;peak_detector.c: 85: }
  6436                           ;peak_detector.c: 87: return FALSE;
  6437  0004B4  0C00               	retlw	0
  6438  0004B6                     __end_of_pd_add_value:
  6439                           	opt stack 0
  6440  0004B6                     PL2:
  6441                           	opt stack 23
  6442  0004B6  26D9               	addwf	fsr2l,f,c
  6443  0004B8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6444  0004BA  22DA               	addwfc	fsr2h,f,c
  6445  0004BC  CFDE F078          	movff	postinc2,??_pd_add_value
  6446  0004C0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6447  0004C4  EE20 F058          	lfsr	2,88
  6448  0004C8  5174               	movf	pd_add_value@d& (0+255),w,b
  6449  0004CA  26D9               	addwf	fsr2l,f,c
  6450  0004CC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6451  0004CE  22DA               	addwfc	fsr2h,f,c
  6452  0004D0  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6453  0004D4  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6454  0004D8  5178               	movf	??_pd_add_value& (0+255),w,b
  6455  0004DA  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6456  0004DC  0012               	return	
  6457  0004DE                     __end_ofPL2:
  6458                           	opt stack 0
  6459  0004DE                     PL4:
  6460                           	opt stack 23
  6461  0004DE  26D9               	addwf	fsr2l,f,c
  6462  0004E0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6463  0004E2  22DA               	addwfc	fsr2h,f,c
  6464  0004E4  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6465  0004E8  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6466  0004EC  5178               	movf	??_pd_add_value& (0+255),w,b
  6467  0004EE  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6468  0004F0  0012               	return	
  6469  0004F2                     __end_ofPL4:
  6470                           	opt stack 0
  6471  0004F2                     PL6:
  6472                           	opt stack 23
  6473  0004F2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6474  0004F4  22DA               	addwfc	fsr2h,f,c
  6475  0004F6  CFDE F078          	movff	postinc2,??_pd_add_value
  6476  0004FA  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6477  0004FE  1F78               	comf	??_pd_add_value& (0+255),f,b
  6478  000500  1F79               	comf	(??_pd_add_value+1)& (0+255),f,b
  6479  000502  0012               	return	
  6480  000504                     __end_ofPL6:
  6481                           	opt stack 0
  6482  000504                     PL8:
  6483                           	opt stack 23
  6484  000504  EE20 F05C          	lfsr	2,92
  6485  000508  5174               	movf	pd_add_value@d& (0+255),w,b
  6486  00050A  26D9               	addwf	fsr2l,f,c
  6487  00050C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6488  00050E  22DA               	addwfc	fsr2h,f,c
  6489  000510  CFDE F078          	movff	postinc2,??_pd_add_value
  6490  000514  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6491  000518  0012               	return	
  6492  00051A                     __end_ofPL8:
  6493                           	opt stack 0
  6494  00051A                     PL10:
  6495                           	opt stack 23
  6496  00051A  EE20 F054          	lfsr	2,84
  6497  00051E  5174               	movf	pd_add_value@d& (0+255),w,b
  6498  000520  26D9               	addwf	fsr2l,f,c
  6499  000522  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6500  000524  22DA               	addwfc	fsr2h,f,c
  6501  000526  CFDE F078          	movff	postinc2,??_pd_add_value
  6502  00052A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6503  00052E  EE20 F05A          	lfsr	2,90
  6504  000532  5174               	movf	pd_add_value@d& (0+255),w,b
  6505  000534  0012               	return	
  6506  000536                     __end_ofPL10:
  6507                           	opt stack 0
  6508  000536                     PL24:
  6509                           	opt stack 23
  6510  000536  5174               	movf	pd_add_value@d& (0+255),w,b
  6511  000538  26E1               	addwf	fsr1l,f,c
  6512  00053A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6513  00053C  22E2               	addwfc	fsr1h,f,c
  6514  00053E  CFDE FFE6          	movff	postinc2,postinc1
  6515  000542  CFDD FFE5          	movff	postdec2,postdec1
  6516  000546  EE20 F05A          	lfsr	2,90
  6517  00054A  5174               	movf	pd_add_value@d& (0+255),w,b
  6518  00054C  26D9               	addwf	fsr2l,f,c
  6519  00054E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6520  000550  22DA               	addwfc	fsr2h,f,c
  6521  000552  0012               	return	
  6522  000554                     __end_ofPL24:
  6523                           	opt stack 0
  6524  000554                     PL26:
  6525                           	opt stack 23
  6526  000554  EE20 F063          	lfsr	2,99
  6527  000558  5174               	movf	pd_add_value@d& (0+255),w,b
  6528  00055A  26D9               	addwf	fsr2l,f,c
  6529  00055C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6530  00055E  22DA               	addwfc	fsr2h,f,c
  6531  000560  50DF               	movf	indf2,w,c
  6532  000562  0012               	return	
  6533  000564                     __end_ofPL26:
  6534                           	opt stack 0
  6535  000564                     PL28:
  6536                           	opt stack 23
  6537  000564  26D9               	addwf	fsr2l,f,c
  6538  000566  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6539  000568  22DA               	addwfc	fsr2h,f,c
  6540  00056A  EE10 F053          	lfsr	1,83
  6541  00056E  5174               	movf	pd_add_value@d& (0+255),w,b
  6542  000570  26E1               	addwf	fsr1l,f,c
  6543  000572  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6544  000574  22E2               	addwfc	fsr1h,f,c
  6545  000576  50E7               	movf	indf1,w,c
  6546  000578  0012               	return	
  6547  00057A                     __end_ofPL28:
  6548                           	opt stack 0
  6549  00057A                     PL32:
  6550                           	opt stack 23
  6551  00057A  EE20 F061          	lfsr	2,97
  6552  00057E  5174               	movf	pd_add_value@d& (0+255),w,b
  6553  000580  26D9               	addwf	fsr2l,f,c
  6554  000582  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6555  000584  22DA               	addwfc	fsr2h,f,c
  6556  000586  CFDE F078          	movff	postinc2,??_pd_add_value
  6557  00058A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6558  00058E  0012               	return	
  6559  000590                     __end_ofPL32:
  6560                           	opt stack 0
  6561  000590                     PL34:
  6562                           	opt stack 23
  6563  000590  5174               	movf	pd_add_value@d& (0+255),w,b
  6564  000592  26D9               	addwf	fsr2l,f,c
  6565  000594  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6566  000596  22DA               	addwfc	fsr2h,f,c
  6567  000598  C06C  FFDE         	movff	?___awdiv,postinc2
  6568  00059C  C06D  FFDD         	movff	?___awdiv+1,postdec2
  6569  0005A0  0012               	return	
  6570  0005A2                     __end_ofPL34:
  6571                           	opt stack 0
  6572  0005A2                     PL38:
  6573                           	opt stack 23
  6574  0005A2  0D02               	mullw	2
  6575  0005A4  50F3               	movf	prodl,w,c
  6576  0005A6  2574               	addwf	pd_add_value@d& (0+255),w,b
  6577  0005A8  6F78               	movwf	??_pd_add_value& (0+255),b
  6578  0005AA  50F4               	movf	prodh,w,c
  6579  0005AC  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6580  0005AE  6F79               	movwf	(??_pd_add_value+1)& (0+255),b
  6581  0005B0  0E2B               	movlw	43
  6582  0005B2  2578               	addwf	??_pd_add_value& (0+255),w,b
  6583  0005B4  0012               	return	
  6584  0005B6                     __end_ofPL38:
  6585                           	opt stack 0
  6586  0005B6                     PL46:
  6587                           	opt stack 23
  6588  0005B6  EE20 F05E          	lfsr	2,94
  6589  0005BA  5174               	movf	pd_add_value@d& (0+255),w,b
  6590  0005BC  26D9               	addwf	fsr2l,f,c
  6591  0005BE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6592  0005C0  22DA               	addwfc	fsr2h,f,c
  6593  0005C2  50DF               	movf	indf2,w,c
  6594  0005C4  6F78               	movwf	??_pd_add_value& (0+255),b
  6595  0005C6  0012               	return	
  6596  0005C8                     __end_ofPL46:
  6597                           	opt stack 0
  6598  0005C8                     PL48:
  6599                           	opt stack 23
  6600  0005C8  0D02               	mullw	2
  6601  0005CA  50F3               	movf	prodl,w,c
  6602  0005CC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6603  0005CE  6ED9               	movwf	fsr2l,c
  6604  0005D0  50F4               	movf	prodh,w,c
  6605  0005D2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6606  0005D4  6EDA               	movwf	fsr2h,c
  6607  0005D6  0012               	return	
  6608  0005D8                     __end_ofPL48:
  6609                           	opt stack 0
  6610  0005D8                     PL52:
  6611                           	opt stack 23
  6612  0005D8  EE20 F064          	lfsr	2,100
  6613  0005DC  5174               	movf	pd_add_value@d& (0+255),w,b
  6614  0005DE  26D9               	addwf	fsr2l,f,c
  6615  0005E0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6616  0005E2  22DA               	addwfc	fsr2h,f,c
  6617  0005E4  50DF               	movf	indf2,w,c
  6618  0005E6  0012               	return	
  6619  0005E8                     __end_ofPL52:
  6620                           	opt stack 0
  6621  0005E8                     PL56:
  6622                           	opt stack 23
  6623  0005E8  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6624  0005EA  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6625  0005EC  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6626  0005EE  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6627  0005F0  1F7C               	comf	(??_pd_add_value+4)& (0+255),f,b
  6628  0005F2  1F7D               	comf	(??_pd_add_value+5)& (0+255),f,b
  6629  0005F4  0012               	return	
  6630  0005F6                     __end_ofPL56:
  6631                           	opt stack 0
  6632  0005F6                     PL64:
  6633                           	opt stack 23
  6634  0005F6  50DE               	movf	postinc2,w,c
  6635  0005F8  2788               	addwf	pd_add_value@tmp& (0+255),f,b
  6636  0005FA  50DD               	movf	postdec2,w,c
  6637  0005FC  2389               	addwfc	(pd_add_value@tmp+1)& (0+255),f,b
  6638  0005FE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6639  000600  0012               	return	
  6640  000602                     __end_ofPL64:
  6641                           	opt stack 0
  6642  000602                     PL66:
  6643                           	opt stack 23
  6644  000602  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6645  000604  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6646  000606  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6647  000608  0012               	return	
  6648  00060A                     __end_ofPL66:
  6649                           	opt stack 0
  6650                           tosu	equ	0xFFF
  6651                           tosh	equ	0xFFE
  6652                           tosl	equ	0xFFD
  6653                           pclath	equ	0xFFA
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           intcon	equ	0xFF2
  6661                           indf0	equ	0xFEF
  6662                           postinc0	equ	0xFEE
  6663                           fsr0h	equ	0xFEA
  6664                           fsr0l	equ	0xFE9
  6665                           wreg	equ	0xFE8
  6666                           indf1	equ	0xFE7
  6667                           postinc1	equ	0xFE6
  6668                           postdec1	equ	0xFE5
  6669                           fsr1h	equ	0xFE2
  6670                           fsr1l	equ	0xFE1
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _printf *****************
  6679 ;; Defined at:
  6680 ;;		line 465 in file "C:\Program Files\Microchip\xc8\v1.12\sources\doprnt.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  6683 ;;		 -> STR_1(28), 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  _val            5   43[BANK0 ] struct .
  6686 ;;  c               1   48[BANK0 ] char 
  6687 ;;  prec            1   42[BANK0 ] char 
  6688 ;;  flag            1   41[BANK0 ] unsigned char 
  6689 ;;  ap              1   40[BANK0 ] PTR void [1]
  6690 ;;		 -> ?_printf(2), 
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  2   30[BANK0 ] int 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : F/0
  6697 ;;		On exit  : F/0
  6698 ;;		Unchanged: FFFFFFF0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6700 ;;      Params:         0       8       0       0       0       0       0
  6701 ;;      Locals:         0       9       0       0       0       0       0
  6702 ;;      Temps:          0       2       0       0       0       0       0
  6703 ;;      Totals:         0      19       0       0       0       0       0
  6704 ;;Total ram usage:       19 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    7
  6707 ;; This function calls:
  6708 ;;		_putch
  6709 ;;		___lwdiv
  6710 ;;		___lwmod
  6711 ;; This function is called by:
  6712 ;;		_on_parameter_found
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text23
  6717  000D66                     __ptext23:
  6718                           	opt stack 0
  6719  000D66                     _printf:
  6720                           	opt stack 20
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;doprnt.c: 466: va_list ap;
  6724                           ;doprnt.c: 499: signed char c;
  6725                           ;doprnt.c: 506: signed char prec;
  6726                           ;doprnt.c: 508: unsigned char flag;
  6727                           ;doprnt.c: 527: union {
  6728                           ;doprnt.c: 528: unsigned int _val;
  6729                           ;doprnt.c: 529: struct {
  6730                           ;doprnt.c: 530: const char * _cp;
  6731                           ;doprnt.c: 531: unsigned _len;
  6732                           ;doprnt.c: 532: } _str;
  6733                           ;doprnt.c: 533: } _val;
  6734                           ;doprnt.c: 542: *ap = __va_start();
  6735                           
  6736                           ; BSR set to: 0
  6737  000D66  0E80               	movlw	low (?_printf+2)
  6738  000D68  6F88               	movwf	printf@ap& (0+255),b
  6739                           
  6740                           ;doprnt.c: 545: while(c = *f++) {
  6741  000D6A  D05C               	goto	l5560
  6742  000D6C                     l5516:
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;doprnt.c: 547: if(c != '%')
  6746  000D6C  5190               	movf	printf@c& (0+255),w,b
  6747  000D6E  0A25               	xorlw	37
  6748  000D70  E004               	bz	l1044
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;doprnt.c: 549: {
  6752                           ;doprnt.c: 550: (putch(c) );
  6753  000D72  5190               	movf	printf@c& (0+255),w,b
  6754  000D74  ECF6  F00D         	call	_putch
  6755                           
  6756                           ;doprnt.c: 551: continue;
  6757  000D78  D055               	goto	l5560
  6758  000D7A                     l1044:
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;doprnt.c: 552: }
  6762                           ;doprnt.c: 557: flag = 0;
  6763  000D7A  6B89               	clrf	printf@flag& (0+255),b
  6764                           
  6765                           ; BSR set to: 0
  6766                           
  6767                           ;doprnt.c: 644: switch(c = *f++) {
  6768  000D7C  D857               	call	PL30	;call to abstracted procedure
  6769  000D7E  5190               	movf	printf@c& (0+255),w,b
  6770                           
  6771                           ; Switch size 1, requested type "space"
  6772                           ; Number of cases is 3, Range of values is 0 to 105
  6773                           ; switch strategies available:
  6774                           ; Name         Instructions Cycles
  6775                           ; simple_byte           10     6 (average)
  6776                           ;	Chosen strategy is simple_byte
  6777  000D80  B4D8               	btfsc	status,2,c
  6778  000D82  0012               	return	
  6779  000D84  0A64               	xorlw	100	; case 100
  6780  000D86  A4D8               	btfss	status,2,c
  6781  000D88  0A0D               	xorlw	13	; case 105
  6782  000D8A  E14C               	bnz	l5560
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;doprnt.c: 1260: {
  6786                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6787  000D8C  5188               	movf	printf@ap& (0+255),w,b
  6788  000D8E  6ED9               	movwf	fsr2l,c
  6789  000D90  6ADA               	clrf	fsr2h,c
  6790  000D92  CFDE F08B          	movff	postinc2,printf@_val
  6791  000D96  CFDD F08C          	movff	postdec2,printf@_val+1
  6792                           
  6793                           ; BSR set to: 0
  6794  000D9A  0E02               	movlw	2
  6795  000D9C  2788               	addwf	printf@ap& (0+255),f,b
  6796                           
  6797                           ; BSR set to: 0
  6798                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  6799  000D9E  AF8C               	btfss	(printf@_val+1)& (0+255),7,b
  6800  000DA0  D006               	goto	l5534
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;doprnt.c: 1269: flag |= 0x03;
  6804  000DA2  0E03               	movlw	3
  6805  000DA4  1389               	iorwf	printf@flag& (0+255),f,b
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;doprnt.c: 1270: _val._val = -_val._val;
  6809  000DA6  6D8B               	negf	printf@_val& (0+255),b
  6810  000DA8  1F8C               	comf	(printf@_val+1)& (0+255),f,b
  6811  000DAA  B0D8               	btfsc	status,0,c
  6812  000DAC  2B8C               	incf	(printf@_val+1)& (0+255),f,b
  6813  000DAE                     l5534:
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;doprnt.c: 1271: }
  6817                           ;doprnt.c: 1273: }
  6818                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6819  000DAE  0E01               	movlw	1
  6820  000DB0  6F90               	movwf	printf@c& (0+255),b
  6821  000DB2                     l5540:
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  6825  000DB2  5190               	movf	printf@c& (0+255),w,b
  6826  000DB4  D846               	call	PL42	;call to abstracted procedure
  6827  000DB6  CFF5 F086          	movff	tablat,??_printf
  6828  000DBA  0009               	tblrd		*+
  6829  000DBC  CFF5 F087          	movff	tablat,??_printf+1
  6830  000DC0  5186               	movf	??_printf& (0+255),w,b
  6831  000DC2  5D8B               	subwf	printf@_val& (0+255),w,b
  6832  000DC4  5187               	movf	(??_printf+1)& (0+255),w,b
  6833  000DC6  598C               	subwfb	(printf@_val+1)& (0+255),w,b
  6834  000DC8  E304               	bnc	l5548
  6835                           
  6836                           ; BSR set to: 0
  6837  000DCA  2B90               	incf	printf@c& (0+255),f,b
  6838                           
  6839                           ; BSR set to: 0
  6840  000DCC  5190               	movf	printf@c& (0+255),w,b
  6841  000DCE  0A05               	xorlw	5
  6842  000DD0  E1F0               	bnz	l5540
  6843  000DD2                     l5548:
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;doprnt.c: 1429: {
  6847                           ;doprnt.c: 1445: if(flag & 0x03)
  6848  000DD2  5189               	movf	printf@flag& (0+255),w,b
  6849  000DD4  0B03               	andlw	3
  6850  000DD6  E003               	bz	l5552
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;doprnt.c: 1446: (putch('-') );
  6854  000DD8  0E2D               	movlw	45
  6855  000DDA  ECF6  F00D         	call	_putch
  6856  000DDE                     l5552:
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;doprnt.c: 1476: }
  6860                           ;doprnt.c: 1479: prec = c;
  6861  000DDE  C090  F08A         	movff	printf@c,printf@prec
  6862                           
  6863                           ;doprnt.c: 1481: while(prec--) {
  6864  000DE2  D01C               	goto	l5558
  6865  000DE4                     l5554:
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;doprnt.c: 1485: {
  6869                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  6870  000DE4  518A               	movf	printf@prec& (0+255),w,b
  6871  000DE6  D82D               	call	PL42	;call to abstracted procedure
  6872  000DE8  CFF5 F06E          	movff	tablat,?___lwdiv+2
  6873  000DEC  000A               	tblrd		*-
  6874  000DEE  CFF5 F06F          	movff	tablat,?___lwdiv+3
  6875  000DF2  C08B  F06C         	movff	printf@_val,?___lwdiv
  6876  000DF6  C08C  F06D         	movff	printf@_val+1,?___lwdiv+1
  6877  000DFA  EC4A  F00C         	call	___lwdiv	;wreg free
  6878  000DFE  C06C  F073         	movff	?___lwdiv,?___lwmod
  6879  000E02  C06D  F074         	movff	?___lwdiv+1,?___lwmod+1
  6880  000E06  6B76               	clrf	(?___lwmod+3)& (0+255),b
  6881  000E08  0E0A               	movlw	10
  6882  000E0A  6F75               	movwf	(?___lwmod+2)& (0+255),b
  6883  000E0C  ECF6  F00C         	call	___lwmod	;wreg free
  6884  000E10  5173               	movf	?___lwmod& (0+255),w,b
  6885  000E12  0F30               	addlw	48
  6886  000E14  6F90               	movwf	printf@c& (0+255),b
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;doprnt.c: 1530: }
  6890                           ;doprnt.c: 1531: (putch(c) );
  6891  000E16  5190               	movf	printf@c& (0+255),w,b
  6892  000E18  ECF6  F00D         	call	_putch
  6893  000E1C                     l5558:
  6894                           
  6895                           ; BSR set to: 0
  6896  000E1C  078A               	decf	printf@prec& (0+255),f,b
  6897  000E1E  0100               	movlb	0	; () banked
  6898  000E20  298A               	incf	printf@prec& (0+255),w,b
  6899  000E22  E1E0               	bnz	l5554
  6900  000E24                     l5560:
  6901                           
  6902                           ; BSR set to: 0
  6903  000E24  D803               	call	PL30	;call to abstracted procedure
  6904  000E26  6790               	tstfsz	printf@c& (0+255),b
  6905  000E28  D7A1               	goto	l5516
  6906  000E2A  0012               	return	
  6907  000E2C                     __end_of_printf:
  6908                           	opt stack 0
  6909  000E2C                     PL30:
  6910                           	opt stack 20
  6911  000E2C  C07E  FFF6         	movff	printf@f,tblptrl
  6912  000E30  C07F  FFF7         	movff	printf@f+1,tblptrh
  6913  000E34  4B7E               	infsnz	printf@f& (0+255),f,b
  6914  000E36  2B7F               	incf	(printf@f+1)& (0+255),f,b
  6915  000E38  0008               	tblrd		*
  6916  000E3A  CFF5 F090          	movff	tablat,printf@c
  6917  000E3E  0100               	movlb	0	; () banked
  6918  000E40  0012               	return	
  6919  000E42                     __end_ofPL30:
  6920                           	opt stack 0
  6921  000E42                     PL42:
  6922                           	opt stack 20
  6923  000E42  0D02               	mullw	2
  6924  000E44  0EB2               	movlw	low _dpowers
  6925  000E46  24F3               	addwf	prodl,w,c
  6926  000E48  6EF6               	movwf	tblptrl,c
  6927  000E4A  0E7D               	movlw	high _dpowers
  6928  000E4C  20F4               	addwfc	prodh,w,c
  6929  000E4E  6EF7               	movwf	tblptrh,c
  6930  000E50  0009               	tblrd		*+
  6931  000E52  0012               	return	
  6932  000E54                     __end_ofPL42:
  6933                           	opt stack 0
  6934                           tosu	equ	0xFFF
  6935                           tosh	equ	0xFFE
  6936                           tosl	equ	0xFFD
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           indf0	equ	0xFEF
  6946                           postinc0	equ	0xFEE
  6947                           fsr0h	equ	0xFEA
  6948                           fsr0l	equ	0xFE9
  6949                           wreg	equ	0xFE8
  6950                           indf1	equ	0xFE7
  6951                           postinc1	equ	0xFE6
  6952                           postdec1	equ	0xFE5
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function _putch *****************
  6963 ;; Defined at:
  6964 ;;		line 56 in file "src/modules/serialport.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  byte            1    wreg     unsigned char 
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  byte            1   29[BANK0 ] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6973 ;; Tracked objects:
  6974 ;;		On entry : F/0
  6975 ;;		On exit  : F/0
  6976 ;;		Unchanged: FFFFFFF0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6978 ;;      Params:         0       0       0       0       0       0       0
  6979 ;;      Locals:         0       1       0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0
  6981 ;;      Totals:         0       1       0       0       0       0       0
  6982 ;;Total ram usage:        1 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    6
  6985 ;; This function calls:
  6986 ;;		_rd_buffer_put
  6987 ;; This function is called by:
  6988 ;;		_printf
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text24
  6993  001BEC                     __ptext24:
  6994                           	opt stack 0
  6995  001BEC                     _putch:
  6996                           	opt stack 20
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;putch@byte stored from wreg
  7000  001BEC  CFE8 F07D          	movff	wreg,putch@byte
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;serialport.c: 57: rd_buffer_put(&g_tx_buffer, &byte);
  7004  001BF0  0E01               	movlw	high _g_tx_buffer
  7005  001BF2  0100               	movlb	0	; () banked
  7006  001BF4  6F6D               	movwf	(?_rd_buffer_put+1)& (0+255),b
  7007  001BF6  0E00               	movlw	low _g_tx_buffer
  7008  001BF8  6F6C               	movwf	?_rd_buffer_put& (0+255),b
  7009  001BFA  0E00               	movlw	high putch@byte
  7010  001BFC  6F6F               	movwf	(?_rd_buffer_put+3)& (0+255),b
  7011  001BFE  0E7D               	movlw	low putch@byte
  7012  001C00  6F6E               	movwf	(?_rd_buffer_put+2)& (0+255),b
  7013  001C02  EF68  F005         	goto	_rd_buffer_put	;wreg free
  7014  001C06                     __end_of_putch:
  7015                           	opt stack 0
  7016                           tosu	equ	0xFFF
  7017                           tosh	equ	0xFFE
  7018                           tosl	equ	0xFFD
  7019                           pclath	equ	0xFFA
  7020                           tblptru	equ	0xFF8
  7021                           tblptrh	equ	0xFF7
  7022                           tblptrl	equ	0xFF6
  7023                           tablat	equ	0xFF5
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           indf0	equ	0xFEF
  7028                           postinc0	equ	0xFEE
  7029                           fsr0h	equ	0xFEA
  7030                           fsr0l	equ	0xFE9
  7031                           wreg	equ	0xFE8
  7032                           indf1	equ	0xFE7
  7033                           postinc1	equ	0xFE6
  7034                           postdec1	equ	0xFE5
  7035                           fsr1h	equ	0xFE2
  7036                           fsr1l	equ	0xFE1
  7037                           indf2	equ	0xFDF
  7038                           postinc2	equ	0xFDE
  7039                           postdec2	equ	0xFDD
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044 ;; *************** function _set_parameter *****************
  7045 ;; Defined at:
  7046 ;;		line 44 in file "src/modules/on_parameter_found.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  p_id            1    wreg     char 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  p_id            1   31[BANK0 ] char 
  7051 ;;  ok              1   32[BANK0 ] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  1    wreg      unsigned char 
  7054 ;; Registers used:
  7055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7056 ;; Tracked objects:
  7057 ;;		On entry : F/0
  7058 ;;		On exit  : F/0
  7059 ;;		Unchanged: FFFFFFF0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7061 ;;      Params:         0       0       0       0       0       0       0
  7062 ;;      Locals:         0       2       0       0       0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0
  7064 ;;      Totals:         0       2       0       0       0       0       0
  7065 ;;Total ram usage:        2 bytes
  7066 ;; Hardware stack levels used:    1
  7067 ;; Hardware stack levels required when called:    7
  7068 ;; This function calls:
  7069 ;;		_syntax_as_integer
  7070 ;;		_syntax_get_text
  7071 ;;		_serialport_write
  7072 ;; This function is called by:
  7073 ;;		_on_parameter_found
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           	psect	text25
  7078  00120E                     __ptext25:
  7079                           	opt stack 0
  7080  00120E                     _set_parameter:
  7081                           	opt stack 20
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;set_parameter@p_id stored from wreg
  7085  00120E  CFE8 F07F          	movff	wreg,set_parameter@p_id
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;on_parameter_found.c: 45: CHAR ok = FALSE;
  7089  001212  6B80               	clrf	set_parameter@ok& (0+255),b
  7090                           
  7091                           ;on_parameter_found.c: 46: switch (p_id )
  7092  001214  D008               	goto	l5570
  7093  001216                     l5564:
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;on_parameter_found.c: 53: LATD = syntax_as_integer()&0x0f;
  7097  001216  EC47  F00E         	call	_syntax_as_integer	;wreg free
  7098  00121A  516C               	movf	?_syntax_as_integer& (0+255),w,b
  7099  00121C  0B0F               	andlw	15
  7100  00121E  6E8C               	movwf	3980,c	;volatile
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;on_parameter_found.c: 54: ok = TRUE;
  7104  001220  0E01               	movlw	1
  7105  001222  6F80               	movwf	set_parameter@ok& (0+255),b
  7106                           
  7107                           ;on_parameter_found.c: 55: break;
  7108  001224  D021               	goto	l5572
  7109  001226                     l5570:
  7110                           
  7111                           ; BSR set to: 0
  7112  001226  517F               	movf	set_parameter@p_id& (0+255),w,b
  7113                           
  7114                           ; Switch size 1, requested type "space"
  7115                           ; Number of cases is 17, Range of values is 0 to 22
  7116                           ; switch strategies available:
  7117                           ; Name         Instructions Cycles
  7118                           ; simple_byte           52    27 (average)
  7119                           ;	Chosen strategy is simple_byte
  7120  001228  E01F               	bz	l5572
  7121  00122A  0A03               	xorlw	3	; case 3
  7122  00122C  E0F4               	bz	l5564
  7123  00122E  0A0A               	xorlw	10	; case 9
  7124  001230  E01B               	bz	l5572
  7125  001232  0A03               	xorlw	3	; case 10
  7126  001234  E019               	bz	l5572
  7127  001236  0A00               	xorlw	0	; case 10
  7128  001238  E017               	bz	l5572
  7129  00123A  0A01               	xorlw	1	; case 11
  7130  00123C  E015               	bz	l5572
  7131  00123E  0A07               	xorlw	7	; case 12
  7132  001240  E013               	bz	l5572
  7133  001242  0A01               	xorlw	1	; case 13
  7134  001244  E011               	bz	l5572
  7135  001246  0A03               	xorlw	3	; case 14
  7136  001248  E00F               	bz	l5572
  7137  00124A  0A01               	xorlw	1	; case 15
  7138  00124C  E00D               	bz	l5572
  7139  00124E  0A1F               	xorlw	31	; case 16
  7140  001250  E00B               	bz	l5572
  7141  001252  0A01               	xorlw	1	; case 17
  7142  001254  E009               	bz	l5572
  7143  001256  0A03               	xorlw	3	; case 18
  7144  001258  E007               	bz	l5572
  7145  00125A  0A01               	xorlw	1	; case 19
  7146  00125C  E005               	bz	l5572
  7147  00125E  0A07               	xorlw	7	; case 20
  7148  001260  A4D8               	btfss	status,2,c
  7149  001262  0A01               	xorlw	1	; case 21
  7150  001264  A4D8               	btfss	status,2,c
  7151  001266  0A03               	xorlw	3	; case 22
  7152  001268                     l5572:
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;on_parameter_found.c: 105: serialport_write( syntax_get_text() );
  7156  001268  EC41  F00E         	call	_syntax_get_text	;wreg free
  7157  00126C  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  7158  001270  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  7159  001274  0100               	movlb	0	; () banked
  7160  001276  EC25  F00C         	call	_serialport_write	;wreg free
  7161                           
  7162                           ;on_parameter_found.c: 106: if( ok )
  7163  00127A  0100               	movlb	0	; () banked
  7164  00127C  5180               	movf	set_parameter@ok& (0+255),w,b
  7165  00127E  E007               	bz	l5578
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;on_parameter_found.c: 107: {
  7169                           ;on_parameter_found.c: 108: serialport_write( ":ok " );
  7170  001280  0E7F               	movlw	high STR_3
  7171  001282  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7172  001284  0EF9               	movlw	low STR_3
  7173  001286  6F7D               	movwf	?_serialport_write& (0+255),b
  7174  001288  EC25  F00C         	call	_serialport_write	;wreg free
  7175                           
  7176                           ;on_parameter_found.c: 109: }
  7177  00128C  D006               	goto	l5580
  7178  00128E                     l5578:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;on_parameter_found.c: 110: else
  7182                           ;on_parameter_found.c: 111: {
  7183                           ;on_parameter_found.c: 112: serialport_write( ":err " );
  7184  00128E  0E7F               	movlw	high STR_4
  7185  001290  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7186  001292  0EEE               	movlw	low STR_4
  7187  001294  6F7D               	movwf	?_serialport_write& (0+255),b
  7188  001296  EC25  F00C         	call	_serialport_write	;wreg free
  7189  00129A                     l5580:
  7190                           
  7191                           ;on_parameter_found.c: 113: }
  7192                           ;on_parameter_found.c: 114: return ok;
  7193  00129A  0100               	movlb	0	; () banked
  7194  00129C  5180               	movf	set_parameter@ok& (0+255),w,b
  7195                           
  7196                           ; BSR set to: 0
  7197  00129E  0012               	return	
  7198  0012A0                     __end_of_set_parameter:
  7199                           	opt stack 0
  7200                           tosu	equ	0xFFF
  7201                           tosh	equ	0xFFE
  7202                           tosl	equ	0xFFD
  7203                           pclath	equ	0xFFA
  7204                           tblptru	equ	0xFF8
  7205                           tblptrh	equ	0xFF7
  7206                           tblptrl	equ	0xFF6
  7207                           tablat	equ	0xFF5
  7208                           prodh	equ	0xFF4
  7209                           prodl	equ	0xFF3
  7210                           intcon	equ	0xFF2
  7211                           indf0	equ	0xFEF
  7212                           postinc0	equ	0xFEE
  7213                           fsr0h	equ	0xFEA
  7214                           fsr0l	equ	0xFE9
  7215                           wreg	equ	0xFE8
  7216                           indf1	equ	0xFE7
  7217                           postinc1	equ	0xFE6
  7218                           postdec1	equ	0xFE5
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           fsr2h	equ	0xFDA
  7225                           fsr2l	equ	0xFD9
  7226                           status	equ	0xFD8
  7227                           
  7228 ;; *************** function _syntax_as_integer *****************
  7229 ;; Defined at:
  7230 ;;		line 200 in file "src/modules/syntax.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;		None
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;		None
  7235 ;; Return value:  Size  Location     Type
  7236 ;;                  2   12[BANK0 ] int 
  7237 ;; Registers used:
  7238 ;;		None
  7239 ;; Tracked objects:
  7240 ;;		On entry : F/0
  7241 ;;		On exit  : F/0
  7242 ;;		Unchanged: FFFFFFF0/0
  7243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7244 ;;      Params:         0       2       0       0       0       0       0
  7245 ;;      Locals:         0       0       0       0       0       0       0
  7246 ;;      Temps:          0       0       0       0       0       0       0
  7247 ;;      Totals:         0       2       0       0       0       0       0
  7248 ;;Total ram usage:        2 bytes
  7249 ;; Hardware stack levels used:    1
  7250 ;; Hardware stack levels required when called:    5
  7251 ;; This function calls:
  7252 ;;		Nothing
  7253 ;; This function is called by:
  7254 ;;		_set_parameter
  7255 ;; This function uses a non-reentrant model
  7256 ;;
  7257                           
  7258                           	psect	text26
  7259  001C8E                     __ptext26:
  7260                           	opt stack 0
  7261  001C8E                     _syntax_as_integer:
  7262                           	opt stack 21
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;syntax.c: 201: return *((INT16*)parameter_value);
  7266                           
  7267                           ; BSR set to: 0
  7268  001C8E  C200  F06C         	movff	_parameter_value,?_syntax_as_integer
  7269  001C92  C201  F06D         	movff	_parameter_value+1,?_syntax_as_integer+1
  7270                           
  7271                           ; BSR set to: 0
  7272  001C96  0012               	return	
  7273  001C98                     __end_of_syntax_as_integer:
  7274                           	opt stack 0
  7275                           tosu	equ	0xFFF
  7276                           tosh	equ	0xFFE
  7277                           tosl	equ	0xFFD
  7278                           pclath	equ	0xFFA
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           prodh	equ	0xFF4
  7284                           prodl	equ	0xFF3
  7285                           intcon	equ	0xFF2
  7286                           indf0	equ	0xFEF
  7287                           postinc0	equ	0xFEE
  7288                           fsr0h	equ	0xFEA
  7289                           fsr0l	equ	0xFE9
  7290                           wreg	equ	0xFE8
  7291                           indf1	equ	0xFE7
  7292                           postinc1	equ	0xFE6
  7293                           postdec1	equ	0xFE5
  7294                           fsr1h	equ	0xFE2
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _get_parameter *****************
  7304 ;; Defined at:
  7305 ;;		line 117 in file "src/modules/on_parameter_found.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  p_id            1    wreg     char 
  7308 ;; Auto vars:     Size  Location     Type
  7309 ;;  p_id            1   31[BANK0 ] char 
  7310 ;;  ok              1    0        unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      unsigned char 
  7313 ;; Registers used:
  7314 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : F/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: FFFFFFF0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7320 ;;      Params:         0       0       0       0       0       0       0
  7321 ;;      Locals:         0       2       0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0
  7323 ;;      Totals:         0       2       0       0       0       0       0
  7324 ;;Total ram usage:        2 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    7
  7327 ;; This function calls:
  7328 ;;		_syntax_get_text
  7329 ;;		_serialport_write
  7330 ;; This function is called by:
  7331 ;;		_on_parameter_found
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text27
  7336  001436                     __ptext27:
  7337                           	opt stack 0
  7338  001436                     _get_parameter:
  7339                           	opt stack 20
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;get_parameter@p_id stored from wreg
  7343  001436  CFE8 F07F          	movff	wreg,get_parameter@p_id
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;on_parameter_found.c: 120: serialport_write( syntax_get_text() );
  7347                           
  7348                           ; BSR set to: 0
  7349  00143A  EC41  F00E         	call	_syntax_get_text	;wreg free
  7350  00143E  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  7351  001442  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  7352  001446  0100               	movlb	0	; () banked
  7353  001448  EC25  F00C         	call	_serialport_write	;wreg free
  7354                           
  7355                           ;on_parameter_found.c: 122: switch (p_id ) {
  7356  00144C  0100               	movlb	0	; () banked
  7357  00144E  517F               	movf	get_parameter@p_id& (0+255),w,b
  7358                           
  7359                           ; Switch size 1, requested type "space"
  7360                           ; Number of cases is 23, Range of values is 0 to 22
  7361                           ; switch strategies available:
  7362                           ; Name         Instructions Cycles
  7363                           ; simple_byte           70    36 (average)
  7364                           ;	Chosen strategy is simple_byte
  7365  001450  E02B               	bz	l5592
  7366  001452  0A01               	xorlw	1	; case 1
  7367  001454  E029               	bz	l5592
  7368  001456  0A03               	xorlw	3	; case 2
  7369  001458  E027               	bz	l5592
  7370  00145A  0A01               	xorlw	1	; case 3
  7371  00145C  E025               	bz	l5592
  7372  00145E  0A07               	xorlw	7	; case 4
  7373  001460  E023               	bz	l5592
  7374  001462  0A01               	xorlw	1	; case 5
  7375  001464  E021               	bz	l5592
  7376  001466  0A03               	xorlw	3	; case 6
  7377  001468  E01F               	bz	l5592
  7378  00146A  0A01               	xorlw	1	; case 7
  7379  00146C  E01D               	bz	l5592
  7380  00146E  0A0F               	xorlw	15	; case 8
  7381  001470  E01B               	bz	l5592
  7382  001472  0A01               	xorlw	1	; case 9
  7383  001474  E019               	bz	l5592
  7384  001476  0A03               	xorlw	3	; case 10
  7385  001478  E017               	bz	l5592
  7386  00147A  0A01               	xorlw	1	; case 11
  7387  00147C  E015               	bz	l5592
  7388  00147E  0A07               	xorlw	7	; case 12
  7389  001480  E013               	bz	l5592
  7390  001482  0A01               	xorlw	1	; case 13
  7391  001484  E011               	bz	l5592
  7392  001486  0A03               	xorlw	3	; case 14
  7393  001488  E00F               	bz	l5592
  7394  00148A  0A01               	xorlw	1	; case 15
  7395  00148C  E00D               	bz	l5592
  7396  00148E  0A1F               	xorlw	31	; case 16
  7397  001490  E00B               	bz	l5592
  7398  001492  0A01               	xorlw	1	; case 17
  7399  001494  E009               	bz	l5592
  7400  001496  0A03               	xorlw	3	; case 18
  7401  001498  E007               	bz	l5592
  7402  00149A  0A01               	xorlw	1	; case 19
  7403  00149C  E005               	bz	l5592
  7404  00149E  0A07               	xorlw	7	; case 20
  7405  0014A0  A4D8               	btfss	status,2,c
  7406  0014A2  0A01               	xorlw	1	; case 21
  7407  0014A4  A4D8               	btfss	status,2,c
  7408  0014A6  0A03               	xorlw	3	; case 22
  7409  0014A8                     l5592:
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;on_parameter_found.c: 177: else
  7413                           ;on_parameter_found.c: 178: {
  7414                           ;on_parameter_found.c: 179: serialport_write( ":err " );
  7415                           
  7416                           ; BSR set to: 0
  7417  0014A8  0E7F               	movlw	high STR_4
  7418  0014AA  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7419  0014AC  0EEE               	movlw	low STR_4
  7420  0014AE  6F7D               	movwf	?_serialport_write& (0+255),b
  7421  0014B0  EC25  F00C         	call	_serialport_write	;wreg free
  7422                           
  7423                           ;on_parameter_found.c: 180: }
  7424                           ;on_parameter_found.c: 181: return ok;
  7425  0014B4  0C00               	retlw	0
  7426  0014B6                     __end_of_get_parameter:
  7427                           	opt stack 0
  7428                           tosu	equ	0xFFF
  7429                           tosh	equ	0xFFE
  7430                           tosl	equ	0xFFD
  7431                           pclath	equ	0xFFA
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodh	equ	0xFF4
  7437                           prodl	equ	0xFF3
  7438                           intcon	equ	0xFF2
  7439                           indf0	equ	0xFEF
  7440                           postinc0	equ	0xFEE
  7441                           fsr0h	equ	0xFEA
  7442                           fsr0l	equ	0xFE9
  7443                           wreg	equ	0xFE8
  7444                           indf1	equ	0xFE7
  7445                           postinc1	equ	0xFE6
  7446                           postdec1	equ	0xFE5
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _serialport_write *****************
  7457 ;; Defined at:
  7458 ;;		line 48 in file "src/modules/serialport.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  pstr            2   29[BANK0 ] PTR const unsigned char 
  7461 ;;		 -> STR_5(6), STR_4(6), STR_3(5), STR_2(5), 
  7462 ;;		 -> parameter_text(127), 
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;		None
  7465 ;; Return value:  Size  Location     Type
  7466 ;;		None               void
  7467 ;; Registers used:
  7468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7469 ;; Tracked objects:
  7470 ;;		On entry : C/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: FFFFFFF0/0
  7473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7474 ;;      Params:         0       2       0       0       0       0       0
  7475 ;;      Locals:         0       0       0       0       0       0       0
  7476 ;;      Temps:          0       0       0       0       0       0       0
  7477 ;;      Totals:         0       2       0       0       0       0       0
  7478 ;;Total ram usage:        2 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    6
  7481 ;; This function calls:
  7482 ;;		_rd_buffer_put
  7483 ;; This function is called by:
  7484 ;;		_on_parameter_found
  7485 ;;		_set_parameter
  7486 ;;		_get_parameter
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text28
  7491  00184A                     __ptext28:
  7492                           	opt stack 0
  7493  00184A                     _serialport_write:
  7494                           	opt stack 21
  7495                           
  7496                           ;serialport.c: 49: while (pstr && *pstr)
  7497  00184A  D00D               	goto	l5486
  7498  00184C                     l5482:
  7499                           
  7500                           ;serialport.c: 50: {
  7501                           ;serialport.c: 51: rd_buffer_put(&g_tx_buffer, (UINT8*)pstr);
  7502  00184C  0E01               	movlw	high _g_tx_buffer
  7503  00184E  0100               	movlb	0	; () banked
  7504  001850  6F6D               	movwf	(?_rd_buffer_put+1)& (0+255),b
  7505  001852  0E00               	movlw	low _g_tx_buffer
  7506  001854  6F6C               	movwf	?_rd_buffer_put& (0+255),b
  7507  001856  C07D  F06E         	movff	serialport_write@pstr,?_rd_buffer_put+2
  7508  00185A  C07E  F06F         	movff	serialport_write@pstr+1,?_rd_buffer_put+3
  7509  00185E  EC68  F005         	call	_rd_buffer_put	;wreg free
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;serialport.c: 52: pstr++;
  7513  001862  4B7D               	infsnz	serialport_write@pstr& (0+255),f,b
  7514  001864  2B7E               	incf	(serialport_write@pstr+1)& (0+255),f,b
  7515  001866                     l5486:
  7516  001866  0100               	movlb	0	; () banked
  7517  001868  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7518  00186A  117D               	iorwf	serialport_write@pstr& (0+255),w,b
  7519  00186C  B4D8               	btfsc	status,2,c
  7520  00186E  0012               	return	
  7521                           
  7522                           ; BSR set to: 0
  7523  001870  517D               	movf	serialport_write@pstr& (0+255),w,b
  7524  001872  6EF6               	movwf	tblptrl,c
  7525  001874  6EE9               	movwf	fsr0l,c
  7526  001876  0E05               	movlw	(high __ramtop+-1)
  7527  001878  6EEA               	movwf	fsr0h,c
  7528  00187A  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7529  00187C  64EA               	cpfsgt	fsr0h,c
  7530  00187E  D003               	bra	u5617
  7531  001880  6EEA               	movwf	fsr0h,c
  7532  001882  50EF               	movf	indf0,w,c
  7533  001884  D003               	bra	u5610
  7534  001886                     u5617:
  7535  001886  6EF7               	movwf	tblptrh,c
  7536  001888  0008               	tblrd		*
  7537  00188A  50F5               	movf	tablat,w,c
  7538  00188C                     u5610:
  7539  00188C  0900               	iorlw	0
  7540  00188E  B4D8               	btfsc	status,2,c
  7541  001890  0012               	return	
  7542  001892  D7DC               	goto	l5482
  7543  001894                     __end_of_serialport_write:
  7544                           	opt stack 0
  7545                           tosu	equ	0xFFF
  7546                           tosh	equ	0xFFE
  7547                           tosl	equ	0xFFD
  7548                           pclath	equ	0xFFA
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           intcon	equ	0xFF2
  7556                           indf0	equ	0xFEF
  7557                           postinc0	equ	0xFEE
  7558                           fsr0h	equ	0xFEA
  7559                           fsr0l	equ	0xFE9
  7560                           wreg	equ	0xFE8
  7561                           indf1	equ	0xFE7
  7562                           postinc1	equ	0xFE6
  7563                           postdec1	equ	0xFE5
  7564                           fsr1h	equ	0xFE2
  7565                           fsr1l	equ	0xFE1
  7566                           indf2	equ	0xFDF
  7567                           postinc2	equ	0xFDE
  7568                           postdec2	equ	0xFDD
  7569                           fsr2h	equ	0xFDA
  7570                           fsr2l	equ	0xFD9
  7571                           status	equ	0xFD8
  7572                           
  7573 ;; *************** function _rd_buffer_put *****************
  7574 ;; Defined at:
  7575 ;;		line 148 in file "src/modules/rd_buffer.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  7578 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7579 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  7580 ;;		 -> STR_5(6), STR_4(6), STR_3(5), STR_2(5), 
  7581 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;  ind             2   27[BANK0 ] int 
  7584 ;;  mes_rec         2   22[BANK0 ] PTR volatile unsigned ch
  7585 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7586 ;;  sz              2   25[BANK0 ] int 
  7587 ;;  result          1    0        unsigned char 
  7588 ;; Return value:  Size  Location     Type
  7589 ;;                  1    wreg      unsigned char 
  7590 ;; Registers used:
  7591 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7592 ;; Tracked objects:
  7593 ;;		On entry : F/0
  7594 ;;		On exit  : F/0
  7595 ;;		Unchanged: FFFFFFF0/0
  7596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7597 ;;      Params:         0       4       0       0       0       0       0
  7598 ;;      Locals:         0       8       0       0       0       0       0
  7599 ;;      Temps:          0       5       0       0       0       0       0
  7600 ;;      Totals:         0      17       0       0       0       0       0
  7601 ;;Total ram usage:       17 bytes
  7602 ;; Hardware stack levels used:    1
  7603 ;; Hardware stack levels required when called:    5
  7604 ;; This function calls:
  7605 ;;		Nothing
  7606 ;; This function is called by:
  7607 ;;		_serialport_write
  7608 ;;		_putch
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612                           	psect	text29
  7613  000AD0                     __ptext29:
  7614                           	opt stack 0
  7615  000AD0                     _rd_buffer_put:
  7616                           	opt stack 21
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;rd_buffer.c: 150: SIZE sz ;
  7620                           ;rd_buffer.c: 151: sz = pbuffer->head.last - pbuffer->head.first;
  7621                           
  7622                           ; BSR set to: 0
  7623  000AD0  EE20 F002          	lfsr	2,2
  7624  000AD4  D894               	call	PL40	;call to abstracted procedure
  7625  000AD6  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7626  000ADA  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7627  000ADE  CFDE F072          	movff	postinc2,??_rd_buffer_put+2
  7628  000AE2  CFDD F073          	movff	postdec2,??_rd_buffer_put+3
  7629  000AE6  5170               	movf	??_rd_buffer_put& (0+255),w,b
  7630  000AE8  5D72               	subwf	(??_rd_buffer_put+2)& (0+255),w,b
  7631  000AEA  6F79               	movwf	rd_buffer_put@sz& (0+255),b
  7632  000AEC  5171               	movf	(??_rd_buffer_put+1)& (0+255),w,b
  7633  000AEE  5973               	subwfb	(??_rd_buffer_put+3)& (0+255),w,b
  7634  000AF0  6F7A               	movwf	(rd_buffer_put@sz+1)& (0+255),b
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;rd_buffer.c: 152: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
  7638  000AF2  0E01               	movlw	1
  7639  000AF4  6F78               	movwf	_rd_buffer_put$482& (0+255),b
  7640                           
  7641                           ; BSR set to: 0
  7642  000AF6  D88C               	call	PL54	;call to abstracted procedure
  7643  000AF8  64EA               	cpfsgt	fsr0h,c
  7644  000AFA  D003               	bra	u5447
  7645  000AFC  6EEA               	movwf	fsr0h,c
  7646  000AFE  50EF               	movf	indf0,w,c
  7647  000B00  D003               	bra	u5440
  7648  000B02                     u5447:
  7649  000B02  6EF7               	movwf	tblptrh,c
  7650  000B04  0008               	tblrd		*
  7651  000B06  50F5               	movf	tablat,w,c
  7652  000B08                     u5440:
  7653  000B08  0A0A               	xorlw	10
  7654  000B0A  E00E               	bz	l5392
  7655  000B0C  0100               	movlb	0	; () banked
  7656  000B0E  D880               	call	PL54	;call to abstracted procedure
  7657  000B10  64EA               	cpfsgt	fsr0h,c
  7658  000B12  D003               	bra	u5467
  7659  000B14  6EEA               	movwf	fsr0h,c
  7660  000B16  50EF               	movf	indf0,w,c
  7661  000B18  D003               	bra	u5460
  7662  000B1A                     u5467:
  7663  000B1A  6EF7               	movwf	tblptrh,c
  7664  000B1C  0008               	tblrd		*
  7665  000B1E  50F5               	movf	tablat,w,c
  7666  000B20                     u5460:
  7667  000B20  0A0D               	xorlw	13
  7668  000B22  E002               	bz	l5392
  7669  000B24  0100               	movlb	0	; () banked
  7670  000B26  6B78               	clrf	_rd_buffer_put$482& (0+255),b
  7671  000B28                     l5392:
  7672  000B28  0100               	movlb	0	; () banked
  7673  000B2A  5178               	movf	_rd_buffer_put$482& (0+255),w,b
  7674  000B2C  13BE               	iorwf	_this_contains_crlf& (0+255),f,b
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;rd_buffer.c: 154: if(sz < 0 ) {
  7678  000B2E  AF7A               	btfss	(rd_buffer_put@sz+1)& (0+255),7,b
  7679  000B30  D00A               	goto	l285
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;rd_buffer.c: 155: sz += pbuffer->head.size;
  7683  000B32  EE20 F004          	lfsr	2,4
  7684  000B36  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7685  000B38  26D9               	addwf	fsr2l,f,c
  7686  000B3A  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7687  000B3C  22DA               	addwfc	fsr2h,f,c
  7688  000B3E  50DE               	movf	postinc2,w,c
  7689  000B40  2779               	addwf	rd_buffer_put@sz& (0+255),f,b
  7690  000B42  50DD               	movf	postdec2,w,c
  7691  000B44  237A               	addwfc	(rd_buffer_put@sz+1)& (0+255),f,b
  7692  000B46                     l285:
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;rd_buffer.c: 156: }
  7696                           ;rd_buffer.c: 157: if(sz < (pbuffer->head.size - 1))
  7697  000B46  EE20 F004          	lfsr	2,4
  7698  000B4A  D859               	call	PL40	;call to abstracted procedure
  7699  000B4C  0EFF               	movlw	255
  7700  000B4E  2570               	addwf	??_rd_buffer_put& (0+255),w,b
  7701  000B50  6F72               	movwf	(??_rd_buffer_put+2)& (0+255),b
  7702  000B52  0EFF               	movlw	255
  7703  000B54  2171               	addwfc	(??_rd_buffer_put+1)& (0+255),w,b
  7704  000B56  6F73               	movwf	(??_rd_buffer_put+3)& (0+255),b
  7705  000B58  517A               	movf	(rd_buffer_put@sz+1)& (0+255),w,b
  7706  000B5A  0A80               	xorlw	128
  7707  000B5C  6F74               	movwf	(??_rd_buffer_put+4)& (0+255),b
  7708  000B5E  5172               	movf	(??_rd_buffer_put+2)& (0+255),w,b
  7709  000B60  5D79               	subwf	rd_buffer_put@sz& (0+255),w,b
  7710  000B62  5173               	movf	(??_rd_buffer_put+3)& (0+255),w,b
  7711  000B64  0A80               	xorlw	128
  7712  000B66  5974               	subwfb	(??_rd_buffer_put+4)& (0+255),w,b
  7713  000B68  B0D8               	btfsc	status,0,c
  7714  000B6A  0012               	return	
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;rd_buffer.c: 158: {
  7718                           ;rd_buffer.c: 159: INT ind = pbuffer->head.last;
  7719  000B6C  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7720  000B70  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7721  000B74  CFDE F07B          	movff	postinc2,rd_buffer_put@ind
  7722  000B78  CFDD F07C          	movff	postdec2,rd_buffer_put@ind+1
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;rd_buffer.c: 160: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
  7726  000B7C  C06C  F070         	movff	rd_buffer_put@pbuffer,??_rd_buffer_put
  7727  000B80  C06D  F071         	movff	rd_buffer_put@pbuffer+1,??_rd_buffer_put+1
  7728  000B84  517B               	movf	rd_buffer_put@ind& (0+255),w,b
  7729  000B86  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7730  000B88  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7731  000B8A  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7732  000B8C  0E06               	movlw	6
  7733  000B8E  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7734  000B90  0E00               	movlw	0
  7735  000B92  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7736  000B94  C070  F076         	movff	??_rd_buffer_put,rd_buffer_put@mes_rec
  7737  000B98  C071  F077         	movff	??_rd_buffer_put+1,rd_buffer_put@mes_rec+1
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;rd_buffer.c: 161: (*mes_rec) = (*prec);
  7741  000B9C  C06E  FFF6         	movff	rd_buffer_put@prec,tblptrl
  7742  000BA0  C06F  FFF7         	movff	rd_buffer_put@prec+1,tblptrh
  7743  000BA4  6AF8               	clrf	tblptru,c
  7744  000BA6  C076  FFD9         	movff	rd_buffer_put@mes_rec,fsr2l
  7745  000BAA  C077  FFDA         	movff	rd_buffer_put@mes_rec+1,fsr2h
  7746  000BAE  0E05               	movlw	(high __ramtop+-1)
  7747  000BB0  64F7               	cpfsgt	tblptrh,c
  7748  000BB2  D003               	bra	u5507
  7749  000BB4  0008               	tblrd		*
  7750  000BB6  50F5               	movf	tablat,w,c
  7751  000BB8  D005               	bra	u5500
  7752  000BBA                     u5507:
  7753  000BBA  CFF6 FFE9          	movff	tblptrl,fsr0l
  7754  000BBE  CFF7 FFEA          	movff	tblptrh,fsr0h
  7755  000BC2  50EF               	movf	indf0,w,c
  7756  000BC4                     u5500:
  7757  000BC4  6EDF               	movwf	indf2,c
  7758                           
  7759                           ;rd_buffer.c: 162: ind++;
  7760  000BC6  0100               	movlb	0	; () banked
  7761  000BC8  4B7B               	infsnz	rd_buffer_put@ind& (0+255),f,b
  7762  000BCA  2B7C               	incf	(rd_buffer_put@ind+1)& (0+255),f,b
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;rd_buffer.c: 164: if(ind == pbuffer->head.size ) {
  7766  000BCC  EE20 F004          	lfsr	2,4
  7767  000BD0  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7768  000BD2  26D9               	addwf	fsr2l,f,c
  7769  000BD4  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7770  000BD6  22DA               	addwfc	fsr2h,f,c
  7771  000BD8  52DE               	movf	postinc2,f,c
  7772  000BDA  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7773  000BDC  18DD               	xorwf	postdec2,w,c
  7774  000BDE  C07B  FFE8         	movff	rd_buffer_put@ind,wreg
  7775  000BE2  B4D8               	btfsc	status,2,c
  7776  000BE4  18DF               	xorwf	indf2,w,c
  7777  000BE6  E102               	bnz	l5410
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;rd_buffer.c: 165: ind = 0;
  7781  000BE8  6B7B               	clrf	rd_buffer_put@ind& (0+255),b
  7782  000BEA  6B7C               	clrf	(rd_buffer_put@ind+1)& (0+255),b
  7783  000BEC                     l5410:
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;rd_buffer.c: 166: }
  7787                           ;rd_buffer.c: 167: pbuffer->head.last = ind;
  7788  000BEC  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7789  000BF0  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7790  000BF4  C07B  FFDE         	movff	rd_buffer_put@ind,postinc2
  7791  000BF8  C07C  FFDD         	movff	rd_buffer_put@ind+1,postdec2
  7792                           
  7793                           ; BSR set to: 0
  7794                           
  7795                           ; BSR set to: 0
  7796  000BFC  0012               	return	
  7797  000BFE                     __end_of_rd_buffer_put:
  7798                           	opt stack 0
  7799  000BFE                     PL40:
  7800                           	opt stack 21
  7801  000BFE  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7802  000C00  26D9               	addwf	fsr2l,f,c
  7803  000C02  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7804  000C04  22DA               	addwfc	fsr2h,f,c
  7805  000C06  CFDE F070          	movff	postinc2,??_rd_buffer_put
  7806  000C0A  CFDD F071          	movff	postdec2,??_rd_buffer_put+1
  7807  000C0E  0012               	return	
  7808  000C10                     __end_ofPL40:
  7809                           	opt stack 0
  7810  000C10                     PL54:
  7811                           	opt stack 21
  7812  000C10  516E               	movf	rd_buffer_put@prec& (0+255),w,b
  7813  000C12  6EF6               	movwf	tblptrl,c
  7814  000C14  6EE9               	movwf	fsr0l,c
  7815  000C16  0E05               	movlw	(high __ramtop+-1)
  7816  000C18  6EEA               	movwf	fsr0h,c
  7817  000C1A  516F               	movf	(rd_buffer_put@prec+1)& (0+255),w,b
  7818  000C1C  0012               	return	
  7819  000C1E                     __end_ofPL54:
  7820                           	opt stack 0
  7821                           tosu	equ	0xFFF
  7822                           tosh	equ	0xFFE
  7823                           tosl	equ	0xFFD
  7824                           pclath	equ	0xFFA
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           intcon	equ	0xFF2
  7832                           indf0	equ	0xFEF
  7833                           postinc0	equ	0xFEE
  7834                           fsr0h	equ	0xFEA
  7835                           fsr0l	equ	0xFE9
  7836                           wreg	equ	0xFE8
  7837                           indf1	equ	0xFE7
  7838                           postinc1	equ	0xFE6
  7839                           postdec1	equ	0xFE5
  7840                           fsr1h	equ	0xFE2
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function _syntax_get_text *****************
  7850 ;; Defined at:
  7851 ;;		line 194 in file "src/modules/syntax.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;		None
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;		None
  7856 ;; Return value:  Size  Location     Type
  7857 ;;                  2    wreg      PTR const unsigned char 
  7858 ;; Registers used:
  7859 ;;		wreg, status,2
  7860 ;; Tracked objects:
  7861 ;;		On entry : F/0
  7862 ;;		On exit  : F/3
  7863 ;;		Unchanged: FFFFFFF0/0
  7864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7865 ;;      Params:         0       0       0       0       0       0       0
  7866 ;;      Locals:         0       0       0       0       0       0       0
  7867 ;;      Temps:          0       0       0       0       0       0       0
  7868 ;;      Totals:         0       0       0       0       0       0       0
  7869 ;;Total ram usage:        0 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    5
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_set_parameter
  7876 ;;		_get_parameter
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text30
  7881  001C82                     __ptext30:
  7882                           	opt stack 0
  7883  001C82                     _syntax_get_text:
  7884                           	opt stack 21
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;syntax.c: 195: return parameter_text;
  7888                           
  7889                           ; BSR set to: 0
  7890  001C82  0103               	movlb	3	; () banked
  7891  001C84  0E03               	movlw	high _parameter_text
  7892  001C86  6E02               	movwf	?_syntax_get_text+1,c
  7893  001C88  0E00               	movlw	low _parameter_text
  7894  001C8A  6E01               	movwf	?_syntax_get_text,c
  7895                           
  7896                           ; BSR set to: 3
  7897  001C8C  0012               	return	
  7898  001C8E                     __end_of_syntax_get_text:
  7899                           	opt stack 0
  7900                           tosu	equ	0xFFF
  7901                           tosh	equ	0xFFE
  7902                           tosl	equ	0xFFD
  7903                           pclath	equ	0xFFA
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           indf0	equ	0xFEF
  7912                           postinc0	equ	0xFEE
  7913                           fsr0h	equ	0xFEA
  7914                           fsr0l	equ	0xFE9
  7915                           wreg	equ	0xFE8
  7916                           indf1	equ	0xFE7
  7917                           postinc1	equ	0xFE6
  7918                           postdec1	equ	0xFE5
  7919                           fsr1h	equ	0xFE2
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function _startup *****************
  7929 ;; Defined at:
  7930 ;;		line 16 in file "src/startup/startup.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;		None
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  result          1   19[BANK0 ] enum E3388
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  1    wreg      enum E3388
  7937 ;; Registers used:
  7938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : F/0
  7942 ;;		Unchanged: FFFFFFF0/0
  7943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7944 ;;      Params:         0       0       0       0       0       0       0
  7945 ;;      Locals:         0       1       0       0       0       0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0
  7947 ;;      Totals:         0       1       0       0       0       0       0
  7948 ;;Total ram usage:        1 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    8
  7951 ;; This function calls:
  7952 ;;		_gpio_init
  7953 ;;		_sysclk_init
  7954 ;;		_adc_init
  7955 ;;		_uart_init
  7956 ;;		_uart_puts
  7957 ;;		_serialport_startup
  7958 ;; This function is called by:
  7959 ;;		_main
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text31
  7964  0018DE                     __ptext31:
  7965                           	opt stack 0
  7966  0018DE                     _startup:
  7967                           	opt stack 22
  7968                           
  7969                           ;startup.c: 17: ResultSuccess_t result = RESULT_FAIL;
  7970                           
  7971                           ; BSR set to: 3
  7972  0018DE  0100               	movlb	0	; () banked
  7973  0018E0  6B73               	clrf	startup@result& (0+255),b
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;startup.c: 18: gpio_init();
  7977  0018E2  EC1F  F00E         	call	_gpio_init	;wreg free
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;startup.c: 19: sysclk_init();
  7981  0018E6  EC54  F00E         	call	_sysclk_init	;wreg free
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;startup.c: 20: adc_init();
  7985  0018EA  EC03  F00E         	call	_adc_init	;wreg free
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;startup.c: 21: uart_init();
  7989  0018EE  ECAC  F00D         	call	_uart_init	;wreg free
  7990                           
  7991                           ; BSR set to: 0
  7992                           ;startup.c: 22: events[(5)] = (PEVENT)serialport_task;
  7993  0018F2  0E12               	movlw	high _serialport_task
  7994  0018F4  6FB4               	movwf	(_events+11)& (0+255),b	;volatile
  7995  0018F6  0EA0               	movlw	low _serialport_task
  7996  0018F8  6FB3               	movwf	(_events+10)& (0+255),b	;volatile
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;startup.c: 23: events[(2)] = (PEVENT)detection_task;
  8000  0018FA  0E15               	movlw	high _detection_task
  8001  0018FC  6FAE               	movwf	(_events+5)& (0+255),b	;volatile
  8002  0018FE  0E2E               	movlw	low _detection_task
  8003  001900  6FAD               	movwf	(_events+4)& (0+255),b	;volatile
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;startup.c: 25: uart_puts("hello",100);
  8007  001902  0E7F               	movlw	high STR_6
  8008  001904  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  8009  001906  0EE8               	movlw	low STR_6
  8010  001908  6F6D               	movwf	?_uart_puts& (0+255),b
  8011  00190A  6B70               	clrf	(?_uart_puts+3)& (0+255),b
  8012  00190C  0E64               	movlw	100
  8013  00190E  6F6F               	movwf	(?_uart_puts+2)& (0+255),b
  8014  001910  ECA1  F00B         	call	_uart_puts	;wreg free
  8015                           
  8016                           ;startup.c: 27: if(!serialport_startup()) break;
  8017  001914  EC50  F00D         	call	_serialport_startup	;wreg free
  8018  001918  0900               	iorlw	0
  8019  00191A  E002               	bz	l958
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;startup.c: 31: result = RESULT_SUCCESS;
  8023  00191C  0E01               	movlw	1
  8024  00191E  6F73               	movwf	startup@result& (0+255),b
  8025  001920                     l958:
  8026                           
  8027                           ; BSR set to: 0
  8028                           ;startup.c: 32: }while(0);
  8029                           ;startup.c: 33: return result;
  8030  001920  5173               	movf	startup@result& (0+255),w,b
  8031                           
  8032                           ; BSR set to: 0
  8033  001922  0012               	return	
  8034  001924                     __end_of_startup:
  8035                           	opt stack 0
  8036                           tosu	equ	0xFFF
  8037                           tosh	equ	0xFFE
  8038                           tosl	equ	0xFFD
  8039                           pclath	equ	0xFFA
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon	equ	0xFF2
  8047                           indf0	equ	0xFEF
  8048                           postinc0	equ	0xFEE
  8049                           fsr0h	equ	0xFEA
  8050                           fsr0l	equ	0xFE9
  8051                           wreg	equ	0xFE8
  8052                           indf1	equ	0xFE7
  8053                           postinc1	equ	0xFE6
  8054                           postdec1	equ	0xFE5
  8055                           fsr1h	equ	0xFE2
  8056                           fsr1l	equ	0xFE1
  8057                           indf2	equ	0xFDF
  8058                           postinc2	equ	0xFDE
  8059                           postdec2	equ	0xFDD
  8060                           fsr2h	equ	0xFDA
  8061                           fsr2l	equ	0xFD9
  8062                           status	equ	0xFD8
  8063                           
  8064 ;; *************** function _sysclk_init *****************
  8065 ;; Defined at:
  8066 ;;		line 7 in file "src/drivers/sysclk.c"
  8067 ;; Parameters:    Size  Location     Type
  8068 ;;		None
  8069 ;; Auto vars:     Size  Location     Type
  8070 ;;		None
  8071 ;; Return value:  Size  Location     Type
  8072 ;;		None               void
  8073 ;; Registers used:
  8074 ;;		wreg, status,2, status,0, cstack
  8075 ;; Tracked objects:
  8076 ;;		On entry : F/0
  8077 ;;		On exit  : F/0
  8078 ;;		Unchanged: FFFFFFF0/0
  8079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8080 ;;      Params:         0       0       0       0       0       0       0
  8081 ;;      Locals:         0       0       0       0       0       0       0
  8082 ;;      Temps:          0       0       0       0       0       0       0
  8083 ;;      Totals:         0       0       0       0       0       0       0
  8084 ;;Total ram usage:        0 bytes
  8085 ;; Hardware stack levels used:    1
  8086 ;; Hardware stack levels required when called:    6
  8087 ;; This function calls:
  8088 ;;		_sysclk_setup_intosc
  8089 ;; This function is called by:
  8090 ;;		_startup
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           	psect	text32
  8095  001CA8                     __ptext32:
  8096                           	opt stack 0
  8097  001CA8                     _sysclk_init:
  8098                           	opt stack 23
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;sysclk.c: 8: sysclk_setup_intosc(INTOSC_4MHZ);
  8102                           
  8103                           ; BSR set to: 0
  8104  001CA8  0E05               	movlw	5
  8105  001CAA  EF31  F00E         	goto	_sysclk_setup_intosc
  8106  001CAE                     __end_of_sysclk_init:
  8107                           	opt stack 0
  8108                           tosu	equ	0xFFF
  8109                           tosh	equ	0xFFE
  8110                           tosl	equ	0xFFD
  8111                           pclath	equ	0xFFA
  8112                           tblptru	equ	0xFF8
  8113                           tblptrh	equ	0xFF7
  8114                           tblptrl	equ	0xFF6
  8115                           tablat	equ	0xFF5
  8116                           prodh	equ	0xFF4
  8117                           prodl	equ	0xFF3
  8118                           intcon	equ	0xFF2
  8119                           indf0	equ	0xFEF
  8120                           postinc0	equ	0xFEE
  8121                           fsr0h	equ	0xFEA
  8122                           fsr0l	equ	0xFE9
  8123                           wreg	equ	0xFE8
  8124                           indf1	equ	0xFE7
  8125                           postinc1	equ	0xFE6
  8126                           postdec1	equ	0xFE5
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function _sysclk_setup_intosc *****************
  8137 ;; Defined at:
  8138 ;;		line 12 in file "src/drivers/sysclk.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  frequency       1    wreg     enum E1
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;  frequency       1   12[BANK0 ] enum E1
  8143 ;; Return value:  Size  Location     Type
  8144 ;;		None               void
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : F/0
  8149 ;;		On exit  : F/0
  8150 ;;		Unchanged: FFFFFFF0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8152 ;;      Params:         0       0       0       0       0       0       0
  8153 ;;      Locals:         0       1       0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0
  8155 ;;      Totals:         0       1       0       0       0       0       0
  8156 ;;Total ram usage:        1 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    5
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_sysclk_init
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text33
  8167  001C62                     __ptext33:
  8168                           	opt stack 0
  8169  001C62                     _sysclk_setup_intosc:
  8170                           	opt stack 23
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;sysclk_setup_intosc@frequency stored from wreg
  8174  001C62  CFE8 F06C          	movff	wreg,sysclk_setup_intosc@frequency
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;sysclk.c: 13: OSCCON &= ~(0x07<<4);
  8178  001C66  0E8F               	movlw	143
  8179  001C68  16D3               	andwf	4051,f,c	;volatile
  8180                           
  8181                           ;sysclk.c: 14: OSCCON |= frequency<<4;
  8182  001C6A  396C               	swapf	sysclk_setup_intosc@frequency& (0+255),w,b
  8183  001C6C  0BF0               	andlw	240
  8184  001C6E  12D3               	iorwf	4051,f,c	;volatile
  8185                           
  8186                           ; BSR set to: 0
  8187  001C70  0012               	return	
  8188  001C72                     __end_of_sysclk_setup_intosc:
  8189                           	opt stack 0
  8190                           tosu	equ	0xFFF
  8191                           tosh	equ	0xFFE
  8192                           tosl	equ	0xFFD
  8193                           pclath	equ	0xFFA
  8194                           tblptru	equ	0xFF8
  8195                           tblptrh	equ	0xFF7
  8196                           tblptrl	equ	0xFF6
  8197                           tablat	equ	0xFF5
  8198                           prodh	equ	0xFF4
  8199                           prodl	equ	0xFF3
  8200                           intcon	equ	0xFF2
  8201                           indf0	equ	0xFEF
  8202                           postinc0	equ	0xFEE
  8203                           fsr0h	equ	0xFEA
  8204                           fsr0l	equ	0xFE9
  8205                           wreg	equ	0xFE8
  8206                           indf1	equ	0xFE7
  8207                           postinc1	equ	0xFE6
  8208                           postdec1	equ	0xFE5
  8209                           fsr1h	equ	0xFE2
  8210                           fsr1l	equ	0xFE1
  8211                           indf2	equ	0xFDF
  8212                           postinc2	equ	0xFDE
  8213                           postdec2	equ	0xFDD
  8214                           fsr2h	equ	0xFDA
  8215                           fsr2l	equ	0xFD9
  8216                           status	equ	0xFD8
  8217                           
  8218 ;; *************** function _uart_init *****************
  8219 ;; Defined at:
  8220 ;;		line 5 in file "src/drivers/uart.c"
  8221 ;; Parameters:    Size  Location     Type
  8222 ;;		None
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;		None
  8225 ;; Return value:  Size  Location     Type
  8226 ;;		None               void
  8227 ;; Registers used:
  8228 ;;		wreg, status,2, cstack
  8229 ;; Tracked objects:
  8230 ;;		On entry : F/0
  8231 ;;		On exit  : F/0
  8232 ;;		Unchanged: FFFFFFF0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8234 ;;      Params:         0       0       0       0       0       0       0
  8235 ;;      Locals:         0       0       0       0       0       0       0
  8236 ;;      Temps:          0       0       0       0       0       0       0
  8237 ;;      Totals:         0       0       0       0       0       0       0
  8238 ;;Total ram usage:        0 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; Hardware stack levels required when called:    6
  8241 ;; This function calls:
  8242 ;;		_uart_set_baudrate
  8243 ;; This function is called by:
  8244 ;;		_startup
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text34
  8249  001B58                     __ptext34:
  8250                           	opt stack 0
  8251  001B58                     _uart_init:
  8252                           	opt stack 23
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;uart.c: 6: TXSTA = 0b00100110;
  8256                           
  8257                           ; BSR set to: 0
  8258  001B58  0E26               	movlw	38
  8259  001B5A  6EAC               	movwf	4012,c	;volatile
  8260                           
  8261                           ;uart.c: 7: RCSTA = 0b10010000;
  8262  001B5C  0E90               	movlw	144
  8263  001B5E  6EAB               	movwf	4011,c	;volatile
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;uart.c: 8: BAUDCTL = 0b00000000;
  8267  001B60  6AB8               	clrf	4024,c	;volatile
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;uart.c: 9: BAUDCON = 0b00000000;
  8271  001B62  6AB8               	clrf	4024,c	;volatile
  8272                           
  8273                           ; BSR set to: 0
  8274                           ;uart.c: 10: uart_set_baudrate(19200);
  8275  001B64  6B6C               	clrf	?_uart_set_baudrate& (0+255),b
  8276  001B66  0E4B               	movlw	75
  8277  001B68  6F6D               	movwf	(?_uart_set_baudrate+1)& (0+255),b
  8278  001B6A  0E00               	movlw	0
  8279  001B6C  6B6E               	clrf	(?_uart_set_baudrate+2)& (0+255),b
  8280  001B6E  EC57  F00E         	call	_uart_set_baudrate	;wreg free
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;uart.c: 12: PIE1bits.RCIE=1;
  8284  001B72  8A9D               	bsf	3997,5,c	;volatile
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;uart.c: 13: PIR1bits.RCIF=1;
  8288  001B74  8A9E               	bsf	3998,5,c	;volatile
  8289                           
  8290                           ; BSR set to: 0
  8291  001B76  0012               	return	
  8292  001B78                     __end_of_uart_init:
  8293                           	opt stack 0
  8294                           tosu	equ	0xFFF
  8295                           tosh	equ	0xFFE
  8296                           tosl	equ	0xFFD
  8297                           pclath	equ	0xFFA
  8298                           tblptru	equ	0xFF8
  8299                           tblptrh	equ	0xFF7
  8300                           tblptrl	equ	0xFF6
  8301                           tablat	equ	0xFF5
  8302                           prodh	equ	0xFF4
  8303                           prodl	equ	0xFF3
  8304                           intcon	equ	0xFF2
  8305                           indf0	equ	0xFEF
  8306                           postinc0	equ	0xFEE
  8307                           fsr0h	equ	0xFEA
  8308                           fsr0l	equ	0xFE9
  8309                           wreg	equ	0xFE8
  8310                           indf1	equ	0xFE7
  8311                           postinc1	equ	0xFE6
  8312                           postdec1	equ	0xFE5
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _uart_set_baudrate *****************
  8323 ;; Defined at:
  8324 ;;		line 17 in file "src/drivers/uart.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  baudrate        3   12[BANK0 ] unsigned um
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;		None
  8329 ;; Return value:  Size  Location     Type
  8330 ;;		None               void
  8331 ;; Registers used:
  8332 ;;		wreg, status,2
  8333 ;; Tracked objects:
  8334 ;;		On entry : F/0
  8335 ;;		On exit  : F/0
  8336 ;;		Unchanged: FFFFFFF0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8338 ;;      Params:         0       3       0       0       0       0       0
  8339 ;;      Locals:         0       0       0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0
  8341 ;;      Totals:         0       3       0       0       0       0       0
  8342 ;;Total ram usage:        3 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    5
  8345 ;; This function calls:
  8346 ;;		Nothing
  8347 ;; This function is called by:
  8348 ;;		_uart_init
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           	psect	text35
  8353  001CAE                     __ptext35:
  8354                           	opt stack 0
  8355  001CAE                     _uart_set_baudrate:
  8356                           	opt stack 23
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;uart.c: 19: SPBRG = 12;
  8360                           
  8361                           ; BSR set to: 0
  8362  001CAE  0E0C               	movlw	12
  8363  001CB0  6EAF               	movwf	4015,c	;volatile
  8364                           
  8365                           ; BSR set to: 0
  8366  001CB2  0C0C               	retlw	12
  8367  001CB4                     __end_of_uart_set_baudrate:
  8368                           	opt stack 0
  8369                           tosu	equ	0xFFF
  8370                           tosh	equ	0xFFE
  8371                           tosl	equ	0xFFD
  8372                           pclath	equ	0xFFA
  8373                           tblptru	equ	0xFF8
  8374                           tblptrh	equ	0xFF7
  8375                           tblptrl	equ	0xFF6
  8376                           tablat	equ	0xFF5
  8377                           prodh	equ	0xFF4
  8378                           prodl	equ	0xFF3
  8379                           intcon	equ	0xFF2
  8380                           indf0	equ	0xFEF
  8381                           postinc0	equ	0xFEE
  8382                           fsr0h	equ	0xFEA
  8383                           fsr0l	equ	0xFE9
  8384                           wreg	equ	0xFE8
  8385                           indf1	equ	0xFE7
  8386                           postinc1	equ	0xFE6
  8387                           postdec1	equ	0xFE5
  8388                           fsr1h	equ	0xFE2
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           fsr2h	equ	0xFDA
  8394                           fsr2l	equ	0xFD9
  8395                           status	equ	0xFD8
  8396                           
  8397 ;; *************** function _uart_puts *****************
  8398 ;; Defined at:
  8399 ;;		line 31 in file "src/drivers/uart.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;  pstr            2   13[BANK0 ] PTR const unsigned char 
  8402 ;;		 -> STR_6(6), serialport_buffer(100), 
  8403 ;;  size            2   15[BANK0 ] int 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;		None
  8406 ;; Return value:  Size  Location     Type
  8407 ;;		None               void
  8408 ;; Registers used:
  8409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  8410 ;; Tracked objects:
  8411 ;;		On entry : F/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: FFFFFFF0/0
  8414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8415 ;;      Params:         0       4       0       0       0       0       0
  8416 ;;      Locals:         0       0       0       0       0       0       0
  8417 ;;      Temps:          0       0       0       0       0       0       0
  8418 ;;      Totals:         0       4       0       0       0       0       0
  8419 ;;Total ram usage:        4 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:    7
  8422 ;; This function calls:
  8423 ;;		_uart_putc
  8424 ;; This function is called by:
  8425 ;;		_serialport_task
  8426 ;;		_startup
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text36
  8431  001742                     __ptext36:
  8432                           	opt stack 0
  8433  001742                     _uart_puts:
  8434                           	opt stack 22
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;uart.c: 32: while(size-- && *pstr)
  8438                           
  8439                           ; BSR set to: 0
  8440  001742  D010               	goto	l2980
  8441  001744                     l2976:
  8442                           
  8443                           ;uart.c: 33: {
  8444                           ;uart.c: 34: uart_putc(*pstr);
  8445  001744  0100               	movlb	0	; () banked
  8446  001746  516D               	movf	uart_puts@pstr& (0+255),w,b
  8447  001748  D824               	call	PL62	;call to abstracted procedure
  8448  00174A  64EA               	cpfsgt	fsr0h,c
  8449  00174C  D003               	bra	u1807
  8450  00174E  6EEA               	movwf	fsr0h,c
  8451  001750  50EF               	movf	indf0,w,c
  8452  001752  D003               	bra	u1800
  8453  001754                     u1807:
  8454  001754  6EF7               	movwf	tblptrh,c
  8455  001756  0008               	tblrd		*
  8456  001758  50F5               	movf	tablat,w,c
  8457  00175A                     u1800:
  8458  00175A  EC16  F00E         	call	_uart_putc
  8459                           
  8460                           ;uart.c: 35: pstr++;
  8461  00175E  0100               	movlb	0	; () banked
  8462  001760  4B6D               	infsnz	uart_puts@pstr& (0+255),f,b
  8463  001762  2B6E               	incf	(uart_puts@pstr+1)& (0+255),f,b
  8464  001764                     l2980:
  8465                           
  8466                           ; BSR set to: 0
  8467  001764  076F               	decf	uart_puts@size& (0+255),f,b
  8468  001766  A0D8               	btfss	status,0,c
  8469  001768  0770               	decf	(uart_puts@size+1)& (0+255),f,b
  8470  00176A  0100               	movlb	0	; () banked
  8471  00176C  296F               	incf	uart_puts@size& (0+255),w,b
  8472  00176E  B4D8               	btfsc	status,2,c
  8473  001770  2970               	incf	(uart_puts@size+1)& (0+255),w,b
  8474  001772  B4D8               	btfsc	status,2,c
  8475  001774  0012               	return	
  8476                           
  8477                           ; BSR set to: 0
  8478  001776  516D               	movf	uart_puts@pstr& (0+255),w,b
  8479  001778  D80C               	call	PL62	;call to abstracted procedure
  8480  00177A  64EA               	cpfsgt	fsr0h,c
  8481  00177C  D003               	bra	u1827
  8482  00177E  6EEA               	movwf	fsr0h,c
  8483  001780  50EF               	movf	indf0,w,c
  8484  001782  D003               	bra	u1820
  8485  001784                     u1827:
  8486  001784  6EF7               	movwf	tblptrh,c
  8487  001786  0008               	tblrd		*
  8488  001788  50F5               	movf	tablat,w,c
  8489  00178A                     u1820:
  8490  00178A  0900               	iorlw	0
  8491  00178C  B4D8               	btfsc	status,2,c
  8492  00178E  0012               	return	
  8493  001790  D7D9               	goto	l2976
  8494  001792                     __end_of_uart_puts:
  8495                           	opt stack 0
  8496  001792                     PL62:
  8497                           	opt stack 22
  8498  001792  6EF6               	movwf	tblptrl,c
  8499  001794  6EE9               	movwf	fsr0l,c
  8500  001796  0E05               	movlw	(high __ramtop+-1)
  8501  001798  6EEA               	movwf	fsr0h,c
  8502  00179A  516E               	movf	(uart_puts@pstr+1)& (0+255),w,b
  8503  00179C  0012               	return	
  8504  00179E                     __end_ofPL62:
  8505                           	opt stack 0
  8506                           tosu	equ	0xFFF
  8507                           tosh	equ	0xFFE
  8508                           tosl	equ	0xFFD
  8509                           pclath	equ	0xFFA
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           intcon	equ	0xFF2
  8517                           indf0	equ	0xFEF
  8518                           postinc0	equ	0xFEE
  8519                           fsr0h	equ	0xFEA
  8520                           fsr0l	equ	0xFE9
  8521                           wreg	equ	0xFE8
  8522                           indf1	equ	0xFE7
  8523                           postinc1	equ	0xFE6
  8524                           postdec1	equ	0xFE5
  8525                           fsr1h	equ	0xFE2
  8526                           fsr1l	equ	0xFE1
  8527                           indf2	equ	0xFDF
  8528                           postinc2	equ	0xFDE
  8529                           postdec2	equ	0xFDD
  8530                           fsr2h	equ	0xFDA
  8531                           fsr2l	equ	0xFD9
  8532                           status	equ	0xFD8
  8533                           
  8534 ;; *************** function _uart_putc *****************
  8535 ;; Defined at:
  8536 ;;		line 40 in file "src/drivers/uart.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  byte            1    wreg     unsigned char 
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  byte            1   12[BANK0 ] unsigned char 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;		None               void
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, cstack
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: FFFFFFFF/0
  8549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8550 ;;      Params:         0       0       0       0       0       0       0
  8551 ;;      Locals:         0       1       0       0       0       0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0
  8553 ;;      Totals:         0       1       0       0       0       0       0
  8554 ;;Total ram usage:        1 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    6
  8557 ;; This function calls:
  8558 ;;		_uart_byte_sent
  8559 ;; This function is called by:
  8560 ;;		_uart_puts
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text37
  8565  001C2C                     __ptext37:
  8566                           	opt stack 0
  8567  001C2C                     _uart_putc:
  8568                           	opt stack 22
  8569                           
  8570                           ;uart_putc@byte stored from wreg
  8571  001C2C  CFE8 F06C          	movff	wreg,uart_putc@byte
  8572  001C30                     l2986:
  8573  001C30  EC4C  F00E         	call	_uart_byte_sent	;wreg free
  8574  001C34  0900               	iorlw	0
  8575  001C36  E0FC               	bz	l2986
  8576                           
  8577                           ;uart.c: 42: TXREG = byte;
  8578  001C38  C06C  FFAD         	movff	uart_putc@byte,4013	;volatile
  8579  001C3C  0012               	return	
  8580  001C3E                     __end_of_uart_putc:
  8581                           	opt stack 0
  8582                           tosu	equ	0xFFF
  8583                           tosh	equ	0xFFE
  8584                           tosl	equ	0xFFD
  8585                           pclath	equ	0xFFA
  8586                           tblptru	equ	0xFF8
  8587                           tblptrh	equ	0xFF7
  8588                           tblptrl	equ	0xFF6
  8589                           tablat	equ	0xFF5
  8590                           prodh	equ	0xFF4
  8591                           prodl	equ	0xFF3
  8592                           intcon	equ	0xFF2
  8593                           indf0	equ	0xFEF
  8594                           postinc0	equ	0xFEE
  8595                           fsr0h	equ	0xFEA
  8596                           fsr0l	equ	0xFE9
  8597                           wreg	equ	0xFE8
  8598                           indf1	equ	0xFE7
  8599                           postinc1	equ	0xFE6
  8600                           postdec1	equ	0xFE5
  8601                           fsr1h	equ	0xFE2
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function _uart_byte_sent *****************
  8611 ;; Defined at:
  8612 ;;		line 46 in file "src/drivers/uart.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;		None
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;		None
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      unsigned char 
  8619 ;; Registers used:
  8620 ;;		wreg
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: FFFFFFFF/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8626 ;;      Params:         0       0       0       0       0       0       0
  8627 ;;      Locals:         0       0       0       0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0
  8629 ;;      Totals:         0       0       0       0       0       0       0
  8630 ;;Total ram usage:        0 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; Hardware stack levels required when called:    5
  8633 ;; This function calls:
  8634 ;;		Nothing
  8635 ;; This function is called by:
  8636 ;;		_uart_putc
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text38
  8641  001C98                     __ptext38:
  8642                           	opt stack 0
  8643  001C98                     _uart_byte_sent:
  8644                           	opt stack 22
  8645                           
  8646                           ;uart.c: 47: return TXIF;
  8647  001C98  0E00               	movlw	0
  8648  001C9A  B89E               	btfsc	3998,4,c	;volatile
  8649  001C9C  0E01               	movlw	1
  8650  001C9E  0012               	return	
  8651  001CA0                     __end_of_uart_byte_sent:
  8652                           	opt stack 0
  8653                           tosu	equ	0xFFF
  8654                           tosh	equ	0xFFE
  8655                           tosl	equ	0xFFD
  8656                           pclath	equ	0xFFA
  8657                           tblptru	equ	0xFF8
  8658                           tblptrh	equ	0xFF7
  8659                           tblptrl	equ	0xFF6
  8660                           tablat	equ	0xFF5
  8661                           prodh	equ	0xFF4
  8662                           prodl	equ	0xFF3
  8663                           intcon	equ	0xFF2
  8664                           indf0	equ	0xFEF
  8665                           postinc0	equ	0xFEE
  8666                           fsr0h	equ	0xFEA
  8667                           fsr0l	equ	0xFE9
  8668                           wreg	equ	0xFE8
  8669                           indf1	equ	0xFE7
  8670                           postinc1	equ	0xFE6
  8671                           postdec1	equ	0xFE5
  8672                           fsr1h	equ	0xFE2
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           fsr2h	equ	0xFDA
  8678                           fsr2l	equ	0xFD9
  8679                           status	equ	0xFD8
  8680                           
  8681 ;; *************** function _adc_init *****************
  8682 ;; Defined at:
  8683 ;;		line 5 in file "src/drivers/adc.c"
  8684 ;; Parameters:    Size  Location     Type
  8685 ;;		None
  8686 ;; Auto vars:     Size  Location     Type
  8687 ;;		None
  8688 ;; Return value:  Size  Location     Type
  8689 ;;		None               void
  8690 ;; Registers used:
  8691 ;;		wreg, status,2
  8692 ;; Tracked objects:
  8693 ;;		On entry : F/0
  8694 ;;		On exit  : F/0
  8695 ;;		Unchanged: FFFFFFF0/0
  8696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8697 ;;      Params:         0       0       0       0       0       0       0
  8698 ;;      Locals:         0       0       0       0       0       0       0
  8699 ;;      Temps:          0       0       0       0       0       0       0
  8700 ;;      Totals:         0       0       0       0       0       0       0
  8701 ;;Total ram usage:        0 bytes
  8702 ;; Hardware stack levels used:    1
  8703 ;; Hardware stack levels required when called:    5
  8704 ;; This function calls:
  8705 ;;		Nothing
  8706 ;; This function is called by:
  8707 ;;		_startup
  8708 ;; This function uses a non-reentrant model
  8709 ;;
  8710                           
  8711                           	psect	text39
  8712  001C06                     __ptext39:
  8713                           	opt stack 0
  8714  001C06                     _adc_init:
  8715                           	opt stack 24
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;adc.c: 6: ADCON0 = 0b00000001;
  8719  001C06  0E01               	movlw	1
  8720  001C08  6EC2               	movwf	4034,c	;volatile
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;adc.c: 7: ADCON1 = 0b00000000;
  8724  001C0A  6AC1               	clrf	4033,c	;volatile
  8725                           
  8726                           ;adc.c: 8: ADCON2 = 0b00010110;
  8727  001C0C  0E16               	movlw	22
  8728  001C0E  6EC0               	movwf	4032,c	;volatile
  8729                           
  8730                           ;adc.c: 9: ANSEL = 0b01100011;
  8731  001C10  0E63               	movlw	99
  8732  001C12  6E7E               	movwf	3966,c	;volatile
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;adc.c: 10: ANSELH = 0;
  8736  001C14  6A7F               	clrf	3967,c	;volatile
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;adc.c: 11: PIE1bits.ADIE = 1;
  8740  001C16  8C9D               	bsf	3997,6,c	;volatile
  8741                           
  8742                           ; BSR set to: 0
  8743  001C18  0012               	return	
  8744  001C1A                     __end_of_adc_init:
  8745                           	opt stack 0
  8746                           tosu	equ	0xFFF
  8747                           tosh	equ	0xFFE
  8748                           tosl	equ	0xFFD
  8749                           pclath	equ	0xFFA
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           indf0	equ	0xFEF
  8758                           postinc0	equ	0xFEE
  8759                           fsr0h	equ	0xFEA
  8760                           fsr0l	equ	0xFE9
  8761                           wreg	equ	0xFE8
  8762                           indf1	equ	0xFE7
  8763                           postinc1	equ	0xFE6
  8764                           postdec1	equ	0xFE5
  8765                           fsr1h	equ	0xFE2
  8766                           fsr1l	equ	0xFE1
  8767                           indf2	equ	0xFDF
  8768                           postinc2	equ	0xFDE
  8769                           postdec2	equ	0xFDD
  8770                           fsr2h	equ	0xFDA
  8771                           fsr2l	equ	0xFD9
  8772                           status	equ	0xFD8
  8773                           
  8774 ;; *************** function _gpio_init *****************
  8775 ;; Defined at:
  8776 ;;		line 4 in file "src/drivers/gpio.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;		None               void
  8783 ;; Registers used:
  8784 ;;		wreg, status,2
  8785 ;; Tracked objects:
  8786 ;;		On entry : F/0
  8787 ;;		On exit  : F/0
  8788 ;;		Unchanged: FFFFFFF0/0
  8789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8790 ;;      Params:         0       0       0       0       0       0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0
  8793 ;;      Totals:         0       0       0       0       0       0       0
  8794 ;;Total ram usage:        0 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    5
  8797 ;; This function calls:
  8798 ;;		Nothing
  8799 ;; This function is called by:
  8800 ;;		_startup
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           	psect	text40
  8805  001C3E                     __ptext40:
  8806                           	opt stack 0
  8807  001C3E                     _gpio_init:
  8808                           	opt stack 24
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;gpio.c: 7: TRISA=0xff;
  8812                           
  8813                           ; BSR set to: 0
  8814  001C3E  6892               	setf	3986,c	;volatile
  8815                           
  8816                           ;gpio.c: 8: TRISB=0xff;
  8817  001C40  6893               	setf	3987,c	;volatile
  8818                           
  8819                           ;gpio.c: 9: ANSELH=0;
  8820  001C42  6A7F               	clrf	3967,c	;volatile
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;gpio.c: 10: TRISC=0xc1;
  8824  001C44  0EC1               	movlw	193
  8825  001C46  6E94               	movwf	3988,c	;volatile
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;gpio.c: 11: TRISD=0x00;
  8829  001C48  6A95               	clrf	3989,c	;volatile
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;gpio.c: 12: LATC=0;
  8833  001C4A  6A8B               	clrf	3979,c	;volatile
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;gpio.c: 13: LATD=0;
  8837  001C4C  6A8C               	clrf	3980,c	;volatile
  8838                           
  8839                           ; BSR set to: 0
  8840  001C4E  0012               	return	
  8841  001C50                     __end_of_gpio_init:
  8842                           	opt stack 0
  8843                           tosu	equ	0xFFF
  8844                           tosh	equ	0xFFE
  8845                           tosl	equ	0xFFD
  8846                           pclath	equ	0xFFA
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           indf0	equ	0xFEF
  8855                           postinc0	equ	0xFEE
  8856                           fsr0h	equ	0xFEA
  8857                           fsr0l	equ	0xFE9
  8858                           wreg	equ	0xFE8
  8859                           indf1	equ	0xFE7
  8860                           postinc1	equ	0xFE6
  8861                           postdec1	equ	0xFE5
  8862                           fsr1h	equ	0xFE2
  8863                           fsr1l	equ	0xFE1
  8864                           indf2	equ	0xFDF
  8865                           postinc2	equ	0xFDE
  8866                           postdec2	equ	0xFDD
  8867                           fsr2h	equ	0xFDA
  8868                           fsr2l	equ	0xFD9
  8869                           status	equ	0xFD8
  8870                           
  8871 ;; *************** function _serialport_startup *****************
  8872 ;; Defined at:
  8873 ;;		line 16 in file "src/modules/serialport.c"
  8874 ;; Parameters:    Size  Location     Type
  8875 ;;		None
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  result          1   18[BANK0 ] enum E3388
  8878 ;; Return value:  Size  Location     Type
  8879 ;;                  1    wreg      enum E3388
  8880 ;; Registers used:
  8881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8882 ;; Tracked objects:
  8883 ;;		On entry : 0/0
  8884 ;;		On exit  : F/0
  8885 ;;		Unchanged: FFFFFFF0/0
  8886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8887 ;;      Params:         0       0       0       0       0       0       0
  8888 ;;      Locals:         0       1       0       0       0       0       0
  8889 ;;      Temps:          0       1       0       0       0       0       0
  8890 ;;      Totals:         0       2       0       0       0       0       0
  8891 ;;Total ram usage:        2 bytes
  8892 ;; Hardware stack levels used:    1
  8893 ;; Hardware stack levels required when called:    6
  8894 ;; This function calls:
  8895 ;;		_rd_buffer_init
  8896 ;; This function is called by:
  8897 ;;		_startup
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text41
  8902  001AA0                     __ptext41:
  8903                           	opt stack 0
  8904  001AA0                     _serialport_startup:
  8905                           	opt stack 23
  8906                           
  8907                           ;serialport.c: 18: result = (ResultSuccess_t) rd_buffer_init(&g_rx_buffer, ((100)))
  8908                           ;serialport.c: 19: | (ResultSuccess_t) rd_buffer_init(&g_tx_buffer, ((100)));
  8909                           
  8910                           ; BSR set to: 0
  8911  001AA0  0E01               	movlw	high _g_tx_buffer
  8912  001AA2  0100               	movlb	0	; () banked
  8913  001AA4  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8914  001AA6  0E00               	movlw	low _g_tx_buffer
  8915  001AA8  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8916  001AAA  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8917  001AAC  0E64               	movlw	100
  8918  001AAE  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8919  001AB0  ECD6  F00C         	call	_rd_buffer_init	;wreg free
  8920  001AB4  6F71               	movwf	??_serialport_startup& (0+255),b
  8921  001AB6  0E02               	movlw	high _g_rx_buffer
  8922  001AB8  0100               	movlb	0	; () banked
  8923  001ABA  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8924  001ABC  0E7F               	movlw	low _g_rx_buffer
  8925  001ABE  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8926  001AC0  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8927  001AC2  0E64               	movlw	100
  8928  001AC4  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8929  001AC6  ECD6  F00C         	call	_rd_buffer_init	;wreg free
  8930  001ACA  1171               	iorwf	??_serialport_startup& (0+255),w,b
  8931  001ACC  6F72               	movwf	serialport_startup@result& (0+255),b
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;serialport.c: 20: return result;
  8935  001ACE  5172               	movf	serialport_startup@result& (0+255),w,b
  8936                           
  8937                           ; BSR set to: 0
  8938  001AD0  0012               	return	
  8939  001AD2                     __end_of_serialport_startup:
  8940                           	opt stack 0
  8941                           tosu	equ	0xFFF
  8942                           tosh	equ	0xFFE
  8943                           tosl	equ	0xFFD
  8944                           pclath	equ	0xFFA
  8945                           tblptru	equ	0xFF8
  8946                           tblptrh	equ	0xFF7
  8947                           tblptrl	equ	0xFF6
  8948                           tablat	equ	0xFF5
  8949                           prodh	equ	0xFF4
  8950                           prodl	equ	0xFF3
  8951                           intcon	equ	0xFF2
  8952                           indf0	equ	0xFEF
  8953                           postinc0	equ	0xFEE
  8954                           fsr0h	equ	0xFEA
  8955                           fsr0l	equ	0xFE9
  8956                           wreg	equ	0xFE8
  8957                           indf1	equ	0xFE7
  8958                           postinc1	equ	0xFE6
  8959                           postdec1	equ	0xFE5
  8960                           fsr1h	equ	0xFE2
  8961                           fsr1l	equ	0xFE1
  8962                           indf2	equ	0xFDF
  8963                           postinc2	equ	0xFDE
  8964                           postdec2	equ	0xFDD
  8965                           fsr2h	equ	0xFDA
  8966                           fsr2l	equ	0xFD9
  8967                           status	equ	0xFD8
  8968                           
  8969 ;; *************** function _rd_buffer_init *****************
  8970 ;; Defined at:
  8971 ;;		line 16 in file "src/modules/rd_buffer.c"
  8972 ;; Parameters:    Size  Location     Type
  8973 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  8974 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  8975 ;;  size            2   14[BANK0 ] int 
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;  result          1   16[BANK0 ] unsigned char 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;                  1    wreg      unsigned char 
  8980 ;; Registers used:
  8981 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8982 ;; Tracked objects:
  8983 ;;		On entry : F/0
  8984 ;;		On exit  : F/0
  8985 ;;		Unchanged: FFFFFFF0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8987 ;;      Params:         0       4       0       0       0       0       0
  8988 ;;      Locals:         0       1       0       0       0       0       0
  8989 ;;      Temps:          0       0       0       0       0       0       0
  8990 ;;      Totals:         0       5       0       0       0       0       0
  8991 ;;Total ram usage:        5 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    5
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_serialport_startup
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text42
  9002  0019AC                     __ptext42:
  9003                           	opt stack 0
  9004  0019AC                     _rd_buffer_init:
  9005                           	opt stack 23
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;rd_buffer.c: 17: CHAR result = FALSE;
  9009                           
  9010                           ; BSR set to: 0
  9011  0019AC  6B70               	clrf	rd_buffer_init@result& (0+255),b
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;rd_buffer.c: 18: if(pbuffer != (0) ){
  9015  0019AE  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9016  0019B0  116C               	iorwf	rd_buffer_init@pbuffer& (0+255),w,b
  9017  0019B2  E01A               	bz	l3044
  9018                           
  9019                           ; BSR set to: 0
  9020                           ;rd_buffer.c: 19: pbuffer->head.first = 0;
  9021  0019B4  EE20 F002          	lfsr	2,2
  9022  0019B8  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9023  0019BA  26D9               	addwf	fsr2l,f,c
  9024  0019BC  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9025  0019BE  22DA               	addwfc	fsr2h,f,c
  9026  0019C0  6ADE               	clrf	postinc2,c
  9027  0019C2  6ADD               	clrf	postdec2,c
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;rd_buffer.c: 20: pbuffer->head.last = 0;
  9031  0019C4  C06C  FFD9         	movff	rd_buffer_init@pbuffer,fsr2l
  9032  0019C8  C06D  FFDA         	movff	rd_buffer_init@pbuffer+1,fsr2h
  9033  0019CC  6ADE               	clrf	postinc2,c
  9034  0019CE  6ADD               	clrf	postdec2,c
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;rd_buffer.c: 22: pbuffer->head.size = size;
  9038  0019D0  EE20 F004          	lfsr	2,4
  9039  0019D4  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9040  0019D6  26D9               	addwf	fsr2l,f,c
  9041  0019D8  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9042  0019DA  22DA               	addwfc	fsr2h,f,c
  9043  0019DC  C06E  FFDE         	movff	rd_buffer_init@size,postinc2
  9044  0019E0  C06F  FFDD         	movff	rd_buffer_init@size+1,postdec2
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;rd_buffer.c: 23: result = TRUE;
  9048  0019E4  0E01               	movlw	1
  9049  0019E6  6F70               	movwf	rd_buffer_init@result& (0+255),b
  9050  0019E8                     l3044:
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;rd_buffer.c: 24: }
  9054                           ;rd_buffer.c: 25: return result;
  9055  0019E8  5170               	movf	rd_buffer_init@result& (0+255),w,b
  9056                           
  9057                           ; BSR set to: 0
  9058  0019EA  0012               	return	
  9059  0019EC                     __end_of_rd_buffer_init:
  9060                           	opt stack 0
  9061                           tosu	equ	0xFFF
  9062                           tosh	equ	0xFFE
  9063                           tosl	equ	0xFFD
  9064                           pclath	equ	0xFFA
  9065                           tblptru	equ	0xFF8
  9066                           tblptrh	equ	0xFF7
  9067                           tblptrl	equ	0xFF6
  9068                           tablat	equ	0xFF5
  9069                           prodh	equ	0xFF4
  9070                           prodl	equ	0xFF3
  9071                           intcon	equ	0xFF2
  9072                           indf0	equ	0xFEF
  9073                           postinc0	equ	0xFEE
  9074                           fsr0h	equ	0xFEA
  9075                           fsr0l	equ	0xFE9
  9076                           wreg	equ	0xFE8
  9077                           indf1	equ	0xFE7
  9078                           postinc1	equ	0xFE6
  9079                           postdec1	equ	0xFE5
  9080                           fsr1h	equ	0xFE2
  9081                           fsr1l	equ	0xFE1
  9082                           indf2	equ	0xFDF
  9083                           postinc2	equ	0xFDE
  9084                           postdec2	equ	0xFDD
  9085                           fsr2h	equ	0xFDA
  9086                           fsr2l	equ	0xFD9
  9087                           status	equ	0xFD8
  9088                           
  9089 ;; *************** function ___awdiv *****************
  9090 ;; Defined at:
  9091 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awdiv.c"
  9092 ;; Parameters:    Size  Location     Type
  9093 ;;  dividend        2   12[BANK0 ] int 
  9094 ;;  divisor         2   14[BANK0 ] int 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  quotient        2   18[BANK0 ] int 
  9097 ;;  sign            1   17[BANK0 ] unsigned char 
  9098 ;;  counter         1   16[BANK0 ] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  2   12[BANK0 ] int 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : F/0
  9105 ;;		On exit  : F/0
  9106 ;;		Unchanged: FFFFFFF0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9108 ;;      Params:         0       4       0       0       0       0       0
  9109 ;;      Locals:         0       4       0       0       0       0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0
  9111 ;;      Totals:         0       8       0       0       0       0       0
  9112 ;;Total ram usage:        8 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    5
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_pd_add_value
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           	psect	text43
  9123  0014B6                     __ptext43:
  9124                           	opt stack 0
  9125  0014B6                     ___awdiv:
  9126                           	opt stack 23
  9127                           
  9128                           ; BSR set to: 0
  9129                           
  9130                           ; BSR set to: 0
  9131  0014B6  6B71               	clrf	___awdiv@sign& (0+255),b
  9132  0014B8  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9133  0014BA  D006               	goto	l3850
  9134                           
  9135                           ; BSR set to: 0
  9136  0014BC  6D6E               	negf	___awdiv@divisor& (0+255),b
  9137  0014BE  1F6F               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9138  0014C0  B0D8               	btfsc	status,0,c
  9139  0014C2  2B6F               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9140                           
  9141                           ; BSR set to: 0
  9142  0014C4  0E01               	movlw	1
  9143  0014C6  6F71               	movwf	___awdiv@sign& (0+255),b
  9144  0014C8                     l3850:
  9145                           
  9146                           ; BSR set to: 0
  9147  0014C8  AF6D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9148  0014CA  D006               	goto	l3856
  9149                           
  9150                           ; BSR set to: 0
  9151  0014CC  6D6C               	negf	___awdiv@dividend& (0+255),b
  9152  0014CE  1F6D               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9153  0014D0  B0D8               	btfsc	status,0,c
  9154  0014D2  2B6D               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9155                           
  9156                           ; BSR set to: 0
  9157  0014D4  0E01               	movlw	1
  9158  0014D6  1B71               	xorwf	___awdiv@sign& (0+255),f,b
  9159  0014D8                     l3856:
  9160                           
  9161                           ; BSR set to: 0
  9162  0014D8  6B72               	clrf	___awdiv@quotient& (0+255),b
  9163  0014DA  6B73               	clrf	(___awdiv@quotient+1)& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166  0014DC  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9167  0014DE  116E               	iorwf	___awdiv@divisor& (0+255),w,b
  9168  0014E0  E01B               	bz	l3878
  9169                           
  9170                           ; BSR set to: 0
  9171  0014E2  0E01               	movlw	1
  9172  0014E4  6F70               	movwf	___awdiv@counter& (0+255),b
  9173  0014E6  D004               	goto	l3864
  9174  0014E8                     l3862:
  9175                           
  9176                           ; BSR set to: 0
  9177  0014E8  90D8               	bcf	status,0,c
  9178  0014EA  376E               	rlcf	___awdiv@divisor& (0+255),f,b
  9179  0014EC  376F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9180  0014EE  2B70               	incf	___awdiv@counter& (0+255),f,b
  9181  0014F0                     l3864:
  9182                           
  9183                           ; BSR set to: 0
  9184  0014F0  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9185  0014F2  D7FA               	goto	l3862
  9186  0014F4                     l3866:
  9187                           
  9188                           ; BSR set to: 0
  9189  0014F4  90D8               	bcf	status,0,c
  9190  0014F6  3772               	rlcf	___awdiv@quotient& (0+255),f,b
  9191  0014F8  3773               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9192                           
  9193                           ; BSR set to: 0
  9194  0014FA  516E               	movf	___awdiv@divisor& (0+255),w,b
  9195  0014FC  5D6C               	subwf	___awdiv@dividend& (0+255),w,b
  9196  0014FE  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9197  001500  596D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9198  001502  E305               	bnc	l3874
  9199                           
  9200                           ; BSR set to: 0
  9201  001504  516E               	movf	___awdiv@divisor& (0+255),w,b
  9202  001506  5F6C               	subwf	___awdiv@dividend& (0+255),f,b
  9203  001508  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9204  00150A  5B6D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9205                           
  9206                           ; BSR set to: 0
  9207  00150C  8172               	bsf	___awdiv@quotient& (0+255),0,b
  9208  00150E                     l3874:
  9209                           
  9210                           ; BSR set to: 0
  9211  00150E  90D8               	bcf	status,0,c
  9212  001510  336F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9213  001512  336E               	rrcf	___awdiv@divisor& (0+255),f,b
  9214                           
  9215                           ; BSR set to: 0
  9216  001514  2F70               	decfsz	___awdiv@counter& (0+255),f,b
  9217  001516  D7EE               	goto	l3866
  9218  001518                     l3878:
  9219                           
  9220                           ; BSR set to: 0
  9221  001518  5171               	movf	___awdiv@sign& (0+255),w,b
  9222  00151A  E004               	bz	l3882
  9223                           
  9224                           ; BSR set to: 0
  9225  00151C  6D72               	negf	___awdiv@quotient& (0+255),b
  9226  00151E  1F73               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9227  001520  B0D8               	btfsc	status,0,c
  9228  001522  2B73               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9229  001524                     l3882:
  9230                           
  9231                           ; BSR set to: 0
  9232  001524  C072  F06C         	movff	___awdiv@quotient,?___awdiv
  9233  001528  C073  F06D         	movff	___awdiv@quotient+1,?___awdiv+1
  9234                           
  9235                           ; BSR set to: 0
  9236  00152C  0012               	return	
  9237  00152E                     __end_of___awdiv:
  9238                           	opt stack 0
  9239                           tosu	equ	0xFFF
  9240                           tosh	equ	0xFFE
  9241                           tosl	equ	0xFFD
  9242                           pclath	equ	0xFFA
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           indf0	equ	0xFEF
  9251                           postinc0	equ	0xFEE
  9252                           fsr0h	equ	0xFEA
  9253                           fsr0l	equ	0xFE9
  9254                           wreg	equ	0xFE8
  9255                           indf1	equ	0xFE7
  9256                           postinc1	equ	0xFE6
  9257                           postdec1	equ	0xFE5
  9258                           fsr1h	equ	0xFE2
  9259                           fsr1l	equ	0xFE1
  9260                           indf2	equ	0xFDF
  9261                           postinc2	equ	0xFDE
  9262                           postdec2	equ	0xFDD
  9263                           fsr2h	equ	0xFDA
  9264                           fsr2l	equ	0xFD9
  9265                           status	equ	0xFD8
  9266                           
  9267 ;; *************** function ___awmod *****************
  9268 ;; Defined at:
  9269 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awmod.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  dividend        2   12[BANK0 ] int 
  9272 ;;  divisor         2   14[BANK0 ] int 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  sign            1   17[BANK0 ] unsigned char 
  9275 ;;  counter         1   16[BANK0 ] unsigned char 
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  2   12[BANK0 ] int 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0
  9280 ;; Tracked objects:
  9281 ;;		On entry : F/0
  9282 ;;		On exit  : F/0
  9283 ;;		Unchanged: FFFFFFF0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9285 ;;      Params:         0       4       0       0       0       0       0
  9286 ;;      Locals:         0       2       0       0       0       0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0
  9288 ;;      Totals:         0       6       0       0       0       0       0
  9289 ;;Total ram usage:        6 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    5
  9292 ;; This function calls:
  9293 ;;		Nothing
  9294 ;; This function is called by:
  9295 ;;		_pd_add_value
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text44
  9300  001618                     __ptext44:
  9301                           	opt stack 0
  9302  001618                     ___awmod:
  9303                           	opt stack 23
  9304                           
  9305                           ; BSR set to: 0
  9306                           
  9307                           ; BSR set to: 0
  9308  001618  6B71               	clrf	___awmod@sign& (0+255),b
  9309  00161A  AF6D               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9310  00161C  D006               	goto	l3892
  9311                           
  9312                           ; BSR set to: 0
  9313  00161E  6D6C               	negf	___awmod@dividend& (0+255),b
  9314  001620  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  9315  001622  B0D8               	btfsc	status,0,c
  9316  001624  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  9317                           
  9318                           ; BSR set to: 0
  9319  001626  0E01               	movlw	1
  9320  001628  6F71               	movwf	___awmod@sign& (0+255),b
  9321  00162A                     l3892:
  9322                           
  9323                           ; BSR set to: 0
  9324  00162A  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9325  00162C  D004               	goto	l3896
  9326                           
  9327                           ; BSR set to: 0
  9328  00162E  6D6E               	negf	___awmod@divisor& (0+255),b
  9329  001630  1F6F               	comf	(___awmod@divisor+1)& (0+255),f,b
  9330  001632  B0D8               	btfsc	status,0,c
  9331  001634  2B6F               	incf	(___awmod@divisor+1)& (0+255),f,b
  9332  001636                     l3896:
  9333                           
  9334                           ; BSR set to: 0
  9335  001636  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9336  001638  116E               	iorwf	___awmod@divisor& (0+255),w,b
  9337  00163A  E017               	bz	l3912
  9338                           
  9339                           ; BSR set to: 0
  9340  00163C  0E01               	movlw	1
  9341  00163E  6F70               	movwf	___awmod@counter& (0+255),b
  9342  001640  D004               	goto	l3902
  9343  001642                     l3900:
  9344                           
  9345                           ; BSR set to: 0
  9346  001642  90D8               	bcf	status,0,c
  9347  001644  376E               	rlcf	___awmod@divisor& (0+255),f,b
  9348  001646  376F               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9349  001648  2B70               	incf	___awmod@counter& (0+255),f,b
  9350  00164A                     l3902:
  9351                           
  9352                           ; BSR set to: 0
  9353  00164A  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9354  00164C  D7FA               	goto	l3900
  9355  00164E                     l3904:
  9356                           
  9357                           ; BSR set to: 0
  9358  00164E  516E               	movf	___awmod@divisor& (0+255),w,b
  9359  001650  5D6C               	subwf	___awmod@dividend& (0+255),w,b
  9360  001652  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9361  001654  596D               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9362  001656  E304               	bnc	l3908
  9363                           
  9364                           ; BSR set to: 0
  9365  001658  516E               	movf	___awmod@divisor& (0+255),w,b
  9366  00165A  5F6C               	subwf	___awmod@dividend& (0+255),f,b
  9367  00165C  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9368  00165E  5B6D               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9369  001660                     l3908:
  9370                           
  9371                           ; BSR set to: 0
  9372  001660  90D8               	bcf	status,0,c
  9373  001662  336F               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9374  001664  336E               	rrcf	___awmod@divisor& (0+255),f,b
  9375                           
  9376                           ; BSR set to: 0
  9377  001666  2F70               	decfsz	___awmod@counter& (0+255),f,b
  9378  001668  D7F2               	goto	l3904
  9379  00166A                     l3912:
  9380                           
  9381                           ; BSR set to: 0
  9382  00166A  5171               	movf	___awmod@sign& (0+255),w,b
  9383  00166C  E004               	bz	l3916
  9384                           
  9385                           ; BSR set to: 0
  9386  00166E  6D6C               	negf	___awmod@dividend& (0+255),b
  9387  001670  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  9388  001672  B0D8               	btfsc	status,0,c
  9389  001674  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  9390  001676                     l3916:
  9391                           
  9392                           ; BSR set to: 0
  9393  001676  C06C  F06C         	movff	___awmod@dividend,?___awmod
  9394  00167A  C06D  F06D         	movff	___awmod@dividend+1,?___awmod+1
  9395                           
  9396                           ; BSR set to: 0
  9397  00167E  0012               	return	
  9398  001680                     __end_of___awmod:
  9399                           	opt stack 0
  9400                           tosu	equ	0xFFF
  9401                           tosh	equ	0xFFE
  9402                           tosl	equ	0xFFD
  9403                           pclath	equ	0xFFA
  9404                           tblptru	equ	0xFF8
  9405                           tblptrh	equ	0xFF7
  9406                           tblptrl	equ	0xFF6
  9407                           tablat	equ	0xFF5
  9408                           prodh	equ	0xFF4
  9409                           prodl	equ	0xFF3
  9410                           intcon	equ	0xFF2
  9411                           indf0	equ	0xFEF
  9412                           postinc0	equ	0xFEE
  9413                           fsr0h	equ	0xFEA
  9414                           fsr0l	equ	0xFE9
  9415                           wreg	equ	0xFE8
  9416                           indf1	equ	0xFE7
  9417                           postinc1	equ	0xFE6
  9418                           postdec1	equ	0xFE5
  9419                           fsr1h	equ	0xFE2
  9420                           fsr1l	equ	0xFE1
  9421                           indf2	equ	0xFDF
  9422                           postinc2	equ	0xFDE
  9423                           postdec2	equ	0xFDD
  9424                           fsr2h	equ	0xFDA
  9425                           fsr2l	equ	0xFD9
  9426                           status	equ	0xFD8
  9427                           
  9428 ;; *************** function ___lbmod *****************
  9429 ;; Defined at:
  9430 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lbmod.c"
  9431 ;; Parameters:    Size  Location     Type
  9432 ;;  dividend        1    wreg     unsigned char 
  9433 ;;  divisor         1   12[BANK0 ] unsigned char 
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  dividend        1   13[BANK0 ] unsigned char 
  9436 ;;  rem             1   15[BANK0 ] unsigned char 
  9437 ;;  counter         1   14[BANK0 ] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      unsigned char 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : F/0
  9444 ;;		On exit  : F/0
  9445 ;;		Unchanged: FFFFFFF0/0
  9446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9447 ;;      Params:         0       1       0       0       0       0       0
  9448 ;;      Locals:         0       3       0       0       0       0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0
  9450 ;;      Totals:         0       4       0       0       0       0       0
  9451 ;;Total ram usage:        4 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    5
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_pd_add_value
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           	psect	text45
  9462  001B2E                     __ptext45:
  9463                           	opt stack 0
  9464  001B2E                     ___lbmod:
  9465                           	opt stack 23
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;___lbmod@dividend stored from wreg
  9469  001B2E  CFE8 F06D          	movff	wreg,___lbmod@dividend
  9470                           
  9471                           ; BSR set to: 0
  9472  001B32  0E08               	movlw	8
  9473  001B34  6F6E               	movwf	___lbmod@counter& (0+255),b
  9474                           
  9475                           ; BSR set to: 0
  9476  001B36  6B6F               	clrf	___lbmod@rem& (0+255),b
  9477  001B38                     l3924:
  9478                           
  9479                           ; BSR set to: 0
  9480  001B38  90D8               	bcf	status,0,c
  9481  001B3A  0100               	movlb	0	; () banked
  9482  001B3C  356D               	rlcf	___lbmod@dividend& (0+255),w,b
  9483  001B3E  356F               	rlcf	___lbmod@rem& (0+255),w,b
  9484  001B40  6F6F               	movwf	___lbmod@rem& (0+255),b
  9485                           
  9486                           ; BSR set to: 0
  9487  001B42  90D8               	bcf	status,0,c
  9488  001B44  376D               	rlcf	___lbmod@dividend& (0+255),f,b
  9489                           
  9490                           ; BSR set to: 0
  9491  001B46  516C               	movf	___lbmod@divisor& (0+255),w,b
  9492  001B48  5D6F               	subwf	___lbmod@rem& (0+255),w,b
  9493  001B4A  E302               	bnc	l3932
  9494                           
  9495                           ; BSR set to: 0
  9496  001B4C  516C               	movf	___lbmod@divisor& (0+255),w,b
  9497  001B4E  5F6F               	subwf	___lbmod@rem& (0+255),f,b
  9498  001B50                     l3932:
  9499                           
  9500                           ; BSR set to: 0
  9501  001B50  2F6E               	decfsz	___lbmod@counter& (0+255),f,b
  9502  001B52  D7F2               	goto	l3924
  9503                           
  9504                           ; BSR set to: 0
  9505  001B54  516F               	movf	___lbmod@rem& (0+255),w,b
  9506                           
  9507                           ; BSR set to: 0
  9508  001B56  0012               	return	
  9509  001B58                     __end_of___lbmod:
  9510                           	opt stack 0
  9511                           tosu	equ	0xFFF
  9512                           tosh	equ	0xFFE
  9513                           tosl	equ	0xFFD
  9514                           pclath	equ	0xFFA
  9515                           tblptru	equ	0xFF8
  9516                           tblptrh	equ	0xFF7
  9517                           tblptrl	equ	0xFF6
  9518                           tablat	equ	0xFF5
  9519                           prodh	equ	0xFF4
  9520                           prodl	equ	0xFF3
  9521                           intcon	equ	0xFF2
  9522                           indf0	equ	0xFEF
  9523                           postinc0	equ	0xFEE
  9524                           fsr0h	equ	0xFEA
  9525                           fsr0l	equ	0xFE9
  9526                           wreg	equ	0xFE8
  9527                           indf1	equ	0xFE7
  9528                           postinc1	equ	0xFE6
  9529                           postdec1	equ	0xFE5
  9530                           fsr1h	equ	0xFE2
  9531                           fsr1l	equ	0xFE1
  9532                           indf2	equ	0xFDF
  9533                           postinc2	equ	0xFDE
  9534                           postdec2	equ	0xFDD
  9535                           fsr2h	equ	0xFDA
  9536                           fsr2l	equ	0xFD9
  9537                           status	equ	0xFD8
  9538                           
  9539 ;; *************** function ___lwdiv *****************
  9540 ;; Defined at:
  9541 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwdiv.c"
  9542 ;; Parameters:    Size  Location     Type
  9543 ;;  dividend        2   12[BANK0 ] unsigned int 
  9544 ;;  divisor         2   14[BANK0 ] unsigned int 
  9545 ;; Auto vars:     Size  Location     Type
  9546 ;;  quotient        2   16[BANK0 ] unsigned int 
  9547 ;;  counter         1   18[BANK0 ] unsigned char 
  9548 ;; Return value:  Size  Location     Type
  9549 ;;                  2   12[BANK0 ] unsigned int 
  9550 ;; Registers used:
  9551 ;;		wreg, status,2, status,0
  9552 ;; Tracked objects:
  9553 ;;		On entry : F/0
  9554 ;;		On exit  : F/0
  9555 ;;		Unchanged: FFFFFFF0/0
  9556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9557 ;;      Params:         0       4       0       0       0       0       0
  9558 ;;      Locals:         0       3       0       0       0       0       0
  9559 ;;      Temps:          0       0       0       0       0       0       0
  9560 ;;      Totals:         0       7       0       0       0       0       0
  9561 ;;Total ram usage:        7 bytes
  9562 ;; Hardware stack levels used:    1
  9563 ;; Hardware stack levels required when called:    5
  9564 ;; This function calls:
  9565 ;;		Nothing
  9566 ;; This function is called by:
  9567 ;;		_printf
  9568 ;; This function uses a non-reentrant model
  9569 ;;
  9570                           
  9571                           	psect	text46
  9572  001894                     __ptext46:
  9573                           	opt stack 0
  9574  001894                     ___lwdiv:
  9575                           	opt stack 21
  9576                           
  9577                           ; BSR set to: 0
  9578                           
  9579                           ; BSR set to: 0
  9580  001894  6B70               	clrf	___lwdiv@quotient& (0+255),b
  9581  001896  6B71               	clrf	(___lwdiv@quotient+1)& (0+255),b
  9582                           
  9583                           ; BSR set to: 0
  9584  001898  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9585  00189A  116E               	iorwf	___lwdiv@divisor& (0+255),w,b
  9586  00189C  E01B               	bz	l1522
  9587                           
  9588                           ; BSR set to: 0
  9589  00189E  0E01               	movlw	1
  9590  0018A0  6F72               	movwf	___lwdiv@counter& (0+255),b
  9591  0018A2  D004               	goto	l3946
  9592  0018A4                     l3944:
  9593                           
  9594                           ; BSR set to: 0
  9595  0018A4  90D8               	bcf	status,0,c
  9596  0018A6  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
  9597  0018A8  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9598  0018AA  2B72               	incf	___lwdiv@counter& (0+255),f,b
  9599  0018AC                     l3946:
  9600                           
  9601                           ; BSR set to: 0
  9602  0018AC  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9603  0018AE  D7FA               	goto	l3944
  9604  0018B0                     l3948:
  9605                           
  9606                           ; BSR set to: 0
  9607  0018B0  90D8               	bcf	status,0,c
  9608  0018B2  3770               	rlcf	___lwdiv@quotient& (0+255),f,b
  9609  0018B4  3771               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9610                           
  9611                           ; BSR set to: 0
  9612  0018B6  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9613  0018B8  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
  9614  0018BA  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9615  0018BC  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9616  0018BE  E305               	bnc	l3956
  9617                           
  9618                           ; BSR set to: 0
  9619  0018C0  516E               	movf	___lwdiv@divisor& (0+255),w,b
  9620  0018C2  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
  9621  0018C4  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9622  0018C6  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9623                           
  9624                           ; BSR set to: 0
  9625  0018C8  8170               	bsf	___lwdiv@quotient& (0+255),0,b
  9626  0018CA                     l3956:
  9627                           
  9628                           ; BSR set to: 0
  9629  0018CA  90D8               	bcf	status,0,c
  9630  0018CC  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9631  0018CE  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
  9632                           
  9633                           ; BSR set to: 0
  9634  0018D0  2F72               	decfsz	___lwdiv@counter& (0+255),f,b
  9635  0018D2  D7EE               	goto	l3948
  9636  0018D4                     l1522:
  9637                           
  9638                           ; BSR set to: 0
  9639  0018D4  C070  F06C         	movff	___lwdiv@quotient,?___lwdiv
  9640  0018D8  C071  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9641                           
  9642                           ; BSR set to: 0
  9643  0018DC  0012               	return	
  9644  0018DE                     __end_of___lwdiv:
  9645                           	opt stack 0
  9646                           tosu	equ	0xFFF
  9647                           tosh	equ	0xFFE
  9648                           tosl	equ	0xFFD
  9649                           pclath	equ	0xFFA
  9650                           tblptru	equ	0xFF8
  9651                           tblptrh	equ	0xFF7
  9652                           tblptrl	equ	0xFF6
  9653                           tablat	equ	0xFF5
  9654                           prodh	equ	0xFF4
  9655                           prodl	equ	0xFF3
  9656                           intcon	equ	0xFF2
  9657                           indf0	equ	0xFEF
  9658                           postinc0	equ	0xFEE
  9659                           fsr0h	equ	0xFEA
  9660                           fsr0l	equ	0xFE9
  9661                           wreg	equ	0xFE8
  9662                           indf1	equ	0xFE7
  9663                           postinc1	equ	0xFE6
  9664                           postdec1	equ	0xFE5
  9665                           fsr1h	equ	0xFE2
  9666                           fsr1l	equ	0xFE1
  9667                           indf2	equ	0xFDF
  9668                           postinc2	equ	0xFDE
  9669                           postdec2	equ	0xFDD
  9670                           fsr2h	equ	0xFDA
  9671                           fsr2l	equ	0xFD9
  9672                           status	equ	0xFD8
  9673                           
  9674 ;; *************** function ___lwmod *****************
  9675 ;; Defined at:
  9676 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwmod.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;  dividend        2   19[BANK0 ] unsigned int 
  9679 ;;  divisor         2   21[BANK0 ] unsigned int 
  9680 ;; Auto vars:     Size  Location     Type
  9681 ;;  counter         1   23[BANK0 ] unsigned char 
  9682 ;; Return value:  Size  Location     Type
  9683 ;;                  2   19[BANK0 ] unsigned int 
  9684 ;; Registers used:
  9685 ;;		wreg, status,2, status,0
  9686 ;; Tracked objects:
  9687 ;;		On entry : F/0
  9688 ;;		On exit  : F/0
  9689 ;;		Unchanged: FFFFFFF0/0
  9690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9691 ;;      Params:         0       4       0       0       0       0       0
  9692 ;;      Locals:         0       1       0       0       0       0       0
  9693 ;;      Temps:          0       0       0       0       0       0       0
  9694 ;;      Totals:         0       5       0       0       0       0       0
  9695 ;;Total ram usage:        5 bytes
  9696 ;; Hardware stack levels used:    1
  9697 ;; Hardware stack levels required when called:    5
  9698 ;; This function calls:
  9699 ;;		Nothing
  9700 ;; This function is called by:
  9701 ;;		_printf
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text47
  9706  0019EC                     __ptext47:
  9707                           	opt stack 0
  9708  0019EC                     ___lwmod:
  9709                           	opt stack 21
  9710                           
  9711                           ; BSR set to: 0
  9712                           
  9713                           ; BSR set to: 0
  9714  0019EC  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9715  0019EE  1175               	iorwf	___lwmod@divisor& (0+255),w,b
  9716  0019F0  E017               	bz	l1532
  9717                           
  9718                           ; BSR set to: 0
  9719  0019F2  0E01               	movlw	1
  9720  0019F4  6F77               	movwf	___lwmod@counter& (0+255),b
  9721  0019F6  D004               	goto	l3966
  9722  0019F8                     l3964:
  9723                           
  9724                           ; BSR set to: 0
  9725  0019F8  90D8               	bcf	status,0,c
  9726  0019FA  3775               	rlcf	___lwmod@divisor& (0+255),f,b
  9727  0019FC  3776               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9728  0019FE  2B77               	incf	___lwmod@counter& (0+255),f,b
  9729  001A00                     l3966:
  9730                           
  9731                           ; BSR set to: 0
  9732  001A00  AF76               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9733  001A02  D7FA               	goto	l3964
  9734  001A04                     l3968:
  9735                           
  9736                           ; BSR set to: 0
  9737  001A04  5175               	movf	___lwmod@divisor& (0+255),w,b
  9738  001A06  5D73               	subwf	___lwmod@dividend& (0+255),w,b
  9739  001A08  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9740  001A0A  5974               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9741  001A0C  E304               	bnc	l3972
  9742                           
  9743                           ; BSR set to: 0
  9744  001A0E  5175               	movf	___lwmod@divisor& (0+255),w,b
  9745  001A10  5F73               	subwf	___lwmod@dividend& (0+255),f,b
  9746  001A12  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9747  001A14  5B74               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9748  001A16                     l3972:
  9749                           
  9750                           ; BSR set to: 0
  9751  001A16  90D8               	bcf	status,0,c
  9752  001A18  3376               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9753  001A1A  3375               	rrcf	___lwmod@divisor& (0+255),f,b
  9754                           
  9755                           ; BSR set to: 0
  9756  001A1C  2F77               	decfsz	___lwmod@counter& (0+255),f,b
  9757  001A1E  D7F2               	goto	l3968
  9758  001A20                     l1532:
  9759                           
  9760                           ; BSR set to: 0
  9761  001A20  C073  F073         	movff	___lwmod@dividend,?___lwmod
  9762  001A24  C074  F074         	movff	___lwmod@dividend+1,?___lwmod+1
  9763                           
  9764                           ; BSR set to: 0
  9765  001A28  0012               	return	
  9766  001A2A                     __end_of___lwmod:
  9767                           	opt stack 0
  9768                           tosu	equ	0xFFF
  9769                           tosh	equ	0xFFE
  9770                           tosl	equ	0xFFD
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           intcon	equ	0xFF2
  9779                           indf0	equ	0xFEF
  9780                           postinc0	equ	0xFEE
  9781                           fsr0h	equ	0xFEA
  9782                           fsr0l	equ	0xFE9
  9783                           wreg	equ	0xFE8
  9784                           indf1	equ	0xFE7
  9785                           postinc1	equ	0xFE6
  9786                           postdec1	equ	0xFE5
  9787                           fsr1h	equ	0xFE2
  9788                           fsr1l	equ	0xFE1
  9789                           indf2	equ	0xFDF
  9790                           postinc2	equ	0xFDE
  9791                           postdec2	equ	0xFDD
  9792                           fsr2h	equ	0xFDA
  9793                           fsr2l	equ	0xFD9
  9794                           status	equ	0xFD8
  9795                           
  9796 ;; *************** function ___wmul *****************
  9797 ;; Defined at:
  9798 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.12\sources\wmul.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;  multiplier      2   12[BANK0 ] unsigned int 
  9801 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;  product         2   16[BANK0 ] unsigned int 
  9804 ;; Return value:  Size  Location     Type
  9805 ;;                  2   12[BANK0 ] unsigned int 
  9806 ;; Registers used:
  9807 ;;		wreg, status,2, status,0
  9808 ;; Tracked objects:
  9809 ;;		On entry : F/0
  9810 ;;		On exit  : F/0
  9811 ;;		Unchanged: FFFFFFF0/0
  9812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9813 ;;      Params:         0       4       0       0       0       0       0
  9814 ;;      Locals:         0       2       0       0       0       0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0
  9816 ;;      Totals:         0       6       0       0       0       0       0
  9817 ;;Total ram usage:        6 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    5
  9820 ;; This function calls:
  9821 ;;		Nothing
  9822 ;; This function is called by:
  9823 ;;		_pd_add_value
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           	psect	text48
  9828  001B02                     __ptext48:
  9829                           	opt stack 0
  9830  001B02                     ___wmul:
  9831                           	opt stack 23
  9832                           
  9833                           ; BSR set to: 0
  9834                           
  9835                           ; BSR set to: 0
  9836  001B02  6B70               	clrf	___wmul@product& (0+255),b
  9837  001B04  6B71               	clrf	(___wmul@product+1)& (0+255),b
  9838  001B06                     l1558:
  9839                           
  9840                           ; BSR set to: 0
  9841  001B06  A16C               	btfss	___wmul@multiplier& (0+255),0,b
  9842  001B08  D004               	goto	l3980
  9843                           
  9844                           ; BSR set to: 0
  9845  001B0A  516E               	movf	___wmul@multiplicand& (0+255),w,b
  9846  001B0C  2770               	addwf	___wmul@product& (0+255),f,b
  9847  001B0E  516F               	movf	(___wmul@multiplicand+1)& (0+255),w,b
  9848  001B10  2371               	addwfc	(___wmul@product+1)& (0+255),f,b
  9849  001B12                     l3980:
  9850                           
  9851                           ; BSR set to: 0
  9852  001B12  90D8               	bcf	status,0,c
  9853  001B14  376E               	rlcf	___wmul@multiplicand& (0+255),f,b
  9854  001B16  376F               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
  9855                           
  9856                           ; BSR set to: 0
  9857  001B18  90D8               	bcf	status,0,c
  9858  001B1A  336D               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
  9859  001B1C  336C               	rrcf	___wmul@multiplier& (0+255),f,b
  9860  001B1E  516D               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9861  001B20  116C               	iorwf	___wmul@multiplier& (0+255),w,b
  9862  001B22  E1F1               	bnz	l1558
  9863                           
  9864                           ; BSR set to: 0
  9865  001B24  C070  F06C         	movff	___wmul@product,?___wmul
  9866  001B28  C071  F06D         	movff	___wmul@product+1,?___wmul+1
  9867                           
  9868                           ; BSR set to: 0
  9869  001B2C  0012               	return	
  9870  001B2E                     __end_of___wmul:
  9871                           	opt stack 0
  9872                           tosu	equ	0xFFF
  9873                           tosh	equ	0xFFE
  9874                           tosl	equ	0xFFD
  9875                           pclath	equ	0xFFA
  9876                           tblptru	equ	0xFF8
  9877                           tblptrh	equ	0xFF7
  9878                           tblptrl	equ	0xFF6
  9879                           tablat	equ	0xFF5
  9880                           prodh	equ	0xFF4
  9881                           prodl	equ	0xFF3
  9882                           intcon	equ	0xFF2
  9883                           indf0	equ	0xFEF
  9884                           postinc0	equ	0xFEE
  9885                           fsr0h	equ	0xFEA
  9886                           fsr0l	equ	0xFE9
  9887                           wreg	equ	0xFE8
  9888                           indf1	equ	0xFE7
  9889                           postinc1	equ	0xFE6
  9890                           postdec1	equ	0xFE5
  9891                           fsr1h	equ	0xFE2
  9892                           fsr1l	equ	0xFE1
  9893                           indf2	equ	0xFDF
  9894                           postinc2	equ	0xFDE
  9895                           postdec2	equ	0xFDD
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _isr_high *****************
  9901 ;; Defined at:
  9902 ;;		line 16 in file "src/interrupts.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;		None
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;		None
  9907 ;; Return value:  Size  Location     Type
  9908 ;;		None               void
  9909 ;; Registers used:
  9910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9916 ;;      Params:         0       0       0       0       0       0       0
  9917 ;;      Locals:         0       0       0       0       0       0       0
  9918 ;;      Temps:          8       0       0       0       0       0       0
  9919 ;;      Totals:         8       0       0       0       0       0       0
  9920 ;;Total ram usage:        8 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    4
  9923 ;; This function calls:
  9924 ;;		_delay_interrupt_service
  9925 ;;		_serialport_service
  9926 ;;		_detection_obtain_analog_service
  9927 ;; This function is called by:
  9928 ;;		Interrupt level 2
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932 ;; *************** function interrupts@isr_high *****************
  9933 ;; Defined at:
  9934 ;;		line 16 in file "src/interrupts.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9948 ;;      Params:         0       0       0       0       0       0       0
  9949 ;;      Locals:         0       0       0       0       0       0       0
  9950 ;;      Temps:          0       8       0       0       0       0       0
  9951 ;;      Totals:         0       8       0       0       0       0       0
  9952 ;;Total ram usage:        8 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    4
  9955 ;; This function calls:
  9956 ;;		_delay_interrupt_service
  9957 ;;		_serialport_service
  9958 ;;		_detection_obtain_analog_service
  9959 ;; This function is called by:
  9960 ;;		Interrupt level 2
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	intcode
  9965  000008                     __pintcode:
  9966                           	opt stack 0
  9967  000008                     _isr_high:
  9968                           	opt stack 19
  9969                           
  9970                           ; BSR set to: 0
  9971  000008  CFE9 F012          	movff	fsr0l,??_isr_high
  9972  00000C  CFEA F013          	movff	fsr0h,??_isr_high+1
  9973  000010  CFD9 F014          	movff	fsr2l,??_isr_high+2
  9974  000014  CFDA F015          	movff	fsr2h,??_isr_high+3
  9975  000018  CFF6 F016          	movff	tblptrl,??_isr_high+4
  9976  00001C  CFF7 F017          	movff	tblptrh,??_isr_high+5
  9977  000020  CFF8 F018          	movff	tblptru,??_isr_high+6
  9978  000024  CFF5 F019          	movff	tablat,??_isr_high+7
  9979  000028                     
  9980                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
  9981  000028  A4F2               	btfss	intcon,2,c	;volatile
  9982  00002A  D001               	goto	i2u575_41
  9983  00002C  D001               	goto	i2u575_40
  9984  00002E                     i2u575_41:
  9985  00002E  D007               	goto	i2l5634
  9986  000030                     i2u575_40:
  9987  000030                     
  9988                           ;interrupts.c: 19: {
  9989                           ;interrupts.c: 20: delay_interrupt_service();
  9990  000030  EC28  F00E         	call	_delay_interrupt_service	;wreg free
  9991  000034                     
  9992                           ; BSR set to: 0
  9993  000034  94F2               	bcf	intcon,2,c	;volatile
  9994  000036                     
  9995                           ; BSR set to: 0
  9996  000036  0EFE               	movlw	254
  9997  000038  6ED7               	movwf	4055,c	;volatile
  9998  00003A  0E0C               	movlw	12
  9999  00003C  6ED6               	movwf	4054,c	;volatile
 10000  00003E                     i2l5634:
 10001                           
 10002                           ;interrupts.c: 23: }
 10003                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 10004  00003E  AA9E               	btfss	3998,5,c	;volatile
 10005  000040  D001               	goto	i2u576_41
 10006  000042  D001               	goto	i2u576_40
 10007  000044                     i2u576_41:
 10008  000044  D003               	goto	i2l5640
 10009  000046                     i2u576_40:
 10010  000046                     
 10011                           ;interrupts.c: 26: {
 10012                           ;interrupts.c: 28: serialport_service();
 10013  000046  EC33  F00D         	call	_serialport_service	;wreg free
 10014  00004A                     
 10015                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 10016  00004A  9A9E               	bcf	3998,5,c	;volatile
 10017  00004C                     i2l5640:
 10018                           
 10019                           ;interrupts.c: 30: }
 10020                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 10021  00004C  AC9E               	btfss	3998,6,c	;volatile
 10022  00004E  D001               	goto	i2u577_41
 10023  000050  D001               	goto	i2u577_40
 10024  000052                     i2u577_41:
 10025  000052  D003               	goto	i2l979
 10026  000054                     i2u577_40:
 10027  000054                     
 10028                           ;interrupts.c: 36: {
 10029                           ;interrupts.c: 38: detection_obtain_analog_service();
 10030  000054  ECBC  F00D         	call	_detection_obtain_analog_service	;wreg free
 10031  000058                     
 10032                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 10033  000058  9C9E               	bcf	3998,6,c	;volatile
 10034  00005A                     i2l979:
 10035  00005A  C019  FFF5         	movff	??_isr_high+7,tablat
 10036  00005E  C018  FFF8         	movff	??_isr_high+6,tblptru
 10037  000062  C017  FFF7         	movff	??_isr_high+5,tblptrh
 10038  000066  C016  FFF6         	movff	??_isr_high+4,tblptrl
 10039  00006A  C015  FFDA         	movff	??_isr_high+3,fsr2h
 10040  00006E  C014  FFD9         	movff	??_isr_high+2,fsr2l
 10041  000072  C013  FFEA         	movff	??_isr_high+1,fsr0h
 10042  000076  C012  FFE9         	movff	??_isr_high,fsr0l
 10043  00007A  0011               	retfie		f
 10044  00007C                     __end_of_isr_high:
 10045                           	opt stack 0
 10046  00007C                     interrupts@isr_high:
 10047                           	opt stack 19
 10048  00007C  CFE9 F064          	movff	fsr0l,??interrupts@isr_high
 10049  000080  CFEA F065          	movff	fsr0h,??interrupts@isr_high+1
 10050  000084  CFD9 F066          	movff	fsr2l,??interrupts@isr_high+2
 10051  000088  CFDA F067          	movff	fsr2h,??interrupts@isr_high+3
 10052  00008C  CFF6 F068          	movff	tblptrl,??interrupts@isr_high+4
 10053  000090  CFF7 F069          	movff	tblptrh,??interrupts@isr_high+5
 10054  000094  CFF8 F06A          	movff	tblptru,??interrupts@isr_high+6
 10055  000098  CFF5 F06B          	movff	tablat,??interrupts@isr_high+7
 10056  00009C                     
 10057                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
 10058  00009C  A4F2               	btfss	intcon,2,c	;volatile
 10059  00009E  D001               	goto	i2u601_41
 10060  0000A0  D001               	goto	i2u601_40
 10061  0000A2                     i2u601_41:
 10062  0000A2  D007               	goto	i2l5766
 10063  0000A4                     i2u601_40:
 10064  0000A4                     
 10065                           ;interrupts.c: 19: {
 10066                           ;interrupts.c: 20: delay_interrupt_service();
 10067  0000A4  EC28  F00E         	call	_delay_interrupt_service	;wreg free
 10068  0000A8                     
 10069                           ; BSR set to: 0
 10070  0000A8  94F2               	bcf	intcon,2,c	;volatile
 10071  0000AA                     
 10072                           ; BSR set to: 0
 10073  0000AA  0EFE               	movlw	254
 10074  0000AC  6ED7               	movwf	4055,c	;volatile
 10075  0000AE  0E0C               	movlw	12
 10076  0000B0  6ED6               	movwf	4054,c	;volatile
 10077  0000B2                     i2l5766:
 10078                           
 10079                           ;interrupts.c: 23: }
 10080                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 10081  0000B2  AA9E               	btfss	3998,5,c	;volatile
 10082  0000B4  D001               	goto	i2u602_41
 10083  0000B6  D001               	goto	i2u602_40
 10084  0000B8                     i2u602_41:
 10085  0000B8  D003               	goto	i2l5772
 10086  0000BA                     i2u602_40:
 10087  0000BA                     
 10088                           ;interrupts.c: 26: {
 10089                           ;interrupts.c: 28: serialport_service();
 10090  0000BA  EC33  F00D         	call	_serialport_service	;wreg free
 10091  0000BE                     
 10092                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 10093  0000BE  9A9E               	bcf	3998,5,c	;volatile
 10094  0000C0                     i2l5772:
 10095                           
 10096                           ;interrupts.c: 30: }
 10097                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 10098  0000C0  AC9E               	btfss	3998,6,c	;volatile
 10099  0000C2  D001               	goto	i2u603_41
 10100  0000C4  D001               	goto	i2u603_40
 10101  0000C6                     i2u603_41:
 10102  0000C6  D003               	goto	i2l1003
 10103  0000C8                     i2u603_40:
 10104  0000C8                     
 10105                           ;interrupts.c: 36: {
 10106                           ;interrupts.c: 38: detection_obtain_analog_service();
 10107  0000C8  ECBC  F00D         	call	_detection_obtain_analog_service	;wreg free
 10108  0000CC                     
 10109                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 10110  0000CC  9C9E               	bcf	3998,6,c	;volatile
 10111  0000CE                     i2l1003:
 10112  0000CE  C06B  FFF5         	movff	??interrupts@isr_high+7,tablat
 10113  0000D2  C06A  FFF8         	movff	??interrupts@isr_high+6,tblptru
 10114  0000D6  C069  FFF7         	movff	??interrupts@isr_high+5,tblptrh
 10115  0000DA  C068  FFF6         	movff	??interrupts@isr_high+4,tblptrl
 10116  0000DE  C067  FFDA         	movff	??interrupts@isr_high+3,fsr2h
 10117  0000E2  C066  FFD9         	movff	??interrupts@isr_high+2,fsr2l
 10118  0000E6  C065  FFEA         	movff	??interrupts@isr_high+1,fsr0h
 10119  0000EA  C064  FFE9         	movff	??interrupts@isr_high,fsr0l
 10120  0000EE  0011               	retfie		f
 10121  0000F0                     __end_ofinterrupts@isr_high:
 10122                           	opt stack 0
 10123  0000F0                     tosu	equ	0xFFF
 10124                           tosh	equ	0xFFE
 10125                           tosl	equ	0xFFD
 10126                           pclath	equ	0xFFA
 10127                           tblptru	equ	0xFF8
 10128                           tblptrh	equ	0xFF7
 10129                           tblptrl	equ	0xFF6
 10130                           tablat	equ	0xFF5
 10131                           prodh	equ	0xFF4
 10132                           prodl	equ	0xFF3
 10133                           intcon	equ	0xFF2
 10134                           indf0	equ	0xFEF
 10135                           postinc0	equ	0xFEE
 10136                           fsr0h	equ	0xFEA
 10137                           fsr0l	equ	0xFE9
 10138                           wreg	equ	0xFE8
 10139                           indf1	equ	0xFE7
 10140                           postinc1	equ	0xFE6
 10141                           postdec1	equ	0xFE5
 10142                           fsr1h	equ	0xFE2
 10143                           fsr1l	equ	0xFE1
 10144                           indf2	equ	0xFDF
 10145                           postinc2	equ	0xFDE
 10146                           postdec2	equ	0xFDD
 10147                           fsr2h	equ	0xFDA
 10148                           fsr2l	equ	0xFD9
 10149                           status	equ	0xFD8
 10150                           
 10151 ;; *************** function _delay_interrupt_service *****************
 10152 ;; Defined at:
 10153 ;;		line 70 in file "src/drivers/delay.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;		None
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;		None
 10158 ;; Return value:  Size  Location     Type
 10159 ;;		None               void
 10160 ;; Registers used:
 10161 ;;		wreg, status,2, status,0
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : F/0
 10165 ;;		Unchanged: FFFFFFF0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       0       0       0       0       0       0
 10168 ;;      Locals:         0       0       0       0       0       0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0
 10170 ;;      Totals:         0       0       0       0       0       0       0
 10171 ;;Total ram usage:        0 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_isr_high
 10177 ;;		interrupts@isr_high
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text50
 10182  001C50                     __ptext50:
 10183                           	opt stack 0
 10184  001C50                     _delay_interrupt_service:
 10185                           	opt stack 22
 10186                           
 10187                           ;delay.c: 71: if(this_delay_timer_ms > 0u) {
 10188  001C50  0100               	movlb	0	; () banked
 10189  001C52  51EE               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
 10190  001C54  11ED               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
 10191  001C56  B4D8               	btfsc	status,2,c
 10192  001C58  0012               	return	
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;delay.c: 72: this_delay_timer_ms--;
 10196  001C5A  07ED               	decf	_this_delay_timer_ms& (0+255),f,b	;volatile
 10197  001C5C  A0D8               	btfss	status,0,c
 10198  001C5E  07EE               	decf	(_this_delay_timer_ms+1)& (0+255),f,b	;volatile
 10199                           
 10200                           ; BSR set to: 0
 10201  001C60  0012               	return	
 10202  001C62                     __end_of_delay_interrupt_service:
 10203                           	opt stack 0
 10204                           tosu	equ	0xFFF
 10205                           tosh	equ	0xFFE
 10206                           tosl	equ	0xFFD
 10207                           pclath	equ	0xFFA
 10208                           tblptru	equ	0xFF8
 10209                           tblptrh	equ	0xFF7
 10210                           tblptrl	equ	0xFF6
 10211                           tablat	equ	0xFF5
 10212                           prodh	equ	0xFF4
 10213                           prodl	equ	0xFF3
 10214                           intcon	equ	0xFF2
 10215                           indf0	equ	0xFEF
 10216                           postinc0	equ	0xFEE
 10217                           fsr0h	equ	0xFEA
 10218                           fsr0l	equ	0xFE9
 10219                           wreg	equ	0xFE8
 10220                           indf1	equ	0xFE7
 10221                           postinc1	equ	0xFE6
 10222                           postdec1	equ	0xFE5
 10223                           fsr1h	equ	0xFE2
 10224                           fsr1l	equ	0xFE1
 10225                           indf2	equ	0xFDF
 10226                           postinc2	equ	0xFDE
 10227                           postdec2	equ	0xFDD
 10228                           fsr2h	equ	0xFDA
 10229                           fsr2l	equ	0xFD9
 10230                           status	equ	0xFD8
 10231                           
 10232 ;; *************** function _serialport_service *****************
 10233 ;; Defined at:
 10234 ;;		line 24 in file "src/modules/serialport.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;		None
 10237 ;; Auto vars:     Size  Location     Type
 10238 ;;  byte            1    3[BANK0 ] unsigned char 
 10239 ;; Return value:  Size  Location     Type
 10240 ;;		None               void
 10241 ;; Registers used:
 10242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10243 ;; Tracked objects:
 10244 ;;		On entry : 0/0
 10245 ;;		On exit  : 0/0
 10246 ;;		Unchanged: FFFFFFF0/0
 10247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10248 ;;      Params:         0       0       0       0       0       0       0
 10249 ;;      Locals:         0       1       0       0       0       0       0
 10250 ;;      Temps:          0       1       0       0       0       0       0
 10251 ;;      Totals:         0       2       0       0       0       0       0
 10252 ;;Total ram usage:        2 bytes
 10253 ;; Hardware stack levels used:    1
 10254 ;; Hardware stack levels required when called:    3
 10255 ;; This function calls:
 10256 ;;		_uart_byte_available
 10257 ;;		_uart_getc
 10258 ;;		i2_rd_buffer_put
 10259 ;; This function is called by:
 10260 ;;		_isr_high
 10261 ;;		interrupts@isr_high
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           	psect	text51
 10266  001A66                     __ptext51:
 10267                           	opt stack 0
 10268  001A66                     _serialport_service:
 10269                           	opt stack 19
 10270                           
 10271                           ;serialport.c: 25: UINT8 byte;
 10272                           ;serialport.c: 26: if (uart_byte_available()) {
 10273                           
 10274                           ; BSR set to: 0
 10275  001A66  EC50  F00E         	call	_uart_byte_available	;wreg free
 10276  001A6A  0900               	iorlw	0
 10277  001A6C  B4D8               	btfsc	status,2,c
 10278  001A6E  0012               	return	
 10279                           
 10280                           ;serialport.c: 27: if (uart_getc(&byte) == RESULT_SUCCESS) {
 10281  001A70  0100               	movlb	0	; () banked
 10282  001A72  0E63               	movlw	serialport_service@byte& (0+255)
 10283  001A74  EC69  F00D         	call	_uart_getc
 10284  001A78  6F62               	movwf	??_serialport_service& (0+255),b
 10285  001A7A  0562               	decf	??_serialport_service& (0+255),w,b
 10286  001A7C  A4D8               	btfss	status,2,c
 10287  001A7E  0012               	return	
 10288                           
 10289                           ; BSR set to: 0
 10290                           ;serialport.c: 28: rd_buffer_put(&g_rx_buffer, &byte);
 10291  001A80  0E02               	movlw	high _g_rx_buffer
 10292  001A82  6E1B               	movwf	?i2_rd_buffer_put+1,c
 10293  001A84  0E7F               	movlw	low _g_rx_buffer
 10294  001A86  6E1A               	movwf	?i2_rd_buffer_put,c
 10295  001A88  0100               	movlb	0	; () banked
 10296  001A8A  0E00               	movlw	high serialport_service@byte
 10297  001A8C  6E1D               	movwf	?i2_rd_buffer_put+3,c
 10298  001A8E  0E63               	movlw	low serialport_service@byte
 10299  001A90  6E1C               	movwf	?i2_rd_buffer_put+2,c
 10300  001A92  EC0F  F006         	call	i2_rd_buffer_put	;wreg free
 10301  001A96  0E01               	movlw	1
 10302  001A98  6E38               	movwf	_pool+5,c	;volatile
 10303  001A9A  0E0A               	movlw	10
 10304  001A9C  6E30               	movwf	_event_miss+5,c	;volatile
 10305  001A9E  0C0A               	retlw	10
 10306  001AA0                     __end_of_serialport_service:
 10307                           	opt stack 0
 10308                           tosu	equ	0xFFF
 10309                           tosh	equ	0xFFE
 10310                           tosl	equ	0xFFD
 10311                           pclath	equ	0xFFA
 10312                           tblptru	equ	0xFF8
 10313                           tblptrh	equ	0xFF7
 10314                           tblptrl	equ	0xFF6
 10315                           tablat	equ	0xFF5
 10316                           prodh	equ	0xFF4
 10317                           prodl	equ	0xFF3
 10318                           intcon	equ	0xFF2
 10319                           indf0	equ	0xFEF
 10320                           postinc0	equ	0xFEE
 10321                           fsr0h	equ	0xFEA
 10322                           fsr0l	equ	0xFE9
 10323                           wreg	equ	0xFE8
 10324                           indf1	equ	0xFE7
 10325                           postinc1	equ	0xFE6
 10326                           postdec1	equ	0xFE5
 10327                           fsr1h	equ	0xFE2
 10328                           fsr1l	equ	0xFE1
 10329                           indf2	equ	0xFDF
 10330                           postinc2	equ	0xFDE
 10331                           postdec2	equ	0xFDD
 10332                           fsr2h	equ	0xFDA
 10333                           fsr2l	equ	0xFD9
 10334                           status	equ	0xFD8
 10335                           
 10336 ;; *************** function _uart_getc *****************
 10337 ;; Defined at:
 10338 ;;		line 56 in file "src/drivers/uart.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;  pbyte           1    wreg     PTR unsigned char 
 10341 ;;		 -> serialport_service@byte(1), 
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  pbyte           1   26[COMRAM] PTR unsigned char 
 10344 ;;		 -> serialport_service@byte(1), 
 10345 ;;  result          1   27[COMRAM] enum E3388
 10346 ;; Return value:  Size  Location     Type
 10347 ;;                  1    wreg      enum E3388
 10348 ;; Registers used:
 10349 ;;		wreg, fsr2l, fsr2h, status,2, cstack
 10350 ;; Tracked objects:
 10351 ;;		On entry : F/0
 10352 ;;		On exit  : F/0
 10353 ;;		Unchanged: FFFFFFF0/0
 10354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10355 ;;      Params:         0       0       0       0       0       0       0
 10356 ;;      Locals:         2       0       0       0       0       0       0
 10357 ;;      Temps:          0       0       0       0       0       0       0
 10358 ;;      Totals:         2       0       0       0       0       0       0
 10359 ;;Total ram usage:        2 bytes
 10360 ;; Hardware stack levels used:    1
 10361 ;; Hardware stack levels required when called:    2
 10362 ;; This function calls:
 10363 ;;		_uart_error
 10364 ;;		_uart_reset
 10365 ;;		_uart_byte_available
 10366 ;; This function is called by:
 10367 ;;		_serialport_service
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text52
 10372  001AD2                     __ptext52:
 10373                           	opt stack 0
 10374  001AD2                     _uart_getc:
 10375                           	opt stack 19
 10376                           
 10377                           ;uart_getc@pbyte stored from wreg
 10378  001AD2  CFE8 F01B          	movff	wreg,uart_getc@pbyte
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;uart.c: 57: ResultSuccess_t result = RESULT_FAIL;
 10382  001AD6  6A1C               	clrf	uart_getc@result,c
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;uart.c: 58: if ( uart_error())
 10386  001AD8  EC39  F00E         	call	_uart_error	;wreg free
 10387  001ADC  0900               	iorlw	0
 10388  001ADE  E003               	bz	i2l5736
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;uart.c: 59: {
 10392                           ;uart.c: 60: uart_reset();
 10393  001AE0  ECCC  F00D         	call	_uart_reset	;wreg free
 10394                           
 10395                           ;uart.c: 61: }
 10396  001AE4  D00C               	goto	i2l5744
 10397  001AE6                     i2l5736:
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;uart.c: 62: else
 10401                           ;uart.c: 63: if( uart_byte_available() )
 10402  001AE6  EC50  F00E         	call	_uart_byte_available	;wreg free
 10403  001AEA  0900               	iorlw	0
 10404  001AEC  E008               	bz	i2l5744
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;uart.c: 64: {
 10408                           ;uart.c: 65: *pbyte = RCREG;
 10409  001AEE  501B               	movf	uart_getc@pbyte,w,c
 10410  001AF0  6ED9               	movwf	fsr2l,c
 10411  001AF2  6ADA               	clrf	fsr2h,c
 10412  001AF4  CFAE FFDF          	movff	4014,indf2	;volatile
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;uart.c: 66: RCIF = 0;
 10416  001AF8  9A9E               	bcf	3998,5,c	;volatile
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;uart.c: 67: result = RESULT_SUCCESS;
 10420  001AFA  0E01               	movlw	1
 10421  001AFC  6E1C               	movwf	uart_getc@result,c
 10422  001AFE                     i2l5744:
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;uart.c: 68: }
 10426                           ;uart.c: 69: return result;
 10427  001AFE  501C               	movf	uart_getc@result,w,c
 10428                           
 10429                           ; BSR set to: 0
 10430  001B00  0012               	return	
 10431  001B02                     __end_of_uart_getc:
 10432                           	opt stack 0
 10433                           tosu	equ	0xFFF
 10434                           tosh	equ	0xFFE
 10435                           tosl	equ	0xFFD
 10436                           pclath	equ	0xFFA
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           intcon	equ	0xFF2
 10444                           indf0	equ	0xFEF
 10445                           postinc0	equ	0xFEE
 10446                           fsr0h	equ	0xFEA
 10447                           fsr0l	equ	0xFE9
 10448                           wreg	equ	0xFE8
 10449                           indf1	equ	0xFE7
 10450                           postinc1	equ	0xFE6
 10451                           postdec1	equ	0xFE5
 10452                           fsr1h	equ	0xFE2
 10453                           fsr1l	equ	0xFE1
 10454                           indf2	equ	0xFDF
 10455                           postinc2	equ	0xFDE
 10456                           postdec2	equ	0xFDD
 10457                           fsr2h	equ	0xFDA
 10458                           fsr2l	equ	0xFD9
 10459                           status	equ	0xFD8
 10460                           
 10461 ;; *************** function _uart_reset *****************
 10462 ;; Defined at:
 10463 ;;		line 73 in file "src/drivers/uart.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;		None
 10468 ;; Return value:  Size  Location     Type
 10469 ;;		None               void
 10470 ;; Registers used:
 10471 ;;		wreg, status,2, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : F/0
 10474 ;;		On exit  : F/0
 10475 ;;		Unchanged: FFFFFFF0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10477 ;;      Params:         0       0       0       0       0       0       0
 10478 ;;      Locals:         0       0       0       0       0       0       0
 10479 ;;      Temps:          0       0       0       0       0       0       0
 10480 ;;      Totals:         0       0       0       0       0       0       0
 10481 ;;Total ram usage:        0 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    1
 10484 ;; This function calls:
 10485 ;;		_uart_byte_available
 10486 ;;		_uart_error
 10487 ;; This function is called by:
 10488 ;;		_uart_getc
 10489 ;; This function uses a non-reentrant model
 10490 ;;
 10491                           
 10492                           	psect	text53
 10493  001B98                     __ptext53:
 10494                           	opt stack 0
 10495  001B98                     _uart_reset:
 10496                           	opt stack 19
 10497                           
 10498                           ; BSR set to: 0
 10499                           ;uart.c: 74: while(uart_error() )
 10500                           
 10501                           ; BSR set to: 0
 10502  001B98  D008               	goto	i2l5724
 10503  001B9A                     i2l169:
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;uart.c: 75: {
 10507                           ;uart.c: 76: CREN = 0;
 10508  001B9A  98AB               	bcf	4011,4,c	;volatile
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;uart.c: 77: RCREG;
 10512  001B9C  50AE               	movf	4014,w,c	;volatile
 10513                           
 10514                           ;uart.c: 78: RCREG;
 10515  001B9E  50AE               	movf	4014,w,c	;volatile
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;uart.c: 79: CREN = 1;
 10519  001BA0  88AB               	bsf	4011,4,c	;volatile
 10520  001BA2                     i2l5722:
 10521                           
 10522                           ; BSR set to: 0
 10523  001BA2  EC50  F00E         	call	_uart_byte_available	;wreg free
 10524  001BA6  0900               	iorlw	0
 10525  001BA8  E1FC               	bnz	i2l5722
 10526  001BAA                     i2l5724:
 10527                           
 10528                           ; BSR set to: 0
 10529  001BAA  EC39  F00E         	call	_uart_error	;wreg free
 10530  001BAE  0900               	iorlw	0
 10531  001BB0  B4D8               	btfsc	status,2,c
 10532  001BB2  0012               	return	
 10533  001BB4  D7F2               	goto	i2l169
 10534  001BB6                     __end_of_uart_reset:
 10535                           	opt stack 0
 10536                           tosu	equ	0xFFF
 10537                           tosh	equ	0xFFE
 10538                           tosl	equ	0xFFD
 10539                           pclath	equ	0xFFA
 10540                           tblptru	equ	0xFF8
 10541                           tblptrh	equ	0xFF7
 10542                           tblptrl	equ	0xFF6
 10543                           tablat	equ	0xFF5
 10544                           prodh	equ	0xFF4
 10545                           prodl	equ	0xFF3
 10546                           intcon	equ	0xFF2
 10547                           indf0	equ	0xFEF
 10548                           postinc0	equ	0xFEE
 10549                           fsr0h	equ	0xFEA
 10550                           fsr0l	equ	0xFE9
 10551                           wreg	equ	0xFE8
 10552                           indf1	equ	0xFE7
 10553                           postinc1	equ	0xFE6
 10554                           postdec1	equ	0xFE5
 10555                           fsr1h	equ	0xFE2
 10556                           fsr1l	equ	0xFE1
 10557                           indf2	equ	0xFDF
 10558                           postinc2	equ	0xFDE
 10559                           postdec2	equ	0xFDD
 10560                           fsr2h	equ	0xFDA
 10561                           fsr2l	equ	0xFD9
 10562                           status	equ	0xFD8
 10563                           
 10564 ;; *************** function _uart_byte_available *****************
 10565 ;; Defined at:
 10566 ;;		line 52 in file "src/drivers/uart.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;		None
 10569 ;; Auto vars:     Size  Location     Type
 10570 ;;		None
 10571 ;; Return value:  Size  Location     Type
 10572 ;;                  1    wreg      unsigned char 
 10573 ;; Registers used:
 10574 ;;		wreg
 10575 ;; Tracked objects:
 10576 ;;		On entry : 0/0
 10577 ;;		On exit  : 0/0
 10578 ;;		Unchanged: FFFFFFFF/0
 10579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10580 ;;      Params:         0       0       0       0       0       0       0
 10581 ;;      Locals:         0       0       0       0       0       0       0
 10582 ;;      Temps:          0       0       0       0       0       0       0
 10583 ;;      Totals:         0       0       0       0       0       0       0
 10584 ;;Total ram usage:        0 bytes
 10585 ;; Hardware stack levels used:    1
 10586 ;; This function calls:
 10587 ;;		Nothing
 10588 ;; This function is called by:
 10589 ;;		_uart_getc
 10590 ;;		_uart_reset
 10591 ;;		_serialport_service
 10592 ;; This function uses a non-reentrant model
 10593 ;;
 10594                           
 10595                           	psect	text54
 10596  001CA0                     __ptext54:
 10597                           	opt stack 0
 10598  001CA0                     _uart_byte_available:
 10599                           	opt stack 20
 10600                           
 10601                           ;uart.c: 53: return RC1IF;
 10602                           
 10603                           ; BSR set to: 0
 10604  001CA0  0E00               	movlw	0
 10605  001CA2  BA9E               	btfsc	3998,5,c	;volatile
 10606  001CA4  0E01               	movlw	1
 10607  001CA6  0012               	return	
 10608  001CA8                     __end_of_uart_byte_available:
 10609                           	opt stack 0
 10610                           tosu	equ	0xFFF
 10611                           tosh	equ	0xFFE
 10612                           tosl	equ	0xFFD
 10613                           pclath	equ	0xFFA
 10614                           tblptru	equ	0xFF8
 10615                           tblptrh	equ	0xFF7
 10616                           tblptrl	equ	0xFF6
 10617                           tablat	equ	0xFF5
 10618                           prodh	equ	0xFF4
 10619                           prodl	equ	0xFF3
 10620                           intcon	equ	0xFF2
 10621                           indf0	equ	0xFEF
 10622                           postinc0	equ	0xFEE
 10623                           fsr0h	equ	0xFEA
 10624                           fsr0l	equ	0xFE9
 10625                           wreg	equ	0xFE8
 10626                           indf1	equ	0xFE7
 10627                           postinc1	equ	0xFE6
 10628                           postdec1	equ	0xFE5
 10629                           fsr1h	equ	0xFE2
 10630                           fsr1l	equ	0xFE1
 10631                           indf2	equ	0xFDF
 10632                           postinc2	equ	0xFDE
 10633                           postdec2	equ	0xFDD
 10634                           fsr2h	equ	0xFDA
 10635                           fsr2l	equ	0xFD9
 10636                           status	equ	0xFD8
 10637                           
 10638 ;; *************** function _uart_error *****************
 10639 ;; Defined at:
 10640 ;;		line 85 in file "src/drivers/uart.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;		None
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;		None
 10645 ;; Return value:  Size  Location     Type
 10646 ;;                  1    wreg      unsigned char 
 10647 ;; Registers used:
 10648 ;;		wreg, status,2
 10649 ;; Tracked objects:
 10650 ;;		On entry : F/0
 10651 ;;		On exit  : F/0
 10652 ;;		Unchanged: FFFFFFF0/0
 10653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10654 ;;      Params:         0       0       0       0       0       0       0
 10655 ;;      Locals:         1       0       0       0       0       0       0
 10656 ;;      Temps:          0       0       0       0       0       0       0
 10657 ;;      Totals:         1       0       0       0       0       0       0
 10658 ;;Total ram usage:        1 bytes
 10659 ;; Hardware stack levels used:    1
 10660 ;; This function calls:
 10661 ;;		Nothing
 10662 ;; This function is called by:
 10663 ;;		_uart_getc
 10664 ;;		_uart_reset
 10665 ;; This function uses a non-reentrant model
 10666 ;;
 10667                           
 10668                           	psect	text55
 10669  001C72                     __ptext55:
 10670                           	opt stack 0
 10671  001C72                     _uart_error:
 10672                           	opt stack 19
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;uart.c: 86: return RCSTAbits.OERR || RCSTAbits.FERR ;
 10676  001C72  0E01               	movlw	1
 10677  001C74  6E1A               	movwf	_uart_error$257,c
 10678                           
 10679                           ; BSR set to: 0
 10680  001C76  A2AB               	btfss	4011,1,c	;volatile
 10681                           
 10682                           ; BSR set to: 0
 10683  001C78  B4AB               	btfsc	4011,2,c	;volatile
 10684  001C7A  D001               	goto	i2l5370
 10685                           
 10686                           ; BSR set to: 0
 10687  001C7C  6A1A               	clrf	_uart_error$257,c
 10688  001C7E                     i2l5370:
 10689                           
 10690                           ; BSR set to: 0
 10691  001C7E  501A               	movf	_uart_error$257,w,c
 10692                           
 10693                           ; BSR set to: 0
 10694  001C80  0012               	return	
 10695  001C82                     __end_of_uart_error:
 10696                           	opt stack 0
 10697                           tosu	equ	0xFFF
 10698                           tosh	equ	0xFFE
 10699                           tosl	equ	0xFFD
 10700                           pclath	equ	0xFFA
 10701                           tblptru	equ	0xFF8
 10702                           tblptrh	equ	0xFF7
 10703                           tblptrl	equ	0xFF6
 10704                           tablat	equ	0xFF5
 10705                           prodh	equ	0xFF4
 10706                           prodl	equ	0xFF3
 10707                           intcon	equ	0xFF2
 10708                           indf0	equ	0xFEF
 10709                           postinc0	equ	0xFEE
 10710                           fsr0h	equ	0xFEA
 10711                           fsr0l	equ	0xFE9
 10712                           wreg	equ	0xFE8
 10713                           indf1	equ	0xFE7
 10714                           postinc1	equ	0xFE6
 10715                           postdec1	equ	0xFE5
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function _detection_obtain_analog_service *****************
 10726 ;; Defined at:
 10727 ;;		line 137 in file "src/modules/detection.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;		None
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  adc_data        1    2[BANK0 ] unsigned char 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;		None               void
 10734 ;; Registers used:
 10735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10741 ;;      Params:         0       0       0       0       0       0       0
 10742 ;;      Locals:         0       1       0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0
 10744 ;;      Totals:         0       1       0       0       0       0       0
 10745 ;;Total ram usage:        1 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    1
 10748 ;; This function calls:
 10749 ;;		_adc_read
 10750 ;;		i2_rd_buffer_put
 10751 ;; This function is called by:
 10752 ;;		_isr_high
 10753 ;;		interrupts@isr_high
 10754 ;; This function uses a non-reentrant model
 10755 ;;
 10756                           
 10757                           	psect	text56
 10758  001B78                     __ptext56:
 10759                           	opt stack 0
 10760  001B78                     _detection_obtain_analog_service:
 10761                           	opt stack 21
 10762                           
 10763                           ;detection.c: 138: UINT8 adc_data;
 10764                           ;detection.c: 139: adc_data = adc_read(0);
 10765                           
 10766                           ; BSR set to: 0
 10767  001B78  0E00               	movlw	0
 10768  001B7A  EC92  F00C         	call	_adc_read
 10769  001B7E  501A               	movf	?_adc_read,w,c
 10770  001B80  0100               	movlb	0	; () banked
 10771  001B82  6F62               	movwf	detection_obtain_analog_service@adc_data& (0+255),b
 10772                           
 10773                           ; BSR set to: 0
 10774                           ;detection.c: 140: rd_buffer_put(&meas_buffer, &adc_data);
 10775  001B84  0E04               	movlw	high _meas_buffer
 10776  001B86  6E1B               	movwf	?i2_rd_buffer_put+1,c
 10777  001B88  0E50               	movlw	low _meas_buffer
 10778  001B8A  6E1A               	movwf	?i2_rd_buffer_put,c
 10779  001B8C  0E00               	movlw	high detection_obtain_analog_service@adc_data
 10780  001B8E  6E1D               	movwf	?i2_rd_buffer_put+3,c
 10781  001B90  0E62               	movlw	low detection_obtain_analog_service@adc_data
 10782  001B92  6E1C               	movwf	?i2_rd_buffer_put+2,c
 10783  001B94  EF0F  F006         	goto	i2_rd_buffer_put	;wreg free
 10784  001B98                     __end_of_detection_obtain_analog_service:
 10785                           	opt stack 0
 10786                           tosu	equ	0xFFF
 10787                           tosh	equ	0xFFE
 10788                           tosl	equ	0xFFD
 10789                           pclath	equ	0xFFA
 10790                           tblptru	equ	0xFF8
 10791                           tblptrh	equ	0xFF7
 10792                           tblptrl	equ	0xFF6
 10793                           tablat	equ	0xFF5
 10794                           prodh	equ	0xFF4
 10795                           prodl	equ	0xFF3
 10796                           intcon	equ	0xFF2
 10797                           indf0	equ	0xFEF
 10798                           postinc0	equ	0xFEE
 10799                           fsr0h	equ	0xFEA
 10800                           fsr0l	equ	0xFE9
 10801                           wreg	equ	0xFE8
 10802                           indf1	equ	0xFE7
 10803                           postinc1	equ	0xFE6
 10804                           postdec1	equ	0xFE5
 10805                           fsr1h	equ	0xFE2
 10806                           fsr1l	equ	0xFE1
 10807                           indf2	equ	0xFDF
 10808                           postinc2	equ	0xFDE
 10809                           postdec2	equ	0xFDD
 10810                           fsr2h	equ	0xFDA
 10811                           fsr2l	equ	0xFD9
 10812                           status	equ	0xFD8
 10813                           
 10814 ;; *************** function _adc_read *****************
 10815 ;; Defined at:
 10816 ;;		line 22 in file "src/drivers/adc.c"
 10817 ;; Parameters:    Size  Location     Type
 10818 ;;  adc_number      1    wreg     unsigned char 
 10819 ;; Auto vars:     Size  Location     Type
 10820 ;;  adc_number      1   28[COMRAM] unsigned char 
 10821 ;; Return value:  Size  Location     Type
 10822 ;;                  2   25[COMRAM] unsigned short 
 10823 ;; Registers used:
 10824 ;;		wreg, status,2, status,0
 10825 ;; Tracked objects:
 10826 ;;		On entry : 0/0
 10827 ;;		On exit  : 0/0
 10828 ;;		Unchanged: 0/0
 10829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10830 ;;      Params:         2       0       0       0       0       0       0
 10831 ;;      Locals:         1       0       0       0       0       0       0
 10832 ;;      Temps:          1       0       0       0       0       0       0
 10833 ;;      Totals:         4       0       0       0       0       0       0
 10834 ;;Total ram usage:        4 bytes
 10835 ;; Hardware stack levels used:    1
 10836 ;; This function calls:
 10837 ;;		Nothing
 10838 ;; This function is called by:
 10839 ;;		_detection_obtain_analog_service
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text57
 10844  001924                     __ptext57:
 10845                           	opt stack 0
 10846  001924                     _adc_read:
 10847                           	opt stack 21
 10848                           
 10849                           ;adc_read@adc_number stored from wreg
 10850  001924  CFE8 F01D          	movff	wreg,adc_read@adc_number
 10851                           
 10852                           ;adc.c: 23: if(ADCON0bits.CHS != adc_number)
 10853  001928  30C2               	rrcf	4034,w,c	;volatile
 10854  00192A  32E8               	rrcf	wreg,f,c
 10855  00192C  0B0F               	andlw	15
 10856  00192E  181D               	xorwf	adc_read@adc_number,w,c
 10857  001930  E010               	bz	i2l5378
 10858                           
 10859                           ;adc.c: 24: {
 10860                           ;adc.c: 25: ADCON0bits.CHS = adc_number;
 10861  001932  C01D  F01C         	movff	adc_read@adc_number,??_adc_read
 10862  001936  461C               	rlncf	??_adc_read,f,c
 10863  001938  461C               	rlncf	??_adc_read,f,c
 10864  00193A  50C2               	movf	4034,w,c	;volatile
 10865  00193C  181C               	xorwf	??_adc_read,w,c
 10866  00193E  0BC3               	andlw	-61
 10867  001940  181C               	xorwf	??_adc_read,w,c
 10868  001942  6EC2               	movwf	4034,c	;volatile
 10869  001944  F000               	nop		;# 
 10870  001946  F000               	nop		;# 
 10871  001948  F000               	nop		;# 
 10872  00194A  F000               	nop		;# 
 10873  00194C  F000               	nop		;# 
 10874  00194E  F000               	nop		;# 
 10875  001950  F000               	nop		;# 
 10876  001952                     i2l5378:
 10877                           
 10878                           ;adc.c: 27: }
 10879                           ;adc.c: 28: ADCON0bits.GO_nDONE = TRUE;
 10880  001952  82C2               	bsf	4034,1,c	;volatile
 10881                           
 10882                           ;adc.c: 29: while (GODONE) {asm(" nop");asm(" nop");}
 10883  001954  D002               	goto	i2l227
 10884  001956                     i2l228:
 10885  001956  F000               	nop		;# 
 10886  001958  F000               	nop		;# 
 10887  00195A                     i2l227:
 10888  00195A  B2C2               	btfsc	4034,1,c	;volatile
 10889  00195C  D7FC               	goto	i2l228
 10890                           
 10891                           ;adc.c: 30: ADIF = FALSE;
 10892  00195E  9C9E               	bcf	3998,6,c	;volatile
 10893                           
 10894                           ;adc.c: 31: return ADRES;
 10895  001960  CFC3 F01A          	movff	4035,?_adc_read	;volatile
 10896  001964  CFC4 F01B          	movff	4036,?_adc_read+1	;volatile
 10897  001968  0012               	return	
 10898  00196A                     __end_of_adc_read:
 10899                           	opt stack 0
 10900                           tosu	equ	0xFFF
 10901                           tosh	equ	0xFFE
 10902                           tosl	equ	0xFFD
 10903                           pclath	equ	0xFFA
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           indf0	equ	0xFEF
 10912                           postinc0	equ	0xFEE
 10913                           fsr0h	equ	0xFEA
 10914                           fsr0l	equ	0xFE9
 10915                           wreg	equ	0xFE8
 10916                           indf1	equ	0xFE7
 10917                           postinc1	equ	0xFE6
 10918                           postdec1	equ	0xFE5
 10919                           fsr1h	equ	0xFE2
 10920                           fsr1l	equ	0xFE1
 10921                           indf2	equ	0xFDF
 10922                           postinc2	equ	0xFDE
 10923                           postdec2	equ	0xFDD
 10924                           fsr2h	equ	0xFDA
 10925                           fsr2l	equ	0xFD9
 10926                           status	equ	0xFD8
 10927                           
 10928 ;; *************** function i2_rd_buffer_put *****************
 10929 ;; Defined at:
 10930 ;;		line 148 in file "src/modules/rd_buffer.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;  rd_buffer_pu    2   25[COMRAM] PTR struct .
 10933 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10934 ;;  rd_buffer_pu    2   27[COMRAM] PTR unsigned char 
 10935 ;;		 -> STR_5(6), STR_4(6), STR_3(5), STR_2(5), 
 10936 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
 10937 ;; Auto vars:     Size  Location     Type
 10938 ;;  rd_buffer_pu    2   40[COMRAM] int 
 10939 ;;  rd_buffer_pu    2   38[COMRAM] int 
 10940 ;;  rd_buffer_pu    2   35[COMRAM] PTR volatile unsigned ch
 10941 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10942 ;;  rd_buffer_pu    1   37[COMRAM] unsigned char 
 10943 ;;  rd_buffer_pu    1    0        unsigned char 
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      unsigned char 
 10946 ;; Registers used:
 10947 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10948 ;; Tracked objects:
 10949 ;;		On entry : F/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: FFFFFFF0/0
 10952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10953 ;;      Params:         4       0       0       0       0       0       0
 10954 ;;      Locals:         8       0       0       0       0       0       0
 10955 ;;      Temps:          5       0       0       0       0       0       0
 10956 ;;      Totals:        17       0       0       0       0       0       0
 10957 ;;Total ram usage:       17 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; This function calls:
 10960 ;;		Nothing
 10961 ;; This function is called by:
 10962 ;;		_serialport_service
 10963 ;;		_detection_obtain_analog_service
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text58
 10968  000C1E                     __ptext58:
 10969                           	opt stack 0
 10970  000C1E                     i2_rd_buffer_put:
 10971                           	opt stack 21
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;rd_buffer.c: 150: SIZE sz ;
 10975                           ;rd_buffer.c: 151: sz = pbuffer->head.last - pbuffer->head.first;
 10976                           
 10977                           ; BSR set to: 0
 10978  000C1E  EE20 F002          	lfsr	2,2
 10979  000C22  D891               	call	PL44	;call to abstracted procedure
 10980  000C24  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10981  000C28  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10982  000C2C  CFDE F020          	movff	postinc2,??i2_rd_buffer_put+2
 10983  000C30  CFDD F021          	movff	postdec2,??i2_rd_buffer_put+3
 10984  000C34  501E               	movf	??i2_rd_buffer_put,w,c
 10985  000C36  5C20               	subwf	??i2_rd_buffer_put+2,w,c
 10986  000C38  6E27               	movwf	i2rd_buffer_put@sz,c
 10987  000C3A  501F               	movf	??i2_rd_buffer_put+1,w,c
 10988  000C3C  5821               	subwfb	??i2_rd_buffer_put+3,w,c
 10989  000C3E  6E28               	movwf	i2rd_buffer_put@sz+1,c
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;rd_buffer.c: 152: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
 10993  000C40  0E01               	movlw	1
 10994  000C42  6E26               	movwf	i2_rd_buffer_put$482,c
 10995                           
 10996                           ; BSR set to: 0
 10997  000C44  D889               	call	PL60	;call to abstracted procedure
 10998  000C46  64EA               	cpfsgt	fsr0h,c
 10999  000C48  D003               	bra	i2u587_47
 11000  000C4A  6EEA               	movwf	fsr0h,c
 11001  000C4C  50EF               	movf	indf0,w,c
 11002  000C4E  D003               	bra	i2u587_40
 11003  000C50                     i2u587_47:
 11004  000C50  6EF7               	movwf	tblptrh,c
 11005  000C52  0008               	tblrd		*
 11006  000C54  50F5               	movf	tablat,w,c
 11007  000C56                     i2u587_40:
 11008  000C56  0A0A               	xorlw	10
 11009  000C58  E00C               	bz	i2l5692
 11010  000C5A  D87E               	call	PL60	;call to abstracted procedure
 11011  000C5C  64EA               	cpfsgt	fsr0h,c
 11012  000C5E  D003               	bra	i2u589_47
 11013  000C60  6EEA               	movwf	fsr0h,c
 11014  000C62  50EF               	movf	indf0,w,c
 11015  000C64  D003               	bra	i2u589_40
 11016  000C66                     i2u589_47:
 11017  000C66  6EF7               	movwf	tblptrh,c
 11018  000C68  0008               	tblrd		*
 11019  000C6A  50F5               	movf	tablat,w,c
 11020  000C6C                     i2u589_40:
 11021  000C6C  0A0D               	xorlw	13
 11022  000C6E  A4D8               	btfss	status,2,c
 11023  000C70  6A26               	clrf	i2_rd_buffer_put$482,c
 11024  000C72                     i2l5692:
 11025  000C72  5026               	movf	i2_rd_buffer_put$482,w,c
 11026  000C74  0100               	movlb	0	; () banked
 11027  000C76  13BE               	iorwf	_this_contains_crlf& (0+255),f,b
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;rd_buffer.c: 154: if(sz < 0 ) {
 11031  000C78  AE28               	btfss	i2rd_buffer_put@sz+1,7,c
 11032  000C7A  D00A               	goto	i2l285
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;rd_buffer.c: 155: sz += pbuffer->head.size;
 11036  000C7C  EE20 F004          	lfsr	2,4
 11037  000C80  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 11038  000C82  26D9               	addwf	fsr2l,f,c
 11039  000C84  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 11040  000C86  22DA               	addwfc	fsr2h,f,c
 11041  000C88  50DE               	movf	postinc2,w,c
 11042  000C8A  2627               	addwf	i2rd_buffer_put@sz,f,c
 11043  000C8C  50DD               	movf	postdec2,w,c
 11044  000C8E  2228               	addwfc	i2rd_buffer_put@sz+1,f,c
 11045  000C90                     i2l285:
 11046                           
 11047                           ; BSR set to: 0
 11048                           ;rd_buffer.c: 156: }
 11049                           ;rd_buffer.c: 157: if(sz < (pbuffer->head.size - 1))
 11050  000C90  EE20 F004          	lfsr	2,4
 11051  000C94  D858               	call	PL44	;call to abstracted procedure
 11052  000C96  0EFF               	movlw	255
 11053  000C98  241E               	addwf	??i2_rd_buffer_put,w,c
 11054  000C9A  6E20               	movwf	(??i2_rd_buffer_put+2)& (0+255),c
 11055  000C9C  0EFF               	movlw	255
 11056  000C9E  201F               	addwfc	??i2_rd_buffer_put+1,w,c
 11057  000CA0  6E21               	movwf	(??i2_rd_buffer_put+3)& (0+255),c
 11058  000CA2  5028               	movf	i2rd_buffer_put@sz+1,w,c
 11059  000CA4  0A80               	xorlw	128
 11060  000CA6  6E22               	movwf	(??i2_rd_buffer_put+4)& (0+255),c
 11061  000CA8  5020               	movf	??i2_rd_buffer_put+2,w,c
 11062  000CAA  5C27               	subwf	i2rd_buffer_put@sz,w,c
 11063  000CAC  5021               	movf	??i2_rd_buffer_put+3,w,c
 11064  000CAE  0A80               	xorlw	128
 11065  000CB0  5822               	subwfb	(??i2_rd_buffer_put+4)& (0+255),w,c
 11066  000CB2  B0D8               	btfsc	status,0,c
 11067  000CB4  0012               	return	
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;rd_buffer.c: 158: {
 11071                           ;rd_buffer.c: 159: INT ind = pbuffer->head.last;
 11072  000CB6  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 11073  000CBA  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 11074  000CBE  CFDE F029          	movff	postinc2,i2rd_buffer_put@ind
 11075  000CC2  CFDD F02A          	movff	postdec2,i2rd_buffer_put@ind+1
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;rd_buffer.c: 160: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
 11079  000CC6  C01A  F01E         	movff	i2rd_buffer_put@pbuffer,??i2_rd_buffer_put
 11080  000CCA  C01B  F01F         	movff	i2rd_buffer_put@pbuffer+1,??i2_rd_buffer_put+1
 11081  000CCE  5029               	movf	i2rd_buffer_put@ind,w,c
 11082  000CD0  261E               	addwf	??i2_rd_buffer_put,f,c
 11083  000CD2  502A               	movf	i2rd_buffer_put@ind+1,w,c
 11084  000CD4  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 11085  000CD6  0E06               	movlw	6
 11086  000CD8  261E               	addwf	??i2_rd_buffer_put,f,c
 11087  000CDA  0E00               	movlw	0
 11088  000CDC  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 11089  000CDE  C01E  F024         	movff	??i2_rd_buffer_put,i2rd_buffer_put@mes_rec
 11090  000CE2  C01F  F025         	movff	??i2_rd_buffer_put+1,i2rd_buffer_put@mes_rec+1
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;rd_buffer.c: 161: (*mes_rec) = (*prec);
 11094  000CE6  C01C  FFF6         	movff	i2rd_buffer_put@prec,tblptrl
 11095  000CEA  C01D  FFF7         	movff	i2rd_buffer_put@prec+1,tblptrh
 11096  000CEE  6AF8               	clrf	tblptru,c
 11097  000CF0  C024  FFD9         	movff	i2rd_buffer_put@mes_rec,fsr2l
 11098  000CF4  C025  FFDA         	movff	i2rd_buffer_put@mes_rec+1,fsr2h
 11099  000CF8  0E05               	movlw	(high __ramtop+-1)
 11100  000CFA  64F7               	cpfsgt	tblptrh,c
 11101  000CFC  D003               	bra	i2u593_47
 11102  000CFE  0008               	tblrd		*
 11103  000D00  50F5               	movf	tablat,w,c
 11104  000D02  D005               	bra	i2u593_40
 11105  000D04                     i2u593_47:
 11106  000D04  CFF6 FFE9          	movff	tblptrl,fsr0l
 11107  000D08  CFF7 FFEA          	movff	tblptrh,fsr0h
 11108  000D0C  50EF               	movf	indf0,w,c
 11109  000D0E                     i2u593_40:
 11110  000D0E  6EDF               	movwf	indf2,c
 11111                           
 11112                           ;rd_buffer.c: 162: ind++;
 11113  000D10  4A29               	infsnz	i2rd_buffer_put@ind,f,c
 11114  000D12  2A2A               	incf	i2rd_buffer_put@ind+1,f,c
 11115                           
 11116                           ;rd_buffer.c: 164: if(ind == pbuffer->head.size ) {
 11117  000D14  EE20 F004          	lfsr	2,4
 11118  000D18  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 11119  000D1A  26D9               	addwf	fsr2l,f,c
 11120  000D1C  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 11121  000D1E  22DA               	addwfc	fsr2h,f,c
 11122  000D20  52DE               	movf	postinc2,f,c
 11123  000D22  502A               	movf	i2rd_buffer_put@ind+1,w,c
 11124  000D24  18DD               	xorwf	postdec2,w,c
 11125  000D26  C029  FFE8         	movff	i2rd_buffer_put@ind,wreg
 11126  000D2A  B4D8               	btfsc	status,2,c
 11127  000D2C  18DF               	xorwf	indf2,w,c
 11128  000D2E  E102               	bnz	i2l5710
 11129                           
 11130                           ;rd_buffer.c: 165: ind = 0;
 11131  000D30  6A29               	clrf	i2rd_buffer_put@ind,c
 11132  000D32  6A2A               	clrf	i2rd_buffer_put@ind+1,c
 11133  000D34                     i2l5710:
 11134                           
 11135                           ;rd_buffer.c: 166: }
 11136                           ;rd_buffer.c: 167: pbuffer->head.last = ind;
 11137  000D34  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 11138  000D38  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 11139  000D3C  C029  FFDE         	movff	i2rd_buffer_put@ind,postinc2
 11140  000D40  C02A  FFDD         	movff	i2rd_buffer_put@ind+1,postdec2
 11141  000D44  0012               	return	
 11142  000D46                     __end_ofi2_rd_buffer_put:
 11143                           	opt stack 0
 11144  000D46                     PL44:
 11145                           	opt stack 21
 11146  000D46  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 11147  000D48  26D9               	addwf	fsr2l,f,c
 11148  000D4A  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 11149  000D4C  22DA               	addwfc	fsr2h,f,c
 11150  000D4E  CFDE F01E          	movff	postinc2,??i2_rd_buffer_put
 11151  000D52  CFDD F01F          	movff	postdec2,??i2_rd_buffer_put+1
 11152  000D56  0012               	return	
 11153  000D58                     __end_ofPL44:
 11154                           	opt stack 0
 11155  000D58                     PL60:
 11156                           	opt stack 21
 11157  000D58  501C               	movf	i2rd_buffer_put@prec,w,c
 11158  000D5A  6EF6               	movwf	tblptrl,c
 11159  000D5C  6EE9               	movwf	fsr0l,c
 11160  000D5E  0E05               	movlw	(high __ramtop+-1)
 11161  000D60  6EEA               	movwf	fsr0h,c
 11162  000D62  501D               	movf	i2rd_buffer_put@prec+1,w,c
 11163  000D64  0012               	return	
 11164  000D66                     __end_ofPL60:
 11165                           	opt stack 0
 11166                           tosu	equ	0xFFF
 11167                           tosh	equ	0xFFE
 11168                           tosl	equ	0xFFD
 11169                           pclath	equ	0xFFA
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           indf0	equ	0xFEF
 11178                           postinc0	equ	0xFEE
 11179                           fsr0h	equ	0xFEA
 11180                           fsr0l	equ	0xFE9
 11181                           wreg	equ	0xFE8
 11182                           indf1	equ	0xFE7
 11183                           postinc1	equ	0xFE6
 11184                           postdec1	equ	0xFE5
 11185                           fsr1h	equ	0xFE2
 11186                           fsr1l	equ	0xFE1
 11187                           indf2	equ	0xFDF
 11188                           postinc2	equ	0xFDE
 11189                           postdec2	equ	0xFDD
 11190                           fsr2h	equ	0xFDA
 11191                           fsr2l	equ	0xFD9
 11192                           status	equ	0xFD8
 11193                           tosu	equ	0xFFF
 11194                           tosh	equ	0xFFE
 11195                           tosl	equ	0xFFD
 11196                           pclath	equ	0xFFA
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           prodh	equ	0xFF4
 11202                           prodl	equ	0xFF3
 11203                           intcon	equ	0xFF2
 11204                           indf0	equ	0xFEF
 11205                           postinc0	equ	0xFEE
 11206                           fsr0h	equ	0xFEA
 11207                           fsr0l	equ	0xFE9
 11208                           wreg	equ	0xFE8
 11209                           indf1	equ	0xFE7
 11210                           postinc1	equ	0xFE6
 11211                           postdec1	equ	0xFE5
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221                           	psect	param0
 11222  0000                     tosu	equ	0xFFF
 11223                           tosh	equ	0xFFE
 11224                           tosl	equ	0xFFD
 11225                           pclath	equ	0xFFA
 11226                           tblptru	equ	0xFF8
 11227                           tblptrh	equ	0xFF7
 11228                           tblptrl	equ	0xFF6
 11229                           tablat	equ	0xFF5
 11230                           prodh	equ	0xFF4
 11231                           prodl	equ	0xFF3
 11232                           intcon	equ	0xFF2
 11233                           indf0	equ	0xFEF
 11234                           postinc0	equ	0xFEE
 11235                           fsr0h	equ	0xFEA
 11236                           fsr0l	equ	0xFE9
 11237                           wreg	equ	0xFE8
 11238                           indf1	equ	0xFE7
 11239                           postinc1	equ	0xFE6
 11240                           postdec1	equ	0xFE5
 11241                           fsr1h	equ	0xFE2
 11242                           fsr1l	equ	0xFE1
 11243                           indf2	equ	0xFDF
 11244                           postinc2	equ	0xFDE
 11245                           postdec2	equ	0xFDD
 11246                           fsr2h	equ	0xFDA
 11247                           fsr2l	equ	0xFD9
 11248                           status	equ	0xFD8
 11249                           tosu	equ	0xFFF
 11250                           tosh	equ	0xFFE
 11251                           tosl	equ	0xFFD
 11252                           pclath	equ	0xFFA
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           indf0	equ	0xFEF
 11261                           postinc0	equ	0xFEE
 11262                           fsr0h	equ	0xFEA
 11263                           fsr0l	equ	0xFE9
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postinc1	equ	0xFE6
 11267                           postdec1	equ	0xFE5
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8


Data Sizes:
    Strings     50
    Constant    538
    Data        0
    BSS         1075
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      66
    BANK0           160     73     143
    BANK1           256      0     208
    BANK2           256      0     234
    BANK3           256      0     227
    BANK4           256      0     187
    BANK5           256      0     127

Pointer List with Targets:

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_syntax_as_integer	int  size(1) Largest target is 0

    ?_syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    on_parameter_found@p	PTR const void  size(3) Largest target is 32767
		 -> parameter_text(BANK3[127]), parameter_value(BANK2[127]), ROM(CODE[32767]), 

    ?_string_utils_from_hex	int  size(1) Largest target is 0

    ?_string_utils_strchr	int  size(1) Largest target is 0

    ?_string_utils_split	int  size(1) Largest target is 0

    ?_string_utils_copy	int  size(1) Largest target is 0

    ?_string_utils_strlen	int  size(1) Largest target is 0

    ?_rd_buffer_cnt	int  size(1) Largest target is 0

    ?_adc_read	unsigned short  size(1) Largest target is 0

    printf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_1(CODE[28]), 

    ?_printf	int  size(1) Largest target is 0

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1618$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    events	volatile PTR FTN()void [8] size(2) Largest target is 0
		 -> detection_task(), serialport_task(), 

    pd_add_value@d	PTR volatile struct . size(2) Largest target is 101
		 -> pd_detector(BANK1[101]), 

    cla_add_value@d	PTR volatile struct . size(1) Largest target is 21
		 -> cla_detector(BANK0[21]), 

    sp__syntax_as_bytearray	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    sp__syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    syntax_string@pchain	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    syntax_string@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    this_parse_item@pitem	PTR char  size(1) Largest target is 1
		 -> parameter_id(BANK0[1]), command_id(BANK0[1]), 

    this_parse_item@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    this_parse_item@pvar	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_item@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_variable_load_from_text@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_from_hex@pdata	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_from_hex@phex_str	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_strncmp@pstr2	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strncmp@pstr1	PTR const unsigned char  size(2) Largest target is 528
		 -> syx_param_list(CODE[528]), 

    string_utils_strchr@pbuf	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_split@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    string_utils_copy@pdst	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), parameter_value(BANK2[127]), 

    string_utils_copy@psrc	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_strlen@pstr	PTR const unsigned char  size(2) Largest target is 528
		 -> parameter_value(BANK2[127]), syx_param_list(CODE[528]), serialport_buffer(BANK3[100]), 

    serialport_write@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> parameter_text(BANK3[127]), 

    S514$callback_function	PTR FTN()void  size(1) Largest target is 0

    timers_list.callback_function	PTR FTN()void  size(1) Largest target is 0

    rd_buffer_getn@prec	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    rd_buffer_getn@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_put@mes_rec	PTR volatile unsigned char  size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_put@prec	PTR unsigned char  size(2) Largest target is 127
		 -> STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> detection_obtain_analog_service@adc_data(BANK0[1]), parameter_text(BANK3[127]), putch@byte(BANK0[1]), serialport_service@byte(BANK0[1]), 

    rd_buffer_put@pbuffer	PTR struct . size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_get@prec	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), rd_buffer_readline@ch(BANK0[1]), 

    rd_buffer_get@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_cnt@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_readline@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_rx_buffer(BANK2[107]), 

    rd_buffer_readline@psize	PTR int  size(1) Largest target is 2
		 -> serialport_task@size(BANK0[2]), 

    rd_buffer_readline@pdata	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    rd_buffer_init@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    uart_getc@pbyte	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_service@byte(BANK0[1]), 

    uart_puts@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_6(CODE[6]), serialport_buffer(BANK3[100]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr_high in COMRAM

    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put
    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put

Critical Paths under _main in BANK0

    _main->_serialport_task
    _serialport_task->_syntax_string
    _rd_buffer_readline->_rd_buffer_get
    _rd_buffer_getn->_rd_buffer_get
    _syntax_string->_on_parameter_found
    _this_parse_item->_this_variable_load_from_text
    _string_utils_strncmp->_string_utils_is_upper_case
    _this_variable_load_from_text->_string_utils_from_hex
    _string_utils_from_hex->_string_utils_strlen
    _string_utils_strlen->_string_utils_is_symbol
    _on_parameter_found->_printf
    _detection_task->_pd_add_value
    _pd_add_value->___awdiv
    _printf->_putch
    _putch->_rd_buffer_put
    _set_parameter->_serialport_write
    _get_parameter->_serialport_write
    _serialport_write->_rd_buffer_put
    _startup->_serialport_startup
    _sysclk_init->_sysclk_setup_intosc
    _uart_init->_uart_set_baudrate
    _uart_puts->_uart_putc
    _serialport_startup->_rd_buffer_init
    ___lwmod->___lwdiv

Critical Paths under _isr_high in BANK0

    interrupts@isr_high->_serialport_service

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   19812
                                             69 BANK0      4     4      0
                           _delay_ms
                            _startup
                     _detection_task
                    _serialport_task
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2      22
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serialport_task                                      2     2      0   14817
                                             67 BANK0      2     2      0
                 _rd_buffer_readline
                      _syntax_string
                      _rd_buffer_cnt
                     _rd_buffer_getn
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_readline                                   6     1      5     427
                                             23 BANK0      6     1      5
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_cnt                                        8     6      2     112
                                             12 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_getn                                       9     3      6     389
                                             23 BANK0      9     3      6
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_get                                       11     7      4     291
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _syntax_string                                       11     8      3   13505
                                             56 BANK0     11     8      3
                _string_utils_strlen
                 _string_utils_split
                    _this_parse_item
                 _on_parameter_found
                _string_utils_strchr
 ---------------------------------------------------------------------------------
 (3) _string_utils_split                                  13     6      7     319
                                             12 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _this_parse_item                                     17    14      3    2426
                                             38 BANK0     17    14      3
                _string_utils_strchr
                  _string_utils_copy
                _string_utils_strlen
               _string_utils_strncmp
       _this_variable_load_from_text
 ---------------------------------------------------------------------------------
 (4) _string_utils_strncmp                                14     7      7     407
                                             14 BANK0     14     7      7
         _string_utils_is_upper_case
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_upper_case                           2     2      0      68
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _this_variable_load_from_text                         5     2      3     933
                                             33 BANK0      5     2      3
                _string_utils_strchr
                  _string_utils_copy
              _string_utils_from_hex
 ---------------------------------------------------------------------------------
 (5) _string_utils_copy                                    9     2      7     121
                                             12 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (3) _string_utils_strchr                                 11     7      4     202
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (5) _string_utils_from_hex                               13     9      4     499
                                             20 BANK0     13     9      4
                _string_utils_strlen
               _symb_from_hex_to_bin
 ---------------------------------------------------------------------------------
 (6) _string_utils_strlen                                  6     4      2     202
                                             14 BANK0      6     4      2
             _string_utils_is_symbol
 ---------------------------------------------------------------------------------
 (7) _string_utils_is_symbol                               2     2      0      68
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _symb_from_hex_to_bin                                 1     1      0      88
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _on_parameter_found                                   8     2      6    9316
                                             49 BANK0      7     1      6
                             _printf
                      _set_parameter
                      _get_parameter
                   _serialport_write
 ---------------------------------------------------------------------------------
 (1) _detection_task                                       3     3      0    3534
                                             43 BANK0      3     3      0
                       _pd_add_value
                      _cla_add_value
 ---------------------------------------------------------------------------------
 (2) _cla_add_value                                       13     9      4     906
                                             12 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _pd_add_value                                        23    19      4    2605
                                             20 BANK0     23    19      4
                            ___lbmod
                            ___awdiv
                             ___wmul
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _printf                                              19    11      8    3286
                                             30 BANK0     19    11      8
                              _putch
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0    1595
                                             29 BANK0      1     1      0
                      _rd_buffer_put
 ---------------------------------------------------------------------------------
 (4) _set_parameter                                        2     2      0    1885
                                             31 BANK0      2     2      0
                  _syntax_as_integer
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (5) _syntax_as_integer                                    2     0      2       0
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _get_parameter                                        2     2      0    1870
                                             31 BANK0      2     2      0
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (4) _serialport_write                                     2     0      2    1645
                                             29 BANK0      2     0      2
                      _rd_buffer_put
                    _syntax_get_text (ARG)
 ---------------------------------------------------------------------------------
 (5) _rd_buffer_put                                       17    13      4    1420
                                             12 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (5) _syntax_get_text                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup                                              1     1      0     369
                                             19 BANK0      1     1      0
                          _gpio_init
                        _sysclk_init
                           _adc_init
                          _uart_init
                          _uart_puts
                 _serialport_startup
 ---------------------------------------------------------------------------------
 (2) _sysclk_init                                          0     0      0      22
                _sysclk_setup_intosc
 ---------------------------------------------------------------------------------
 (3) _sysclk_setup_intosc                                  1     1      0      22
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
                  _uart_set_baudrate
 ---------------------------------------------------------------------------------
 (3) _uart_set_baudrate                                    3     0      3       0
                                             12 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            4     0      4      89
                                             13 BANK0      4     0      4
                          _uart_putc
 ---------------------------------------------------------------------------------
 (3) _uart_putc                                            1     1      0      22
                                             12 BANK0      1     1      0
                     _uart_byte_sent
 ---------------------------------------------------------------------------------
 (4) _uart_byte_sent                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialport_startup                                   2     2      0     158
                                             17 BANK0      2     2      0
                     _rd_buffer_init
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_init                                       5     1      4     134
                                             12 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     300
                                             12 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     296
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     159
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     162
                                             12 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     159
                                             19 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      92
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr_high                                             8     8      0    6655
                                             17 COMRAM     8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3485
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 (8) interrupts@isr_high                                   8     8      0    6655
                                              4 BANK0      8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3485
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _startup
     _gpio_init
     _sysclk_init
       _sysclk_setup_intosc
     _adc_init
     _uart_init
       _uart_set_baudrate
     _uart_puts
       _uart_putc
         _uart_byte_sent
     _serialport_startup
       _rd_buffer_init
   _detection_task
     _pd_add_value
       ___lbmod
       ___awdiv
       ___wmul
       ___awmod
     _cla_add_value
   _serialport_task
     _rd_buffer_readline
       _rd_buffer_get
     _syntax_string
       _string_utils_strlen
         _string_utils_is_symbol
       _string_utils_split
       _this_parse_item
         _string_utils_strchr
         _string_utils_copy
         _string_utils_strlen
           _string_utils_is_symbol
         _string_utils_strncmp
           _string_utils_is_upper_case
         _this_variable_load_from_text
           _string_utils_strchr
           _string_utils_copy
           _string_utils_from_hex
             _string_utils_strlen
               _string_utils_is_symbol
             _symb_from_hex_to_bin
       _on_parameter_found
         _printf
           _putch
             _rd_buffer_put
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
         _set_parameter
           _syntax_as_integer
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _get_parameter
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _serialport_write
           _rd_buffer_put
           _syntax_get_text (ARG)
       _string_utils_strchr
     _rd_buffer_cnt
     _rd_buffer_getn
       _rd_buffer_get
     _uart_puts
       _uart_putc
         _uart_byte_sent

 _isr_high (ROOT)
   _delay_interrupt_service
   _serialport_service
     _uart_byte_available
     _uart_getc
       _uart_error
       _uart_reset
         _uart_byte_available
         _uart_error
       _uart_byte_available
     i2_rd_buffer_put
   _detection_obtain_analog_service
     _adc_read
     i2_rd_buffer_put

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0      7F      14       49.6%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      BB      13       73.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      E3      11       88.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      EA       9       91.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     49      8F       5       89.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      11       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4A8      15        0.0%
DATA                 0      0     4B9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Wed Oct 14 23:01:40 2015

                ?_delay_interrupt_service 0001                  __size_of_this_parse_item 0154  
                   __end_of_syntax_string 0AC0                          ?i2_rd_buffer_put 001A  
                                      PL2 04B6                                        PL4 04DE  
                                      PL6 04F2                                        PL8 0504  
                            ___awdiv@sign 0071                       ___wmul@multiplicand 006E  
                string_utils_from_hex@len 007B             string_utils_from_hex@phex_str 0076  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                                     PL10 051A                                       PL20 07E4  
                                     PL12 07B2                                       PL30 0E2C  
                                     PL22 07F4                                       PL14 07C8  
                                     PL40 0BFE                                       PL32 057A  
                                     PL24 0536                                       PL16 10C4  
                                     PL50 0AC0                                       PL42 0E42  
                                     PL34 0590                                       PL26 0554  
                                     PL18 07D6                                       PL60 0D58  
                                     PL52 05D8                                       PL44 0D46  
                                     PL36 0806                                       PL28 0564  
                                     PL62 1792                                       PL54 0C10  
                                     PL46 05B6                                       PL38 05A2  
                                     PL64 05F6                                       PL56 05E8  
                                     PL48 05C8                                       PL66 0602  
                                     PL58 0968                                       l502 1BCE  
                                     l444 17EE                                       l540 1038  
                                     l285 0B46                                       l703 06A2  
                                     l481 10BA                                       l492 1BE8  
                                     l652 0890                                       l750 032A  
                                     l742 03D6                                       l647 11EC  
                                     l823 1578                                       l825 157C  
                                     l754 0382                                       l826 1582  
                                     l739 0248                                       l958 1920  
                            __CFG_CPB$OFF 000000                __size_of_string_utils_copy 0088  
                            __CFG_CPD$OFF 000000                              __CFG_BORV$27 000000  
                            ___awmod@sign 0071                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   rd_buffer_getn@pbuffer 0077                     __end_of_cla_add_value 07B2  
                            __CFG_LVP$OFF 000000                    __end_of_syx_param_list 7FCC  
                                    l1025 0EDE                                      l1018 0E70  
                                    l1044 0D7A                                      l1028 0F12  
                                    l3100 1840                                      l1522 18D4  
                                    l1532 1A20                                      l3044 19E8  
                                    l3302 13F6                                      l3150 1A52  
                                    l3062 198E      __end_of_this_variable_load_from_text 120E  
   __size_of_this_variable_load_from_text 0092                                      l3144 1A30  
                                    l3056 197A              _this_variable_load_from_text 117C  
                                    l3330 1066                                      l3306 1406  
                                    l3090 0FBA                                      l3404 15BC  
                                    l3244 17A8                                      l3420 115A  
                                    l3316 141C                                      l3068 19AA  
                                    l1558 1B06                                      l3510 0648  
                                    l3414 1106                                      l3334 108E  
                                    l3430 11D6                                      l3336 1092  
                                    l3280 13AA                                      l3088 0FB6  
                                    l3610 0314                                      l3602 02CE  
                                    l3434 11F4                                      l3450 0898  
                                    l3620 039A                                      l3604 02E4  
                                    l3516 0674                                      l3508 0628  
                                    l3268 133A                                      l3276 1376  
                                    l3380 103C                                      l3372 1020  
                                    l3630 03F2                                      l3542 07B0  
                                    l3534 0752                                      l3390 15AA  
                                    l3358 0FD2                                      l3382 1040  
                                    l3470 0960                                      l3454 08CA  
                                    l3294 13DA                                      l3632 0408  
                                    l3624 03C0                                      l3616 0370  
                                    l3368 1012                                      l3384 1050  
                                    l3464 0940                                      l3472 0964  
                                    l3288 13BE                                      l5410 0BEC  
                                    l3650 0496                                      l3538 0770  
                                    l3394 15B0                                      l3378 1032  
                                    l3900 1642                                      l3572 0172  
                                    l5500 16B6                                      l3468 0958  
                                    l5420 12D0                                      l3902 164A  
                                    l3646 0488                                      l3638 0438  
                                    l3654 04B4                                      l3398 15B6  
                                    l3670 1596                                      l2950 1C22  
                                    l3904 164E                                      l3912 166A  
                                    l3584 0232                                      l3576 0178  
                                    l5504 16BC                                      l3850 14C8  
                                    l5506 16C8                                      l5450 09D4  
                                    l3932 1B50                                      l3924 1B38  
                                    l3916 1676                                      l3908 1660  
                                    l2980 1764                                      l5540 0DB2  
                                    l5516 0D6C                                      l3596 029A  
                                    l5460 0A08                                      l3668 1588  
                                    l3862 14E8                                      l5534 0DAE  
                                    l5470 0A96                                      l3944 18A4  
                                    l3864 14F0                                      l3856 14D8  
                                    l2976 1744                                      l5392 0B28  
                                    l5552 0DDE                                      l5560 0E24  
                                    l5472 0A9E                                      l3946 18AC  
                                    l3882 1524                                      l3874 150E  
                                    l3866 14F4                                      l2986 1C30  
                                    l5482 184C                                      l5570 1226  
                                    l5554 0DE4                                      l5466 0A5E  
                                    l5458 09FE                                      l5650 0E62  
                                    l3980 1B12                                      l3972 1A16  
                                    l3964 19F8                                      l3956 18CA  
                                    l3948 18B0                                      l3892 162A  
                                    l5580 129A                                      l5572 1268  
                                    l5564 1216                                      l5548 0DD2  
                                    l5476 0AAE                                      l5468 0A7A  
                                    l3966 1A00                                      l3878 1518  
                                    l5486 1866                                      l5558 0E1C  
                                    l5662 0E98                                      l3968 1A04  
                                    l3896 1636                                      l5592 14A8  
                                    l5664 0EA2                                      l5656 0E78  
                                    l5648 0E56                                      _ADIF 007CF6  
                                    l5578 128E                                      l5498 16B0  
                                    l5668 0EA8                                      STR_1 7FCC  
                                    STR_2 7FF4                                      STR_3 7FF9  
                                    STR_4 7FEE                                      STR_5 7FEE  
                                    STR_6 7FE8                                      _CREN 007D5C  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    u2250 135E                                      u2340 107E  
                                    u2260 1396                                      u2190 17D4  
                                    u1800 175A                                      u2257 1354  
                                    u2370 10B6                                      u2347 1074  
                                    u2267 138C                                      u1820 178A  
                                    u2197 17CE                                      u1807 1754  
                                    u2377 10AC                                      u1827 1784  
                                    u2635 066C                                      u2555 08E8  
                                    u2655 06EE                                      u1945 0F46  
                                    u2675 0760                                      u5500 0BC4  
                                    u2685 0782                                      u5440 0B08  
                                    u5610 188C                                      u5507 0BBA  
                                    u5460 0B20                                      _RCIF 007CF5  
                                    u5447 0B02                                      u5617 1886  
                                    u5467 0B1A                                      u5848 0EC4  
                                    u5849 0ED8                                      u5868 0EF2  
                                    u5869 0F06                                      _TMR0 000FD6  
                                    _TXIF 007CF4            string_utils_is_upper_case@symb 006D  
            __end_of_symb_from_hex_to_bin 1618                              __CFG_PWRT$ON 000000  
                        ??_uart_byte_sent 006C               __size_of_string_utils_split 0084  
                        ??_rd_buffer_getn 007D                          ??_rd_buffer_init 0070  
                         set_parameter@ok 0080                                      _main 0E54  
                                    _pool 0033                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr0l 000FE9                                      fsr2h 000FDA  
                                    indf1 000FE7                                      fsr1l 000FE1  
                                    indf2 000FDF                                      fsr2l 000FD9  
                       rd_buffer_get@last 0072                         rd_buffer_get@prec 006E  
                                    prodh 000FF4                                      prodl 000FF3  
                         _serialport_task 12A0                                      start 00F0  
                           __CFG_IESO$OFF 000000                             __CFG_MCLRE$ON 000000  
                     i2_rd_buffer_put$482 0026                                     ?_main 0001  
                         __end_of___awdiv 152E                                     _ADRES 000FC3  
                         __end_of___awmod 1680                           __end_of___lbmod 1B58  
                                   _ANSEL 000F7E                           ___awdiv@divisor 006E  
                           ?_pd_add_value 0074                                     _RC1IF 007CF5  
                         __end_of___lwdiv 18DE                           __end_of___lwmod 1A2A  
                                   i2l227 195A                                     i2l228 1956  
                           __CFG_WDTEN$ON 000000                                     i2l169 1B9A  
                                   i2l285 0C90                           ___awdiv@counter 0070  
                                   i2l979 005A                                     _RCREG 000FAE  
                                   _RCSTA 000FAB                       this_parse_item@pval 0091  
                                   _SPBRG 000FAF                       this_parse_item@pvar 008D  
                     this_parse_item@pstr 0086                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                         rd_buffer_put@prec 006E  
                                   _TXREG 000FAD                                     _TXSTA 000FAC  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
 __end_of_detection_obtain_analog_service 1B98  __size_of_detection_obtain_analog_service 0020  
       ??_detection_obtain_analog_service 002B          ?_detection_obtain_analog_service 0001  
                          __CFG_EBTR1$OFF 000000           _detection_obtain_analog_service 1B78  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
            __size_of_string_utils_strchr 0070              __size_of_string_utils_strlen 005A  
                       _cla_add_value$966 0074                         _cla_add_value$967 0076  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
              string_utils_is_symbol@symb 006D                           __end_of_dpowers 7DBC  
                             _sysclk_init 1CA8                                     _putch 1BEC  
                                   main@i 00A8                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                      rd_buffer_get@first 0075             ?_this_variable_load_from_text 0081  
                                   status 000FD8                           __end_of_startup 1924  
                 rd_buffer_getn@rec_count 007B                          ?_syntax_get_text 0001  
                        _serialport_write 184A                            __CFG_HFOFST$ON 000000  
                         ??_get_parameter 007F                        rd_buffer_getn@prec 0079  
              __end_ofinterrupts@isr_high 00F0                           __initialization 16E4  
                symb_from_hex_to_bin@symb 006C                 uart_set_baudrate@baudrate 006C  
                 rd_buffer_readline@pdata 0079                              __end_of_main 1C1A  
                 rd_buffer_readline@psize 007B                 rd_buffer_readline@pbuffer 0077  
             __size_of_rd_buffer_readline 0042                        rd_buffer_init@size 006E  
                          ??_pd_add_value 0078                                    ??_main 00A5  
                           __activetblptr 000002                         ??_this_parse_item 0089  
            __size_of_uart_byte_available 0008            _string_utils_is_upper_case$750 006C  
                     serialport_task@size 00A3                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                        ___awdiv@dividend 006C                   __end_of_serialport_task 132A  
                                  ?_putch 0001                                    _ANSELH 000F7F  
                                  _GODONE 007E11                          __end_of_adc_init 1C1A  
                        __end_of_adc_read 196A                                    i2l1003 00CE  
              __end_of_serialport_service 1AA0                                    i2l5370 1C7E  
                                  i2l5710 0D34                                    i2l5630 0034  
                                  i2l5640 004C                                    i2l5632 0036  
                                  i2l5378 1952                                    i2l5722 1BA2  
                                  i2l5642 0054                                    i2l5634 003E  
                                  i2l5626 0028                                    i2l5724 1BAA  
                                  i2l5644 0058                                    i2l5636 0046  
                                  i2l5628 0030                                    i2l5638 004A  
                                  i2l5760 00A4                                    i2l5744 1AFE  
                                  i2l5736 1AE6                                    i2l5770 00BE  
                                  i2l5762 00A8                                    i2l5772 00C0  
                                  i2l5764 00AA                                    i2l5692 0C72  
                                  i2l5774 00C8                                    i2l5766 00B2  
                                  i2l5758 009C                                    i2l5776 00CC  
                                  i2l5768 00BA               string_utils_split@delimeter 0072  
                                  _OSCCON 000FD3                     rd_buffer_init@pbuffer 006C  
              __end_of_serialport_startup 1AD2                      this_parse_item@pitem 0088  
                                  _STATUS 000FD8                             main@event_old 00A6  
                        __end_of_delay_ms 1C2C                            __CFG_XINST$OFF 000000  
                       get_parameter@p_id 007F             __size_of_string_utils_strncmp 0096  
                       set_parameter@p_id 007F                                    ___wmul 1B02  
                               ??___awdiv 0070                            __CFG_STVREN$ON 000000  
                               ??___awmod 0070                                 ??___lbmod 006D  
                               ??___lwdiv 0070                                 ??___lwmod 0077  
             __end_of_sysclk_setup_intosc 1C72                                    _events 00A9  
                                  clear_0 16EA                                    clear_1 16F6  
                                  clear_2 1702                                    clear_3 170E  
                                  clear_4 171A                                    clear_5 1726  
                                  clear_6 1732                          ___awdiv@quotient 0072  
                         ___awmod@divisor 006E                           ___awmod@counter 0070  
                                  _printf 0D66                          __end_of_isr_high 007C  
                    _symb_from_hex_to_bin 15A4                  serialport_startup@result 0072  
                       _serialport_buffer 037F                              __mediumconst 7DB2  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                       rd_buffer_get@result 0074  
                  __size_of_rd_buffer_get 00A8                    __size_of_rd_buffer_cnt 0052  
                  __size_of_rd_buffer_put 012E                                 ??_startup 0073  
                 string_utils_strchr@pbuf 006C                           ___lbmod@divisor 006C  
                              __accesstop 0060                   __end_of__initialization 1738  
                         ___lbmod@counter 006E                           __CFG_PBADEN$OFF 000000  
                 string_utils_strlen@pstr 006E            ??_this_variable_load_from_text 0084  
                 string_utils_strncmp@len 0072                   string_utils_strncmp@pos 0078  
                          __pcstackCOMRAM 0001                              _cla_detector 00C2  
                        cla_add_value@val 006C                   detection_task@alarm_cla 00C0  
                 detection_task@alarm_wav 00C1                     __end_of_set_parameter 12A0  
                           __end_of_putch 1C06                                __end_ofPL2 04DE  
                              __end_ofPL4 04F2                                __end_ofPL6 0504  
                              __end_ofPL8 051A                     ?_symb_from_hex_to_bin 0001  
        __size_of_delay_interrupt_service 0012          this_variable_load_from_text@pval 0081  
             __size_of_on_parameter_found 0064                     _string_utils_from_hex 10E8  
                         __CFG_LPT1OSC$ON 000000                                   ??_putch 007D  
                        ?_serialport_task 0001                                __pbssBANK0 00A9  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                              __pbssBANK3 0300                                __pbssBANK4 0400  
                              __pbssBANK5 0500                        __size_of_gpio_init 0012  
                    __end_of_pd_add_value 04B6                   __size_of_detection_task 0076  
                       fp__detection_task 00F0                       _string_utils_strchr 1054  
                     _string_utils_strlen 179E                             _rd_buffer_get 0F16  
                           _rd_buffer_cnt 17F8                             _rd_buffer_put 0AD0  
                                 ?___wmul 006C                                   _BAUDCON 000FB8  
                                 _BAUDCTL 000FB8                    i2rd_buffer_put@mes_rec 0024  
                  i2rd_buffer_put@pbuffer 001A   detection_obtain_analog_service@adc_data 0062  
                                 ?_printf 007E                                 ?_adc_init 0001  
                               ?_adc_read 001A           this_variable_load_from_text@len 0084  
                __end_of_serialport_write 1894                       syntax_string@chains 00A2  
                      __size_of_uart_getc 0030                        __size_of_uart_init 0020  
                      __size_of_uart_putc 0012                       syntax_string@pchain 00A0  
                      __size_of_uart_puts 0050                  __size_ofi2_rd_buffer_put 0128  
                     syntax_string@result 009E                      ?_string_utils_strchr 006C  
                               ?_delay_ms 006C                      ?_string_utils_strlen 006E  
                         __CFG_WDTPS$1024 000000                                _command_id 00EB  
                   this_parse_item@result 008C                              ?_sysclk_init 0001  
              __end_of_string_utils_split 1436                         _rd_buffer_put$482 0078  
                  __size_of_syntax_string 014A                  string_utils_split@chains 0075  
                ??_string_utils_is_symbol 006C                       _uart_byte_available 1CA0  
                               ?_isr_high 0001                                   __Hparam 0000  
                                 __Lparam 0000                            ?_rd_buffer_get 006C  
                          ?_rd_buffer_cnt 006C                            ?_rd_buffer_put 006C  
                         _this_parse_item 0814                                   ___awdiv 14B6  
                                 ___awmod 1618                                   ___lbmod 1B2E  
                              _event_miss 002B                           __size_of___wmul 002C  
                  __size_of_cla_add_value 01A8                                   ___lwdiv 1894  
                                 ___lwmod 19EC                    ??_symb_from_hex_to_bin 006C  
                  serialport_service@byte 0063                      serialport_write@pstr 007D  
                                 __pcinit 16E4                                   __ramtop 0600  
                              ??_adc_init 006C                                ??_adc_read 001C  
                                 __ptext0 0E54                                   __ptext1 1C1A  
                                 __ptext2 152E                                   __ptext3 12A0  
                                 __ptext4 196A                                   __ptext5 17F8  
                                 __ptext6 1A2A                                   __ptext7 0F16  
                                 __ptext8 0976                                   __ptext9 13B2  
                         __size_of_printf 00C6                         __end_of_gpio_init 1C50  
                    ?_uart_byte_available 0001                                   _dpowers 7DB2  
                      interrupts@isr_high 007C                          ___awmod@dividend 006C  
                   ??_string_utils_strchr 0070                     ??_string_utils_strlen 0070  
                              ??_delay_ms 006E                    ?_string_utils_from_hex 0074  
                                 _startup 18DE                       ?interrupts@isr_high 0001  
                    end_of_initialization 1738                         _syntax_as_integer 1C8E  
                       i2rd_buffer_put@sz 0027                             __Lmediumconst 7DB2  
                      ?_syntax_as_integer 006C                                ??_isr_high 0012  
                       __end_of_uart_getc 1B02                         __end_of_uart_init 1B78  
                       __end_of_uart_putc 1C3E                         __end_of_uart_puts 1792  
                   __end_of_get_parameter 14B6                   this_parse_item@is_equal 008B  
                    rd_buffer_get@pbuffer 006C                __end_of_rd_buffer_readline 19AC  
                     ??_syntax_as_integer 006E                                 _RCSTAbits 000FAB  
                                 printf@c 0090                                   printf@f 007E  
                                 postdec1 000FE5                                   postdec2 000FDD  
                     _this_case_sensitive 00BD                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                 __size_of_uart_byte_sent 0008                        _serialport_service 1A66  
                    rd_buffer_cnt@pbuffer 006C                  __size_of_syntax_get_text 000C  
                    ??interrupts@isr_high 0064                   __size_of_rd_buffer_getn 003C  
                 __size_of_rd_buffer_init 0040                             _syntax_string 0976  
                      _serialport_startup 1AA0                                _this_alarm 00BC  
                              _uart_error 1C72                                _uart_reset 1B98  
            ??_string_utils_is_upper_case 006C                     ??_uart_byte_available 001A  
                     ?_serialport_service 0001                   _delay_interrupt_service 1C50  
                     ?_serialport_startup 0001                          ___lbmod@dividend 006D  
            __end_of_string_utils_strncmp 1054                             pd_add_value@d 0074  
                           pd_add_value@i 008A                    string_utils_from_hex@i 007F  
                  string_utils_from_hex@j 007D                 __end_of_syntax_as_integer 1C98  
                           _cla_add_value 060A                     __size_of_pd_add_value 03C2  
                       ??i2_rd_buffer_put 001E                               ___lbmod@rem 006F  
                 __end_of_this_parse_item 0968                      ??_serialport_service 0062  
         __size_of_string_utils_is_symbol 001C                           ??_rd_buffer_get 0070  
                         ??_rd_buffer_cnt 006E                      ??_serialport_startup 0071  
                         ??_rd_buffer_put 0070       __size_of_string_utils_is_upper_case 001A  
                          _detection_task 152E                             startup@result 0073  
                          ?_syntax_string 0098                        detection_task@zero 008B  
                       cla_add_value@zero 006E                             delay_ms@delay 006C  
                          __end_of___wmul 1B2E                          rd_buffer_put@ind 007B  
                            _pd_add_value 00F4                            __end_of_printf 0E2C  
                             __end_ofPL10 0536                               __end_ofPL20 07F4  
                             __end_ofPL12 07C8                               __end_ofPL30 0E42  
                             __end_ofPL22 0806                               __end_ofPL14 07D6  
                             __end_ofPL40 0C10                               __end_ofPL32 0590  
                             __end_ofPL24 0554                               __end_ofPL16 10E8  
                             __end_ofPL50 0AD0                               __end_ofPL42 0E54  
                             __end_ofPL34 05A2                               __end_ofPL26 0564  
                             __end_ofPL18 07E4                               __end_ofPL60 0D66  
                             __end_ofPL52 05E8                               __end_ofPL44 0D58  
                             __end_ofPL36 0814                               __end_ofPL28 057A  
                             __end_ofPL62 179E                               __end_ofPL54 0C1E  
                             __end_ofPL46 05C8                               __end_ofPL38 05B6  
                             __end_ofPL64 0602                               __end_ofPL56 05F6  
                             __end_ofPL48 05D8                               __end_ofPL66 060A  
                             __end_ofPL58 0976                       start_initialization 16E4  
               string_utils_strchr@result 0073              __size_of_sysclk_setup_intosc 0010  
                         _parameter_value 0200                         _uart_set_baudrate 1CAE  
                          cla_add_value@d 0078                            ?_cla_add_value 006C  
                      ?_uart_set_baudrate 006C                      __size_of_sysclk_init 0006  
                  __end_of_detection_task 15A4              sysclk_setup_intosc@frequency 006C  
                     ??_uart_set_baudrate 006F                         syntax_string@pstr 0098  
                    rd_buffer_init@result 0070                    string_utils_split@pbuf 006C  
                  string_utils_split@prev 0077                    string_utils_split@pstr 006E  
                  string_utils_split@symb 0078                                  ??___wmul 0070  
                             ?_uart_error 0001                               ?_uart_reset 0001  
               ??_delay_interrupt_service 001A                                  ??_printf 0086  
                  _string_utils_is_symbol 1BB6                    string_utils_strchr@pos 0075  
                       ??_syntax_get_text 006C                         ?_serialport_write 007D  
               __end_of_uart_set_baudrate 1CB4                __end_of_on_parameter_found 16E4  
                       __size_of_adc_init 0014                         __size_of_adc_read 0046  
                             __pbssCOMRAM 002B                             __pcstackBANK0 0060  
                      ??_serialport_write 007F                       __end_of__stringdata 7FFE  
              __size_of_syntax_as_integer 000A                           uart_getc@result 001C  
                    rd_buffer_readline@ch 007C                         __size_of_delay_ms 0012  
                  __size_of_set_parameter 0092                 string_utils_strncmp@pstr1 006E  
               string_utils_strncmp@pstr2 0070                 string_utils_strncmp@symb1 007A  
               string_utils_strncmp@symb2 007B                          ?_this_parse_item 0086  
                         ?_detection_task 0001                                 _g_analog0 00B9  
                               _g_analog1 003D                                 _g_analog2 003F  
                               __pnvBANK0 00ED                            _uart_error$257 001A  
                __size_of_serialport_task 008A                          ___lwdiv@dividend 006C  
                      fp__serialport_task 00F0                        _string_utils_split 13B2  
                         ??_syntax_string 009B                         __CFG_CCP2MX$PORTC 000000  
                       __size_of_isr_high 0074                      _string_utils_strncmp 0FBE  
                               __pintcode 0008                            _uart_byte_sent 1C98  
                           __pmediumconst 7DB2                            _rd_buffer_getn 1A2A  
                          _rd_buffer_init 19AC                                  ?___awdiv 006C  
                                ?___awmod 006C                                  ?___lbmod 006C  
              _string_utils_is_symbol$756 006C        __end_of_string_utils_is_upper_case 1BEC  
              _string_utils_is_upper_case 1BD2                                  ?___lwdiv 006C  
                                ?___lwmod 0073                       ?_string_utils_split 006C  
                 ??_string_utils_from_hex 0078                              _parameter_id 00EC  
                         ??_cla_add_value 0070                                 _gpio_init 1C3E  
                        ___lwdiv@quotient 0070                                  ?_startup 0001  
                             _g_rx_buffer 027F                            __size_of_putch 001A  
         __end_of_delay_interrupt_service 1C62                      ??_string_utils_split 0073  
                     __size_of_uart_error 0010                       __size_of_uart_reset 001E  
                             _g_tx_buffer 0100                            ___wmul@product 0070  
                                _PIE1bits 000F9D                    on_parameter_found@p_id 0092  
                  __end_of_uart_byte_sent 1CA0                    on_parameter_found@type 0096  
                     _this_delay_timer_ms 00ED                    __end_of_rd_buffer_getn 1A66  
                  __end_of_rd_buffer_init 19EC                                  i2u601_40 00A4  
                                i2u601_41 00A2                                  _PIR1bits 000F9E  
                                i2u602_40 00BA                                  i2u602_41 00B8  
                                i2u603_40 00C8                                  i2u603_41 00C6  
                   ?_string_utils_strncmp 006E                     string_utils_copy@pdst 006C  
                                i2u575_40 0030                                  i2u575_41 002E  
                                i2u576_40 0046                                  i2u576_41 0044  
                                i2u593_40 0D0E                                  i2u577_40 0054  
                                i2u577_41 0052                     string_utils_copy@psrc 006E  
                                i2u593_47 0D04                                  i2u587_40 0C56  
                                i2u587_47 0C50                                  i2u589_40 0C6C  
                                i2u589_47 0C66                      syntax_string@str_len 009C  
                               _uart_getc 1AD2                                 _uart_init 1B58  
                  this_parse_item@var_len 0095                                 _uart_putc 1C2C  
                               _uart_puts 1742                        _this_contains_crlf 00BE  
                           _set_parameter 120E                    this_parse_item@str_len 008F  
             __end_of_string_utils_strchr 10C4               __end_of_string_utils_strlen 17F8  
                    rd_buffer_put@mes_rec 0076             __size_of_symb_from_hex_to_bin 0074  
                              _ADCON0bits 000FC2                      rd_buffer_put@pbuffer 006C  
                             __stringdata 7FCC                         ___wmul@multiplier 006C  
                         i2_rd_buffer_put 0C1E                                printf@_val 008B  
                              printf@flag 0089                __size_of_uart_set_baudrate 0006  
                      _rd_buffer_readline 196A                                printf@prec 008A  
                        this_parse_item@i 0094                           rd_buffer_cnt@sz 0072  
                         rd_buffer_getn@i 007E                                ?_gpio_init 0001  
                         rd_buffer_put@sz 0079                       ?_rd_buffer_readline 0077  
                             _meas_buffer 0450                                  _i2c_buff 0042  
                          _parameter_text 0300                            _parameter_type 00BB  
                                __Hparam0 0000                       i2rd_buffer_put@prec 001C  
                             _pd_detector 016B                          syntax_string@pos 009F  
                                __Lparam0 0000                           ?_uart_byte_sent 0001  
                                _g_CONFIG 00D7                           ?_rd_buffer_getn 0077  
                   string_utils_split@len 0070                           ?_rd_buffer_init 006C  
                     _sysclk_setup_intosc 1C62                                ?_uart_getc 0001  
                              ?_uart_init 0001               __end_of_uart_byte_available 1CA8  
                                _g_STATUS 003B                      ??_rd_buffer_readline 007C  
                              ?_uart_putc 0001                                ?_uart_puts 006D  
             __size_ofinterrupts@isr_high 0074                            ?_set_parameter 0001  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
                        __size_of___lbmod 002A                         _pd_add_value$1080 007E  
                       _pd_add_value$1081 0080                         _pd_add_value$1082 0082  
                       _pd_add_value$1083 0084                         _pd_add_value$1084 0086  
                        __size_of___lwdiv 004A                         ??_serialport_task 00A3  
                        __size_of___lwmod 003E                                  _adc_init 1C06  
                                _adc_read 1924                            uart_getc@pbyte 001B  
                    ?_sysclk_setup_intosc 0001                string_utils_from_hex@pdata 0074  
                       _string_utils_copy 132A                                  _delay_ms 1C1A  
                         ___lwdiv@divisor 006E                    __size_of_get_parameter 0080  
                         ___lwdiv@counter 0072                                  __ptext10 0814  
                                __ptext11 0FBE                                  __ptext20 1680  
                                __ptext12 1BD2                                  __ptext21 060A  
                                __ptext13 117C                                  __ptext30 1C82  
                                __ptext22 00F4                                  __ptext14 132A  
                                __ptext31 18DE                                  __ptext23 0D66  
                                __ptext15 1054                                  __ptext40 1C3E  
                                __ptext32 1CA8                                  __ptext24 1BEC  
                                __ptext16 10E8                                  __ptext41 1AA0  
                                __ptext33 1C62                                  __ptext25 120E  
                                __ptext17 179E                                  __ptext50 1C50  
                                __ptext42 19AC                                  __ptext34 1B58  
                                __ptext26 1C8E                                  __ptext18 1BB6  
                                __ptext51 1A66                                  __ptext43 14B6  
                                __ptext35 1CAE                                  __ptext27 1436  
                                __ptext19 15A4                                  __ptext52 1AD2  
                                __ptext44 1618                                  __ptext36 1742  
                                __ptext28 184A                                  __ptext53 1B98  
                                __ptext45 1B2E                                  __ptext37 1C2C  
                                __ptext29 0AD0                                  __ptext54 1CA0  
                                __ptext46 1894                                  __ptext38 1C98  
                                __ptext55 1C72                                  __ptext47 19EC  
                                __ptext39 1C06                                  __ptext56 1B78  
                                __ptext48 1B02                                  __ptext57 1924  
                                __ptext58 0C1E                                  _bitcount 0041  
                      ?_string_utils_copy 006C                          __size_of_startup 0046  
             on_parameter_found@operation 0097                             __size_of_main 0DC6  
                     ??_string_utils_copy 0073               __size_of_serialport_service 003A  
                                _isr_high 0008                    ??_string_utils_strncmp 0075  
             __size_of_serialport_startup 0032                     __end_of_rd_buffer_get 0FBE  
                   __end_of_rd_buffer_cnt 184A                     __end_of_rd_buffer_put 0BFE  
             syntax_string@case_sensitive 009A                           _syntax_get_text 1C82  
                                _this_buf 0500                   __end_ofi2_rd_buffer_put 0D46  
                 ?_string_utils_is_symbol 0001        string_utils_strncmp@case_sensitive 0074  
                            ??_uart_error 001A                              ??_uart_reset 001B  
               __end_of_string_utils_copy 13B2                string_utils_strncmp@result 0077  
                               putch@byte 007D                     ??_sysclk_setup_intosc 006C  
                              _INTCONbits 000FF2                        i2rd_buffer_put@ind 0029  
                             ??_gpio_init 006C                             ??_sysclk_init 006D  
                on_parameter_found@cmd_id 0091                          ??_detection_task 008B  
                    string_utils_strlen@i 0072                                  intlevel2 0000  
                        ___lwmod@dividend 0073                        _on_parameter_found 1680  
                      __end_of_uart_error 1C82                 __size_of_serialport_write 004A  
                      __end_of_uart_reset 1BB6                              _this_warning 00BF  
                 string_utils_copy@maxlen 0071                             _get_parameter 1436  
          __end_of_string_utils_is_symbol 1BD2                           ??_set_parameter 007F  
                     ?_on_parameter_found 0091                   string_utils_copy@result 0073  
                             ??_uart_getc 001B                               ??_uart_init 006F  
                                printf@ap 0088                               ??_uart_putc 006C  
                             ??_uart_puts 0071               ?_string_utils_is_upper_case 0001  
                     string_utils_split@i 0073                           ___lwmod@divisor 0075  
          __size_of_string_utils_from_hex 0094                           ___lwmod@counter 0077  
           __end_of_string_utils_from_hex 117C                       on_parameter_found@p 0093  
                    ??_on_parameter_found 0097              string_utils_strchr@delimeter 006F  
                             _timers_list 0400                            _syx_param_list 7DBC  
                           uart_putc@byte 006C                   __end_of_syntax_get_text 1C8E  
                       __CFG_FOSC$INTIO67 000000                       __end_of_sysclk_init 1CAE  
                           uart_puts@size 006F                             uart_puts@pstr 006D  
                      adc_read@adc_number 001D                        main@event_priority 00A7  
                          ?_get_parameter 0001                           pd_add_value@val 0076  
                         pd_add_value@tmp 0088  
