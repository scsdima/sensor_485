

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Thu Oct 15 00:58:23 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	param0,global,class=BANK0,space=1,delta=1
    73                           	psect	pa_nodes,global,class=CODE,delta=1
    74  0000                     tosu	equ	0xFFF
    75                           tosh	equ	0xFFE
    76                           tosl	equ	0xFFD
    77                           pclath	equ	0xFFA
    78                           tblptru	equ	0xFF8
    79                           tblptrh	equ	0xFF7
    80                           tblptrl	equ	0xFF6
    81                           tablat	equ	0xFF5
    82                           prodh	equ	0xFF4
    83                           prodl	equ	0xFF3
    84                           intcon	equ	0xFF2
    85                           indf0	equ	0xFEF
    86                           fsr0h	equ	0xFEA
    87                           fsr0l	equ	0xFE9
    88                           wreg	equ	0xFE8
    89                           indf1	equ	0xFE7
    90                           postinc1	equ	0xFE6
    91                           postdec1	equ	0xFE5
    92                           fsr1h	equ	0xFE2
    93                           fsr1l	equ	0xFE1
    94                           indf2	equ	0xFDF
    95                           postinc2	equ	0xFDE
    96                           postdec2	equ	0xFDD
    97                           fsr2h	equ	0xFDA
    98                           fsr2l	equ	0xFD9
    99                           status	equ	0xFD8
   100                           
   101                           	psect	mediumconst
   102  007D7C                     __pmediumconst:
   103                           	opt stack 0
   104  007D7C                     syntax@syntax_data:
   105                           	opt stack 0
   106  007D7C  73                 	db	115
   107  007D7D  65                 	db	101
   108  007D7E  74                 	db	116
   109  007D7F  00                 	db	0
   110  007D80  00                 	db	0
   111  007D81  00                 	db	0
   112  007D82  00                 	db	0
   113  007D83  00                 	db	0
   114  007D84  00                 	db	0
   115  007D85  00                 	db	0
   116  007D86  00                 	db	0
   117  007D87  00                 	db	0
   118  007D88  00                 	db	0
   119  007D89  00                 	db	0
   120  007D8A  00                 	db	0
   121  007D8B  00                 	db	0
   122  007D8C  00                 	db	0
   123  007D8D  00                 	db	0
   124  007D8E  00                 	db	0
   125  007D8F  00                 	db	0
   126  007D90  03                 	db	3
   127  007D91  00                 	db	0
   128  007D92  00                 	db	0
   129  007D93  67                 	db	103
   130  007D94  65                 	db	101
   131  007D95  74                 	db	116
   132  007D96  00                 	db	0
   133  007D97  00                 	db	0
   134  007D98  00                 	db	0
   135  007D99  00                 	db	0
   136  007D9A  00                 	db	0
   137  007D9B  00                 	db	0
   138  007D9C  00                 	db	0
   139  007D9D  00                 	db	0
   140  007D9E  00                 	db	0
   141  007D9F  00                 	db	0
   142  007DA0  00                 	db	0
   143  007DA1  00                 	db	0
   144  007DA2  00                 	db	0
   145  007DA3  00                 	db	0
   146  007DA4  00                 	db	0
   147  007DA5  00                 	db	0
   148  007DA6  00                 	db	0
   149  007DA7  03                 	db	3
   150  007DA8  01                 	db	1
   151  007DA9  00                 	db	0
   152  007DAA  69                 	db	105
   153  007DAB  6E                 	db	110
   154  007DAC  69                 	db	105
   155  007DAD  74                 	db	116
   156  007DAE  00                 	db	0
   157  007DAF  00                 	db	0
   158  007DB0  00                 	db	0
   159  007DB1  00                 	db	0
   160  007DB2  00                 	db	0
   161  007DB3  00                 	db	0
   162  007DB4  00                 	db	0
   163  007DB5  00                 	db	0
   164  007DB6  00                 	db	0
   165  007DB7  00                 	db	0
   166  007DB8  00                 	db	0
   167  007DB9  00                 	db	0
   168  007DBA  00                 	db	0
   169  007DBB  00                 	db	0
   170  007DBC  00                 	db	0
   171  007DBD  00                 	db	0
   172  007DBE  04                 	db	4
   173  007DBF  02                 	db	2
   174  007DC0  00                 	db	0
   175  007DC1  73                 	db	115
   176  007DC2  65                 	db	101
   177  007DC3  6C                 	db	108
   178  007DC4  66                 	db	102
   179  007DC5  74                 	db	116
   180  007DC6  65                 	db	101
   181  007DC7  73                 	db	115
   182  007DC8  74                 	db	116
   183  007DC9  00                 	db	0
   184  007DCA  00                 	db	0
   185  007DCB  00                 	db	0
   186  007DCC  00                 	db	0
   187  007DCD  00                 	db	0
   188  007DCE  00                 	db	0
   189  007DCF  00                 	db	0
   190  007DD0  00                 	db	0
   191  007DD1  00                 	db	0
   192  007DD2  00                 	db	0
   193  007DD3  00                 	db	0
   194  007DD4  00                 	db	0
   195  007DD5  08                 	db	8
   196  007DD6  03                 	db	3
   197  007DD7  00                 	db	0
   198  007DD8  73                 	db	115
   199  007DD9  69                 	db	105
   200  007DDA  67                 	db	103
   201  007DDB  6E                 	db	110
   202  007DDC  61                 	db	97
   203  007DDD  6C                 	db	108
   204  007DDE  00                 	db	0
   205  007DDF  00                 	db	0
   206  007DE0  00                 	db	0
   207  007DE1  00                 	db	0
   208  007DE2  00                 	db	0
   209  007DE3  00                 	db	0
   210  007DE4  00                 	db	0
   211  007DE5  00                 	db	0
   212  007DE6  00                 	db	0
   213  007DE7  00                 	db	0
   214  007DE8  00                 	db	0
   215  007DE9  00                 	db	0
   216  007DEA  00                 	db	0
   217  007DEB  00                 	db	0
   218  007DEC  06                 	db	6
   219  007DED  04                 	db	4
   220  007DEE  03                 	db	3
   221  007DEF  69                 	db	105
   222  007DF0  6D                 	db	109
   223  007DF1  70                 	db	112
   224  007DF2  00                 	db	0
   225  007DF3  00                 	db	0
   226  007DF4  00                 	db	0
   227  007DF5  00                 	db	0
   228  007DF6  00                 	db	0
   229  007DF7  00                 	db	0
   230  007DF8  00                 	db	0
   231  007DF9  00                 	db	0
   232  007DFA  00                 	db	0
   233  007DFB  00                 	db	0
   234  007DFC  00                 	db	0
   235  007DFD  00                 	db	0
   236  007DFE  00                 	db	0
   237  007DFF  00                 	db	0
   238  007E00  00                 	db	0
   239  007E01  00                 	db	0
   240  007E02  00                 	db	0
   241  007E03  03                 	db	3
   242  007E04  05                 	db	5
   243  007E05  03                 	db	3
   244  007E06  70                 	db	112
   245  007E07  77                 	db	119
   246  007E08  72                 	db	114
   247  007E09  00                 	db	0
   248  007E0A  00                 	db	0
   249  007E0B  00                 	db	0
   250  007E0C  00                 	db	0
   251  007E0D  00                 	db	0
   252  007E0E  00                 	db	0
   253  007E0F  00                 	db	0
   254  007E10  00                 	db	0
   255  007E11  00                 	db	0
   256  007E12  00                 	db	0
   257  007E13  00                 	db	0
   258  007E14  00                 	db	0
   259  007E15  00                 	db	0
   260  007E16  00                 	db	0
   261  007E17  00                 	db	0
   262  007E18  00                 	db	0
   263  007E19  00                 	db	0
   264  007E1A  03                 	db	3
   265  007E1B  06                 	db	6
   266  007E1C  03                 	db	3
   267  007E1D  70                 	db	112
   268  007E1E  6F                 	db	111
   269  007E1F  74                 	db	116
   270  007E20  00                 	db	0
   271  007E21  00                 	db	0
   272  007E22  00                 	db	0
   273  007E23  00                 	db	0
   274  007E24  00                 	db	0
   275  007E25  00                 	db	0
   276  007E26  00                 	db	0
   277  007E27  00                 	db	0
   278  007E28  00                 	db	0
   279  007E29  00                 	db	0
   280  007E2A  00                 	db	0
   281  007E2B  00                 	db	0
   282  007E2C  00                 	db	0
   283  007E2D  00                 	db	0
   284  007E2E  00                 	db	0
   285  007E2F  00                 	db	0
   286  007E30  00                 	db	0
   287  007E31  03                 	db	3
   288  007E32  07                 	db	7
   289  007E33  03                 	db	3
   290  007E34  76                 	db	118
   291  007E35  65                 	db	101
   292  007E36  72                 	db	114
   293  007E37  00                 	db	0
   294  007E38  00                 	db	0
   295  007E39  00                 	db	0
   296  007E3A  00                 	db	0
   297  007E3B  00                 	db	0
   298  007E3C  00                 	db	0
   299  007E3D  00                 	db	0
   300  007E3E  00                 	db	0
   301  007E3F  00                 	db	0
   302  007E40  00                 	db	0
   303  007E41  00                 	db	0
   304  007E42  00                 	db	0
   305  007E43  00                 	db	0
   306  007E44  00                 	db	0
   307  007E45  00                 	db	0
   308  007E46  00                 	db	0
   309  007E47  00                 	db	0
   310  007E48  03                 	db	3
   311  007E49  08                 	db	8
   312  007E4A  03                 	db	3
   313  007E4B  73                 	db	115
   314  007E4C  74                 	db	116
   315  007E4D  61                 	db	97
   316  007E4E  74                 	db	116
   317  007E4F  75                 	db	117
   318  007E50  73                 	db	115
   319  007E51  00                 	db	0
   320  007E52  00                 	db	0
   321  007E53  00                 	db	0
   322  007E54  00                 	db	0
   323  007E55  00                 	db	0
   324  007E56  00                 	db	0
   325  007E57  00                 	db	0
   326  007E58  00                 	db	0
   327  007E59  00                 	db	0
   328  007E5A  00                 	db	0
   329  007E5B  00                 	db	0
   330  007E5C  00                 	db	0
   331  007E5D  00                 	db	0
   332  007E5E  00                 	db	0
   333  007E5F  06                 	db	6
   334  007E60  09                 	db	9
   335  007E61  03                 	db	3
   336  007E62  61                 	db	97
   337  007E63  63                 	db	99
   338  007E64  63                 	db	99
   339  007E65  00                 	db	0
   340  007E66  00                 	db	0
   341  007E67  00                 	db	0
   342  007E68  00                 	db	0
   343  007E69  00                 	db	0
   344  007E6A  00                 	db	0
   345  007E6B  00                 	db	0
   346  007E6C  00                 	db	0
   347  007E6D  00                 	db	0
   348  007E6E  00                 	db	0
   349  007E6F  00                 	db	0
   350  007E70  00                 	db	0
   351  007E71  00                 	db	0
   352  007E72  00                 	db	0
   353  007E73  00                 	db	0
   354  007E74  00                 	db	0
   355  007E75  00                 	db	0
   356  007E76  03                 	db	3
   357  007E77  0A                 	db	10
   358  007E78  03                 	db	3
   359  007E79  61                 	db	97
   360  007E7A  64                 	db	100
   361  007E7B  72                 	db	114
   362  007E7C  00                 	db	0
   363  007E7D  00                 	db	0
   364  007E7E  00                 	db	0
   365  007E7F  00                 	db	0
   366  007E80  00                 	db	0
   367  007E81  00                 	db	0
   368  007E82  00                 	db	0
   369  007E83  00                 	db	0
   370  007E84  00                 	db	0
   371  007E85  00                 	db	0
   372  007E86  00                 	db	0
   373  007E87  00                 	db	0
   374  007E88  00                 	db	0
   375  007E89  00                 	db	0
   376  007E8A  00                 	db	0
   377  007E8B  00                 	db	0
   378  007E8C  00                 	db	0
   379  007E8D  03                 	db	3
   380  007E8E  0B                 	db	11
   381  007E8F  03                 	db	3
   382  007E90  65                 	db	101
   383  007E91  72                 	db	114
   384  007E92  72                 	db	114
   385  007E93  6F                 	db	111
   386  007E94  72                 	db	114
   387  007E95  00                 	db	0
   388  007E96  00                 	db	0
   389  007E97  00                 	db	0
   390  007E98  00                 	db	0
   391  007E99  00                 	db	0
   392  007E9A  00                 	db	0
   393  007E9B  00                 	db	0
   394  007E9C  00                 	db	0
   395  007E9D  00                 	db	0
   396  007E9E  00                 	db	0
   397  007E9F  00                 	db	0
   398  007EA0  00                 	db	0
   399  007EA1  00                 	db	0
   400  007EA2  00                 	db	0
   401  007EA3  00                 	db	0
   402  007EA4  05                 	db	5
   403  007EA5  0C                 	db	12
   404  007EA6  03                 	db	3
   405  007EA7  64                 	db	100
   406  007EA8  65                 	db	101
   407  007EA9  66                 	db	102
   408  007EAA  61                 	db	97
   409  007EAB  75                 	db	117
   410  007EAC  6C                 	db	108
   411  007EAD  74                 	db	116
   412  007EAE  73                 	db	115
   413  007EAF  00                 	db	0
   414  007EB0  00                 	db	0
   415  007EB1  00                 	db	0
   416  007EB2  00                 	db	0
   417  007EB3  00                 	db	0
   418  007EB4  00                 	db	0
   419  007EB5  00                 	db	0
   420  007EB6  00                 	db	0
   421  007EB7  00                 	db	0
   422  007EB8  00                 	db	0
   423  007EB9  00                 	db	0
   424  007EBA  00                 	db	0
   425  007EBB  08                 	db	8
   426  007EBC  0D                 	db	13
   427  007EBD  03                 	db	3
   428  007EBE  6D                 	db	109
   429  007EBF  6F                 	db	111
   430  007EC0  64                 	db	100
   431  007EC1  00                 	db	0
   432  007EC2  00                 	db	0
   433  007EC3  00                 	db	0
   434  007EC4  00                 	db	0
   435  007EC5  00                 	db	0
   436  007EC6  00                 	db	0
   437  007EC7  00                 	db	0
   438  007EC8  00                 	db	0
   439  007EC9  00                 	db	0
   440  007ECA  00                 	db	0
   441  007ECB  00                 	db	0
   442  007ECC  00                 	db	0
   443  007ECD  00                 	db	0
   444  007ECE  00                 	db	0
   445  007ECF  00                 	db	0
   446  007ED0  00                 	db	0
   447  007ED1  00                 	db	0
   448  007ED2  03                 	db	3
   449  007ED3  0E                 	db	14
   450  007ED4  01                 	db	1
   451  007ED5  70                 	db	112
   452  007ED6  72                 	db	114
   453  007ED7  6F                 	db	111
   454  007ED8  66                 	db	102
   455  007ED9  69                 	db	105
   456  007EDA  6C                 	db	108
   457  007EDB  65                 	db	101
   458  007EDC  00                 	db	0
   459  007EDD  00                 	db	0
   460  007EDE  00                 	db	0
   461  007EDF  00                 	db	0
   462  007EE0  00                 	db	0
   463  007EE1  00                 	db	0
   464  007EE2  00                 	db	0
   465  007EE3  00                 	db	0
   466  007EE4  00                 	db	0
   467  007EE5  00                 	db	0
   468  007EE6  00                 	db	0
   469  007EE7  00                 	db	0
   470  007EE8  00                 	db	0
   471  007EE9  07                 	db	7
   472  007EEA  0F                 	db	15
   473  007EEB  03                 	db	3
   474  007EEC  70                 	db	112
   475  007EED  77                 	db	119
   476  007EEE  72                 	db	114
   477  007EEF  74                 	db	116
   478  007EF0  72                 	db	114
   479  007EF1  69                 	db	105
   480  007EF2  67                 	db	103
   481  007EF3  00                 	db	0
   482  007EF4  00                 	db	0
   483  007EF5  00                 	db	0
   484  007EF6  00                 	db	0
   485  007EF7  00                 	db	0
   486  007EF8  00                 	db	0
   487  007EF9  00                 	db	0
   488  007EFA  00                 	db	0
   489  007EFB  00                 	db	0
   490  007EFC  00                 	db	0
   491  007EFD  00                 	db	0
   492  007EFE  00                 	db	0
   493  007EFF  00                 	db	0
   494  007F00  07                 	db	7
   495  007F01  10                 	db	16
   496  007F02  03                 	db	3
   497  007F03  61                 	db	97
   498  007F04  63                 	db	99
   499  007F05  63                 	db	99
   500  007F06  74                 	db	116
   501  007F07  72                 	db	114
   502  007F08  69                 	db	105
   503  007F09  67                 	db	103
   504  007F0A  00                 	db	0
   505  007F0B  00                 	db	0
   506  007F0C  00                 	db	0
   507  007F0D  00                 	db	0
   508  007F0E  00                 	db	0
   509  007F0F  00                 	db	0
   510  007F10  00                 	db	0
   511  007F11  00                 	db	0
   512  007F12  00                 	db	0
   513  007F13  00                 	db	0
   514  007F14  00                 	db	0
   515  007F15  00                 	db	0
   516  007F16  00                 	db	0
   517  007F17  07                 	db	7
   518  007F18  11                 	db	17
   519  007F19  03                 	db	3
   520  007F1A  74                 	db	116
   521  007F1B  72                 	db	114
   522  007F1C  69                 	db	105
   523  007F1D  67                 	db	103
   524  007F1E  6C                 	db	108
   525  007F1F  65                 	db	101
   526  007F20  76                 	db	118
   527  007F21  00                 	db	0
   528  007F22  00                 	db	0
   529  007F23  00                 	db	0
   530  007F24  00                 	db	0
   531  007F25  00                 	db	0
   532  007F26  00                 	db	0
   533  007F27  00                 	db	0
   534  007F28  00                 	db	0
   535  007F29  00                 	db	0
   536  007F2A  00                 	db	0
   537  007F2B  00                 	db	0
   538  007F2C  00                 	db	0
   539  007F2D  00                 	db	0
   540  007F2E  07                 	db	7
   541  007F2F  12                 	db	18
   542  007F30  03                 	db	3
   543  007F31  74                 	db	116
   544  007F32  72                 	db	114
   545  007F33  69                 	db	105
   546  007F34  67                 	db	103
   547  007F35  73                 	db	115
   548  007F36  75                 	db	117
   549  007F37  6D                 	db	109
   550  007F38  00                 	db	0
   551  007F39  00                 	db	0
   552  007F3A  00                 	db	0
   553  007F3B  00                 	db	0
   554  007F3C  00                 	db	0
   555  007F3D  00                 	db	0
   556  007F3E  00                 	db	0
   557  007F3F  00                 	db	0
   558  007F40  00                 	db	0
   559  007F41  00                 	db	0
   560  007F42  00                 	db	0
   561  007F43  00                 	db	0
   562  007F44  00                 	db	0
   563  007F45  07                 	db	7
   564  007F46  13                 	db	19
   565  007F47  03                 	db	3
   566  007F48  74                 	db	116
   567  007F49  72                 	db	114
   568  007F4A  69                 	db	105
   569  007F4B  67                 	db	103
   570  007F4C  63                 	db	99
   571  007F4D  6E                 	db	110
   572  007F4E  74                 	db	116
   573  007F4F  00                 	db	0
   574  007F50  00                 	db	0
   575  007F51  00                 	db	0
   576  007F52  00                 	db	0
   577  007F53  00                 	db	0
   578  007F54  00                 	db	0
   579  007F55  00                 	db	0
   580  007F56  00                 	db	0
   581  007F57  00                 	db	0
   582  007F58  00                 	db	0
   583  007F59  00                 	db	0
   584  007F5A  00                 	db	0
   585  007F5B  00                 	db	0
   586  007F5C  07                 	db	7
   587  007F5D  14                 	db	20
   588  007F5E  03                 	db	3
   589  007F5F  77                 	db	119
   590  007F60  61                 	db	97
   591  007F61  76                 	db	118
   592  007F62  74                 	db	116
   593  007F63  6F                 	db	111
   594  007F64  6C                 	db	108
   595  007F65  65                 	db	101
   596  007F66  00                 	db	0
   597  007F67  00                 	db	0
   598  007F68  00                 	db	0
   599  007F69  00                 	db	0
   600  007F6A  00                 	db	0
   601  007F6B  00                 	db	0
   602  007F6C  00                 	db	0
   603  007F6D  00                 	db	0
   604  007F6E  00                 	db	0
   605  007F6F  00                 	db	0
   606  007F70  00                 	db	0
   607  007F71  00                 	db	0
   608  007F72  00                 	db	0
   609  007F73  07                 	db	7
   610  007F74  15                 	db	21
   611  007F75  03                 	db	3
   612  007F76  77                 	db	119
   613  007F77  61                 	db	97
   614  007F78  76                 	db	118
   615  007F79  74                 	db	116
   616  007F7A  72                 	db	114
   617  007F7B  69                 	db	105
   618  007F7C  67                 	db	103
   619  007F7D  00                 	db	0
   620  007F7E  00                 	db	0
   621  007F7F  00                 	db	0
   622  007F80  00                 	db	0
   623  007F81  00                 	db	0
   624  007F82  00                 	db	0
   625  007F83  00                 	db	0
   626  007F84  00                 	db	0
   627  007F85  00                 	db	0
   628  007F86  00                 	db	0
   629  007F87  00                 	db	0
   630  007F88  00                 	db	0
   631  007F89  00                 	db	0
   632  007F8A  07                 	db	7
   633  007F8B  16                 	db	22
   634  007F8C  03                 	db	3
   635  007F8D  77                 	db	119
   636  007F8E  61                 	db	97
   637  007F8F  76                 	db	118
   638  007F90  6C                 	db	108
   639  007F91  63                 	db	99
   640  007F92  6E                 	db	110
   641  007F93  74                 	db	116
   642  007F94  00                 	db	0
   643  007F95  00                 	db	0
   644  007F96  00                 	db	0
   645  007F97  00                 	db	0
   646  007F98  00                 	db	0
   647  007F99  00                 	db	0
   648  007F9A  00                 	db	0
   649  007F9B  00                 	db	0
   650  007F9C  00                 	db	0
   651  007F9D  00                 	db	0
   652  007F9E  00                 	db	0
   653  007F9F  00                 	db	0
   654  007FA0  00                 	db	0
   655  007FA1  07                 	db	7
   656  007FA2  17                 	db	23
   657  007FA3  03                 	db	3
   658  007FA4  77                 	db	119
   659  007FA5  61                 	db	97
   660  007FA6  76                 	db	118
   661  007FA7  72                 	db	114
   662  007FA8  63                 	db	99
   663  007FA9  6E                 	db	110
   664  007FAA  74                 	db	116
   665  007FAB  00                 	db	0
   666  007FAC  00                 	db	0
   667  007FAD  00                 	db	0
   668  007FAE  00                 	db	0
   669  007FAF  00                 	db	0
   670  007FB0  00                 	db	0
   671  007FB1  00                 	db	0
   672  007FB2  00                 	db	0
   673  007FB3  00                 	db	0
   674  007FB4  00                 	db	0
   675  007FB5  00                 	db	0
   676  007FB6  00                 	db	0
   677  007FB7  00                 	db	0
   678  007FB8  07                 	db	7
   679  007FB9  18                 	db	24
   680  007FBA  03                 	db	3
   681  007FBB  69                 	db	105
   682  007FBC  64                 	db	100
   683  007FBD  69                 	db	105
   684  007FBE  64                 	db	100
   685  007FBF  00                 	db	0
   686  007FC0  00                 	db	0
   687  007FC1  00                 	db	0
   688  007FC2  00                 	db	0
   689  007FC3  00                 	db	0
   690  007FC4  00                 	db	0
   691  007FC5  00                 	db	0
   692  007FC6  00                 	db	0
   693  007FC7  00                 	db	0
   694  007FC8  00                 	db	0
   695  007FC9  00                 	db	0
   696  007FCA  00                 	db	0
   697  007FCB  00                 	db	0
   698  007FCC  00                 	db	0
   699  007FCD  00                 	db	0
   700  007FCE  00                 	db	0
   701  007FCF  04                 	db	4
   702  007FD0  19                 	db	25
   703  007FD1  03                 	db	3
   704  007FD2  70                 	db	112
   705  007FD3  73                 	db	115
   706  007FD4  77                 	db	119
   707  007FD5  70                 	db	112
   708  007FD6  73                 	db	115
   709  007FD7  77                 	db	119
   710  007FD8  00                 	db	0
   711  007FD9  00                 	db	0
   712  007FDA  00                 	db	0
   713  007FDB  00                 	db	0
   714  007FDC  00                 	db	0
   715  007FDD  00                 	db	0
   716  007FDE  00                 	db	0
   717  007FDF  00                 	db	0
   718  007FE0  00                 	db	0
   719  007FE1  00                 	db	0
   720  007FE2  00                 	db	0
   721  007FE3  00                 	db	0
   722  007FE4  00                 	db	0
   723  007FE5  00                 	db	0
   724  007FE6  06                 	db	6
   725  007FE7  1A                 	db	26
   726  007FE8  03                 	db	3
   727  007FE9                     __end_ofsyntax@syntax_data:
   728                           	opt stack 0
   729  0000                     _ADRES	set	4035
   730  0000                     _TMR0	set	4054
   731  0000                     _ADCON0	set	4034
   732  0000                     _ADCON0bits	set	4034
   733  0000                     _ADCON1	set	4033
   734  0000                     _ADCON2	set	4032
   735  0000                     _ANSEL	set	3966
   736  0000                     _ANSELH	set	3967
   737  0000                     _BAUDCON	set	4024
   738  0000                     _BAUDCTL	set	4024
   739  0000                     _INTCONbits	set	4082
   740  0000                     _LATC	set	3979
   741  0000                     _LATD	set	3980
   742  0000                     _OSCCON	set	4051
   743  0000                     _PIE1bits	set	3997
   744  0000                     _PIR1bits	set	3998
   745  0000                     _RCREG	set	4014
   746  0000                     _RCSTA	set	4011
   747  0000                     _RCSTAbits	set	4011
   748  0000                     _SPBRG	set	4015
   749  0000                     _STATUS	set	4056
   750  0000                     _TRISA	set	3986
   751  0000                     _TRISB	set	3987
   752  0000                     _TRISC	set	3988
   753  0000                     _TRISD	set	3989
   754  0000                     _TXREG	set	4013
   755  0000                     _TXSTA	set	4012
   756  0000                     _ADIF	set	31990
   757  0000                     _CREN	set	32092
   758  0000                     _GODONE	set	32273
   759  0000                     _RC1IF	set	31989
   760  0000                     _RCIF	set	31989
   761  0000                     _TXIF	set	31988
   762  007FE9                     __stringdata:
   763                           	opt stack 0
   764  007FE9                     STR_32:
   765  007FE9  68                 	db	104	;'h'
   766  007FEA  65                 	db	101	;'e'
   767  007FEB  6C                 	db	108	;'l'
   768  007FEC  6C                 	db	108	;'l'
   769  007FED  6F                 	db	111	;'o'
   770  007FEE  00                 	db	0
   771  007FEF                     STR_30:
   772  007FEF  3A                 	db	58	;':'
   773  007FF0  65                 	db	101	;'e'
   774  007FF1  72                 	db	114	;'r'
   775  007FF2  72                 	db	114	;'r'
   776  007FF3  20                 	db	32
   777  007FF4  00                 	db	0
   778  007FF5                     STR_28:
   779  007FF5  65                 	db	101	;'e'
   780  007FF6  72                 	db	114	;'r'
   781  007FF7  72                 	db	114	;'r'
   782  007FF8  0A                 	db	10
   783  007FF9  00                 	db	0
   784  007FFA                     STR_29:
   785  007FFA  3A                 	db	58	;':'
   786  007FFB  6F                 	db	111	;'o'
   787  007FFC  6B                 	db	107	;'k'
   788  007FFD  20                 	db	32
   789  007FFE  00                 	db	0
   790  007FFF                     __end_of__stringdata:
   791                           	opt stack 0
   792                           
   793                           ; #config settings
   794  007FFF  00                 	db	0	; dummy byte at the end
   795  0000                     tosu	equ	0xFFF
   796                           tosh	equ	0xFFE
   797                           tosl	equ	0xFFD
   798                           pclath	equ	0xFFA
   799                           tblptru	equ	0xFF8
   800                           tblptrh	equ	0xFF7
   801                           tblptrl	equ	0xFF6
   802                           tablat	equ	0xFF5
   803                           prodh	equ	0xFF4
   804                           prodl	equ	0xFF3
   805                           intcon	equ	0xFF2
   806                           indf0	equ	0xFEF
   807                           fsr0h	equ	0xFEA
   808                           fsr0l	equ	0xFE9
   809                           wreg	equ	0xFE8
   810                           indf1	equ	0xFE7
   811                           postinc1	equ	0xFE6
   812                           postdec1	equ	0xFE5
   813                           fsr1h	equ	0xFE2
   814                           fsr1l	equ	0xFE1
   815                           indf2	equ	0xFDF
   816                           postinc2	equ	0xFDE
   817                           postdec2	equ	0xFDD
   818                           fsr2h	equ	0xFDA
   819                           fsr2l	equ	0xFD9
   820                           status	equ	0xFD8
   821                           
   822                           	psect	nvBANK0
   823  0000EB                     __pnvBANK0:
   824                           	opt stack 0
   825  0000EB                     _this_delay_timer_ms:
   826                           	opt stack 0
   827  0000EB                     	ds	2
   828                           tosu	equ	0xFFF
   829                           tosh	equ	0xFFE
   830                           tosl	equ	0xFFD
   831                           pclath	equ	0xFFA
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           prodh	equ	0xFF4
   837                           prodl	equ	0xFF3
   838                           intcon	equ	0xFF2
   839                           indf0	equ	0xFEF
   840                           fsr0h	equ	0xFEA
   841                           fsr0l	equ	0xFE9
   842                           wreg	equ	0xFE8
   843                           indf1	equ	0xFE7
   844                           postinc1	equ	0xFE6
   845                           postdec1	equ	0xFE5
   846                           fsr1h	equ	0xFE2
   847                           fsr1l	equ	0xFE1
   848                           indf2	equ	0xFDF
   849                           postinc2	equ	0xFDE
   850                           postdec2	equ	0xFDD
   851                           fsr2h	equ	0xFDA
   852                           fsr2l	equ	0xFD9
   853                           status	equ	0xFD8
   854                           
   855                           	psect	cinit
   856  0015C0                     __pcinit:
   857                           	opt stack 0
   858  0015C0                     start_initialization:
   859                           	opt stack 0
   860  0015C0                     __initialization:
   861                           	opt stack 0
   862                           
   863                           ; Clear objects allocated to BANK5 (127 bytes)
   864  0015C0  EE05  F000         	lfsr	0,__pbssBANK5
   865  0015C4  0E7F               	movlw	127
   866  0015C6                     clear_0:
   867  0015C6  6AEE               	clrf	postinc0,c
   868  0015C8  06E8               	decf	wreg,f,c
   869  0015CA  E1FD               	bnz	clear_0
   870                           
   871                           ; Clear objects allocated to BANK4 (187 bytes)
   872  0015CC  EE04  F000         	lfsr	0,__pbssBANK4
   873  0015D0  0EBB               	movlw	187
   874  0015D2                     clear_1:
   875  0015D2  6AEE               	clrf	postinc0,c
   876  0015D4  06E8               	decf	wreg,f,c
   877  0015D6  E1FD               	bnz	clear_1
   878                           
   879                           ; Clear objects allocated to BANK3 (227 bytes)
   880  0015D8  EE03  F000         	lfsr	0,__pbssBANK3
   881  0015DC  0EE3               	movlw	227
   882  0015DE                     clear_2:
   883  0015DE  6AEE               	clrf	postinc0,c
   884  0015E0  06E8               	decf	wreg,f,c
   885  0015E2  E1FD               	bnz	clear_2
   886                           
   887                           ; Clear objects allocated to BANK2 (234 bytes)
   888  0015E4  EE02  F000         	lfsr	0,__pbssBANK2
   889  0015E8  0EEA               	movlw	234
   890  0015EA                     clear_3:
   891  0015EA  6AEE               	clrf	postinc0,c
   892  0015EC  06E8               	decf	wreg,f,c
   893  0015EE  E1FD               	bnz	clear_3
   894                           
   895                           ; Clear objects allocated to BANK1 (208 bytes)
   896  0015F0  EE01  F000         	lfsr	0,__pbssBANK1
   897  0015F4  0ED0               	movlw	208
   898  0015F6                     clear_4:
   899  0015F6  6AEE               	clrf	postinc0,c
   900  0015F8  06E8               	decf	wreg,f,c
   901  0015FA  E1FD               	bnz	clear_4
   902                           
   903                           ; Clear objects allocated to BANK0 (68 bytes)
   904  0015FC  EE00  F0A7         	lfsr	0,__pbssBANK0
   905  001600  0E44               	movlw	68
   906  001602                     clear_5:
   907  001602  6AEE               	clrf	postinc0,c
   908  001604  06E8               	decf	wreg,f,c
   909  001606  E1FD               	bnz	clear_5
   910                           
   911                           ; Clear objects allocated to COMRAM (24 bytes)
   912  001608  EE00  F02B         	lfsr	0,__pbssCOMRAM
   913  00160C  0E18               	movlw	24
   914  00160E                     clear_6:
   915  00160E  6AEE               	clrf	postinc0,c
   916  001610  06E8               	decf	wreg,f,c
   917  001612  E1FD               	bnz	clear_6
   918  001614                     end_of_initialization:
   919                           	opt stack 0
   920  001614                     __end_of__initialization:
   921                           	opt stack 0
   922  001614  0E00               	movlw	low (__Lmediumconst shr (0+16))
   923  001616  6EF8               	movwf	tblptru,c
   924  001618  0100               	movlb	0
   925  00161A  EFA1  F006         	goto	_main	;jump to C main() function
   926                           tosu	equ	0xFFF
   927                           tosh	equ	0xFFE
   928                           tosl	equ	0xFFD
   929                           pclath	equ	0xFFA
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           prodh	equ	0xFF4
   935                           prodl	equ	0xFF3
   936                           intcon	equ	0xFF2
   937                           indf0	equ	0xFEF
   938                           postinc0	equ	0xFEE
   939                           fsr0h	equ	0xFEA
   940                           fsr0l	equ	0xFE9
   941                           wreg	equ	0xFE8
   942                           indf1	equ	0xFE7
   943                           postinc1	equ	0xFE6
   944                           postdec1	equ	0xFE5
   945                           fsr1h	equ	0xFE2
   946                           fsr1l	equ	0xFE1
   947                           indf2	equ	0xFDF
   948                           postinc2	equ	0xFDE
   949                           postdec2	equ	0xFDD
   950                           fsr2h	equ	0xFDA
   951                           fsr2l	equ	0xFD9
   952                           status	equ	0xFD8
   953                           
   954                           	psect	bssCOMRAM
   955  00002B                     __pbssCOMRAM:
   956                           	opt stack 0
   957  00002B                     _event_miss:
   958                           	opt stack 0
   959  00002B                     	ds	8
   960  000033                     _pool:
   961                           	opt stack 0
   962  000033                     	ds	8
   963  00003B                     _g_STATUS:
   964                           	opt stack 0
   965  00003B                     	ds	2
   966  00003D                     _g_analog1:
   967                           	opt stack 0
   968  00003D                     	ds	2
   969  00003F                     _g_analog2:
   970                           	opt stack 0
   971  00003F                     	ds	2
   972  000041                     _bitcount:
   973                           	opt stack 0
   974  000041                     	ds	1
   975  000042                     _i2c_buff:
   976                           	opt stack 0
   977  000042                     	ds	1
   978                           tosu	equ	0xFFF
   979                           tosh	equ	0xFFE
   980                           tosl	equ	0xFFD
   981                           pclath	equ	0xFFA
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           prodh	equ	0xFF4
   987                           prodl	equ	0xFF3
   988                           intcon	equ	0xFF2
   989                           indf0	equ	0xFEF
   990                           postinc0	equ	0xFEE
   991                           fsr0h	equ	0xFEA
   992                           fsr0l	equ	0xFE9
   993                           wreg	equ	0xFE8
   994                           indf1	equ	0xFE7
   995                           postinc1	equ	0xFE6
   996                           postdec1	equ	0xFE5
   997                           fsr1h	equ	0xFE2
   998                           fsr1l	equ	0xFE1
   999                           indf2	equ	0xFDF
  1000                           postinc2	equ	0xFDE
  1001                           postdec2	equ	0xFDD
  1002                           fsr2h	equ	0xFDA
  1003                           fsr2l	equ	0xFD9
  1004                           status	equ	0xFD8
  1005                           
  1006                           	psect	bssBANK0
  1007  0000A7                     __pbssBANK0:
  1008                           	opt stack 0
  1009  0000A7                     _events:
  1010                           	opt stack 0
  1011  0000A7                     	ds	16
  1012  0000B7                     _g_analog0:
  1013                           	opt stack 0
  1014  0000B7                     	ds	2
  1015  0000B9                     _parameter_type:
  1016                           	opt stack 0
  1017  0000B9                     	ds	1
  1018  0000BA                     _this_alarm:
  1019                           	opt stack 0
  1020  0000BA                     	ds	1
  1021  0000BB                     _this_case_sensitive:
  1022                           	opt stack 0
  1023  0000BB                     	ds	1
  1024  0000BC                     _this_contains_crlf:
  1025                           	opt stack 0
  1026  0000BC                     	ds	1
  1027  0000BD                     _this_warning:
  1028                           	opt stack 0
  1029  0000BD                     	ds	1
  1030  0000BE                     detection_task@alarm_cla:
  1031                           	opt stack 0
  1032  0000BE                     	ds	1
  1033  0000BF                     detection_task@alarm_wav:
  1034                           	opt stack 0
  1035  0000BF                     	ds	1
  1036  0000C0                     _cla_detector:
  1037                           	opt stack 0
  1038  0000C0                     	ds	21
  1039  0000D5                     _g_CONFIG:
  1040                           	opt stack 0
  1041  0000D5                     	ds	20
  1042  0000E9                     _command_id:
  1043                           	opt stack 0
  1044  0000E9                     	ds	1
  1045  0000EA                     _parameter_id:
  1046                           	opt stack 0
  1047  0000EA                     	ds	1
  1048                           tosu	equ	0xFFF
  1049                           tosh	equ	0xFFE
  1050                           tosl	equ	0xFFD
  1051                           pclath	equ	0xFFA
  1052                           tblptru	equ	0xFF8
  1053                           tblptrh	equ	0xFF7
  1054                           tblptrl	equ	0xFF6
  1055                           tablat	equ	0xFF5
  1056                           prodh	equ	0xFF4
  1057                           prodl	equ	0xFF3
  1058                           intcon	equ	0xFF2
  1059                           indf0	equ	0xFEF
  1060                           postinc0	equ	0xFEE
  1061                           fsr0h	equ	0xFEA
  1062                           fsr0l	equ	0xFE9
  1063                           wreg	equ	0xFE8
  1064                           indf1	equ	0xFE7
  1065                           postinc1	equ	0xFE6
  1066                           postdec1	equ	0xFE5
  1067                           fsr1h	equ	0xFE2
  1068                           fsr1l	equ	0xFE1
  1069                           indf2	equ	0xFDF
  1070                           postinc2	equ	0xFDE
  1071                           postdec2	equ	0xFDD
  1072                           fsr2h	equ	0xFDA
  1073                           fsr2l	equ	0xFD9
  1074                           status	equ	0xFD8
  1075                           
  1076                           	psect	bssBANK1
  1077  000100                     __pbssBANK1:
  1078                           	opt stack 0
  1079  000100                     _g_tx_buffer:
  1080                           	opt stack 0
  1081  000100                     	ds	107
  1082  00016B                     _pd_detector:
  1083                           	opt stack 0
  1084  00016B                     	ds	101
  1085                           tosu	equ	0xFFF
  1086                           tosh	equ	0xFFE
  1087                           tosl	equ	0xFFD
  1088                           pclath	equ	0xFFA
  1089                           tblptru	equ	0xFF8
  1090                           tblptrh	equ	0xFF7
  1091                           tblptrl	equ	0xFF6
  1092                           tablat	equ	0xFF5
  1093                           prodh	equ	0xFF4
  1094                           prodl	equ	0xFF3
  1095                           intcon	equ	0xFF2
  1096                           indf0	equ	0xFEF
  1097                           postinc0	equ	0xFEE
  1098                           fsr0h	equ	0xFEA
  1099                           fsr0l	equ	0xFE9
  1100                           wreg	equ	0xFE8
  1101                           indf1	equ	0xFE7
  1102                           postinc1	equ	0xFE6
  1103                           postdec1	equ	0xFE5
  1104                           fsr1h	equ	0xFE2
  1105                           fsr1l	equ	0xFE1
  1106                           indf2	equ	0xFDF
  1107                           postinc2	equ	0xFDE
  1108                           postdec2	equ	0xFDD
  1109                           fsr2h	equ	0xFDA
  1110                           fsr2l	equ	0xFD9
  1111                           status	equ	0xFD8
  1112                           
  1113                           	psect	bssBANK2
  1114  000200                     __pbssBANK2:
  1115                           	opt stack 0
  1116  000200                     _parameter_value:
  1117                           	opt stack 0
  1118  000200                     	ds	127
  1119  00027F                     _g_rx_buffer:
  1120                           	opt stack 0
  1121  00027F                     	ds	107
  1122                           tosu	equ	0xFFF
  1123                           tosh	equ	0xFFE
  1124                           tosl	equ	0xFFD
  1125                           pclath	equ	0xFFA
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           prodh	equ	0xFF4
  1131                           prodl	equ	0xFF3
  1132                           intcon	equ	0xFF2
  1133                           indf0	equ	0xFEF
  1134                           postinc0	equ	0xFEE
  1135                           fsr0h	equ	0xFEA
  1136                           fsr0l	equ	0xFE9
  1137                           wreg	equ	0xFE8
  1138                           indf1	equ	0xFE7
  1139                           postinc1	equ	0xFE6
  1140                           postdec1	equ	0xFE5
  1141                           fsr1h	equ	0xFE2
  1142                           fsr1l	equ	0xFE1
  1143                           indf2	equ	0xFDF
  1144                           postinc2	equ	0xFDE
  1145                           postdec2	equ	0xFDD
  1146                           fsr2h	equ	0xFDA
  1147                           fsr2l	equ	0xFD9
  1148                           status	equ	0xFD8
  1149                           
  1150                           	psect	bssBANK3
  1151  000300                     __pbssBANK3:
  1152                           	opt stack 0
  1153  000300                     _parameter_text:
  1154                           	opt stack 0
  1155  000300                     	ds	127
  1156  00037F                     _serialport_buffer:
  1157                           	opt stack 0
  1158  00037F                     	ds	100
  1159                           tosu	equ	0xFFF
  1160                           tosh	equ	0xFFE
  1161                           tosl	equ	0xFFD
  1162                           pclath	equ	0xFFA
  1163                           tblptru	equ	0xFF8
  1164                           tblptrh	equ	0xFF7
  1165                           tblptrl	equ	0xFF6
  1166                           tablat	equ	0xFF5
  1167                           prodh	equ	0xFF4
  1168                           prodl	equ	0xFF3
  1169                           intcon	equ	0xFF2
  1170                           indf0	equ	0xFEF
  1171                           postinc0	equ	0xFEE
  1172                           fsr0h	equ	0xFEA
  1173                           fsr0l	equ	0xFE9
  1174                           wreg	equ	0xFE8
  1175                           indf1	equ	0xFE7
  1176                           postinc1	equ	0xFE6
  1177                           postdec1	equ	0xFE5
  1178                           fsr1h	equ	0xFE2
  1179                           fsr1l	equ	0xFE1
  1180                           indf2	equ	0xFDF
  1181                           postinc2	equ	0xFDE
  1182                           postdec2	equ	0xFDD
  1183                           fsr2h	equ	0xFDA
  1184                           fsr2l	equ	0xFD9
  1185                           status	equ	0xFD8
  1186                           
  1187                           	psect	bssBANK4
  1188  000400                     __pbssBANK4:
  1189                           	opt stack 0
  1190  000400                     	ds	80
  1191  000450                     _meas_buffer:
  1192                           	opt stack 0
  1193  000450                     	ds	107
  1194                           tosu	equ	0xFFF
  1195                           tosh	equ	0xFFE
  1196                           tosl	equ	0xFFD
  1197                           pclath	equ	0xFFA
  1198                           tblptru	equ	0xFF8
  1199                           tblptrh	equ	0xFF7
  1200                           tblptrl	equ	0xFF6
  1201                           tablat	equ	0xFF5
  1202                           prodh	equ	0xFF4
  1203                           prodl	equ	0xFF3
  1204                           intcon	equ	0xFF2
  1205                           indf0	equ	0xFEF
  1206                           postinc0	equ	0xFEE
  1207                           fsr0h	equ	0xFEA
  1208                           fsr0l	equ	0xFE9
  1209                           wreg	equ	0xFE8
  1210                           indf1	equ	0xFE7
  1211                           postinc1	equ	0xFE6
  1212                           postdec1	equ	0xFE5
  1213                           fsr1h	equ	0xFE2
  1214                           fsr1l	equ	0xFE1
  1215                           indf2	equ	0xFDF
  1216                           postinc2	equ	0xFDE
  1217                           postdec2	equ	0xFDD
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8
  1221                           
  1222                           	psect	bssBANK5
  1223  000500                     __pbssBANK5:
  1224                           	opt stack 0
  1225  000500                     _this_buf:
  1226                           	opt stack 0
  1227  000500                     	ds	127
  1228                           tosu	equ	0xFFF
  1229                           tosh	equ	0xFFE
  1230                           tosl	equ	0xFFD
  1231                           pclath	equ	0xFFA
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           prodh	equ	0xFF4
  1237                           prodl	equ	0xFF3
  1238                           intcon	equ	0xFF2
  1239                           indf0	equ	0xFEF
  1240                           postinc0	equ	0xFEE
  1241                           fsr0h	equ	0xFEA
  1242                           fsr0l	equ	0xFE9
  1243                           wreg	equ	0xFE8
  1244                           indf1	equ	0xFE7
  1245                           postinc1	equ	0xFE6
  1246                           postdec1	equ	0xFE5
  1247                           fsr1h	equ	0xFE2
  1248                           fsr1l	equ	0xFE1
  1249                           indf2	equ	0xFDF
  1250                           postinc2	equ	0xFDE
  1251                           postdec2	equ	0xFDD
  1252                           fsr2h	equ	0xFDA
  1253                           fsr2l	equ	0xFD9
  1254                           status	equ	0xFD8
  1255                           
  1256                           	psect	cstackBANK0
  1257  000060                     __pcstackBANK0:
  1258                           	opt stack 0
  1259  000060                     	ds	2
  1260  000062                     ??_serialport_service:
  1261  000062                     detection_obtain_analog_service@adc_data:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x2
  1265  000062                     	ds	1
  1266  000063                     serialport_service@byte:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x3
  1270  000063                     	ds	1
  1271  000064                     ??interrupts@isr_high:
  1272                           
  1273                           ; 0 bytes @ 0x4
  1274  000064                     	ds	8
  1275  00006C                     ?_uart_set_baudrate:
  1276                           	opt stack 0
  1277  00006C                     ?_delay_ms:
  1278                           	opt stack 0
  1279  00006C                     ?_rd_buffer_get:
  1280                           	opt stack 0
  1281  00006C                     ?_rd_buffer_init:
  1282                           	opt stack 0
  1283  00006C                     ?_rd_buffer_put:
  1284                           	opt stack 0
  1285  00006C                     ?_cla_add_value:
  1286                           	opt stack 0
  1287  00006C                     ?___lbmod:
  1288                           	opt stack 0
  1289  00006C                     ?_rd_buffer_cnt:
  1290                           	opt stack 0
  1291  00006C                     ?_string_utils_copy:
  1292                           	opt stack 0
  1293  00006C                     ?_string_utils_split:
  1294                           	opt stack 0
  1295  00006C                     ?_string_utils_strchr:
  1296                           	opt stack 0
  1297  00006C                     ?_syntax_as_integer:
  1298                           	opt stack 0
  1299  00006C                     ?___awdiv:
  1300                           	opt stack 0
  1301  00006C                     ?___awmod:
  1302                           	opt stack 0
  1303  00006C                     ?___wmul:
  1304                           	opt stack 0
  1305  00006C                     sysclk_setup_intosc@frequency:
  1306                           	opt stack 0
  1307  00006C                     uart_putc@byte:
  1308                           	opt stack 0
  1309  00006C                     _string_utils_is_upper_case$799:
  1310                           	opt stack 0
  1311  00006C                     _string_utils_is_symbol$805:
  1312                           	opt stack 0
  1313  00006C                     symb_from_hex_to_bin@symb:
  1314                           	opt stack 0
  1315  00006C                     ___lbmod@divisor:
  1316                           	opt stack 0
  1317  00006C                     delay_ms@delay:
  1318                           	opt stack 0
  1319  00006C                     rd_buffer_init@pbuffer:
  1320                           	opt stack 0
  1321  00006C                     rd_buffer_cnt@pbuffer:
  1322                           	opt stack 0
  1323  00006C                     rd_buffer_get@pbuffer:
  1324                           	opt stack 0
  1325  00006C                     rd_buffer_put@pbuffer:
  1326                           	opt stack 0
  1327  00006C                     string_utils_copy@pdst:
  1328                           	opt stack 0
  1329  00006C                     string_utils_split@pbuf:
  1330                           	opt stack 0
  1331  00006C                     cla_add_value@val:
  1332                           	opt stack 0
  1333  00006C                     ___awdiv@dividend:
  1334                           	opt stack 0
  1335  00006C                     ___awmod@dividend:
  1336                           	opt stack 0
  1337  00006C                     ___wmul@multiplier:
  1338                           	opt stack 0
  1339  00006C                     string_utils_strchr@pbuf:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0xC
  1343  00006C                     	ds	1
  1344  00006D                     ?_uart_puts:
  1345                           	opt stack 0
  1346  00006D                     string_utils_is_upper_case@symb:
  1347                           	opt stack 0
  1348  00006D                     string_utils_is_symbol@symb:
  1349                           	opt stack 0
  1350  00006D                     ___lbmod@dividend:
  1351                           	opt stack 0
  1352  00006D                     uart_puts@pstr:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0xD
  1356  00006D                     	ds	1
  1357  00006E                     ??_rd_buffer_cnt:
  1358  00006E                     ?_string_utils_strncmp:
  1359                           	opt stack 0
  1360  00006E                     ?_string_utils_strlen:
  1361                           	opt stack 0
  1362  00006E                     rd_buffer_get@prec:
  1363                           	opt stack 0
  1364  00006E                     ___lbmod@counter:
  1365                           	opt stack 0
  1366  00006E                     rd_buffer_init@size:
  1367                           	opt stack 0
  1368  00006E                     rd_buffer_put@prec:
  1369                           	opt stack 0
  1370  00006E                     string_utils_strlen@pstr:
  1371                           	opt stack 0
  1372  00006E                     string_utils_split@pstr:
  1373                           	opt stack 0
  1374  00006E                     string_utils_strncmp@pstr1:
  1375                           	opt stack 0
  1376  00006E                     cla_add_value@zero:
  1377                           	opt stack 0
  1378  00006E                     ___awdiv@divisor:
  1379                           	opt stack 0
  1380  00006E                     ___awmod@divisor:
  1381                           	opt stack 0
  1382  00006E                     ___wmul@multiplicand:
  1383                           	opt stack 0
  1384  00006E                     string_utils_copy@psrc:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0xE
  1388  00006E                     	ds	1
  1389  00006F                     ??_rd_buffer_get:
  1390  00006F                     string_utils_strchr@delimeter:
  1391                           	opt stack 0
  1392  00006F                     ___lbmod@rem:
  1393                           	opt stack 0
  1394  00006F                     uart_puts@size:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0xF
  1398  00006F                     	ds	1
  1399  000070                     ??_rd_buffer_put:
  1400  000070                     ??_string_utils_strchr:
  1401  000070                     ??_cla_add_value:
  1402  000070                     rd_buffer_init@result:
  1403                           	opt stack 0
  1404  000070                     ___awdiv@counter:
  1405                           	opt stack 0
  1406  000070                     ___awmod@counter:
  1407                           	opt stack 0
  1408  000070                     string_utils_strlen@i:
  1409                           	opt stack 0
  1410  000070                     string_utils_split@len:
  1411                           	opt stack 0
  1412  000070                     string_utils_strncmp@pstr2:
  1413                           	opt stack 0
  1414  000070                     ___wmul@product:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x10
  1418  000070                     	ds	1
  1419  000071                     ??_serialport_startup:
  1420  000071                     ___awdiv@sign:
  1421                           	opt stack 0
  1422  000071                     ___awmod@sign:
  1423                           	opt stack 0
  1424  000071                     rd_buffer_get@last:
  1425                           	opt stack 0
  1426  000071                     string_utils_copy@maxlen:
  1427                           	opt stack 0
  1428                           
  1429                           ; 2 bytes @ 0x11
  1430  000071                     	ds	1
  1431  000072                     ?_string_utils_from_hex:
  1432                           	opt stack 0
  1433  000072                     serialport_startup@result:
  1434                           	opt stack 0
  1435  000072                     string_utils_split@delimeter:
  1436                           	opt stack 0
  1437  000072                     rd_buffer_cnt@sz:
  1438                           	opt stack 0
  1439  000072                     string_utils_strncmp@len:
  1440                           	opt stack 0
  1441  000072                     string_utils_from_hex@pdata:
  1442                           	opt stack 0
  1443  000072                     ___awdiv@quotient:
  1444                           	opt stack 0
  1445                           
  1446                           ; 2 bytes @ 0x12
  1447  000072                     	ds	1
  1448  000073                     rd_buffer_get@result:
  1449                           	opt stack 0
  1450  000073                     startup@result:
  1451                           	opt stack 0
  1452  000073                     string_utils_copy@result:
  1453                           	opt stack 0
  1454  000073                     string_utils_split@i:
  1455                           	opt stack 0
  1456  000073                     string_utils_strchr@result:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x13
  1460  000073                     	ds	1
  1461  000074                     ?_pd_add_value:
  1462                           	opt stack 0
  1463  000074                     string_utils_strncmp@case_sensitive:
  1464                           	opt stack 0
  1465  000074                     rd_buffer_get@first:
  1466                           	opt stack 0
  1467  000074                     string_utils_from_hex@phex_str:
  1468                           	opt stack 0
  1469  000074                     _cla_add_value$1009:
  1470                           	opt stack 0
  1471  000074                     pd_add_value@d:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x14
  1475  000074                     	ds	1
  1476  000075                     ??_string_utils_strncmp:
  1477  000075                     string_utils_split@chains:
  1478                           	opt stack 0
  1479  000075                     string_utils_strchr@pos:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x15
  1483  000075                     	ds	1
  1484  000076                     ??_string_utils_from_hex:
  1485  000076                     ?_rd_buffer_readline:
  1486                           	opt stack 0
  1487  000076                     rd_buffer_readline@pbuffer:
  1488                           	opt stack 0
  1489  000076                     rd_buffer_put@mes_rec:
  1490                           	opt stack 0
  1491  000076                     _cla_add_value$1010:
  1492                           	opt stack 0
  1493  000076                     pd_add_value@val:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x16
  1497  000076                     	ds	1
  1498  000077                     string_utils_split@prev:
  1499                           	opt stack 0
  1500  000077                     string_utils_strncmp@result:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x17
  1504  000077                     	ds	1
  1505  000078                     ??_pd_add_value:
  1506  000078                     _rd_buffer_put$482:
  1507                           	opt stack 0
  1508  000078                     string_utils_split@symb:
  1509                           	opt stack 0
  1510  000078                     cla_add_value@d:
  1511                           	opt stack 0
  1512  000078                     rd_buffer_readline@pdata:
  1513                           	opt stack 0
  1514  000078                     string_utils_strncmp@pos:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x18
  1518  000078                     	ds	1
  1519  000079                     rd_buffer_put@sz:
  1520                           	opt stack 0
  1521  000079                     string_utils_from_hex@len:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x19
  1525  000079                     	ds	1
  1526  00007A                     rd_buffer_readline@psize:
  1527                           	opt stack 0
  1528  00007A                     string_utils_strncmp@symb1:
  1529                           	opt stack 0
  1530                           
  1531                           ; 1 bytes @ 0x1A
  1532  00007A                     	ds	1
  1533  00007B                     rd_buffer_readline@ch:
  1534                           	opt stack 0
  1535  00007B                     string_utils_strncmp@symb2:
  1536                           	opt stack 0
  1537  00007B                     rd_buffer_put@ind:
  1538                           	opt stack 0
  1539  00007B                     string_utils_from_hex@j:
  1540                           	opt stack 0
  1541                           
  1542                           ; 2 bytes @ 0x1B
  1543  00007B                     	ds	2
  1544  00007D                     ?_serialport_write:
  1545                           	opt stack 0
  1546  00007D                     serialport_write@pstr:
  1547                           	opt stack 0
  1548  00007D                     string_utils_from_hex@i:
  1549                           	opt stack 0
  1550                           
  1551                           ; 2 bytes @ 0x1D
  1552  00007D                     	ds	1
  1553  00007E                     _pd_add_value$1123:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x1E
  1557  00007E                     	ds	1
  1558  00007F                     ?_this_variable_load_from_text:
  1559                           	opt stack 0
  1560  00007F                     set_parameter@p_id:
  1561                           	opt stack 0
  1562  00007F                     get_parameter@p_id:
  1563                           	opt stack 0
  1564  00007F                     this_variable_load_from_text@pval:
  1565                           	opt stack 0
  1566                           
  1567                           ; 3 bytes @ 0x1F
  1568  00007F                     	ds	1
  1569  000080                     set_parameter@ok:
  1570                           	opt stack 0
  1571  000080                     _pd_add_value$1124:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x20
  1575  000080                     	ds	1
  1576  000081                     ?_on_parameter_found:
  1577                           	opt stack 0
  1578  000081                     on_parameter_found@cmd_id:
  1579                           	opt stack 0
  1580                           
  1581                           ; 1 bytes @ 0x21
  1582  000081                     	ds	1
  1583  000082                     on_parameter_found@p_id:
  1584                           	opt stack 0
  1585  000082                     this_variable_load_from_text@len:
  1586                           	opt stack 0
  1587  000082                     _pd_add_value$1125:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x22
  1591  000082                     	ds	1
  1592  000083                     
  1593                           ; 3 bytes @ 0x23
  1594  000083                     	ds	1
  1595  000084                     ?_this_parse_item:
  1596                           	opt stack 0
  1597  000084                     this_parse_item@pstr:
  1598                           	opt stack 0
  1599  000084                     _pd_add_value$1126:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x24
  1603  000084                     	ds	2
  1604  000086                     this_parse_item@pitem:
  1605                           	opt stack 0
  1606  000086                     _pd_add_value$1127:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x26
  1610  000086                     	ds	1
  1611  000087                     ??_this_parse_item:
  1612  000087                     on_parameter_found@operation:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x27
  1616  000087                     	ds	1
  1617  000088                     pd_add_value@tmp:
  1618                           	opt stack 0
  1619                           
  1620                           ; 2 bytes @ 0x28
  1621  000088                     	ds	1
  1622  000089                     this_parse_item@is_equal:
  1623                           	opt stack 0
  1624                           
  1625                           ; 1 bytes @ 0x29
  1626  000089                     	ds	1
  1627  00008A                     this_parse_item@result:
  1628                           	opt stack 0
  1629  00008A                     pd_add_value@i:
  1630                           	opt stack 0
  1631                           
  1632                           ; 1 bytes @ 0x2A
  1633  00008A                     	ds	1
  1634  00008B                     this_parse_item@pvar:
  1635                           	opt stack 0
  1636  00008B                     detection_task@zero:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x2B
  1640  00008B                     	ds	2
  1641  00008D                     this_parse_item@str_len:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x2D
  1645  00008D                     	ds	2
  1646  00008F                     this_parse_item@pval:
  1647                           	opt stack 0
  1648                           
  1649                           ; 3 bytes @ 0x2F
  1650  00008F                     	ds	3
  1651  000092                     this_parse_item@i:
  1652                           	opt stack 0
  1653                           
  1654                           ; 1 bytes @ 0x32
  1655  000092                     	ds	1
  1656  000093                     this_parse_item@var_len:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x33
  1660  000093                     	ds	2
  1661  000095                     ?_syntax_string:
  1662                           	opt stack 0
  1663  000095                     syntax_string@pstr:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x35
  1667  000095                     	ds	2
  1668  000097                     syntax_string@str_len:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x37
  1672  000097                     	ds	2
  1673  000099                     syntax_string@case_sensitive:
  1674                           	opt stack 0
  1675                           
  1676                           ; 1 bytes @ 0x39
  1677  000099                     	ds	1
  1678  00009A                     ??_syntax_string:
  1679                           
  1680                           ; 0 bytes @ 0x3A
  1681  00009A                     	ds	1
  1682  00009B                     syntax_string@result:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x3B
  1686  00009B                     	ds	1
  1687  00009C                     syntax_string@pos:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x3C
  1691  00009C                     	ds	1
  1692  00009D                     syntax_string@pchain:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x3D
  1696  00009D                     	ds	2
  1697  00009F                     syntax_string@chains:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x3F
  1701  00009F                     	ds	1
  1702  0000A0                     serialport_task@byte:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x40
  1706  0000A0                     	ds	1
  1707  0000A1                     serialport_task@size:
  1708                           	opt stack 0
  1709                           
  1710                           ; 2 bytes @ 0x41
  1711  0000A1                     	ds	2
  1712  0000A3                     ??_main:
  1713                           
  1714                           ; 0 bytes @ 0x43
  1715  0000A3                     	ds	1
  1716  0000A4                     main@event_old:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x44
  1720  0000A4                     	ds	1
  1721  0000A5                     main@event_priority:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x45
  1725  0000A5                     	ds	1
  1726  0000A6                     main@i:
  1727                           	opt stack 0
  1728                           
  1729                           ; 1 bytes @ 0x46
  1730  0000A6                     	ds	1
  1731                           tosu	equ	0xFFF
  1732                           tosh	equ	0xFFE
  1733                           tosl	equ	0xFFD
  1734                           pclath	equ	0xFFA
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           prodh	equ	0xFF4
  1740                           prodl	equ	0xFF3
  1741                           intcon	equ	0xFF2
  1742                           indf0	equ	0xFEF
  1743                           postinc0	equ	0xFEE
  1744                           fsr0h	equ	0xFEA
  1745                           fsr0l	equ	0xFE9
  1746                           wreg	equ	0xFE8
  1747                           indf1	equ	0xFE7
  1748                           postinc1	equ	0xFE6
  1749                           postdec1	equ	0xFE5
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           indf2	equ	0xFDF
  1753                           postinc2	equ	0xFDE
  1754                           postdec2	equ	0xFDD
  1755                           fsr2h	equ	0xFDA
  1756                           fsr2l	equ	0xFD9
  1757                           status	equ	0xFD8
  1758                           
  1759                           	psect	cstackCOMRAM
  1760  000001                     __pcstackCOMRAM:
  1761                           	opt stack 0
  1762  000001                     ?_syntax_get_text:
  1763                           	opt stack 0
  1764  000001                     
  1765                           ; 2 bytes @ 0x0
  1766  000001                     	ds	17
  1767  000012                     ??_isr_high:
  1768                           
  1769                           ; 0 bytes @ 0x11
  1770  000012                     	ds	8
  1771  00001A                     ?i2_rd_buffer_put:
  1772                           	opt stack 0
  1773  00001A                     ?_adc_read:
  1774                           	opt stack 0
  1775  00001A                     _uart_error$257:
  1776                           	opt stack 0
  1777  00001A                     i2rd_buffer_put@pbuffer:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x19
  1781  00001A                     	ds	1
  1782  00001B                     uart_getc@pbyte:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x1A
  1786  00001B                     	ds	1
  1787  00001C                     ??_adc_read:
  1788  00001C                     uart_getc@result:
  1789                           	opt stack 0
  1790  00001C                     i2rd_buffer_put@prec:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x1B
  1794  00001C                     	ds	1
  1795  00001D                     adc_read@adc_number:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x1C
  1799  00001D                     	ds	1
  1800  00001E                     ??i2_rd_buffer_put:
  1801                           
  1802                           ; 0 bytes @ 0x1D
  1803  00001E                     	ds	6
  1804  000024                     i2rd_buffer_put@mes_rec:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x23
  1808  000024                     	ds	2
  1809  000026                     i2_rd_buffer_put$482:
  1810                           	opt stack 0
  1811                           
  1812                           ; 1 bytes @ 0x25
  1813  000026                     	ds	1
  1814  000027                     i2rd_buffer_put@sz:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x26
  1818  000027                     	ds	2
  1819  000029                     i2rd_buffer_put@ind:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x28
  1823  000029                     	ds	2
  1824  00002B                     tosu	equ	0xFFF
  1825                           tosh	equ	0xFFE
  1826                           tosl	equ	0xFFD
  1827                           pclath	equ	0xFFA
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           prodh	equ	0xFF4
  1833                           prodl	equ	0xFF3
  1834                           intcon	equ	0xFF2
  1835                           indf0	equ	0xFEF
  1836                           postinc0	equ	0xFEE
  1837                           fsr0h	equ	0xFEA
  1838                           fsr0l	equ	0xFE9
  1839                           wreg	equ	0xFE8
  1840                           indf1	equ	0xFE7
  1841                           postinc1	equ	0xFE6
  1842                           postdec1	equ	0xFE5
  1843                           fsr1h	equ	0xFE2
  1844                           fsr1l	equ	0xFE1
  1845                           indf2	equ	0xFDF
  1846                           postinc2	equ	0xFDE
  1847                           postdec2	equ	0xFDD
  1848                           fsr2h	equ	0xFDA
  1849                           fsr2l	equ	0xFD9
  1850                           status	equ	0xFD8
  1851                           
  1852                           ; 0 bytes @ 0x2A
  1853 ;;
  1854 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1855 ;;
  1856 ;; *************** function _main *****************
  1857 ;; Defined at:
  1858 ;;		line 14 in file "src/main.c"
  1859 ;; Parameters:    Size  Location     Type
  1860 ;;		None
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  i               1   70[BANK0 ] unsigned char 
  1863 ;;  event_priori    1   69[BANK0 ] char 
  1864 ;;  event_old       1   68[BANK0 ] char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  2  1016[COMRAM] int 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1874 ;;      Params:         0       0       0       0       0       0       0
  1875 ;;      Locals:         0       3       0       0       0       0       0
  1876 ;;      Temps:          0       1       0       0       0       0       0
  1877 ;;      Totals:         0       4       0       0       0       0       0
  1878 ;;Total ram usage:        4 bytes
  1879 ;; Hardware stack levels required when called:   12
  1880 ;; This function calls:
  1881 ;;		_delay_ms
  1882 ;;		_startup
  1883 ;;		_detection_task
  1884 ;;		_serialport_task
  1885 ;; This function is called by:
  1886 ;;		Startup code after reset
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text0
  1891  000D42                     __ptext0:
  1892                           	opt stack 0
  1893  000D42                     _main:
  1894                           	opt stack 19
  1895                           
  1896                           ;main.c: 15: while(startup() != RESULT_SUCCESS)
  1897  000D42  D006               	goto	l5171
  1898  000D44                     l5169:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 16: {
  1902                           ;main.c: 17: delay_ms(1000);
  1903  000D44  0E03               	movlw	3
  1904  000D46  6F6D               	movwf	(?_delay_ms+1)& (0+255),b
  1905  000D48  0EE8               	movlw	232
  1906  000D4A  6F6C               	movwf	?_delay_ms& (0+255),b
  1907  000D4C  ECF1  F00C         	call	_delay_ms	;wreg free
  1908  000D50                     l5171:
  1909  000D50  EC81  F00B         	call	_startup	;wreg free
  1910  000D54  6FA3               	movwf	??_main& (0+255),b
  1911  000D56  05A3               	decf	??_main& (0+255),w,b
  1912  000D58  E1F5               	bnz	l5169
  1913                           
  1914                           ; BSR set to: 0
  1915                           
  1916                           ;main.c: 18: };
  1917                           ;main.c: 19: do{INTCONbits.GIEH=(1); INTCONbits.GIEL=(1);}while(0);;
  1918  000D5A  8EF2               	bsf	intcon,7,c	;volatile
  1919  000D5C  8CF2               	bsf	intcon,6,c	;volatile
  1920  000D5E                     l1023:
  1921  000D5E  0100               	movlb	0	; () banked
  1922  000D60  69A4               	setf	main@event_old& (0+255),b
  1923  000D62  69A5               	setf	main@event_priority& (0+255),b
  1924  000D64  6BA6               	clrf	main@i& (0+255),b
  1925  000D66                     l5177:
  1926                           
  1927                           ; BSR set to: 0
  1928  000D66  51A6               	movf	main@i& (0+255),w,b
  1929  000D68  0F33               	addlw	low _pool	;volatile
  1930  000D6A  6ED9               	movwf	fsr2l,c
  1931  000D6C  6ADA               	clrf	fsr2h,c
  1932  000D6E  0E01               	movlw	1
  1933  000D70  62DF               	cpfseq	indf2,c
  1934  000D72  D011               	goto	l5189
  1935                           
  1936                           ; BSR set to: 0
  1937  000D74  51A6               	movf	main@i& (0+255),w,b
  1938  000D76  0F2B               	addlw	low _event_miss	;volatile
  1939  000D78  6ED9               	movwf	fsr2l,c
  1940  000D7A  6ADA               	clrf	fsr2h,c
  1941  000D7C  50DF               	movf	indf2,w,c
  1942  000D7E  E103               	bnz	l5183
  1943                           
  1944                           ; BSR set to: 0
  1945  000D80  C0A6  F0A4         	movff	main@i,main@event_old
  1946  000D84  D005               	goto	l5185
  1947  000D86                     l5183:
  1948                           
  1949                           ; BSR set to: 0
  1950  000D86  51A6               	movf	main@i& (0+255),w,b
  1951  000D88  0F2B               	addlw	low _event_miss	;volatile
  1952  000D8A  6ED9               	movwf	fsr2l,c
  1953  000D8C  6ADA               	clrf	fsr2h,c
  1954  000D8E  06DF               	decf	indf2,f,c
  1955  000D90                     l5185:
  1956                           
  1957                           ; BSR set to: 0
  1958  000D90  BFA5               	btfsc	main@event_priority& (0+255),7,b
  1959                           
  1960                           ; BSR set to: 0
  1961  000D92  C0A6  F0A5         	movff	main@i,main@event_priority
  1962  000D96                     l5189:
  1963                           
  1964                           ; BSR set to: 0
  1965  000D96  2BA6               	incf	main@i& (0+255),f,b
  1966                           
  1967                           ; BSR set to: 0
  1968  000D98  0E07               	movlw	7
  1969  000D9A  65A6               	cpfsgt	main@i& (0+255),b
  1970  000D9C  D7E4               	goto	l5177
  1971                           
  1972                           ; BSR set to: 0
  1973  000D9E  BFA4               	btfsc	main@event_old& (0+255),7,b
  1974  000DA0  D014               	goto	l1030
  1975                           
  1976                           ; BSR set to: 0
  1977  000DA2  51A4               	movf	main@event_old& (0+255),w,b
  1978  000DA4  0D02               	mullw	2
  1979  000DA6  50F3               	movf	prodl,w,c
  1980  000DA8  0FA7               	addlw	low _events	;volatile
  1981  000DAA  6ED9               	movwf	fsr2l,c
  1982  000DAC  6ADA               	clrf	fsr2h,c
  1983  000DAE  D801               	call	u5348
  1984  000DB0  D00A               	goto	u5349
  1985  000DB2                     u5348:
  1986  000DB2  0005               	push	
  1987  000DB4  6EFA               	movwf	pclath,c
  1988  000DB6  50DE               	movf	postinc2,w,c
  1989  000DB8  6EFD               	movwf	tosl,c
  1990  000DBA  50DE               	movf	postinc2,w,c
  1991  000DBC  6EFE               	movwf	tosh,c
  1992  000DBE  50F8               	movf	tblptru,w,c
  1993  000DC0  6EFF               	movwf	tosu,c
  1994  000DC2  50FA               	movf	pclath,w,c
  1995  000DC4  0012               	return		;indir
  1996  000DC6                     u5349:
  1997                           
  1998                           ; BSR set to: 0
  1999  000DC6  51A4               	movf	main@event_old& (0+255),w,b
  2000  000DC8  D015               	goto	L1
  2001  000DCA                     l1030:
  2002                           
  2003                           ; BSR set to: 0
  2004  000DCA  BFA5               	btfsc	main@event_priority& (0+255),7,b
  2005  000DCC  D017               	goto	l1033
  2006                           
  2007                           ; BSR set to: 0
  2008  000DCE  51A5               	movf	main@event_priority& (0+255),w,b
  2009  000DD0  0D02               	mullw	2
  2010  000DD2  50F3               	movf	prodl,w,c
  2011  000DD4  0FA7               	addlw	low _events	;volatile
  2012  000DD6  6ED9               	movwf	fsr2l,c
  2013  000DD8  6ADA               	clrf	fsr2h,c
  2014  000DDA  D801               	call	u5368
  2015  000DDC  D00A               	goto	u5369
  2016  000DDE                     u5368:
  2017  000DDE  0005               	push	
  2018  000DE0  6EFA               	movwf	pclath,c
  2019  000DE2  50DE               	movf	postinc2,w,c
  2020  000DE4  6EFD               	movwf	tosl,c
  2021  000DE6  50DE               	movf	postinc2,w,c
  2022  000DE8  6EFE               	movwf	tosh,c
  2023  000DEA  50F8               	movf	tblptru,w,c
  2024  000DEC  6EFF               	movwf	tosu,c
  2025  000DEE  50FA               	movf	pclath,w,c
  2026  000DF0  0012               	return		;indir
  2027  000DF2                     u5369:
  2028                           
  2029                           ; BSR set to: 0
  2030  000DF2  51A5               	movf	main@event_priority& (0+255),w,b
  2031  000DF4                     L1:
  2032  000DF4  0F33               	addlw	low _pool	;volatile
  2033  000DF6  6ED9               	movwf	fsr2l,c
  2034  000DF8  6ADA               	clrf	fsr2h,c
  2035  000DFA  6ADF               	clrf	indf2,c
  2036  000DFC                     l1033:
  2037                           
  2038                           ; BSR set to: 0
  2039  000DFC  0004               	clrwdt		;# 
  2040  000DFE  D7AF               	goto	l1023
  2041                           tosu	equ	0xFFF
  2042                           tosh	equ	0xFFE
  2043                           tosl	equ	0xFFD
  2044                           pclath	equ	0xFFA
  2045                           tblptru	equ	0xFF8
  2046                           tblptrh	equ	0xFF7
  2047                           tblptrl	equ	0xFF6
  2048                           tablat	equ	0xFF5
  2049                           prodh	equ	0xFF4
  2050                           prodl	equ	0xFF3
  2051                           intcon	equ	0xFF2
  2052                           indf0	equ	0xFEF
  2053                           postinc0	equ	0xFEE
  2054                           fsr0h	equ	0xFEA
  2055                           fsr0l	equ	0xFE9
  2056                           wreg	equ	0xFE8
  2057                           indf1	equ	0xFE7
  2058                           postinc1	equ	0xFE6
  2059                           postdec1	equ	0xFE5
  2060                           fsr1h	equ	0xFE2
  2061                           fsr1l	equ	0xFE1
  2062                           indf2	equ	0xFDF
  2063                           postinc2	equ	0xFDE
  2064                           postdec2	equ	0xFDD
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           status	equ	0xFD8
  2068                           
  2069 ;; *************** function _delay_ms *****************
  2070 ;; Defined at:
  2071 ;;		line 28 in file "src/drivers/delay.c"
  2072 ;; Parameters:    Size  Location     Type
  2073 ;;  delay           2   12[BANK0 ] unsigned int 
  2074 ;; Auto vars:     Size  Location     Type
  2075 ;;		None
  2076 ;; Return value:  Size  Location     Type
  2077 ;;		None               void
  2078 ;; Registers used:
  2079 ;;		wreg, status,2, status,0
  2080 ;; Tracked objects:
  2081 ;;		On entry : F/0
  2082 ;;		On exit  : F/0
  2083 ;;		Unchanged: FFFFFFF0/0
  2084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2085 ;;      Params:         0       2       0       0       0       0       0
  2086 ;;      Locals:         0       0       0       0       0       0       0
  2087 ;;      Temps:          0       0       0       0       0       0       0
  2088 ;;      Totals:         0       2       0       0       0       0       0
  2089 ;;Total ram usage:        2 bytes
  2090 ;; Hardware stack levels used:    1
  2091 ;; Hardware stack levels required when called:    5
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text1
  2100  0019E2                     __ptext1:
  2101                           	opt stack 0
  2102  0019E2                     __end_of_main:
  2103                           	opt stack 0
  2104  0019E2                     _delay_ms:
  2105                           	opt stack 25
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;delay.c: 29: this_delay_timer_ms = delay;
  2109  0019E2  C06C  F0EB         	movff	delay_ms@delay,_this_delay_timer_ms	;volatile
  2110  0019E6  C06D  F0EC         	movff	delay_ms@delay+1,_this_delay_timer_ms+1	;volatile
  2111  0019EA                     l2795:
  2112                           
  2113                           ; BSR set to: 0
  2114  0019EA  51EC               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  2115  0019EC  11EB               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  2116  0019EE  B4D8               	btfsc	status,2,c
  2117  0019F0  0012               	return	
  2118  0019F2  D7FB               	goto	l2795
  2119  0019F4                     __end_of_delay_ms:
  2120                           	opt stack 0
  2121                           tosu	equ	0xFFF
  2122                           tosh	equ	0xFFE
  2123                           tosl	equ	0xFFD
  2124                           pclath	equ	0xFFA
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           intcon	equ	0xFF2
  2132                           indf0	equ	0xFEF
  2133                           postinc0	equ	0xFEE
  2134                           fsr0h	equ	0xFEA
  2135                           fsr0l	equ	0xFE9
  2136                           wreg	equ	0xFE8
  2137                           indf1	equ	0xFE7
  2138                           postinc1	equ	0xFE6
  2139                           postdec1	equ	0xFE5
  2140                           fsr1h	equ	0xFE2
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           postdec2	equ	0xFDD
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _detection_task *****************
  2150 ;; Defined at:
  2151 ;;		line 81 in file "src/modules/detection.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  zero            3   43[BANK0 ] m
  2156 ;; Return value:  Size  Location     Type
  2157 ;;		None               void
  2158 ;; Registers used:
  2159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : F/0
  2162 ;;		On exit  : F/0
  2163 ;;		Unchanged: FFFFFFF0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2165 ;;      Params:         0       0       0       0       0       0       0
  2166 ;;      Locals:         0       3       0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0
  2168 ;;      Totals:         0       3       0       0       0       0       0
  2169 ;;Total ram usage:        3 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    7
  2172 ;; This function calls:
  2173 ;;		_pd_add_value
  2174 ;;		_cla_add_value
  2175 ;; This function is called by:
  2176 ;;		_startup
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text2
  2182  001390                     __ptext2:
  2183                           	opt stack 0
  2184  001390                     _detection_task:
  2185                           	opt stack 23
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;detection.c: 82: static CHAR alarm_cla;
  2189                           ;detection.c: 83: static CHAR alarm_wav;
  2190                           ;detection.c: 84: INT24 zero;
  2191                           ;detection.c: 86: alarm_wav = (CHAR)pd_add_value(&pd_detector, (INT24)g_analog0);
  2192                           
  2193                           ; BSR set to: 0
  2194  001390  0E01               	movlw	high _pd_detector	;volatile
  2195  001392  0100               	movlb	0	; () banked
  2196  001394  6F75               	movwf	(?_pd_add_value+1)& (0+255),b
  2197  001396  0E6B               	movlw	low _pd_detector	;volatile
  2198  001398  6F74               	movwf	?_pd_add_value& (0+255),b
  2199  00139A  C0B7  F076         	movff	_g_analog0,?_pd_add_value+2	;volatile
  2200  00139E  C0B8  F077         	movff	_g_analog0+1,?_pd_add_value+3	;volatile
  2201  0013A2  EC7A  F000         	call	_pd_add_value	;wreg free
  2202  0013A6  6FBF               	movwf	detection_task@alarm_wav& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;detection.c: 87: zero = pd_detector.ref_v;
  2206  0013A8  C1BF  F08B         	movff	_pd_detector+84,detection_task@zero	;volatile
  2207  0013AC  0100               	movlb	0	; () banked
  2208  0013AE  C1C0  F08C         	movff	_pd_detector+85,detection_task@zero+1	;volatile
  2209  0013B2  6B8D               	clrf	(detection_task@zero+2)& (0+255),b
  2210  0013B4  BF8C               	btfsc	(detection_task@zero+1)& (0+255),7,b
  2211  0013B6  078D               	decf	(detection_task@zero+2)& (0+255),f,b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;detection.c: 88: alarm_cla = (CHAR)cla_add_value(&cla_detector, (INT24)g_analog0, zero);
  2215  0013B8  C0B7  F06C         	movff	_g_analog0,?_cla_add_value	;volatile
  2216  0013BC  C0B8  F06D         	movff	_g_analog0+1,?_cla_add_value+1	;volatile
  2217  0013C0  C08B  F06E         	movff	detection_task@zero,?_cla_add_value+2
  2218  0013C4  C08C  F06F         	movff	detection_task@zero+1,?_cla_add_value+3
  2219  0013C8  0EC0               	movlw	_cla_detector& (0+255)	;volatile
  2220  0013CA  EC05  F003         	call	_cla_add_value
  2221  0013CE  6FBE               	movwf	detection_task@alarm_cla& (0+255),b
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;detection.c: 89: this_warning = cla_detector.status.over_trig;
  2225  0013D0  0E00               	movlw	0
  2226  0013D2  B5CE               	btfsc	(_cla_detector+14)& (0+255),2,b	;volatile
  2227  0013D4  0E01               	movlw	1
  2228  0013D6  6FBD               	movwf	_this_warning& (0+255),b	;volatile
  2229                           
  2230                           ;detection.c: 91: switch (g_CONFIG.det_mode)
  2231  0013D8  D008               	goto	l3507
  2232  0013DA                     l832:
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;detection.c: 97: this_alarm = FALSE;
  2236  0013DA  6BBA               	clrf	_this_alarm& (0+255),b	;volatile
  2237                           
  2238                           ;detection.c: 98: break;
  2239  0013DC  D00D               	goto	l3509
  2240  0013DE                     l834:
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;detection.c: 102: this_alarm = alarm_cla;
  2244  0013DE  C0BE  F0BA         	movff	detection_task@alarm_cla,_this_alarm	;volatile
  2245                           
  2246                           ;detection.c: 103: break;
  2247  0013E2  D00A               	goto	l3509
  2248  0013E4                     l835:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;detection.c: 110: this_alarm= alarm_wav;
  2252  0013E4  C0BF  F0BA         	movff	detection_task@alarm_wav,_this_alarm	;volatile
  2253                           
  2254                           ;detection.c: 111: break;
  2255  0013E8  D007               	goto	l3509
  2256  0013EA                     l3507:
  2257                           
  2258                           ; BSR set to: 0
  2259  0013EA  51DC               	movf	(_g_CONFIG+7)& (0+255),w,b	;volatile
  2260                           
  2261                           ; Switch size 1, requested type "space"
  2262                           ; Number of cases is 3, Range of values is 0 to 2
  2263                           ; switch strategies available:
  2264                           ; Name         Instructions Cycles
  2265                           ; simple_byte           10     6 (average)
  2266                           ;	Chosen strategy is simple_byte
  2267  0013EC  E0F6               	bz	l832
  2268  0013EE  0A01               	xorlw	1	; case 1
  2269  0013F0  E0F6               	bz	l834
  2270  0013F2  0A03               	xorlw	3	; case 2
  2271  0013F4  E0F7               	bz	l835
  2272  0013F6  D7F1               	goto	l832
  2273  0013F8                     l3509:
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;detection.c: 119: if(this_alarm) STATUS |= (1<<0);
  2277  0013F8  51BA               	movf	_this_alarm& (0+255),w,b	;volatile
  2278  0013FA  A4D8               	btfss	status,2,c
  2279                           
  2280                           ; BSR set to: 0
  2281  0013FC  80D8               	bsf	status,0,c	;volatile
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;detection.c: 120: if(this_warning) STATUS |= (1<<1);
  2285  0013FE  51BD               	movf	_this_warning& (0+255),w,b	;volatile
  2286  001400  A4D8               	btfss	status,2,c
  2287                           
  2288                           ; BSR set to: 0
  2289  001402  82D8               	bsf	status,1,c	;volatile
  2290                           
  2291                           ; BSR set to: 0
  2292  001404  0012               	return	
  2293  001406                     __end_of_detection_task:
  2294                           	opt stack 0
  2295                           tosu	equ	0xFFF
  2296                           tosh	equ	0xFFE
  2297                           tosl	equ	0xFFD
  2298                           pclath	equ	0xFFA
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           prodh	equ	0xFF4
  2304                           prodl	equ	0xFF3
  2305                           intcon	equ	0xFF2
  2306                           indf0	equ	0xFEF
  2307                           postinc0	equ	0xFEE
  2308                           fsr0h	equ	0xFEA
  2309                           fsr0l	equ	0xFE9
  2310                           wreg	equ	0xFE8
  2311                           indf1	equ	0xFE7
  2312                           postinc1	equ	0xFE6
  2313                           postdec1	equ	0xFE5
  2314                           fsr1h	equ	0xFE2
  2315                           fsr1l	equ	0xFE1
  2316                           indf2	equ	0xFDF
  2317                           postinc2	equ	0xFDE
  2318                           postdec2	equ	0xFDD
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _serialport_task *****************
  2324 ;; Defined at:
  2325 ;;		line 38 in file "src/modules/serialport.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  size            2   65[BANK0 ] int 
  2330 ;;  byte            1   64[BANK0 ] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;		None               void
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : F/0
  2337 ;;		On exit  : F/0
  2338 ;;		Unchanged: FFFFFFF0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2340 ;;      Params:         0       0       0       0       0       0       0
  2341 ;;      Locals:         0       3       0       0       0       0       0
  2342 ;;      Temps:          0       0       0       0       0       0       0
  2343 ;;      Totals:         0       3       0       0       0       0       0
  2344 ;;Total ram usage:        3 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:   11
  2347 ;; This function calls:
  2348 ;;		_syntax_string
  2349 ;;		_rd_buffer_readline
  2350 ;;		_rd_buffer_get
  2351 ;;		_uart_putc
  2352 ;;		_rd_buffer_cnt
  2353 ;; This function is called by:
  2354 ;;		_startup
  2355 ;;		_main
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text3
  2360  001406                     __ptext3:
  2361                           	opt stack 0
  2362  001406                     _serialport_task:
  2363                           	opt stack 19
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;serialport.c: 39: SIZE size;
  2367                           ;serialport.c: 40: UINT8 byte;
  2368                           ;serialport.c: 41: while (rd_buffer_readline(&g_rx_buffer, &serialport_buffer, &size)) {
  2369                           
  2370                           ; BSR set to: 0
  2371  001406  D00D               	goto	l4997
  2372  001408                     l4995:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;serialport.c: 42: syntax_string(serialport_buffer, size,FALSE);
  2376  001408  0E03               	movlw	high _serialport_buffer
  2377  00140A  0100               	movlb	0	; () banked
  2378  00140C  6F96               	movwf	(?_syntax_string+1)& (0+255),b
  2379  00140E  0E7F               	movlw	low _serialport_buffer
  2380  001410  6F95               	movwf	?_syntax_string& (0+255),b
  2381  001412  C0A1  F097         	movff	serialport_task@size,?_syntax_string+2
  2382  001416  C0A2  F098         	movff	serialport_task@size+1,?_syntax_string+3
  2383  00141A  0E00               	movlw	0
  2384  00141C  6B99               	clrf	(?_syntax_string+4)& (0+255),b
  2385  00141E  EC01  F006         	call	_syntax_string	;wreg free
  2386  001422                     l4997:
  2387  001422  0E02               	movlw	high _g_rx_buffer
  2388  001424  0100               	movlb	0	; () banked
  2389  001426  6F77               	movwf	(?_rd_buffer_readline+1)& (0+255),b
  2390  001428  0E7F               	movlw	low _g_rx_buffer
  2391  00142A  6F76               	movwf	?_rd_buffer_readline& (0+255),b
  2392  00142C  0E03               	movlw	high _serialport_buffer
  2393  00142E  6F79               	movwf	(?_rd_buffer_readline+3)& (0+255),b
  2394  001430  0E7F               	movlw	low _serialport_buffer
  2395  001432  6F78               	movwf	(?_rd_buffer_readline+2)& (0+255),b
  2396  001434  0EA1               	movlw	low serialport_task@size
  2397  001436  6F7A               	movwf	(?_rd_buffer_readline+4)& (0+255),b
  2398  001438  EC77  F00A         	call	_rd_buffer_readline	;wreg free
  2399  00143C  0900               	iorlw	0
  2400  00143E  E00D               	bz	l5003
  2401  001440  D7E3               	goto	l4995
  2402  001442                     l4999:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;serialport.c: 46: rd_buffer_get(&g_tx_buffer, &byte);
  2406  001442  0E01               	movlw	high _g_tx_buffer
  2407  001444  0100               	movlb	0	; () banked
  2408  001446  6F6D               	movwf	(?_rd_buffer_get+1)& (0+255),b
  2409  001448  0E00               	movlw	low _g_tx_buffer
  2410  00144A  6F6C               	movwf	?_rd_buffer_get& (0+255),b
  2411  00144C  0EA0               	movlw	low serialport_task@byte
  2412  00144E  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2413  001450  EC00  F007         	call	_rd_buffer_get	;wreg free
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;serialport.c: 47: uart_putc(byte);
  2417  001454  51A0               	movf	serialport_task@byte& (0+255),w,b
  2418  001456  ECFA  F00C         	call	_uart_putc
  2419  00145A                     l5003:
  2420                           
  2421                           ; BSR set to: 0
  2422  00145A  0E01               	movlw	high _g_tx_buffer
  2423  00145C  0100               	movlb	0	; () banked
  2424  00145E  6F6D               	movwf	(?_rd_buffer_cnt+1)& (0+255),b
  2425  001460  0E00               	movlw	low _g_tx_buffer
  2426  001462  6F6C               	movwf	?_rd_buffer_cnt& (0+255),b
  2427  001464  EC0F  F00B         	call	_rd_buffer_cnt	;wreg free
  2428  001468  516D               	movf	(?_rd_buffer_cnt+1)& (0+255),w,b
  2429  00146A  0A80               	xorlw	128
  2430  00146C  0F80               	addlw	-128
  2431  00146E  0E01               	movlw	1
  2432  001470  B4D8               	btfsc	status,2,c
  2433  001472  5D6C               	subwf	?_rd_buffer_cnt& (0+255),w,b
  2434  001474  A0D8               	btfss	status,0,c
  2435  001476  0012               	return	
  2436  001478  D7E4               	goto	l4999
  2437  00147A                     __end_of_serialport_task:
  2438                           	opt stack 0
  2439                           tosu	equ	0xFFF
  2440                           tosh	equ	0xFFE
  2441                           tosl	equ	0xFFD
  2442                           pclath	equ	0xFFA
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           indf0	equ	0xFEF
  2451                           postinc0	equ	0xFEE
  2452                           fsr0h	equ	0xFEA
  2453                           fsr0l	equ	0xFE9
  2454                           wreg	equ	0xFE8
  2455                           indf1	equ	0xFE7
  2456                           postinc1	equ	0xFE6
  2457                           postdec1	equ	0xFE5
  2458                           fsr1h	equ	0xFE2
  2459                           fsr1l	equ	0xFE1
  2460                           indf2	equ	0xFDF
  2461                           postinc2	equ	0xFDE
  2462                           postdec2	equ	0xFDD
  2463                           fsr2h	equ	0xFDA
  2464                           fsr2l	equ	0xFD9
  2465                           status	equ	0xFD8
  2466                           
  2467 ;; *************** function _rd_buffer_readline *****************
  2468 ;; Defined at:
  2469 ;;		line 39 in file "src/modules/rd_buffer.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;  pbuffer         2   22[BANK0 ] PTR struct .
  2472 ;;		 -> g_rx_buffer(107), 
  2473 ;;  pdata           2   24[BANK0 ] PTR unsigned char 
  2474 ;;		 -> serialport_buffer(100), 
  2475 ;;  psize           1   26[BANK0 ] PTR int 
  2476 ;;		 -> serialport_task@size(2), 
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;  ch              1   27[BANK0 ] unsigned char 
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      unsigned char 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : F/0
  2485 ;;		On exit  : F/0
  2486 ;;		Unchanged: FFFFFFF0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2488 ;;      Params:         0       5       0       0       0       0       0
  2489 ;;      Locals:         0       1       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0
  2491 ;;      Totals:         0       6       0       0       0       0       0
  2492 ;;Total ram usage:        6 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    6
  2495 ;; This function calls:
  2496 ;;		_rd_buffer_get
  2497 ;; This function is called by:
  2498 ;;		_serialport_task
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text4
  2503  0014EE                     __ptext4:
  2504                           	opt stack 0
  2505  0014EE                     _rd_buffer_readline:
  2506                           	opt stack 23
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;rd_buffer.c: 40: *psize=0;
  2510                           
  2511                           ; BSR set to: 0
  2512  0014EE  517A               	movf	rd_buffer_readline@psize& (0+255),w,b
  2513  0014F0  6ED9               	movwf	fsr2l,c
  2514  0014F2  6ADA               	clrf	fsr2h,c
  2515  0014F4  0E00               	movlw	0
  2516  0014F6  6EDE               	movwf	postinc2,c
  2517  0014F8  6EDD               	movwf	postdec2,c
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;rd_buffer.c: 41: if(this_contains_crlf && pdata )
  2521  0014FA  51BC               	movf	_this_contains_crlf& (0+255),w,b
  2522  0014FC  E02C               	bz	l2919
  2523                           
  2524                           ; BSR set to: 0
  2525  0014FE  5179               	movf	(rd_buffer_readline@pdata+1)& (0+255),w,b
  2526  001500  1178               	iorwf	rd_buffer_readline@pdata& (0+255),w,b
  2527  001502  E11D               	bnz	l2913
  2528  001504  0C00               	retlw	0
  2529  001506                     l2901:
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;rd_buffer.c: 45: {
  2533                           ;rd_buffer.c: 46: if(ch=='\n' || ch=='\r')
  2534  001506  517B               	movf	rd_buffer_readline@ch& (0+255),w,b
  2535  001508  0A0A               	xorlw	10
  2536  00150A  E003               	bz	l2905
  2537                           
  2538                           ; BSR set to: 0
  2539  00150C  517B               	movf	rd_buffer_readline@ch& (0+255),w,b
  2540  00150E  0A0D               	xorlw	13
  2541  001510  E108               	bnz	l2907
  2542  001512                     l2905:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;rd_buffer.c: 47: {
  2546                           ;rd_buffer.c: 48: *(++pdata) = '\0';
  2547  001512  4B78               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2548  001514  2B79               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2549  001516  C078  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2550  00151A  C079  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2551  00151E  6ADF               	clrf	indf2,c
  2552                           
  2553                           ;rd_buffer.c: 49: break;
  2554  001520  D018               	goto	l264
  2555  001522                     l2907:
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;rd_buffer.c: 50: }
  2559                           ;rd_buffer.c: 51: *pdata++ = ch;
  2560  001522  C078  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2561  001526  C079  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2562  00152A  C07B  FFDF         	movff	rd_buffer_readline@ch,indf2
  2563                           
  2564                           ; BSR set to: 0
  2565  00152E  4B78               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2566  001530  2B79               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;rd_buffer.c: 52: (*psize)++;
  2570  001532  517A               	movf	rd_buffer_readline@psize& (0+255),w,b
  2571  001534  6ED9               	movwf	fsr2l,c
  2572  001536  6ADA               	clrf	fsr2h,c
  2573  001538  2ADE               	incf	postinc2,f,c
  2574  00153A  0E00               	movlw	0
  2575  00153C  22DD               	addwfc	postdec2,f,c
  2576  00153E                     l2913:
  2577                           
  2578                           ; BSR set to: 0
  2579  00153E  C076  F06C         	movff	rd_buffer_readline@pbuffer,?_rd_buffer_get
  2580  001542  C077  F06D         	movff	rd_buffer_readline@pbuffer+1,?_rd_buffer_get+1
  2581  001546  0E7B               	movlw	low rd_buffer_readline@ch
  2582  001548  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2583  00154A  EC00  F007         	call	_rd_buffer_get	;wreg free
  2584  00154E  0900               	iorlw	0
  2585  001550  E1DA               	bnz	l2901
  2586  001552                     l264:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;rd_buffer.c: 53: }
  2590                           ;rd_buffer.c: 54: this_contains_crlf = FALSE;
  2591  001552  6BBC               	clrf	_this_contains_crlf& (0+255),b
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;rd_buffer.c: 55: return TRUE;
  2595  001554  0C01               	retlw	1
  2596  001556                     l2919:
  2597                           
  2598                           ; BSR set to: 0
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;rd_buffer.c: 56: }
  2602                           ;rd_buffer.c: 57: return FALSE;
  2603  001556  0C00               	retlw	0
  2604  001558                     __end_of_rd_buffer_readline:
  2605                           	opt stack 0
  2606                           tosu	equ	0xFFF
  2607                           tosh	equ	0xFFE
  2608                           tosl	equ	0xFFD
  2609                           pclath	equ	0xFFA
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           indf0	equ	0xFEF
  2618                           postinc0	equ	0xFEE
  2619                           fsr0h	equ	0xFEA
  2620                           fsr0l	equ	0xFE9
  2621                           wreg	equ	0xFE8
  2622                           indf1	equ	0xFE7
  2623                           postinc1	equ	0xFE6
  2624                           postdec1	equ	0xFE5
  2625                           fsr1h	equ	0xFE2
  2626                           fsr1l	equ	0xFE1
  2627                           indf2	equ	0xFDF
  2628                           postinc2	equ	0xFDE
  2629                           postdec2	equ	0xFDD
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;; *************** function _rd_buffer_get *****************
  2635 ;; Defined at:
  2636 ;;		line 127 in file "src/modules/rd_buffer.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2639 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  2640 ;;  prec            1   14[BANK0 ] PTR unsigned char 
  2641 ;;		 -> serialport_task@byte(1), rd_buffer_readline@ch(1), 
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  first           2   20[BANK0 ] int 
  2644 ;;  last            2   17[BANK0 ] int 
  2645 ;;  result          1   19[BANK0 ] unsigned char 
  2646 ;; Return value:  Size  Location     Type
  2647 ;;                  1    wreg      unsigned char 
  2648 ;; Registers used:
  2649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2650 ;; Tracked objects:
  2651 ;;		On entry : F/0
  2652 ;;		On exit  : F/0
  2653 ;;		Unchanged: FFFFFFF0/0
  2654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2655 ;;      Params:         0       3       0       0       0       0       0
  2656 ;;      Locals:         0       5       0       0       0       0       0
  2657 ;;      Temps:          0       2       0       0       0       0       0
  2658 ;;      Totals:         0      10       0       0       0       0       0
  2659 ;;Total ram usage:       10 bytes
  2660 ;; Hardware stack levels used:    1
  2661 ;; Hardware stack levels required when called:    5
  2662 ;; This function calls:
  2663 ;;		Nothing
  2664 ;; This function is called by:
  2665 ;;		_rd_buffer_readline
  2666 ;;		_serialport_task
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text5
  2671  000E00                     __ptext5:
  2672                           	opt stack 0
  2673  000E00                     _rd_buffer_get:
  2674                           	opt stack 24
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;rd_buffer.c: 128: CHAR result = FALSE;
  2678                           
  2679                           ; BSR set to: 0
  2680  000E00  6B73               	clrf	rd_buffer_get@result& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;rd_buffer.c: 129: INT16 first = pbuffer->head.first;
  2684  000E02  EE20 F002          	lfsr	2,2
  2685  000E06  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2686  000E08  26D9               	addwf	fsr2l,f,c
  2687  000E0A  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2688  000E0C  22DA               	addwfc	fsr2h,f,c
  2689  000E0E  CFDE F074          	movff	postinc2,rd_buffer_get@first
  2690  000E12  CFDD F075          	movff	postdec2,rd_buffer_get@first+1
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;rd_buffer.c: 130: INT16 last = pbuffer->head.last;
  2694  000E16  C06C  FFD9         	movff	rd_buffer_get@pbuffer,fsr2l
  2695  000E1A  C06D  FFDA         	movff	rd_buffer_get@pbuffer+1,fsr2h
  2696  000E1E  CFDE F071          	movff	postinc2,rd_buffer_get@last
  2697  000E22  CFDD F072          	movff	postdec2,rd_buffer_get@last+1
  2698                           
  2699                           ;rd_buffer.c: 131: if(first != last) {
  2700  000E26  5172               	movf	(rd_buffer_get@last+1)& (0+255),w,b
  2701  000E28  1975               	xorwf	(rd_buffer_get@first+1)& (0+255),w,b
  2702  000E2A  E102               	bnz	u1795
  2703  000E2C  5171               	movf	rd_buffer_get@last& (0+255),w,b
  2704  000E2E  1974               	xorwf	rd_buffer_get@first& (0+255),w,b
  2705  000E30                     u1795:
  2706  000E30  E038               	bz	l2941
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;rd_buffer.c: 132: (*prec) = pbuffer->list[first ];
  2710  000E32  C06C  F06F         	movff	rd_buffer_get@pbuffer,??_rd_buffer_get
  2711  000E36  C06D  F070         	movff	rd_buffer_get@pbuffer+1,??_rd_buffer_get+1
  2712  000E3A  5174               	movf	rd_buffer_get@first& (0+255),w,b
  2713  000E3C  276F               	addwf	??_rd_buffer_get& (0+255),f,b
  2714  000E3E  5175               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2715  000E40  2370               	addwfc	(??_rd_buffer_get+1)& (0+255),f,b
  2716  000E42  0E06               	movlw	6
  2717  000E44  256F               	addwf	??_rd_buffer_get& (0+255),w,b
  2718  000E46  6ED9               	movwf	fsr2l,c
  2719  000E48  0E00               	movlw	0
  2720  000E4A  2170               	addwfc	(??_rd_buffer_get+1)& (0+255),w,b
  2721  000E4C  6EDA               	movwf	fsr2h,c
  2722  000E4E  516E               	movf	rd_buffer_get@prec& (0+255),w,b
  2723  000E50  6EE1               	movwf	fsr1l,c
  2724  000E52  6AE2               	clrf	fsr1h,c
  2725  000E54  CFDF FFE7          	movff	indf2,indf1
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;rd_buffer.c: 133: first ++;
  2729  000E58  4B74               	infsnz	rd_buffer_get@first& (0+255),f,b
  2730  000E5A  2B75               	incf	(rd_buffer_get@first+1)& (0+255),f,b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;rd_buffer.c: 134: pbuffer->head.first = first ;
  2734  000E5C  EE20 F002          	lfsr	2,2
  2735  000E60  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2736  000E62  26D9               	addwf	fsr2l,f,c
  2737  000E64  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2738  000E66  22DA               	addwfc	fsr2h,f,c
  2739  000E68  C074  FFDE         	movff	rd_buffer_get@first,postinc2
  2740  000E6C  C075  FFDD         	movff	rd_buffer_get@first+1,postdec2
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;rd_buffer.c: 135: if(first == pbuffer->head.size){
  2744  000E70  EE20 F004          	lfsr	2,4
  2745  000E74  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2746  000E76  26D9               	addwf	fsr2l,f,c
  2747  000E78  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2748  000E7A  22DA               	addwfc	fsr2h,f,c
  2749  000E7C  52DE               	movf	postinc2,f,c
  2750  000E7E  5175               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2751  000E80  18DD               	xorwf	postdec2,w,c
  2752  000E82  C074  FFE8         	movff	rd_buffer_get@first,wreg
  2753  000E86  B4D8               	btfsc	status,2,c
  2754  000E88  18DF               	xorwf	indf2,w,c
  2755  000E8A  E109               	bnz	l2939
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;rd_buffer.c: 136: pbuffer->head.first = 0;
  2759  000E8C  EE20 F002          	lfsr	2,2
  2760  000E90  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2761  000E92  26D9               	addwf	fsr2l,f,c
  2762  000E94  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2763  000E96  22DA               	addwfc	fsr2h,f,c
  2764  000E98  0E00               	movlw	0
  2765  000E9A  6EDE               	movwf	postinc2,c
  2766  000E9C  6EDD               	movwf	postdec2,c
  2767  000E9E                     l2939:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;rd_buffer.c: 137: }
  2771                           ;rd_buffer.c: 138: result = TRUE;
  2772  000E9E  0E01               	movlw	1
  2773  000EA0  6F73               	movwf	rd_buffer_get@result& (0+255),b
  2774  000EA2                     l2941:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;rd_buffer.c: 139: }
  2778                           ;rd_buffer.c: 140: return result;
  2779  000EA2  5173               	movf	rd_buffer_get@result& (0+255),w,b
  2780                           
  2781                           ; BSR set to: 0
  2782  000EA4  0012               	return	
  2783  000EA6                     __end_of_rd_buffer_get:
  2784                           	opt stack 0
  2785                           tosu	equ	0xFFF
  2786                           tosh	equ	0xFFE
  2787                           tosl	equ	0xFFD
  2788                           pclath	equ	0xFFA
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           prodh	equ	0xFF4
  2794                           prodl	equ	0xFF3
  2795                           intcon	equ	0xFF2
  2796                           indf0	equ	0xFEF
  2797                           postinc0	equ	0xFEE
  2798                           fsr0h	equ	0xFEA
  2799                           fsr0l	equ	0xFE9
  2800                           wreg	equ	0xFE8
  2801                           indf1	equ	0xFE7
  2802                           postinc1	equ	0xFE6
  2803                           postdec1	equ	0xFE5
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           postinc2	equ	0xFDE
  2808                           postdec2	equ	0xFDD
  2809                           fsr2h	equ	0xFDA
  2810                           fsr2l	equ	0xFD9
  2811                           status	equ	0xFD8
  2812                           
  2813 ;; *************** function _rd_buffer_cnt *****************
  2814 ;; Defined at:
  2815 ;;		line 68 in file "src/modules/rd_buffer.c"
  2816 ;; Parameters:    Size  Location     Type
  2817 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2818 ;;		 -> g_tx_buffer(107), 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  sz              2   18[BANK0 ] int 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  2   12[BANK0 ] int 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2825 ;; Tracked objects:
  2826 ;;		On entry : F/0
  2827 ;;		On exit  : F/0
  2828 ;;		Unchanged: FFFFFFF0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2830 ;;      Params:         0       2       0       0       0       0       0
  2831 ;;      Locals:         0       2       0       0       0       0       0
  2832 ;;      Temps:          0       4       0       0       0       0       0
  2833 ;;      Totals:         0       8       0       0       0       0       0
  2834 ;;Total ram usage:        8 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    5
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_serialport_task
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text6
  2845  00161E                     __ptext6:
  2846                           	opt stack 0
  2847  00161E                     _rd_buffer_cnt:
  2848                           	opt stack 24
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;rd_buffer.c: 69: SIZE sz;
  2852                           ;rd_buffer.c: 70: sz = pbuffer->head.last - pbuffer->head.first;
  2853                           
  2854                           ; BSR set to: 0
  2855  00161E  EE20 F002          	lfsr	2,2
  2856  001622  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2857  001624  26D9               	addwf	fsr2l,f,c
  2858  001626  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2859  001628  22DA               	addwfc	fsr2h,f,c
  2860  00162A  CFDE F06E          	movff	postinc2,??_rd_buffer_cnt
  2861  00162E  CFDD F06F          	movff	postdec2,??_rd_buffer_cnt+1
  2862  001632  C06C  FFD9         	movff	rd_buffer_cnt@pbuffer,fsr2l
  2863  001636  C06D  FFDA         	movff	rd_buffer_cnt@pbuffer+1,fsr2h
  2864  00163A  CFDE F070          	movff	postinc2,??_rd_buffer_cnt+2
  2865  00163E  CFDD F071          	movff	postdec2,??_rd_buffer_cnt+3
  2866  001642  516E               	movf	??_rd_buffer_cnt& (0+255),w,b
  2867  001644  5D70               	subwf	(??_rd_buffer_cnt+2)& (0+255),w,b
  2868  001646  6F72               	movwf	rd_buffer_cnt@sz& (0+255),b
  2869  001648  516F               	movf	(??_rd_buffer_cnt+1)& (0+255),w,b
  2870  00164A  5971               	subwfb	(??_rd_buffer_cnt+3)& (0+255),w,b
  2871  00164C  6F73               	movwf	(rd_buffer_cnt@sz+1)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;rd_buffer.c: 71: if(sz < 0) {
  2875  00164E  AF73               	btfss	(rd_buffer_cnt@sz+1)& (0+255),7,b
  2876  001650  D00A               	goto	l2951
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;rd_buffer.c: 72: sz += pbuffer->head.size;
  2880  001652  EE20 F004          	lfsr	2,4
  2881  001656  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2882  001658  26D9               	addwf	fsr2l,f,c
  2883  00165A  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2884  00165C  22DA               	addwfc	fsr2h,f,c
  2885  00165E  50DE               	movf	postinc2,w,c
  2886  001660  2772               	addwf	rd_buffer_cnt@sz& (0+255),f,b
  2887  001662  50DD               	movf	postdec2,w,c
  2888  001664  2373               	addwfc	(rd_buffer_cnt@sz+1)& (0+255),f,b
  2889  001666                     l2951:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;rd_buffer.c: 73: }
  2893                           ;rd_buffer.c: 74: return sz;
  2894  001666  C072  F06C         	movff	rd_buffer_cnt@sz,?_rd_buffer_cnt
  2895  00166A  C073  F06D         	movff	rd_buffer_cnt@sz+1,?_rd_buffer_cnt+1
  2896                           
  2897                           ; BSR set to: 0
  2898  00166E  0012               	return	
  2899  001670                     __end_of_rd_buffer_cnt:
  2900                           	opt stack 0
  2901                           tosu	equ	0xFFF
  2902                           tosh	equ	0xFFE
  2903                           tosl	equ	0xFFD
  2904                           pclath	equ	0xFFA
  2905                           tblptru	equ	0xFF8
  2906                           tblptrh	equ	0xFF7
  2907                           tblptrl	equ	0xFF6
  2908                           tablat	equ	0xFF5
  2909                           prodh	equ	0xFF4
  2910                           prodl	equ	0xFF3
  2911                           intcon	equ	0xFF2
  2912                           indf0	equ	0xFEF
  2913                           postinc0	equ	0xFEE
  2914                           fsr0h	equ	0xFEA
  2915                           fsr0l	equ	0xFE9
  2916                           wreg	equ	0xFE8
  2917                           indf1	equ	0xFE7
  2918                           postinc1	equ	0xFE6
  2919                           postdec1	equ	0xFE5
  2920                           fsr1h	equ	0xFE2
  2921                           fsr1l	equ	0xFE1
  2922                           indf2	equ	0xFDF
  2923                           postinc2	equ	0xFDE
  2924                           postdec2	equ	0xFDD
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _syntax_string *****************
  2930 ;; Defined at:
  2931 ;;		line 138 in file "src/modules/syntax.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  pstr            2   53[BANK0 ] PTR const unsigned char 
  2934 ;;		 -> serialport_buffer(100), 
  2935 ;;  str_len         2   55[BANK0 ] int 
  2936 ;;  case_sensiti    1   57[BANK0 ] unsigned char 
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;  pchain          2   61[BANK0 ] PTR unsigned char 
  2939 ;;		 -> this_buf(127), 
  2940 ;;  pos             1   60[BANK0 ] char 
  2941 ;;  chains          1   63[BANK0 ] char 
  2942 ;;  result          1   59[BANK0 ] char 
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      char 
  2945 ;; Registers used:
  2946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : F/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: FFFFFFF0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2952 ;;      Params:         0       5       0       0       0       0       0
  2953 ;;      Locals:         0       5       0       0       0       0       0
  2954 ;;      Temps:          0       1       0       0       0       0       0
  2955 ;;      Totals:         0      11       0       0       0       0       0
  2956 ;;Total ram usage:       11 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   10
  2959 ;; This function calls:
  2960 ;;		_string_utils_split
  2961 ;;		_this_parse_item
  2962 ;;		_on_parameter_found
  2963 ;;		_string_utils_strlen
  2964 ;; This function is called by:
  2965 ;;		_serialport_task
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text7
  2970  000C02                     __ptext7:
  2971                           	opt stack 0
  2972  000C02                     _syntax_string:
  2973                           	opt stack 19
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;syntax.c: 139: INT8 chains ;
  2977                           ;syntax.c: 140: INT8 result =0;
  2978                           
  2979                           ; BSR set to: 0
  2980  000C02  6B9B               	clrf	syntax_string@result& (0+255),b
  2981                           
  2982                           ;syntax.c: 141: this_case_sensitive = case_sensitive;
  2983  000C04  C099  F0BB         	movff	syntax_string@case_sensitive,_this_case_sensitive
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;syntax.c: 142: chains = (INT8)string_utils_split(this_buf, pstr, str_len, '\0');
  2987  000C08  0E05               	movlw	high _this_buf
  2988  000C0A  0100               	movlb	0	; () banked
  2989  000C0C  6F6D               	movwf	(?_string_utils_split+1)& (0+255),b
  2990  000C0E  0E00               	movlw	low _this_buf
  2991  000C10  6F6C               	movwf	?_string_utils_split& (0+255),b
  2992  000C12  C095  F06E         	movff	syntax_string@pstr,?_string_utils_split+2
  2993  000C16  C096  F06F         	movff	syntax_string@pstr+1,?_string_utils_split+3
  2994  000C1A  C097  F070         	movff	syntax_string@str_len,?_string_utils_split+4
  2995  000C1E  C098  F071         	movff	syntax_string@str_len+1,?_string_utils_split+5
  2996  000C22  0E00               	movlw	0
  2997  000C24  6B72               	clrf	(?_string_utils_split+6)& (0+255),b
  2998  000C26  EC09  F009         	call	_string_utils_split	;wreg free
  2999  000C2A  516C               	movf	?_string_utils_split& (0+255),w,b
  3000  000C2C  6F9F               	movwf	syntax_string@chains& (0+255),b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;syntax.c: 143: command_id = -1;
  3004  000C2E  69E9               	setf	_command_id& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;syntax.c: 144: parameter_id = -1;
  3008  000C30  69EA               	setf	_parameter_id& (0+255),b
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;syntax.c: 145: parameter_value[0] = '\0';
  3012  000C32  0102               	movlb	2	; () banked
  3013  000C34  6B00               	clrf	_parameter_value& (0+255),b
  3014                           
  3015                           ; BSR set to: 2
  3016                           ;syntax.c: 146: parameter_text[0] = '\0';
  3017  000C36  0103               	movlb	3	; () banked
  3018  000C38  6B00               	clrf	_parameter_text& (0+255),b
  3019                           
  3020                           ; BSR set to: 3
  3021                           ;syntax.c: 147: if (chains >= 1 ) {
  3022  000C3A  0100               	movlb	0	; () banked
  3023  000C3C  519F               	movf	syntax_string@chains& (0+255),w,b
  3024  000C3E  0A80               	xorlw	128
  3025  000C40  0F7F               	addlw	-129
  3026  000C42  E35C               	bnc	l5045
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;syntax.c: 148: INT8 pos = 0;
  3030  000C44  6B9C               	clrf	syntax_string@pos& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;syntax.c: 149: char *pchain;
  3034                           ;syntax.c: 150: result = chains -1;
  3035  000C46  059F               	decf	syntax_string@chains& (0+255),w,b
  3036  000C48  6F9B               	movwf	syntax_string@result& (0+255),b
  3037                           
  3038                           ;syntax.c: 151: while ( chains-- ) {
  3039  000C4A  D054               	goto	l5043
  3040  000C4C                     l5023:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;syntax.c: 152: pchain = &this_buf[pos];
  3044  000C4C  0E00               	movlw	low _this_buf
  3045  000C4E  0100               	movlb	0	; () banked
  3046  000C50  259C               	addwf	syntax_string@pos& (0+255),w,b
  3047  000C52  6F9D               	movwf	syntax_string@pchain& (0+255),b
  3048  000C54  6B9E               	clrf	(syntax_string@pchain+1)& (0+255),b
  3049  000C56  0E05               	movlw	high _this_buf
  3050  000C58  239E               	addwfc	(syntax_string@pchain+1)& (0+255),f,b
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;syntax.c: 153: if (pos == 0 ) {
  3054  000C5A  679C               	tstfsz	syntax_string@pos& (0+255),b
  3055  000C5C  D011               	goto	l5033
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;syntax.c: 155: if ( !this_parse_item( pchain, &command_id ) ) {result =0;break;}
  3059  000C5E  C09D  F084         	movff	syntax_string@pchain,?_this_parse_item
  3060  000C62  C09E  F085         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3061  000C66  0EE9               	movlw	low _command_id
  3062  000C68  6F86               	movwf	(?_this_parse_item+2)& (0+255),b
  3063  000C6A  EC0A  F004         	call	_this_parse_item	;wreg free
  3064  000C6E  0900               	iorlw	0
  3065  000C70  E102               	bnz	l5031
  3066                           
  3067                           ; BSR set to: 0
  3068  000C72  6B9B               	clrf	syntax_string@result& (0+255),b
  3069  000C74  D043               	goto	l5045
  3070  000C76                     l5031:
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;syntax.c: 156: on_parameter_found(PARSER_START, command_id, -1, (void*)(0), PARSER_TYPE
      +                          _NO_TYPE);
  3074  000C76  D85D               	call	PL46	;call to abstracted procedure
  3075  000C78  0E01               	movlw	1
  3076  000C7A  EC06  F00C         	call	_on_parameter_found
  3077                           
  3078                           ;syntax.c: 157: }
  3079  000C7E  D031               	goto	l5041
  3080  000C80                     l5033:
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;syntax.c: 158: else {
  3084                           ;syntax.c: 160: if (this_parse_item( pchain, &parameter_id ) == TRUE) {
  3085  000C80  C09D  F084         	movff	syntax_string@pchain,?_this_parse_item
  3086  000C84  C09E  F085         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3087  000C88  0EEA               	movlw	low _parameter_id
  3088  000C8A  6F86               	movwf	(?_this_parse_item+2)& (0+255),b
  3089  000C8C  EC0A  F004         	call	_this_parse_item	;wreg free
  3090  000C90  6F9A               	movwf	??_syntax_string& (0+255),b
  3091  000C92  059A               	decf	??_syntax_string& (0+255),w,b
  3092  000C94  E118               	bnz	l5039
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;syntax.c: 161: parameter_type= syntax_data[parameter_id].type;
  3096  000C96  51EA               	movf	_parameter_id& (0+255),w,b
  3097  000C98  0D17               	mullw	23
  3098  000C9A  0E16               	movlw	22
  3099  000C9C  D840               	call	PL24	;call to abstracted procedure
  3100  000C9E  0008               	tblrd		*
  3101  000CA0  CFF5 F0B9          	movff	tablat,_parameter_type
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;syntax.c: 162: on_parameter_found(PARSER_PARAMETER, command_id, parameter_id, (void*)pa
      +                          rameter_value, parameter_type);
  3105  000CA4  C0E9  F081         	movff	_command_id,?_on_parameter_found
  3106  000CA8  C0EA  F082         	movff	_parameter_id,?_on_parameter_found+1
  3107  000CAC  0E00               	movlw	low _parameter_value
  3108  000CAE  0100               	movlb	0	; () banked
  3109  000CB0  6F83               	movwf	(?_on_parameter_found+2)& (0+255),b
  3110  000CB2  0E02               	movlw	high _parameter_value
  3111  000CB4  6F84               	movwf	(?_on_parameter_found+3)& (0+255),b
  3112  000CB6  0E20               	movlw	32
  3113  000CB8  6F85               	movwf	(?_on_parameter_found+4)& (0+255),b
  3114  000CBA  C0B9  F086         	movff	_parameter_type,?_on_parameter_found+5
  3115  000CBE  0E00               	movlw	0
  3116  000CC0  EC06  F00C         	call	_on_parameter_found
  3117                           
  3118                           ;syntax.c: 163: }
  3119  000CC4  D00E               	goto	l5041
  3120  000CC6                     l5039:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;syntax.c: 165: else {
  3124                           ;syntax.c: 166: on_parameter_found(PARSER_PARAMETER, command_id, -1 , (void*)parameter_t
      +                          ext, PARSER_TYPE_NO_TYPE);
  3125  000CC6  C0E9  F081         	movff	_command_id,?_on_parameter_found
  3126  000CCA  6982               	setf	(?_on_parameter_found+1)& (0+255),b
  3127  000CCC  0E00               	movlw	low _parameter_text
  3128  000CCE  0100               	movlb	0	; () banked
  3129  000CD0  6F83               	movwf	(?_on_parameter_found+2)& (0+255),b
  3130  000CD2  0E03               	movlw	high _parameter_text
  3131  000CD4  6F84               	movwf	(?_on_parameter_found+3)& (0+255),b
  3132  000CD6  0E20               	movlw	32
  3133  000CD8  6F85               	movwf	(?_on_parameter_found+4)& (0+255),b
  3134  000CDA  0E00               	movlw	0
  3135  000CDC  6B86               	clrf	(?_on_parameter_found+5)& (0+255),b
  3136  000CDE  EC06  F00C         	call	_on_parameter_found
  3137  000CE2                     l5041:
  3138                           
  3139                           ;syntax.c: 167: }
  3140                           ;syntax.c: 168: }
  3141                           ;syntax.c: 170: pos += string_utils_strlen(pchain) + 1;
  3142  000CE2  C09D  F06E         	movff	syntax_string@pchain,?_string_utils_strlen
  3143  000CE6  C09E  F06F         	movff	syntax_string@pchain+1,?_string_utils_strlen+1
  3144  000CEA  0100               	movlb	0	; () banked
  3145  000CEC  ECE7  F00B         	call	_string_utils_strlen	;wreg free
  3146  000CF0  296E               	incf	?_string_utils_strlen& (0+255),w,b
  3147  000CF2  279C               	addwf	syntax_string@pos& (0+255),f,b
  3148  000CF4                     l5043:
  3149                           
  3150                           ; BSR set to: 0
  3151  000CF4  079F               	decf	syntax_string@chains& (0+255),f,b
  3152  000CF6  0100               	movlb	0	; () banked
  3153  000CF8  299F               	incf	syntax_string@chains& (0+255),w,b
  3154  000CFA  E1A8               	bnz	l5023
  3155  000CFC                     l5045:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;syntax.c: 171: }
  3159                           ;syntax.c: 172: }
  3160                           ;syntax.c: 173: if (result>0 )
  3161  000CFC  519B               	movf	syntax_string@result& (0+255),w,b
  3162  000CFE  0A80               	xorlw	128
  3163  000D00  0F7F               	addlw	-129
  3164  000D02  E304               	bnc	l5049
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;syntax.c: 174: {
  3168                           ;syntax.c: 175: on_parameter_found(PARSER_STOP, command_id, -1, (void*)(0), PARSER_TYPE_
      +                          NO_TYPE);
  3169  000D04  D816               	call	PL46	;call to abstracted procedure
  3170  000D06  0E02               	movlw	2
  3171  000D08  EF06  F00C         	goto	_on_parameter_found
  3172  000D0C                     l5049:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;syntax.c: 177: else {
  3176                           ;syntax.c: 178: on_parameter_found(PARSER_ERROR,-1, -1, (void*)(0), PARSER_TYPE_NO_TYPE);
  3177  000D0C  6981               	setf	?_on_parameter_found& (0+255),b
  3178  000D0E  6982               	setf	(?_on_parameter_found+1)& (0+255),b
  3179  000D10  6B83               	clrf	(?_on_parameter_found+2)& (0+255),b
  3180  000D12  6B84               	clrf	(?_on_parameter_found+3)& (0+255),b
  3181  000D14  6B85               	clrf	(?_on_parameter_found+4)& (0+255),b
  3182  000D16  6B86               	clrf	(?_on_parameter_found+5)& (0+255),b
  3183  000D18  0E03               	movlw	3
  3184  000D1A  EF06  F00C         	goto	_on_parameter_found
  3185  000D1E                     __end_of_syntax_string:
  3186                           	opt stack 0
  3187  000D1E                     PL24:
  3188                           	opt stack 19
  3189  000D1E  26F3               	addwf	prodl,f,c
  3190  000D20  0E00               	movlw	0
  3191  000D22  22F4               	addwfc	prodh,f,c
  3192  000D24  0E7C               	movlw	low syntax@syntax_data
  3193  000D26  24F3               	addwf	prodl,w,c
  3194  000D28  6EF6               	movwf	tblptrl,c
  3195  000D2A  0E7D               	movlw	high syntax@syntax_data
  3196  000D2C  20F4               	addwfc	prodh,w,c
  3197  000D2E  6EF7               	movwf	tblptrh,c
  3198  000D30  0012               	return	
  3199  000D32                     __end_ofPL24:
  3200                           	opt stack 0
  3201  000D32                     PL46:
  3202                           	opt stack 19
  3203  000D32  C0E9  F081         	movff	_command_id,?_on_parameter_found
  3204  000D36  6982               	setf	(?_on_parameter_found+1)& (0+255),b
  3205  000D38  6B83               	clrf	(?_on_parameter_found+2)& (0+255),b
  3206  000D3A  6B84               	clrf	(?_on_parameter_found+3)& (0+255),b
  3207  000D3C  6B85               	clrf	(?_on_parameter_found+4)& (0+255),b
  3208  000D3E  6B86               	clrf	(?_on_parameter_found+5)& (0+255),b
  3209  000D40  0012               	return	
  3210  000D42                     __end_ofPL46:
  3211                           	opt stack 0
  3212                           tosu	equ	0xFFF
  3213                           tosh	equ	0xFFE
  3214                           tosl	equ	0xFFD
  3215                           pclath	equ	0xFFA
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           indf0	equ	0xFEF
  3224                           postinc0	equ	0xFEE
  3225                           fsr0h	equ	0xFEA
  3226                           fsr0l	equ	0xFE9
  3227                           wreg	equ	0xFE8
  3228                           indf1	equ	0xFE7
  3229                           postinc1	equ	0xFE6
  3230                           postdec1	equ	0xFE5
  3231                           fsr1h	equ	0xFE2
  3232                           fsr1l	equ	0xFE1
  3233                           indf2	equ	0xFDF
  3234                           postinc2	equ	0xFDE
  3235                           postdec2	equ	0xFDD
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _string_utils_split *****************
  3241 ;; Defined at:
  3242 ;;		line 94 in file "src/modules/string_utils.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  pbuf            2   12[BANK0 ] PTR unsigned char 
  3245 ;;		 -> this_buf(127), 
  3246 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  3247 ;;		 -> serialport_buffer(100), 
  3248 ;;  len             2   16[BANK0 ] int 
  3249 ;;  delimeter       1   18[BANK0 ] unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;  symb            1   24[BANK0 ] unsigned char 
  3252 ;;  chains          2   21[BANK0 ] int 
  3253 ;;  i               2   19[BANK0 ] int 
  3254 ;;  prev            1   23[BANK0 ] unsigned char 
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  2   12[BANK0 ] int 
  3257 ;; Registers used:
  3258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3259 ;; Tracked objects:
  3260 ;;		On entry : F/0
  3261 ;;		On exit  : F/0
  3262 ;;		Unchanged: FFFFFFF0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3264 ;;      Params:         0       7       0       0       0       0       0
  3265 ;;      Locals:         0       6       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0
  3267 ;;      Totals:         0      13       0       0       0       0       0
  3268 ;;Total ram usage:       13 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    5
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_syntax_string
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text8
  3279  001212                     __ptext8:
  3280                           	opt stack 0
  3281  001212                     _string_utils_split:
  3282                           	opt stack 23
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;string_utils.c: 95: INT16 i = 0;
  3286  001212  6B73               	clrf	string_utils_split@i& (0+255),b
  3287  001214  6B74               	clrf	(string_utils_split@i+1)& (0+255),b
  3288                           
  3289                           ;string_utils.c: 96: INT16 chains = 0;
  3290  001216  6B75               	clrf	string_utils_split@chains& (0+255),b
  3291  001218  6B76               	clrf	(string_utils_split@chains+1)& (0+255),b
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;string_utils.c: 97: char prev = ' ';
  3295  00121A  0E20               	movlw	32
  3296  00121C  6F77               	movwf	string_utils_split@prev& (0+255),b
  3297  00121E                     l3119:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;string_utils.c: 99: {
  3301                           ;string_utils.c: 100: char symb = pstr[i];
  3302  00121E  5173               	movf	string_utils_split@i& (0+255),w,b
  3303  001220  256E               	addwf	string_utils_split@pstr& (0+255),w,b
  3304  001222  6ED9               	movwf	fsr2l,c
  3305  001224  5174               	movf	(string_utils_split@i+1)& (0+255),w,b
  3306  001226  216F               	addwfc	(string_utils_split@pstr+1)& (0+255),w,b
  3307  001228  6EDA               	movwf	fsr2h,c
  3308  00122A  50DF               	movf	indf2,w,c
  3309  00122C  6F78               	movwf	string_utils_split@symb& (0+255),b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;string_utils.c: 101: if (symb == ' ' || len == 0)
  3313  00122E  5178               	movf	string_utils_split@symb& (0+255),w,b
  3314  001230  0A20               	xorlw	32
  3315  001232  E003               	bz	l3125
  3316                           
  3317                           ; BSR set to: 0
  3318  001234  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3319  001236  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3320  001238  E10E               	bnz	l3133
  3321  00123A                     l3125:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;string_utils.c: 102: {
  3325                           ;string_utils.c: 103: if (prev != ' ')
  3326  00123A  5177               	movf	string_utils_split@prev& (0+255),w,b
  3327  00123C  0A20               	xorlw	32
  3328  00123E  E013               	bz	l3137
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;string_utils.c: 104: {
  3332                           ;string_utils.c: 105: *pbuf = delimeter;
  3333  001240  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3334  001244  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3335  001248  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;string_utils.c: 106: pbuf++;
  3339  00124C  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3340  00124E  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;string_utils.c: 107: chains++;
  3344  001250  4B75               	infsnz	string_utils_split@chains& (0+255),f,b
  3345  001252  2B76               	incf	(string_utils_split@chains+1)& (0+255),f,b
  3346  001254  D008               	goto	l3137
  3347  001256                     l3133:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;string_utils.c: 110: else
  3351                           ;string_utils.c: 111: {
  3352                           ;string_utils.c: 112: *pbuf++ = symb;
  3353  001256  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3354  00125A  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3355  00125E  C078  FFDF         	movff	string_utils_split@symb,indf2
  3356                           
  3357                           ; BSR set to: 0
  3358  001262  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3359  001264  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3360  001266                     l3137:
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;string_utils.c: 113: }
  3364                           ;string_utils.c: 114: if (len == 0)
  3365  001266  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3366  001268  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3367  00126A  E008               	bz	l3147
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;string_utils.c: 118: else
  3371                           ;string_utils.c: 119: {
  3372                           ;string_utils.c: 120: len--;
  3373  00126C  0770               	decf	string_utils_split@len& (0+255),f,b
  3374  00126E  A0D8               	btfss	status,0,c
  3375  001270  0771               	decf	(string_utils_split@len+1)& (0+255),f,b
  3376                           
  3377                           ;string_utils.c: 121: i++;
  3378  001272  4B73               	infsnz	string_utils_split@i& (0+255),f,b
  3379  001274  2B74               	incf	(string_utils_split@i+1)& (0+255),f,b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;string_utils.c: 122: prev = symb;
  3383  001276  C078  F077         	movff	string_utils_split@symb,string_utils_split@prev
  3384  00127A  D7D1               	goto	l3119
  3385  00127C                     l3147:
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;string_utils.c: 123: }
  3389                           ;string_utils.c: 124: }
  3390                           ;string_utils.c: 125: *pbuf++ = delimeter;
  3391  00127C  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3392  001280  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3393  001284  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3394                           
  3395                           ; BSR set to: 0
  3396  001288  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3397  00128A  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;string_utils.c: 126: return chains;
  3401  00128C  C075  F06C         	movff	string_utils_split@chains,?_string_utils_split
  3402  001290  C076  F06D         	movff	string_utils_split@chains+1,?_string_utils_split+1
  3403                           
  3404                           ; BSR set to: 0
  3405  001294  0012               	return	
  3406  001296                     __end_of_string_utils_split:
  3407                           	opt stack 0
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           pclath	equ	0xFFA
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodh	equ	0xFF4
  3417                           prodl	equ	0xFF3
  3418                           intcon	equ	0xFF2
  3419                           indf0	equ	0xFEF
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           indf1	equ	0xFE7
  3425                           postinc1	equ	0xFE6
  3426                           postdec1	equ	0xFE5
  3427                           fsr1h	equ	0xFE2
  3428                           fsr1l	equ	0xFE1
  3429                           indf2	equ	0xFDF
  3430                           postinc2	equ	0xFDE
  3431                           postdec2	equ	0xFDD
  3432                           fsr2h	equ	0xFDA
  3433                           fsr2l	equ	0xFD9
  3434                           status	equ	0xFD8
  3435                           
  3436 ;; *************** function _this_parse_item *****************
  3437 ;; Defined at:
  3438 ;;		line 93 in file "src/modules/syntax.c"
  3439 ;; Parameters:    Size  Location     Type
  3440 ;;  pstr            2   36[BANK0 ] PTR const unsigned char 
  3441 ;;		 -> this_buf(127), 
  3442 ;;  pitem           1   38[BANK0 ] PTR char 
  3443 ;;		 -> parameter_id(1), command_id(1), 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  is_equal        1   41[BANK0 ] unsigned char 
  3446 ;;  pval            3   47[BANK0 ] PTR const unsigned char 
  3447 ;;		 -> this_buf(127), ROM(32767), 
  3448 ;;  var_len         2   51[BANK0 ] int 
  3449 ;;  str_len         2   45[BANK0 ] int 
  3450 ;;  pvar            2   43[BANK0 ] PTR const unsigned char 
  3451 ;;		 -> this_buf(127), 
  3452 ;;  i               1   50[BANK0 ] char 
  3453 ;;  result          1   42[BANK0 ] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      unsigned char 
  3456 ;; Registers used:
  3457 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : F/0
  3460 ;;		On exit  : F/0
  3461 ;;		Unchanged: FFFFFFF0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         0       3       0       0       0       0       0
  3464 ;;      Locals:         0      12       0       0       0       0       0
  3465 ;;      Temps:          0       2       0       0       0       0       0
  3466 ;;      Totals:         0      17       0       0       0       0       0
  3467 ;;Total ram usage:       17 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; Hardware stack levels required when called:    9
  3470 ;; This function calls:
  3471 ;;		_string_utils_strlen
  3472 ;;		_string_utils_strchr
  3473 ;;		_string_utils_copy
  3474 ;;		_string_utils_strncmp
  3475 ;;		_this_variable_load_from_text
  3476 ;; This function is called by:
  3477 ;;		_syntax_string
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text9
  3482  000814                     __ptext9:
  3483                           	opt stack 0
  3484  000814                     _this_parse_item:
  3485                           	opt stack 19
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;syntax.c: 94: CHAR result = FALSE;
  3489                           
  3490                           ; BSR set to: 0
  3491  000814  6B8A               	clrf	this_parse_item@result& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;syntax.c: 95: if (pstr != (0)) {
  3495  000816  5185               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3496  000818  1184               	iorwf	this_parse_item@pstr& (0+255),w,b
  3497  00081A  E101 D0A5          	bz	l3313
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;syntax.c: 96: const char *pvar = pstr;
  3501  00081E  C084  F08B         	movff	this_parse_item@pstr,this_parse_item@pvar
  3502  000822  C085  F08C         	movff	this_parse_item@pstr+1,this_parse_item@pvar+1
  3503                           
  3504                           ;syntax.c: 97: const char *pval = (0);
  3505  000826  6B8F               	clrf	this_parse_item@pval& (0+255),b
  3506  000828  6B90               	clrf	(this_parse_item@pval+1)& (0+255),b
  3507  00082A  6B91               	clrf	(this_parse_item@pval+2)& (0+255),b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;syntax.c: 100: SIZE str_len = string_utils_strlen(pstr);
  3511  00082C  C084  F06E         	movff	this_parse_item@pstr,?_string_utils_strlen
  3512  000830  C085  F06F         	movff	this_parse_item@pstr+1,?_string_utils_strlen+1
  3513  000834  ECE7  F00B         	call	_string_utils_strlen	;wreg free
  3514  000838  C06E  F08D         	movff	?_string_utils_strlen,this_parse_item@str_len
  3515  00083C  C06F  F08E         	movff	?_string_utils_strlen+1,this_parse_item@str_len+1
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;syntax.c: 102: var_len = string_utils_strchr(pstr, '=');
  3519  000840  5184               	movf	this_parse_item@pstr& (0+255),w,b
  3520  000842  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  3521  000844  5185               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3522  000846  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  3523  000848  0E20               	movlw	32
  3524  00084A  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3525  00084C  0E3D               	movlw	61
  3526  00084E  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3527  000850  EC9E  F007         	call	_string_utils_strchr	;wreg free
  3528  000854  0100               	movlb	0	; () banked
  3529  000856  C06C  F093         	movff	?_string_utils_strchr,this_parse_item@var_len
  3530  00085A  C06D  F094         	movff	?_string_utils_strchr+1,this_parse_item@var_len+1
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;syntax.c: 103: if (var_len >= 0 && var_len < str_len) {
  3534  00085E  BF94               	btfsc	(this_parse_item@var_len+1)& (0+255),7,b
  3535  000860  D01B               	goto	l662
  3536                           
  3537                           ; BSR set to: 0
  3538  000862  5194               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3539  000864  0A80               	xorlw	128
  3540  000866  6F87               	movwf	??_this_parse_item& (0+255),b
  3541  000868  518D               	movf	this_parse_item@str_len& (0+255),w,b
  3542  00086A  5D93               	subwf	this_parse_item@var_len& (0+255),w,b
  3543  00086C  518E               	movf	(this_parse_item@str_len+1)& (0+255),w,b
  3544  00086E  0A80               	xorlw	128
  3545  000870  5987               	subwfb	??_this_parse_item& (0+255),w,b
  3546  000872  E212               	bc	l662
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;syntax.c: 104: pval = &pstr[ var_len + 1 ] ;
  3550  000874  C084  F087         	movff	this_parse_item@pstr,??_this_parse_item
  3551  000878  C085  F088         	movff	this_parse_item@pstr+1,??_this_parse_item+1
  3552  00087C  5193               	movf	this_parse_item@var_len& (0+255),w,b
  3553  00087E  2787               	addwf	??_this_parse_item& (0+255),f,b
  3554  000880  5194               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3555  000882  2388               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3556  000884  2B87               	incf	??_this_parse_item& (0+255),f,b
  3557  000886  0E00               	movlw	0
  3558  000888  2388               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3559  00088A  5187               	movf	??_this_parse_item& (0+255),w,b
  3560  00088C  6F8F               	movwf	this_parse_item@pval& (0+255),b
  3561  00088E  5188               	movf	(??_this_parse_item+1)& (0+255),w,b
  3562  000890  6F90               	movwf	(this_parse_item@pval+1)& (0+255),b
  3563  000892  0E20               	movlw	32
  3564  000894  6F91               	movwf	(this_parse_item@pval+2)& (0+255),b
  3565                           
  3566                           ;syntax.c: 105: } else {
  3567  000896  D004               	goto	l3283
  3568  000898                     l662:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;syntax.c: 107: var_len = str_len;
  3572  000898  C08D  F093         	movff	this_parse_item@str_len,this_parse_item@var_len
  3573  00089C  C08E  F094         	movff	this_parse_item@str_len+1,this_parse_item@var_len+1
  3574  0008A0                     l3283:
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;syntax.c: 108: }
  3578                           ;syntax.c: 110: string_utils_copy(parameter_text, pvar, var_len);
  3579  0008A0  0E03               	movlw	high _parameter_text
  3580  0008A2  0100               	movlb	0	; () banked
  3581  0008A4  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  3582  0008A6  0E00               	movlw	low _parameter_text
  3583  0008A8  6F6C               	movwf	?_string_utils_copy& (0+255),b
  3584  0008AA  518B               	movf	this_parse_item@pvar& (0+255),w,b
  3585  0008AC  6F6E               	movwf	(?_string_utils_copy+2)& (0+255),b
  3586  0008AE  518C               	movf	(this_parse_item@pvar+1)& (0+255),w,b
  3587  0008B0  6F6F               	movwf	(?_string_utils_copy+3)& (0+255),b
  3588  0008B2  0E20               	movlw	32
  3589  0008B4  6F70               	movwf	(?_string_utils_copy+4)& (0+255),b
  3590  0008B6  C093  F071         	movff	this_parse_item@var_len,?_string_utils_copy+5
  3591  0008BA  C094  F072         	movff	this_parse_item@var_len+1,?_string_utils_copy+6
  3592  0008BE  ECC5  F008         	call	_string_utils_copy	;wreg free
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;syntax.c: 111: parameter_text[var_len] = '\0';
  3596  0008C2  0E00               	movlw	low _parameter_text
  3597  0008C4  0100               	movlb	0	; () banked
  3598  0008C6  2593               	addwf	this_parse_item@var_len& (0+255),w,b
  3599  0008C8  6ED9               	movwf	fsr2l,c
  3600  0008CA  0E03               	movlw	high _parameter_text
  3601  0008CC  2194               	addwfc	(this_parse_item@var_len+1)& (0+255),w,b
  3602  0008CE  6EDA               	movwf	fsr2h,c
  3603  0008D0  6ADF               	clrf	indf2,c
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;syntax.c: 112: for(i=0;i<SYNTAX_COUNT;i++) {
  3607  0008D2  6B92               	clrf	this_parse_item@i& (0+255),b
  3608  0008D4                     l3293:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;syntax.c: 113: if (syntax_data[i].name_len == var_len)
  3612  0008D4  5192               	movf	this_parse_item@i& (0+255),w,b
  3613  0008D6  0D17               	mullw	23
  3614  0008D8  0E14               	movlw	20
  3615  0008DA  EC8F  F006         	call	PL24	;call to abstracted procedure
  3616  0008DE  0008               	tblrd		*
  3617  0008E0  50F5               	movf	tablat,w,c
  3618  0008E2  6F87               	movwf	??_this_parse_item& (0+255),b
  3619  0008E4  6B88               	clrf	(??_this_parse_item+1)& (0+255),b
  3620  0008E6  BF87               	btfsc	??_this_parse_item& (0+255),7,b
  3621  0008E8  0788               	decf	(??_this_parse_item+1)& (0+255),f,b
  3622  0008EA  5194               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3623  0008EC  1988               	xorwf	(??_this_parse_item+1)& (0+255),w,b
  3624  0008EE  E102               	bnz	u2375
  3625  0008F0  5193               	movf	this_parse_item@var_len& (0+255),w,b
  3626  0008F2  1987               	xorwf	??_this_parse_item& (0+255),w,b
  3627  0008F4                     u2375:
  3628  0008F4  E134               	bnz	l3309
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;syntax.c: 114: {
  3632                           ;syntax.c: 115: CHAR is_equal = string_utils_strncmp(syntax_data[i].name, pvar, var_len,
      +                           this_case_sensitive);
  3633  0008F6  5192               	movf	this_parse_item@i& (0+255),w,b
  3634  0008F8  0D17               	mullw	23
  3635  0008FA  0E7C               	movlw	low syntax@syntax_data
  3636  0008FC  24F3               	addwf	prodl,w,c
  3637  0008FE  6F6E               	movwf	?_string_utils_strncmp& (0+255),b
  3638  000900  0E7D               	movlw	high syntax@syntax_data
  3639  000902  20F4               	addwfc	prodh,w,c
  3640  000904  6F6F               	movwf	(?_string_utils_strncmp+1)& (0+255),b
  3641  000906  C08B  F070         	movff	this_parse_item@pvar,?_string_utils_strncmp+2
  3642  00090A  C08C  F071         	movff	this_parse_item@pvar+1,?_string_utils_strncmp+3
  3643  00090E  C093  F072         	movff	this_parse_item@var_len,?_string_utils_strncmp+4
  3644  000912  C094  F073         	movff	this_parse_item@var_len+1,?_string_utils_strncmp+5
  3645  000916  C0BB  F074         	movff	_this_case_sensitive,?_string_utils_strncmp+6
  3646  00091A  EC53  F007         	call	_string_utils_strncmp	;wreg free
  3647  00091E  6F89               	movwf	this_parse_item@is_equal& (0+255),b
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;syntax.c: 116: if ( is_equal )
  3651  000920  5189               	movf	this_parse_item@is_equal& (0+255),w,b
  3652  000922  E01D               	bz	l3309
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;syntax.c: 117: {
  3656                           ;syntax.c: 118: if(pitem) *pitem = syntax_data[i].id;
  3657  000924  5186               	movf	this_parse_item@pitem& (0+255),w,b
  3658  000926  E00B               	bz	l3303
  3659                           
  3660                           ; BSR set to: 0
  3661  000928  5192               	movf	this_parse_item@i& (0+255),w,b
  3662  00092A  0D17               	mullw	23
  3663  00092C  0E15               	movlw	21
  3664  00092E  EC8F  F006         	call	PL24	;call to abstracted procedure
  3665  000932  5186               	movf	this_parse_item@pitem& (0+255),w,b
  3666  000934  6ED9               	movwf	fsr2l,c
  3667  000936  6ADA               	clrf	fsr2h,c
  3668  000938  0008               	tblrd		*
  3669  00093A  CFF5 FFDF          	movff	tablat,indf2
  3670  00093E                     l3303:
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;syntax.c: 119: if (pval) this_variable_load_from_text(pval);
  3674  00093E  518F               	movf	this_parse_item@pval& (0+255),w,b
  3675  000940  1190               	iorwf	(this_parse_item@pval+1)& (0+255),w,b
  3676  000942  1191               	iorwf	(this_parse_item@pval+2)& (0+255),w,b
  3677  000944  E008               	bz	l3307
  3678                           
  3679                           ; BSR set to: 0
  3680  000946  C08F  F07F         	movff	this_parse_item@pval,?_this_variable_load_from_text
  3681  00094A  C090  F080         	movff	this_parse_item@pval+1,?_this_variable_load_from_text+1
  3682  00094E  C091  F081         	movff	this_parse_item@pval+2,?_this_variable_load_from_text+2
  3683  000952  EC7C  F008         	call	_this_variable_load_from_text	;wreg free
  3684  000956                     l3307:
  3685                           
  3686                           ;syntax.c: 120: result = TRUE;
  3687  000956  0E01               	movlw	1
  3688  000958  0100               	movlb	0	; () banked
  3689  00095A  6F8A               	movwf	this_parse_item@result& (0+255),b
  3690                           
  3691                           ;syntax.c: 121: break;
  3692  00095C  D005               	goto	l3313
  3693  00095E                     l3309:
  3694                           
  3695                           ; BSR set to: 0
  3696  00095E  2B92               	incf	this_parse_item@i& (0+255),f,b
  3697                           
  3698                           ; BSR set to: 0
  3699  000960  5192               	movf	this_parse_item@i& (0+255),w,b
  3700  000962  0A80               	xorlw	128
  3701  000964  0F65               	addlw	-155
  3702  000966  E3B6               	bnc	l3293
  3703  000968                     l3313:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;syntax.c: 122: }
  3707                           ;syntax.c: 123: }
  3708                           ;syntax.c: 124: }
  3709                           ;syntax.c: 125: }
  3710                           ;syntax.c: 126: return result;
  3711  000968  518A               	movf	this_parse_item@result& (0+255),w,b
  3712                           
  3713                           ; BSR set to: 0
  3714  00096A  0012               	return	
  3715  00096C                     __end_of_this_parse_item:
  3716                           	opt stack 0
  3717                           tosu	equ	0xFFF
  3718                           tosh	equ	0xFFE
  3719                           tosl	equ	0xFFD
  3720                           pclath	equ	0xFFA
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           indf0	equ	0xFEF
  3729                           postinc0	equ	0xFEE
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           postinc1	equ	0xFE6
  3735                           postdec1	equ	0xFE5
  3736                           fsr1h	equ	0xFE2
  3737                           fsr1l	equ	0xFE1
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           fsr2h	equ	0xFDA
  3742                           fsr2l	equ	0xFD9
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _string_utils_strncmp *****************
  3746 ;; Defined at:
  3747 ;;		line 292 in file "src/modules/string_utils.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  pstr1           2   14[BANK0 ] PTR const unsigned char 
  3750 ;;		 -> syntax@syntax_data(621), 
  3751 ;;  pstr2           2   16[BANK0 ] PTR const unsigned char 
  3752 ;;		 -> this_buf(127), 
  3753 ;;  len             2   18[BANK0 ] int 
  3754 ;;  case_sensiti    1   20[BANK0 ] unsigned char 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  symb2           1   27[BANK0 ] unsigned char 
  3757 ;;  symb1           1   26[BANK0 ] unsigned char 
  3758 ;;  pos             2   24[BANK0 ] int 
  3759 ;;  result          1   23[BANK0 ] unsigned char 
  3760 ;; Return value:  Size  Location     Type
  3761 ;;                  1    wreg      unsigned char 
  3762 ;; Registers used:
  3763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : F/0
  3766 ;;		On exit  : F/0
  3767 ;;		Unchanged: FFFFFFF0/0
  3768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3769 ;;      Params:         0       7       0       0       0       0       0
  3770 ;;      Locals:         0       5       0       0       0       0       0
  3771 ;;      Temps:          0       2       0       0       0       0       0
  3772 ;;      Totals:         0      14       0       0       0       0       0
  3773 ;;Total ram usage:       14 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    6
  3776 ;; This function calls:
  3777 ;;		_string_utils_is_upper_case
  3778 ;; This function is called by:
  3779 ;;		_this_parse_item
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           	psect	text10
  3784  000EA6                     __ptext10:
  3785                           	opt stack 0
  3786  000EA6                     _string_utils_strncmp:
  3787                           	opt stack 21
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;string_utils.c: 293: CHAR result = FALSE;
  3791                           
  3792                           ; BSR set to: 0
  3793  000EA6  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;string_utils.c: 294: if (pstr1 != (0) && pstr2 != (0) )
  3797  000EA8  516F               	movf	(string_utils_strncmp@pstr1+1)& (0+255),w,b
  3798  000EAA  116E               	iorwf	string_utils_strncmp@pstr1& (0+255),w,b
  3799  000EAC  E045               	bz	l3215
  3800                           
  3801                           ; BSR set to: 0
  3802  000EAE  5171               	movf	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  3803  000EB0  1170               	iorwf	string_utils_strncmp@pstr2& (0+255),w,b
  3804  000EB2  E042               	bz	l3215
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;string_utils.c: 295: {
  3808                           ;string_utils.c: 296: INT16 pos = 0;
  3809  000EB4  6B78               	clrf	string_utils_strncmp@pos& (0+255),b
  3810  000EB6  6B79               	clrf	(string_utils_strncmp@pos+1)& (0+255),b
  3811                           
  3812                           ;string_utils.c: 297: while ( len-- )
  3813  000EB8  D037               	goto	l3213
  3814  000EBA                     l3189:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;string_utils.c: 298: {
  3818                           ;string_utils.c: 299: char symb1 = pstr1[pos];
  3819  000EBA  C06E  F075         	movff	string_utils_strncmp@pstr1,??_string_utils_strncmp
  3820  000EBE  C06F  F076         	movff	string_utils_strncmp@pstr1+1,??_string_utils_strncmp+1
  3821  000EC2  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  3822  000EC4  2775               	addwf	??_string_utils_strncmp& (0+255),f,b
  3823  000EC6  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  3824  000EC8  2376               	addwfc	(??_string_utils_strncmp+1)& (0+255),f,b
  3825  000ECA  C075  FFF6         	movff	??_string_utils_strncmp,tblptrl
  3826  000ECE  C076  FFF7         	movff	??_string_utils_strncmp+1,tblptrh
  3827  000ED2  0008               	tblrd		*
  3828  000ED4  CFF5 F07A          	movff	tablat,string_utils_strncmp@symb1
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;string_utils.c: 300: char symb2 = pstr2[pos];
  3832  000ED8  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  3833  000EDA  2570               	addwf	string_utils_strncmp@pstr2& (0+255),w,b
  3834  000EDC  6ED9               	movwf	fsr2l,c
  3835  000EDE  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  3836  000EE0  2171               	addwfc	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  3837  000EE2  6EDA               	movwf	fsr2h,c
  3838  000EE4  50DF               	movf	indf2,w,c
  3839  000EE6  6F7B               	movwf	string_utils_strncmp@symb2& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;string_utils.c: 302: if ( !case_sensitive )
  3843  000EE8  6774               	tstfsz	string_utils_strncmp@case_sensitive& (0+255),b
  3844  000EEA  D00E               	goto	l3203
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;string_utils.c: 303: {
  3848                           ;string_utils.c: 304: if ( string_utils_is_upper_case(symb1) )
  3849  000EEC  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  3850  000EEE  ECCD  F00C         	call	_string_utils_is_upper_case
  3851  000EF2  0900               	iorlw	0
  3852  000EF4  E002               	bz	l3199
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;string_utils.c: 305: {
  3856                           ;string_utils.c: 306: symb1 = (symb1+('a' - 'A'));
  3857  000EF6  0E20               	movlw	32
  3858  000EF8  277A               	addwf	string_utils_strncmp@symb1& (0+255),f,b
  3859  000EFA                     l3199:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;string_utils.c: 307: }
  3863                           ;string_utils.c: 308: if ( string_utils_is_upper_case(symb2) )
  3864  000EFA  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  3865  000EFC  ECCD  F00C         	call	_string_utils_is_upper_case
  3866  000F00  0900               	iorlw	0
  3867  000F02  E002               	bz	l3203
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;string_utils.c: 309: {
  3871                           ;string_utils.c: 310: symb2 = (symb2+('a' - 'A'));
  3872  000F04  0E20               	movlw	32
  3873  000F06  277B               	addwf	string_utils_strncmp@symb2& (0+255),f,b
  3874  000F08                     l3203:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;string_utils.c: 311: }
  3878                           ;string_utils.c: 312: }
  3879                           ;string_utils.c: 313: if (symb1 == symb2 || symb1 == '?' || symb2 == '?')
  3880  000F08  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  3881  000F0A  197B               	xorwf	string_utils_strncmp@symb2& (0+255),w,b
  3882  000F0C  E006               	bz	l3209
  3883                           
  3884                           ; BSR set to: 0
  3885  000F0E  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  3886  000F10  0A3F               	xorlw	63
  3887  000F12  E003               	bz	l3209
  3888                           
  3889                           ; BSR set to: 0
  3890  000F14  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  3891  000F16  0A3F               	xorlw	63
  3892  000F18  E103               	bnz	l552
  3893  000F1A                     l3209:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;string_utils.c: 314: {
  3897                           ;string_utils.c: 315: result = TRUE;
  3898  000F1A  0E01               	movlw	1
  3899  000F1C  6F77               	movwf	string_utils_strncmp@result& (0+255),b
  3900                           
  3901                           ;string_utils.c: 316: }
  3902  000F1E  D002               	goto	l3211
  3903  000F20                     l552:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;string_utils.c: 317: else
  3907                           ;string_utils.c: 318: {
  3908                           ;string_utils.c: 319: result = FALSE;
  3909  000F20  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  3910                           
  3911                           ;string_utils.c: 320: break;
  3912  000F22  D00A               	goto	l3215
  3913  000F24                     l3211:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;string_utils.c: 321: }
  3917                           ;string_utils.c: 322: pos++;
  3918  000F24  4B78               	infsnz	string_utils_strncmp@pos& (0+255),f,b
  3919  000F26  2B79               	incf	(string_utils_strncmp@pos+1)& (0+255),f,b
  3920  000F28                     l3213:
  3921                           
  3922                           ; BSR set to: 0
  3923  000F28  0772               	decf	string_utils_strncmp@len& (0+255),f,b
  3924  000F2A  A0D8               	btfss	status,0,c
  3925  000F2C  0773               	decf	(string_utils_strncmp@len+1)& (0+255),f,b
  3926  000F2E  0100               	movlb	0	; () banked
  3927  000F30  2972               	incf	string_utils_strncmp@len& (0+255),w,b
  3928  000F32  B4D8               	btfsc	status,2,c
  3929  000F34  2973               	incf	(string_utils_strncmp@len+1)& (0+255),w,b
  3930  000F36  E1C1               	bnz	l3189
  3931  000F38                     l3215:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;string_utils.c: 323: }
  3935                           ;string_utils.c: 324: }
  3936                           ;string_utils.c: 325: return result;
  3937  000F38  5177               	movf	string_utils_strncmp@result& (0+255),w,b
  3938                           
  3939                           ; BSR set to: 0
  3940  000F3A  0012               	return	
  3941  000F3C                     __end_of_string_utils_strncmp:
  3942                           	opt stack 0
  3943                           tosu	equ	0xFFF
  3944                           tosh	equ	0xFFE
  3945                           tosl	equ	0xFFD
  3946                           pclath	equ	0xFFA
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           intcon	equ	0xFF2
  3954                           indf0	equ	0xFEF
  3955                           postinc0	equ	0xFEE
  3956                           fsr0h	equ	0xFEA
  3957                           fsr0l	equ	0xFE9
  3958                           wreg	equ	0xFE8
  3959                           indf1	equ	0xFE7
  3960                           postinc1	equ	0xFE6
  3961                           postdec1	equ	0xFE5
  3962                           fsr1h	equ	0xFE2
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           fsr2h	equ	0xFDA
  3968                           fsr2l	equ	0xFD9
  3969                           status	equ	0xFD8
  3970                           
  3971 ;; *************** function _string_utils_is_upper_case *****************
  3972 ;; Defined at:
  3973 ;;		line 167 in file "src/modules/string_utils.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  symb            1    wreg     unsigned char 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  symb            1   13[BANK0 ] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      unsigned char 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2
  3982 ;; Tracked objects:
  3983 ;;		On entry : F/0
  3984 ;;		On exit  : F/0
  3985 ;;		Unchanged: FFFFFFF0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3987 ;;      Params:         0       0       0       0       0       0       0
  3988 ;;      Locals:         0       2       0       0       0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0
  3990 ;;      Totals:         0       2       0       0       0       0       0
  3991 ;;Total ram usage:        2 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    5
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_string_utils_strncmp
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text11
  4002  00199A                     __ptext11:
  4003                           	opt stack 0
  4004  00199A                     _string_utils_is_upper_case:
  4005                           	opt stack 21
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;string_utils_is_upper_case@symb stored from wreg
  4009  00199A  CFE8 F06D          	movff	wreg,string_utils_is_upper_case@symb
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;string_utils.c: 168: return (symb >= 'A') && (symb <= 'Z');
  4013  00199E  6B6C               	clrf	_string_utils_is_upper_case$799& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016  0019A0  0E40               	movlw	64
  4017  0019A2  656D               	cpfsgt	string_utils_is_upper_case@symb& (0+255),b
  4018  0019A4  D005               	goto	l504
  4019                           
  4020                           ; BSR set to: 0
  4021  0019A6  0E5B               	movlw	91
  4022  0019A8  616D               	cpfslt	string_utils_is_upper_case@symb& (0+255),b
  4023  0019AA  D002               	goto	l504
  4024                           
  4025                           ; BSR set to: 0
  4026  0019AC  0E01               	movlw	1
  4027  0019AE  6F6C               	movwf	_string_utils_is_upper_case$799& (0+255),b
  4028  0019B0                     l504:
  4029                           
  4030                           ; BSR set to: 0
  4031  0019B0  516C               	movf	_string_utils_is_upper_case$799& (0+255),w,b
  4032                           
  4033                           ; BSR set to: 0
  4034  0019B2  0012               	return	
  4035  0019B4                     __end_of_string_utils_is_upper_case:
  4036                           	opt stack 0
  4037                           tosu	equ	0xFFF
  4038                           tosh	equ	0xFFE
  4039                           tosl	equ	0xFFD
  4040                           pclath	equ	0xFFA
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           prodh	equ	0xFF4
  4046                           prodl	equ	0xFF3
  4047                           intcon	equ	0xFF2
  4048                           indf0	equ	0xFEF
  4049                           postinc0	equ	0xFEE
  4050                           fsr0h	equ	0xFEA
  4051                           fsr0l	equ	0xFE9
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           postinc1	equ	0xFE6
  4055                           postdec1	equ	0xFE5
  4056                           fsr1h	equ	0xFE2
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           postinc2	equ	0xFDE
  4060                           postdec2	equ	0xFDD
  4061                           fsr2h	equ	0xFDA
  4062                           fsr2l	equ	0xFD9
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function _this_variable_load_from_text *****************
  4066 ;; Defined at:
  4067 ;;		line 40 in file "src/modules/syntax.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  pval            3   31[BANK0 ] PTR const unsigned char 
  4070 ;;		 -> this_buf(127), ROM(32767), 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  len             2   34[BANK0 ] int 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;		None               void
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : F/0
  4079 ;;		On exit  : D/0
  4080 ;;		Unchanged: FFFFFFF0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4082 ;;      Params:         0       3       0       0       0       0       0
  4083 ;;      Locals:         0       2       0       0       0       0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0
  4085 ;;      Totals:         0       5       0       0       0       0       0
  4086 ;;Total ram usage:        5 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    8
  4089 ;; This function calls:
  4090 ;;		_string_utils_strchr
  4091 ;;		_string_utils_copy
  4092 ;;		_string_utils_from_hex
  4093 ;; This function is called by:
  4094 ;;		_this_parse_item
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text12
  4099  0010F8                     __ptext12:
  4100                           	opt stack 0
  4101  0010F8                     _this_variable_load_from_text:
  4102                           	opt stack 19
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;syntax.c: 42: if (pval != (0) ) {
  4106                           
  4107                           ; BSR set to: 0
  4108  0010F8  517F               	movf	this_variable_load_from_text@pval& (0+255),w,b
  4109  0010FA  1180               	iorwf	(this_variable_load_from_text@pval+1)& (0+255),w,b
  4110  0010FC  1181               	iorwf	(this_variable_load_from_text@pval+2)& (0+255),w,b
  4111  0010FE  B4D8               	btfsc	status,2,c
  4112  001100  0012               	return	
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;syntax.c: 43: INT16 len = string_utils_strchr(pval, ('\0'));
  4116  001102  C07F  F06C         	movff	this_variable_load_from_text@pval,?_string_utils_strchr
  4117  001106  C080  F06D         	movff	this_variable_load_from_text@pval+1,?_string_utils_strchr+1
  4118  00110A  C081  F06E         	movff	this_variable_load_from_text@pval+2,?_string_utils_strchr+2
  4119  00110E  0E00               	movlw	0
  4120  001110  6B6F               	clrf	(?_string_utils_strchr+3)& (0+255),b
  4121  001112  EC9E  F007         	call	_string_utils_strchr	;wreg free
  4122  001116  C06C  F082         	movff	?_string_utils_strchr,this_variable_load_from_text@len
  4123  00111A  C06D  F083         	movff	?_string_utils_strchr+1,this_variable_load_from_text@len+1
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;syntax.c: 44: string_utils_copy(parameter_value , pval, len);
  4127  00111E  0E02               	movlw	high _parameter_value
  4128  001120  0100               	movlb	0	; () banked
  4129  001122  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  4130  001124  0E00               	movlw	low _parameter_value
  4131  001126  6F6C               	movwf	?_string_utils_copy& (0+255),b
  4132  001128  C07F  F06E         	movff	this_variable_load_from_text@pval,?_string_utils_copy+2
  4133  00112C  C080  F06F         	movff	this_variable_load_from_text@pval+1,?_string_utils_copy+3
  4134  001130  C081  F070         	movff	this_variable_load_from_text@pval+2,?_string_utils_copy+4
  4135  001134  C082  F071         	movff	this_variable_load_from_text@len,?_string_utils_copy+5
  4136  001138  C083  F072         	movff	this_variable_load_from_text@len+1,?_string_utils_copy+6
  4137  00113C  ECC5  F008         	call	_string_utils_copy	;wreg free
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;syntax.c: 45: parameter_value[len] = '\0';
  4141  001140  0E00               	movlw	low _parameter_value
  4142  001142  0100               	movlb	0	; () banked
  4143  001144  2582               	addwf	this_variable_load_from_text@len& (0+255),w,b
  4144  001146  6ED9               	movwf	fsr2l,c
  4145  001148  0E02               	movlw	high _parameter_value
  4146  00114A  2183               	addwfc	(this_variable_load_from_text@len+1)& (0+255),w,b
  4147  00114C  6EDA               	movwf	fsr2h,c
  4148  00114E  6ADF               	clrf	indf2,c
  4149                           
  4150                           ;syntax.c: 49: switch (parameter_type) {
  4151  001150  D00F               	goto	l3265
  4152  001152                     l3261:
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;syntax.c: 72: {
  4156                           ;syntax.c: 73: string_utils_from_hex(parameter_value, parameter_value );
  4157  001152  0E02               	movlw	high _parameter_value
  4158  001154  0100               	movlb	0	; () banked
  4159  001156  6F73               	movwf	(?_string_utils_from_hex+1)& (0+255),b
  4160  001158  0E00               	movlw	low _parameter_value
  4161  00115A  6F72               	movwf	?_string_utils_from_hex& (0+255),b
  4162  00115C  0E02               	movlw	high _parameter_value
  4163  00115E  6F75               	movwf	(?_string_utils_from_hex+3)& (0+255),b
  4164  001160  0E00               	movlw	low _parameter_value
  4165  001162  6F74               	movwf	(?_string_utils_from_hex+2)& (0+255),b
  4166  001164  EFE8  F007         	goto	_string_utils_from_hex	;wreg free
  4167  001168                     l657:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;syntax.c: 78: *((INT16*)parameter_value) = 0u;
  4171  001168  0102               	movlb	2	; () banked
  4172  00116A  6B00               	clrf	_parameter_value& (0+255),b
  4173  00116C  6B01               	clrf	(_parameter_value+1)& (0+255),b
  4174                           
  4175                           ;syntax.c: 79: break;
  4176  00116E  0012               	return	
  4177  001170                     l3265:
  4178                           
  4179                           ; BSR set to: 0
  4180  001170  51B9               	movf	_parameter_type& (0+255),w,b
  4181                           
  4182                           ; Switch size 1, requested type "space"
  4183                           ; Number of cases is 4, Range of values is 1 to 5
  4184                           ; switch strategies available:
  4185                           ; Name         Instructions Cycles
  4186                           ; simple_byte           13     7 (average)
  4187                           ;	Chosen strategy is simple_byte
  4188  001172  0A01               	xorlw	1	; case 1
  4189  001174  B4D8               	btfsc	status,2,c
  4190  001176  0012               	return	
  4191  001178  0A03               	xorlw	3	; case 2
  4192  00117A  E0EB               	bz	l3261
  4193  00117C  0A01               	xorlw	1	; case 3
  4194  00117E  B4D8               	btfsc	status,2,c
  4195  001180  0012               	return	
  4196  001182  0A06               	xorlw	6	; case 5
  4197  001184  B4D8               	btfsc	status,2,c
  4198                           
  4199                           ; BSR set to: 0
  4200  001186  0012               	return	
  4201  001188  D7EF               	goto	l657
  4202  00118A                     __end_of_this_variable_load_from_text:
  4203                           	opt stack 0
  4204                           tosu	equ	0xFFF
  4205                           tosh	equ	0xFFE
  4206                           tosl	equ	0xFFD
  4207                           pclath	equ	0xFFA
  4208                           tblptru	equ	0xFF8
  4209                           tblptrh	equ	0xFF7
  4210                           tblptrl	equ	0xFF6
  4211                           tablat	equ	0xFF5
  4212                           prodh	equ	0xFF4
  4213                           prodl	equ	0xFF3
  4214                           intcon	equ	0xFF2
  4215                           indf0	equ	0xFEF
  4216                           postinc0	equ	0xFEE
  4217                           fsr0h	equ	0xFEA
  4218                           fsr0l	equ	0xFE9
  4219                           wreg	equ	0xFE8
  4220                           indf1	equ	0xFE7
  4221                           postinc1	equ	0xFE6
  4222                           postdec1	equ	0xFE5
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           postinc2	equ	0xFDE
  4227                           postdec2	equ	0xFDD
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function _string_utils_copy *****************
  4233 ;; Defined at:
  4234 ;;		line 67 in file "src/modules/string_utils.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  pdst            2   12[BANK0 ] PTR unsigned char 
  4237 ;;		 -> parameter_text(127), parameter_value(127), 
  4238 ;;  psrc            3   14[BANK0 ] PTR const unsigned char 
  4239 ;;		 -> this_buf(127), ROM(32767), 
  4240 ;;  maxlen          2   17[BANK0 ] int 
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;  result          2   19[BANK0 ] int 
  4243 ;; Return value:  Size  Location     Type
  4244 ;;                  2   12[BANK0 ] int 
  4245 ;; Registers used:
  4246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4247 ;; Tracked objects:
  4248 ;;		On entry : F/0
  4249 ;;		On exit  : F/0
  4250 ;;		Unchanged: FFFFFFF0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4252 ;;      Params:         0       7       0       0       0       0       0
  4253 ;;      Locals:         0       2       0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0       0       0
  4255 ;;      Totals:         0       9       0       0       0       0       0
  4256 ;;Total ram usage:        9 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:    5
  4259 ;; This function calls:
  4260 ;;		Nothing
  4261 ;; This function is called by:
  4262 ;;		_this_variable_load_from_text
  4263 ;;		_this_parse_item
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text13
  4268  00118A                     __ptext13:
  4269                           	opt stack 0
  4270  00118A                     _string_utils_copy:
  4271                           	opt stack 21
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;string_utils.c: 68: INT16 result = -1;
  4275  00118A  6973               	setf	string_utils_copy@result& (0+255),b
  4276  00118C  6974               	setf	(string_utils_copy@result+1)& (0+255),b
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;string_utils.c: 69: if (psrc != (0))
  4280  00118E  516E               	movf	string_utils_copy@psrc& (0+255),w,b
  4281  001190  116F               	iorwf	(string_utils_copy@psrc+1)& (0+255),w,b
  4282  001192  1170               	iorwf	(string_utils_copy@psrc+2)& (0+255),w,b
  4283  001194  B4D8               	btfsc	status,2,c
  4284  001196  0012               	return	
  4285  001198  D01E               	goto	l3107
  4286  00119A                     l3099:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;string_utils.c: 72: {
  4290                           ;string_utils.c: 73: result++;
  4291  00119A  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4292  00119C  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;string_utils.c: 74: *pdst++ = *psrc++;
  4296  00119E  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4297  0011A2  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4298  0011A6  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4299  0011AA  BAF8               	btfsc	tblptru,5,c
  4300  0011AC  D003               	bra	u2077
  4301  0011AE  0008               	tblrd		*
  4302  0011B0  50F5               	movf	tablat,w,c
  4303  0011B2  D005               	bra	u2070
  4304  0011B4                     u2077:
  4305  0011B4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4306  0011B8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4307  0011BC  50EF               	movf	indf0,w,c
  4308  0011BE                     u2070:
  4309  0011BE  C06C  FFD9         	movff	string_utils_copy@pdst,fsr2l
  4310  0011C2  C06D  FFDA         	movff	string_utils_copy@pdst+1,fsr2h
  4311  0011C6  6EDF               	movwf	indf2,c
  4312  0011C8  0100               	movlb	0	; () banked
  4313  0011CA  2B6E               	incf	string_utils_copy@psrc& (0+255),f,b
  4314  0011CC  0E00               	movlw	0
  4315  0011CE  236F               	addwfc	(string_utils_copy@psrc+1)& (0+255),f,b
  4316  0011D0  2370               	addwfc	(string_utils_copy@psrc+2)& (0+255),f,b
  4317                           
  4318                           ; BSR set to: 0
  4319  0011D2  4B6C               	infsnz	string_utils_copy@pdst& (0+255),f,b
  4320  0011D4  2B6D               	incf	(string_utils_copy@pdst+1)& (0+255),f,b
  4321  0011D6                     l3107:
  4322                           
  4323                           ; BSR set to: 0
  4324  0011D6  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4325  0011DA  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4326  0011DE  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4327  0011E2  BAF8               	btfsc	tblptru,5,c
  4328  0011E4  D003               	bra	u2087
  4329  0011E6  0008               	tblrd		*
  4330  0011E8  50F5               	movf	tablat,w,c
  4331  0011EA  D005               	bra	u2080
  4332  0011EC                     u2087:
  4333  0011EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4334  0011F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4335  0011F4  50EF               	movf	indf0,w,c
  4336  0011F6                     u2080:
  4337  0011F6  0900               	iorlw	0
  4338  0011F8  E008               	bz	l3111
  4339  0011FA  0100               	movlb	0	; () banked
  4340  0011FC  0771               	decf	string_utils_copy@maxlen& (0+255),f,b
  4341  0011FE  A0D8               	btfss	status,0,c
  4342  001200  0772               	decf	(string_utils_copy@maxlen+1)& (0+255),f,b
  4343  001202  2971               	incf	string_utils_copy@maxlen& (0+255),w,b
  4344  001204  B4D8               	btfsc	status,2,c
  4345  001206  2972               	incf	(string_utils_copy@maxlen+1)& (0+255),w,b
  4346  001208  E1C8               	bnz	l3099
  4347  00120A                     l3111:
  4348                           
  4349                           ;string_utils.c: 75: }
  4350                           ;string_utils.c: 76: result++;
  4351  00120A  0100               	movlb	0	; () banked
  4352  00120C  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4353  00120E  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4354                           
  4355                           ; BSR set to: 0
  4356  001210  0012               	return	
  4357  001212                     __end_of_string_utils_copy:
  4358                           	opt stack 0
  4359                           tosu	equ	0xFFF
  4360                           tosh	equ	0xFFE
  4361                           tosl	equ	0xFFD
  4362                           pclath	equ	0xFFA
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           intcon	equ	0xFF2
  4370                           indf0	equ	0xFEF
  4371                           postinc0	equ	0xFEE
  4372                           fsr0h	equ	0xFEA
  4373                           fsr0l	equ	0xFE9
  4374                           wreg	equ	0xFE8
  4375                           indf1	equ	0xFE7
  4376                           postinc1	equ	0xFE6
  4377                           postdec1	equ	0xFE5
  4378                           fsr1h	equ	0xFE2
  4379                           fsr1l	equ	0xFE1
  4380                           indf2	equ	0xFDF
  4381                           postinc2	equ	0xFDE
  4382                           postdec2	equ	0xFDD
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _string_utils_strchr *****************
  4388 ;; Defined at:
  4389 ;;		line 140 in file "src/modules/string_utils.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  pbuf            3   12[BANK0 ] PTR const unsigned char 
  4392 ;;		 -> this_buf(127), ROM(32767), 
  4393 ;;  delimeter       1   15[BANK0 ] unsigned char 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  pos             2   21[BANK0 ] int 
  4396 ;;  result          2   19[BANK0 ] int 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  2   12[BANK0 ] int 
  4399 ;; Registers used:
  4400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  4401 ;; Tracked objects:
  4402 ;;		On entry : F/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: FFFFFFF0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4406 ;;      Params:         0       4       0       0       0       0       0
  4407 ;;      Locals:         0       4       0       0       0       0       0
  4408 ;;      Temps:          0       3       0       0       0       0       0
  4409 ;;      Totals:         0      11       0       0       0       0       0
  4410 ;;Total ram usage:       11 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    5
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_this_variable_load_from_text
  4417 ;;		_this_parse_item
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text14
  4422  000F3C                     __ptext14:
  4423                           	opt stack 0
  4424  000F3C                     _string_utils_strchr:
  4425                           	opt stack 21
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;string_utils.c: 141: INT16 result = -1;
  4429                           
  4430                           ; BSR set to: 0
  4431  000F3C  6973               	setf	string_utils_strchr@result& (0+255),b
  4432  000F3E  6974               	setf	(string_utils_strchr@result+1)& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;string_utils.c: 142: if (pbuf != (0))
  4436  000F40  516C               	movf	string_utils_strchr@pbuf& (0+255),w,b
  4437  000F42  116D               	iorwf	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4438  000F44  116E               	iorwf	(string_utils_strchr@pbuf+2)& (0+255),w,b
  4439  000F46  E02D               	bz	l493
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;string_utils.c: 143: {
  4443                           ;string_utils.c: 144: INT16 pos;
  4444                           ;string_utils.c: 145: for (pos = 0; (pos < (1000)) && pbuf[pos]; pos++)
  4445  000F48  6B75               	clrf	string_utils_strchr@pos& (0+255),b
  4446  000F4A  6B76               	clrf	(string_utils_strchr@pos+1)& (0+255),b
  4447  000F4C  D016               	goto	l3167
  4448  000F4E                     l3161:
  4449                           
  4450                           ;string_utils.c: 146: {
  4451                           ;string_utils.c: 147: if (pbuf[pos] == delimeter)
  4452  000F4E  0100               	movlb	0	; () banked
  4453  000F50  D82D               	call	PL16	;call to abstracted procedure
  4454  000F52  BAF8               	btfsc	tblptru,5,c
  4455  000F54  D003               	bra	u2167
  4456  000F56  0008               	tblrd		*
  4457  000F58  50F5               	movf	tablat,w,c
  4458  000F5A  D005               	bra	u2160
  4459  000F5C                     u2167:
  4460  000F5C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4461  000F60  CFF7 FFEA          	movff	tblptrh,fsr0h
  4462  000F64  50EF               	movf	indf0,w,c
  4463  000F66                     u2160:
  4464  000F66  0100               	movlb	0	; () banked
  4465  000F68  196F               	xorwf	string_utils_strchr@delimeter& (0+255),w,b
  4466  000F6A  E105               	bnz	l3165
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;string_utils.c: 148: {
  4470                           ;string_utils.c: 149: result = pos;
  4471  000F6C  C075  F073         	movff	string_utils_strchr@pos,string_utils_strchr@result
  4472  000F70  C076  F074         	movff	string_utils_strchr@pos+1,string_utils_strchr@result+1
  4473                           
  4474                           ;string_utils.c: 150: break;
  4475  000F74  D016               	goto	l493
  4476  000F76                     l3165:
  4477                           
  4478                           ; BSR set to: 0
  4479  000F76  4B75               	infsnz	string_utils_strchr@pos& (0+255),f,b
  4480  000F78  2B76               	incf	(string_utils_strchr@pos+1)& (0+255),f,b
  4481  000F7A                     l3167:
  4482                           
  4483                           ; BSR set to: 0
  4484  000F7A  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4485  000F7C  0A80               	xorlw	128
  4486  000F7E  0F7D               	addlw	-131
  4487  000F80  0EE8               	movlw	232
  4488  000F82  B4D8               	btfsc	status,2,c
  4489  000F84  5D75               	subwf	string_utils_strchr@pos& (0+255),w,b
  4490  000F86  E20D               	bc	l493
  4491                           
  4492                           ; BSR set to: 0
  4493  000F88  D811               	call	PL16	;call to abstracted procedure
  4494  000F8A  BAF8               	btfsc	tblptru,5,c
  4495  000F8C  D003               	bra	u2197
  4496  000F8E  0008               	tblrd		*
  4497  000F90  50F5               	movf	tablat,w,c
  4498  000F92  D005               	bra	u2190
  4499  000F94                     u2197:
  4500  000F94  CFF6 FFE9          	movff	tblptrl,fsr0l
  4501  000F98  CFF7 FFEA          	movff	tblptrh,fsr0h
  4502  000F9C  50EF               	movf	indf0,w,c
  4503  000F9E                     u2190:
  4504  000F9E  0900               	iorlw	0
  4505  000FA0  E1D6               	bnz	l3161
  4506  000FA2                     l493:
  4507                           
  4508                           ;string_utils.c: 151: }
  4509                           ;string_utils.c: 152: }
  4510                           ;string_utils.c: 153: }
  4511                           ;string_utils.c: 154: return result;
  4512  000FA2  C073  F06C         	movff	string_utils_strchr@result,?_string_utils_strchr
  4513  000FA6  C074  F06D         	movff	string_utils_strchr@result+1,?_string_utils_strchr+1
  4514  000FAA  0012               	return	
  4515  000FAC                     __end_of_string_utils_strchr:
  4516                           	opt stack 0
  4517  000FAC                     PL16:
  4518                           	opt stack 21
  4519  000FAC  5175               	movf	string_utils_strchr@pos& (0+255),w,b
  4520  000FAE  256C               	addwf	string_utils_strchr@pbuf& (0+255),w,b
  4521  000FB0  6F70               	movwf	??_string_utils_strchr& (0+255),b
  4522  000FB2  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4523  000FB4  216D               	addwfc	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4524  000FB6  6F71               	movwf	(??_string_utils_strchr+1)& (0+255),b
  4525  000FB8  0E00               	movlw	0
  4526  000FBA  BF76               	btfsc	(string_utils_strchr@pos+1)& (0+255),7,b
  4527  000FBC  0EFF               	movlw	255
  4528  000FBE  216E               	addwfc	(string_utils_strchr@pbuf+2)& (0+255),w,b
  4529  000FC0  6F72               	movwf	(??_string_utils_strchr+2)& (0+255),b
  4530  000FC2  C070  FFF6         	movff	??_string_utils_strchr,tblptrl
  4531  000FC6  C071  FFF7         	movff	??_string_utils_strchr+1,tblptrh
  4532  000FCA  C072  FFF8         	movff	??_string_utils_strchr+2,tblptru
  4533  000FCE  0012               	return	
  4534  000FD0                     __end_ofPL16:
  4535                           	opt stack 0
  4536                           tosu	equ	0xFFF
  4537                           tosh	equ	0xFFE
  4538                           tosl	equ	0xFFD
  4539                           pclath	equ	0xFFA
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           indf0	equ	0xFEF
  4548                           postinc0	equ	0xFEE
  4549                           fsr0h	equ	0xFEA
  4550                           fsr0l	equ	0xFE9
  4551                           wreg	equ	0xFE8
  4552                           indf1	equ	0xFE7
  4553                           postinc1	equ	0xFE6
  4554                           postdec1	equ	0xFE5
  4555                           fsr1h	equ	0xFE2
  4556                           fsr1l	equ	0xFE1
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564 ;; *************** function _string_utils_from_hex *****************
  4565 ;; Defined at:
  4566 ;;		line 400 in file "src/modules/string_utils.c"
  4567 ;; Parameters:    Size  Location     Type
  4568 ;;  pdata           2   18[BANK0 ] PTR unsigned char 
  4569 ;;		 -> parameter_value(127), 
  4570 ;;  phex_str        2   20[BANK0 ] PTR const unsigned char 
  4571 ;;		 -> parameter_value(127), 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  i               2   29[BANK0 ] int 
  4574 ;;  j               2   27[BANK0 ] int 
  4575 ;;  len             2   25[BANK0 ] int 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  2   18[BANK0 ] int 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : F/0
  4582 ;;		On exit  : F/0
  4583 ;;		Unchanged: FFFFFFF0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4585 ;;      Params:         0       4       0       0       0       0       0
  4586 ;;      Locals:         0       6       0       0       0       0       0
  4587 ;;      Temps:          0       3       0       0       0       0       0
  4588 ;;      Totals:         0      13       0       0       0       0       0
  4589 ;;Total ram usage:       13 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    7
  4592 ;; This function calls:
  4593 ;;		_string_utils_strlen
  4594 ;;		_symb_from_hex_to_bin
  4595 ;; This function is called by:
  4596 ;;		_this_variable_load_from_text
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text15
  4601  000FD0                     __ptext15:
  4602                           	opt stack 0
  4603  000FD0                     _string_utils_from_hex:
  4604                           	opt stack 19
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;string_utils.c: 401: INT16 i = 0;
  4608  000FD0  6B7D               	clrf	string_utils_from_hex@i& (0+255),b
  4609  000FD2  6B7E               	clrf	(string_utils_from_hex@i+1)& (0+255),b
  4610                           
  4611                           ;string_utils.c: 402: INT16 j = 0;
  4612  000FD4  6B7B               	clrf	string_utils_from_hex@j& (0+255),b
  4613  000FD6  6B7C               	clrf	(string_utils_from_hex@j+1)& (0+255),b
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;string_utils.c: 403: INT16 len = string_utils_strlen(phex_str);
  4617  000FD8  C074  F06E         	movff	string_utils_from_hex@phex_str,?_string_utils_strlen
  4618  000FDC  C075  F06F         	movff	string_utils_from_hex@phex_str+1,?_string_utils_strlen+1
  4619  000FE0  ECE7  F00B         	call	_string_utils_strlen	;wreg free
  4620  000FE4  C06E  F079         	movff	?_string_utils_strlen,string_utils_from_hex@len
  4621  000FE8  C06F  F07A         	movff	?_string_utils_strlen+1,string_utils_from_hex@len+1
  4622                           
  4623                           ;string_utils.c: 404: while (i < (len - 1))
  4624  000FEC  D02A               	goto	l3251
  4625  000FEE                     l3245:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;string_utils.c: 405: {
  4629                           ;string_utils.c: 406: pdata[j] = symb_from_hex_to_bin(phex_str[i]) * 16
  4630                           ;string_utils.c: 407: + symb_from_hex_to_bin(phex_str[i + 1]);
  4631  000FEE  517B               	movf	string_utils_from_hex@j& (0+255),w,b
  4632  000FF0  2572               	addwf	string_utils_from_hex@pdata& (0+255),w,b
  4633  000FF2  6ED9               	movwf	fsr2l,c
  4634  000FF4  517C               	movf	(string_utils_from_hex@j+1)& (0+255),w,b
  4635  000FF6  2173               	addwfc	(string_utils_from_hex@pdata+1)& (0+255),w,b
  4636  000FF8  6EDA               	movwf	fsr2h,c
  4637  000FFA  C074  F076         	movff	string_utils_from_hex@phex_str,??_string_utils_from_hex
  4638  000FFE  C075  F077         	movff	string_utils_from_hex@phex_str+1,??_string_utils_from_hex+1
  4639  001002  517D               	movf	string_utils_from_hex@i& (0+255),w,b
  4640  001004  2776               	addwf	??_string_utils_from_hex& (0+255),f,b
  4641  001006  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4642  001008  2377               	addwfc	(??_string_utils_from_hex+1)& (0+255),f,b
  4643  00100A  2976               	incf	??_string_utils_from_hex& (0+255),w,b
  4644  00100C  6EE1               	movwf	fsr1l,c
  4645  00100E  0E00               	movlw	0
  4646  001010  2177               	addwfc	(??_string_utils_from_hex+1)& (0+255),w,b
  4647  001012  6EE2               	movwf	fsr1h,c
  4648  001014  50E7               	movf	indf1,w,c
  4649  001016  EC3D  F00A         	call	_symb_from_hex_to_bin
  4650  00101A  6F78               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4651  00101C  517D               	movf	string_utils_from_hex@i& (0+255),w,b
  4652  00101E  2574               	addwf	string_utils_from_hex@phex_str& (0+255),w,b
  4653  001020  6EE1               	movwf	fsr1l,c
  4654  001022  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4655  001024  2175               	addwfc	(string_utils_from_hex@phex_str+1)& (0+255),w,b
  4656  001026  6EE2               	movwf	fsr1h,c
  4657  001028  50E7               	movf	indf1,w,c
  4658  00102A  EC3D  F00A         	call	_symb_from_hex_to_bin
  4659  00102E  0D10               	mullw	16
  4660  001030  50F3               	movf	prodl,w,c
  4661  001032  2578               	addwf	(??_string_utils_from_hex+2)& (0+255),w,b
  4662  001034  6EDF               	movwf	indf2,c
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;string_utils.c: 408: i += 2; j++;
  4666  001036  0E02               	movlw	2
  4667  001038  277D               	addwf	string_utils_from_hex@i& (0+255),f,b
  4668  00103A  0E00               	movlw	0
  4669  00103C  237E               	addwfc	(string_utils_from_hex@i+1)& (0+255),f,b
  4670                           
  4671                           ; BSR set to: 0
  4672  00103E  4B7B               	infsnz	string_utils_from_hex@j& (0+255),f,b
  4673  001040  2B7C               	incf	(string_utils_from_hex@j+1)& (0+255),f,b
  4674  001042                     l3251:
  4675                           
  4676                           ; BSR set to: 0
  4677  001042  0EFF               	movlw	255
  4678  001044  2579               	addwf	string_utils_from_hex@len& (0+255),w,b
  4679  001046  6F76               	movwf	??_string_utils_from_hex& (0+255),b
  4680  001048  0EFF               	movlw	255
  4681  00104A  217A               	addwfc	(string_utils_from_hex@len+1)& (0+255),w,b
  4682  00104C  6F77               	movwf	(??_string_utils_from_hex+1)& (0+255),b
  4683  00104E  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4684  001050  0A80               	xorlw	128
  4685  001052  6F78               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4686  001054  5176               	movf	??_string_utils_from_hex& (0+255),w,b
  4687  001056  5D7D               	subwf	string_utils_from_hex@i& (0+255),w,b
  4688  001058  5177               	movf	(??_string_utils_from_hex+1)& (0+255),w,b
  4689  00105A  0A80               	xorlw	128
  4690  00105C  5978               	subwfb	(??_string_utils_from_hex+2)& (0+255),w,b
  4691  00105E  B0D8               	btfsc	status,0,c
  4692  001060  0012               	return	
  4693  001062  D7C5               	goto	l3245
  4694  001064                     __end_of_string_utils_from_hex:
  4695                           	opt stack 0
  4696                           tosu	equ	0xFFF
  4697                           tosh	equ	0xFFE
  4698                           tosl	equ	0xFFD
  4699                           pclath	equ	0xFFA
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           prodh	equ	0xFF4
  4705                           prodl	equ	0xFF3
  4706                           intcon	equ	0xFF2
  4707                           indf0	equ	0xFEF
  4708                           postinc0	equ	0xFEE
  4709                           fsr0h	equ	0xFEA
  4710                           fsr0l	equ	0xFE9
  4711                           wreg	equ	0xFE8
  4712                           indf1	equ	0xFE7
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function _string_utils_strlen *****************
  4725 ;; Defined at:
  4726 ;;		line 12 in file "src/modules/string_utils.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  4729 ;;		 -> this_buf(127), parameter_value(127), 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  i               2   16[BANK0 ] int 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  2   14[BANK0 ] int 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : F/0
  4739 ;;		Unchanged: FFFFFFF0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4741 ;;      Params:         0       2       0       0       0       0       0
  4742 ;;      Locals:         0       2       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0
  4744 ;;      Totals:         0       4       0       0       0       0       0
  4745 ;;Total ram usage:        4 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    6
  4748 ;; This function calls:
  4749 ;;		_string_utils_is_symbol
  4750 ;; This function is called by:
  4751 ;;		_string_utils_from_hex
  4752 ;;		_this_parse_item
  4753 ;;		_syntax_string
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text16
  4758  0017CE                     __ptext16:
  4759                           	opt stack 0
  4760  0017CE                     _string_utils_strlen:
  4761                           	opt stack 22
  4762                           
  4763                           ;string_utils.c: 13: INT16 i = 0;
  4764                           
  4765                           ; BSR set to: 0
  4766  0017CE  0100               	movlb	0	; () banked
  4767  0017D0  6B70               	clrf	string_utils_strlen@i& (0+255),b
  4768  0017D2  6B71               	clrf	(string_utils_strlen@i+1)& (0+255),b
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;string_utils.c: 14: if (pstr)
  4772  0017D4  516F               	movf	(string_utils_strlen@pstr+1)& (0+255),w,b
  4773  0017D6  116E               	iorwf	string_utils_strlen@pstr& (0+255),w,b
  4774  0017D8  E014               	bz	l456
  4775  0017DA                     l3075:
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;string_utils.c: 17: {
  4779                           ;string_utils.c: 18: if (! string_utils_is_symbol(pstr[i]))
  4780  0017DA  5170               	movf	string_utils_strlen@i& (0+255),w,b
  4781  0017DC  256E               	addwf	string_utils_strlen@pstr& (0+255),w,b
  4782  0017DE  6ED9               	movwf	fsr2l,c
  4783  0017E0  5171               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4784  0017E2  216F               	addwfc	(string_utils_strlen@pstr+1)& (0+255),w,b
  4785  0017E4  6EDA               	movwf	fsr2h,c
  4786  0017E6  50DF               	movf	indf2,w,c
  4787  0017E8  ECDA  F00C         	call	_string_utils_is_symbol
  4788  0017EC  0900               	iorlw	0
  4789  0017EE  E009               	bz	l456
  4790                           
  4791                           ; BSR set to: 0
  4792  0017F0  4B70               	infsnz	string_utils_strlen@i& (0+255),f,b
  4793  0017F2  2B71               	incf	(string_utils_strlen@i+1)& (0+255),f,b
  4794                           
  4795                           ; BSR set to: 0
  4796  0017F4  5171               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4797  0017F6  0A80               	xorlw	128
  4798  0017F8  0F7D               	addlw	-131
  4799  0017FA  0EE8               	movlw	232
  4800  0017FC  B4D8               	btfsc	status,2,c
  4801  0017FE  5D70               	subwf	string_utils_strlen@i& (0+255),w,b
  4802  001800  E3EC               	bnc	l3075
  4803  001802                     l456:
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;string_utils.c: 21: }
  4807                           ;string_utils.c: 22: }
  4808                           ;string_utils.c: 23: }
  4809                           ;string_utils.c: 24: return i;
  4810  001802  C070  F06E         	movff	string_utils_strlen@i,?_string_utils_strlen
  4811  001806  C071  F06F         	movff	string_utils_strlen@i+1,?_string_utils_strlen+1
  4812                           
  4813                           ; BSR set to: 0
  4814  00180A  0012               	return	
  4815  00180C                     __end_of_string_utils_strlen:
  4816                           	opt stack 0
  4817                           tosu	equ	0xFFF
  4818                           tosh	equ	0xFFE
  4819                           tosl	equ	0xFFD
  4820                           pclath	equ	0xFFA
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           indf0	equ	0xFEF
  4829                           postinc0	equ	0xFEE
  4830                           fsr0h	equ	0xFEA
  4831                           fsr0l	equ	0xFE9
  4832                           wreg	equ	0xFE8
  4833                           indf1	equ	0xFE7
  4834                           postinc1	equ	0xFE6
  4835                           postdec1	equ	0xFE5
  4836                           fsr1h	equ	0xFE2
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function _string_utils_is_symbol *****************
  4846 ;; Defined at:
  4847 ;;		line 194 in file "src/modules/string_utils.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  symb            1    wreg     unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  symb            1   13[BANK0 ] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      unsigned char 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2
  4856 ;; Tracked objects:
  4857 ;;		On entry : F/0
  4858 ;;		On exit  : F/0
  4859 ;;		Unchanged: FFFFFFF0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4861 ;;      Params:         0       0       0       0       0       0       0
  4862 ;;      Locals:         0       2       0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0
  4864 ;;      Totals:         0       2       0       0       0       0       0
  4865 ;;Total ram usage:        2 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    5
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_string_utils_strlen
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text17
  4876  0019B4                     __ptext17:
  4877                           	opt stack 0
  4878  0019B4                     _string_utils_is_symbol:
  4879                           	opt stack 22
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;string_utils_is_symbol@symb stored from wreg
  4883  0019B4  CFE8 F06D          	movff	wreg,string_utils_is_symbol@symb
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;string_utils.c: 195: return (symb >= ' ') && (symb <= '~');
  4887  0019B8  6B6C               	clrf	_string_utils_is_symbol$805& (0+255),b
  4888                           
  4889                           ; BSR set to: 0
  4890  0019BA  0E1F               	movlw	31
  4891  0019BC  656D               	cpfsgt	string_utils_is_symbol@symb& (0+255),b
  4892  0019BE  D005               	goto	l514
  4893                           
  4894                           ; BSR set to: 0
  4895  0019C0  0E7F               	movlw	127
  4896  0019C2  616D               	cpfslt	string_utils_is_symbol@symb& (0+255),b
  4897  0019C4  D002               	goto	l514
  4898                           
  4899                           ; BSR set to: 0
  4900  0019C6  0E01               	movlw	1
  4901  0019C8  6F6C               	movwf	_string_utils_is_symbol$805& (0+255),b
  4902  0019CA                     l514:
  4903                           
  4904                           ; BSR set to: 0
  4905  0019CA  516C               	movf	_string_utils_is_symbol$805& (0+255),w,b
  4906                           
  4907                           ; BSR set to: 0
  4908  0019CC  0012               	return	
  4909  0019CE                     __end_of_string_utils_is_symbol:
  4910                           	opt stack 0
  4911                           tosu	equ	0xFFF
  4912                           tosh	equ	0xFFE
  4913                           tosl	equ	0xFFD
  4914                           pclath	equ	0xFFA
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           indf0	equ	0xFEF
  4923                           postinc0	equ	0xFEE
  4924                           fsr0h	equ	0xFEA
  4925                           fsr0l	equ	0xFE9
  4926                           wreg	equ	0xFE8
  4927                           indf1	equ	0xFE7
  4928                           postinc1	equ	0xFE6
  4929                           postdec1	equ	0xFE5
  4930                           fsr1h	equ	0xFE2
  4931                           fsr1l	equ	0xFE1
  4932                           indf2	equ	0xFDF
  4933                           postinc2	equ	0xFDE
  4934                           postdec2	equ	0xFDD
  4935                           fsr2h	equ	0xFDA
  4936                           fsr2l	equ	0xFD9
  4937                           status	equ	0xFD8
  4938                           
  4939 ;; *************** function _symb_from_hex_to_bin *****************
  4940 ;; Defined at:
  4941 ;;		line 334 in file "src/modules/string_utils.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;  symb            1    wreg     unsigned char 
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  symb            1   12[BANK0 ] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      unsigned char 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : F/0
  4952 ;;		On exit  : F/0
  4953 ;;		Unchanged: FFFFFFF0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4955 ;;      Params:         0       0       0       0       0       0       0
  4956 ;;      Locals:         0       1       0       0       0       0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0
  4958 ;;      Totals:         0       1       0       0       0       0       0
  4959 ;;Total ram usage:        1 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; Hardware stack levels required when called:    5
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_string_utils_from_hex
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text18
  4970  00147A                     __ptext18:
  4971                           	opt stack 0
  4972  00147A                     _symb_from_hex_to_bin:
  4973                           	opt stack 20
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;symb_from_hex_to_bin@symb stored from wreg
  4977  00147A  CFE8 F06C          	movff	wreg,symb_from_hex_to_bin@symb
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;string_utils.c: 335: switch (symb)
  4981  00147E  D009               	goto	l3235
  4982  001480                     l3221:
  4983                           
  4984                           ; BSR set to: 0
  4985                           ;string_utils.c: 338: case '1':
  4986                           ;string_utils.c: 339: case '2':
  4987                           ;string_utils.c: 340: case '3':
  4988                           ;string_utils.c: 341: case '4':
  4989                           ;string_utils.c: 342: case '5':
  4990                           ;string_utils.c: 343: case '6':
  4991                           ;string_utils.c: 344: case '7':
  4992                           ;string_utils.c: 345: case '8':
  4993                           ;string_utils.c: 346: case '9':
  4994                           ;string_utils.c: 347: return (UINT8)(symb - '0');
  4995  001480  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  4996  001482  0FD0               	addlw	208
  4997  001484  0012               	return	
  4998  001486                     l3225:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;string_utils.c: 349: case 'b':
  5002                           ;string_utils.c: 350: case 'c':
  5003                           ;string_utils.c: 351: case 'd':
  5004                           ;string_utils.c: 352: case 'e':
  5005                           ;string_utils.c: 353: case 'f':
  5006                           ;string_utils.c: 354: return (UINT8)(symb - 'a') + 10;
  5007  001486  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5008  001488  0FA9               	addlw	169
  5009  00148A  0012               	return	
  5010  00148C                     l3229:
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;string_utils.c: 356: case 'B':
  5014                           ;string_utils.c: 357: case 'C':
  5015                           ;string_utils.c: 358: case 'D':
  5016                           ;string_utils.c: 359: case 'E':
  5017                           ;string_utils.c: 360: case 'F':
  5018                           ;string_utils.c: 361: return (UINT8)(symb - 'A') + 10;
  5019  00148C  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5020  00148E  0FC9               	addlw	201
  5021  001490  0012               	return	
  5022  001492                     l3235:
  5023                           
  5024                           ; BSR set to: 0
  5025  001492  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5026                           
  5027                           ; Switch size 1, requested type "space"
  5028                           ; Number of cases is 22, Range of values is 48 to 102
  5029                           ; switch strategies available:
  5030                           ; Name         Instructions Cycles
  5031                           ; simple_byte           67    34 (average)
  5032                           ;	Chosen strategy is simple_byte
  5033  001494  0A30               	xorlw	48	; case 48
  5034  001496  E0F4               	bz	l3221
  5035  001498  0A01               	xorlw	1	; case 49
  5036  00149A  E0F2               	bz	l3221
  5037  00149C  0A03               	xorlw	3	; case 50
  5038  00149E  E0F0               	bz	l3221
  5039  0014A0  0A01               	xorlw	1	; case 51
  5040  0014A2  E0EE               	bz	l3221
  5041  0014A4  0A07               	xorlw	7	; case 52
  5042  0014A6  E0EC               	bz	l3221
  5043  0014A8  0A01               	xorlw	1	; case 53
  5044  0014AA  E0EA               	bz	l3221
  5045  0014AC  0A03               	xorlw	3	; case 54
  5046  0014AE  E0E8               	bz	l3221
  5047  0014B0  0A01               	xorlw	1	; case 55
  5048  0014B2  E0E6               	bz	l3221
  5049  0014B4  0A0F               	xorlw	15	; case 56
  5050  0014B6  E0E4               	bz	l3221
  5051  0014B8  0A01               	xorlw	1	; case 57
  5052  0014BA  E0E2               	bz	l3221
  5053  0014BC  0A78               	xorlw	120	; case 65
  5054  0014BE  E0E6               	bz	l3229
  5055  0014C0  0A03               	xorlw	3	; case 66
  5056  0014C2  E0E4               	bz	l3229
  5057  0014C4  0A01               	xorlw	1	; case 67
  5058  0014C6  E0E2               	bz	l3229
  5059  0014C8  0A07               	xorlw	7	; case 68
  5060  0014CA  E0E0               	bz	l3229
  5061  0014CC  0A01               	xorlw	1	; case 69
  5062  0014CE  E0DE               	bz	l3229
  5063  0014D0  0A03               	xorlw	3	; case 70
  5064  0014D2  E0DC               	bz	l3229
  5065  0014D4  0A27               	xorlw	39	; case 97
  5066  0014D6  E0D7               	bz	l3225
  5067  0014D8  0A03               	xorlw	3	; case 98
  5068  0014DA  E0D5               	bz	l3225
  5069  0014DC  0A01               	xorlw	1	; case 99
  5070  0014DE  E0D3               	bz	l3225
  5071  0014E0  0A07               	xorlw	7	; case 100
  5072  0014E2  E0D1               	bz	l3225
  5073  0014E4  0A01               	xorlw	1	; case 101
  5074  0014E6  E0CF               	bz	l3225
  5075  0014E8  0A03               	xorlw	3	; case 102
  5076  0014EA  E0CD               	bz	l3225
  5077                           
  5078                           ; BSR set to: 0
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;string_utils.c: 363: return 0;
  5082  0014EC  0C00               	retlw	0
  5083  0014EE                     __end_of_symb_from_hex_to_bin:
  5084                           	opt stack 0
  5085                           tosu	equ	0xFFF
  5086                           tosh	equ	0xFFE
  5087                           tosl	equ	0xFFD
  5088                           pclath	equ	0xFFA
  5089                           tblptru	equ	0xFF8
  5090                           tblptrh	equ	0xFF7
  5091                           tblptrl	equ	0xFF6
  5092                           tablat	equ	0xFF5
  5093                           prodh	equ	0xFF4
  5094                           prodl	equ	0xFF3
  5095                           intcon	equ	0xFF2
  5096                           indf0	equ	0xFEF
  5097                           postinc0	equ	0xFEE
  5098                           fsr0h	equ	0xFEA
  5099                           fsr0l	equ	0xFE9
  5100                           wreg	equ	0xFE8
  5101                           indf1	equ	0xFE7
  5102                           postinc1	equ	0xFE6
  5103                           postdec1	equ	0xFE5
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _on_parameter_found *****************
  5114 ;; Defined at:
  5115 ;;		line 14 in file "src/modules/on_parameter_found.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  operation       1    wreg     enum E4396
  5118 ;;  cmd_id          1   33[BANK0 ] char 
  5119 ;;  p_id            1   34[BANK0 ] char 
  5120 ;;  p               3   35[BANK0 ] PTR const void 
  5121 ;;		 -> parameter_text(127), parameter_value(127), ROM(32767), 
  5122 ;;  type            1   38[BANK0 ] enum E4387
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  operation       1   39[BANK0 ] enum E4396
  5125 ;;  ok              1    0        unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;		None               void
  5128 ;; Registers used:
  5129 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5130 ;; Tracked objects:
  5131 ;;		On entry : F/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: FFFFFFF0/0
  5134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5135 ;;      Params:         0       6       0       0       0       0       0
  5136 ;;      Locals:         0       1       0       0       0       0       0
  5137 ;;      Temps:          0       0       0       0       0       0       0
  5138 ;;      Totals:         0       7       0       0       0       0       0
  5139 ;;Total ram usage:        7 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    8
  5142 ;; This function calls:
  5143 ;;		_set_parameter
  5144 ;;		_get_parameter
  5145 ;;		_serialport_write
  5146 ;; This function is called by:
  5147 ;;		_syntax_string
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text19
  5152  00180C                     __ptext19:
  5153                           	opt stack 0
  5154  00180C                     _on_parameter_found:
  5155                           	opt stack 20
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;on_parameter_found@operation stored from wreg
  5159  00180C  CFE8 F087          	movff	wreg,on_parameter_found@operation
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;on_parameter_found.c: 15: CHAR ok;
  5163                           ;on_parameter_found.c: 16: if (operation == PARSER_PARAMETER) {
  5164  001810  6787               	tstfsz	on_parameter_found@operation& (0+255),b
  5165  001812  D00D               	goto	l5075
  5166  001814  D006               	goto	l5073
  5167  001816                     l5067:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;on_parameter_found.c: 19: ok = set_parameter(p_id);
  5171  001816  5182               	movf	on_parameter_found@p_id& (0+255),w,b
  5172  001818  EF32  F008         	goto	_set_parameter
  5173  00181C                     l5069:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;on_parameter_found.c: 23: ok = get_parameter(p_id);
  5177  00181C  5182               	movf	on_parameter_found@p_id& (0+255),w,b
  5178  00181E  EF4B  F009         	goto	_get_parameter
  5179  001822                     l5073:
  5180                           
  5181                           ; BSR set to: 0
  5182  001822  5181               	movf	on_parameter_found@cmd_id& (0+255),w,b
  5183                           
  5184                           ; Switch size 1, requested type "space"
  5185                           ; Number of cases is 2, Range of values is 0 to 1
  5186                           ; switch strategies available:
  5187                           ; Name         Instructions Cycles
  5188                           ; simple_byte            7     4 (average)
  5189                           ;	Chosen strategy is simple_byte
  5190  001824  E0F8               	bz	l5067
  5191  001826  0A01               	xorlw	1	; case 1
  5192  001828  A4D8               	btfss	status,2,c
  5193  00182A  0012               	return	
  5194  00182C  D7F7               	goto	l5069
  5195  00182E                     l5075:
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;on_parameter_found.c: 31: else if (operation == PARSER_STOP) {
  5199  00182E  5187               	movf	on_parameter_found@operation& (0+255),w,b
  5200  001830  0A02               	xorlw	2
  5201  001832  B4D8               	btfsc	status,2,c
  5202  001834  0012               	return	
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;on_parameter_found.c: 37: else if (operation == PARSER_ERROR) {
  5206  001836  5187               	movf	on_parameter_found@operation& (0+255),w,b
  5207  001838  0A03               	xorlw	3
  5208  00183A  A4D8               	btfss	status,2,c
  5209  00183C  0012               	return	
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;on_parameter_found.c: 38: serialport_write("err\n");
  5213  00183E  0E7F               	movlw	high STR_28
  5214  001840  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  5215  001842  0EF5               	movlw	low STR_28
  5216  001844  6F7D               	movwf	?_serialport_write& (0+255),b
  5217  001846  EF46  F00B         	goto	l5059	;wreg free
  5218  00184A                     __end_of_on_parameter_found:
  5219                           	opt stack 0
  5220                           tosu	equ	0xFFF
  5221                           tosh	equ	0xFFE
  5222                           tosl	equ	0xFFD
  5223                           pclath	equ	0xFFA
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           indf0	equ	0xFEF
  5232                           postinc0	equ	0xFEE
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           postinc1	equ	0xFE6
  5238                           postdec1	equ	0xFE5
  5239                           fsr1h	equ	0xFE2
  5240                           fsr1l	equ	0xFE1
  5241                           indf2	equ	0xFDF
  5242                           postinc2	equ	0xFDE
  5243                           postdec2	equ	0xFDD
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function _cla_add_value *****************
  5249 ;; Defined at:
  5250 ;;		line 33 in file "src/modules/classic_detector.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  d               1    wreg     PTR volatile struct .
  5253 ;;		 -> cla_detector(21), 
  5254 ;;  val             2   12[BANK0 ] int 
  5255 ;;  zero            2   14[BANK0 ] int 
  5256 ;; Auto vars:     Size  Location     Type
  5257 ;;  d               1   24[BANK0 ] PTR volatile struct .
  5258 ;;		 -> cla_detector(21), 
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      unsigned char 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5263 ;; Tracked objects:
  5264 ;;		On entry : F/0
  5265 ;;		On exit  : F/0
  5266 ;;		Unchanged: FFFFFFF0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5268 ;;      Params:         0       4       0       0       0       0       0
  5269 ;;      Locals:         0       5       0       0       0       0       0
  5270 ;;      Temps:          0       4       0       0       0       0       0
  5271 ;;      Totals:         0      13       0       0       0       0       0
  5272 ;;Total ram usage:       13 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    5
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_detection_task
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text20
  5283  00060A                     __ptext20:
  5284                           	opt stack 0
  5285  00060A                     _cla_add_value:
  5286                           	opt stack 24
  5287                           
  5288                           ;cla_add_value@d stored from wreg
  5289  00060A  CFE8 F078          	movff	wreg,cla_add_value@d
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;classic_detector.c: 34: d->cur_v = ((val- zero)<0?(-(val- zero)):(val- zero));
  5293  00060E  516E               	movf	cla_add_value@zero& (0+255),w,b
  5294  000610  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5295  000612  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5296  000614  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5297  000616  0B80               	andlw	128
  5298  000618  E107               	bnz	l3347
  5299                           
  5300                           ; BSR set to: 0
  5301  00061A  516E               	movf	cla_add_value@zero& (0+255),w,b
  5302  00061C  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5303  00061E  6F74               	movwf	_cla_add_value$1009& (0+255),b
  5304  000620  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5305  000622  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5306  000624  6F75               	movwf	(_cla_add_value$1009+1)& (0+255),b
  5307  000626  D010               	goto	l3349
  5308  000628                     l3347:
  5309                           
  5310                           ; BSR set to: 0
  5311  000628  C06C  F070         	movff	cla_add_value@val,??_cla_add_value
  5312  00062C  C06D  F071         	movff	cla_add_value@val+1,??_cla_add_value+1
  5313  000630  516E               	movf	cla_add_value@zero& (0+255),w,b
  5314  000632  5F70               	subwf	??_cla_add_value& (0+255),f,b
  5315  000634  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5316  000636  5B71               	subwfb	(??_cla_add_value+1)& (0+255),f,b
  5317  000638  1F70               	comf	??_cla_add_value& (0+255),f,b
  5318  00063A  1F71               	comf	(??_cla_add_value+1)& (0+255),f,b
  5319  00063C  4B70               	infsnz	??_cla_add_value& (0+255),f,b
  5320  00063E  2B71               	incf	(??_cla_add_value+1)& (0+255),f,b
  5321  000640  C070  F074         	movff	??_cla_add_value,_cla_add_value$1009
  5322  000644  C071  F075         	movff	??_cla_add_value+1,_cla_add_value$1009+1
  5323  000648                     l3349:
  5324                           
  5325                           ; BSR set to: 0
  5326  000648  5178               	movf	cla_add_value@d& (0+255),w,b
  5327  00064A  6ED9               	movwf	fsr2l,c
  5328  00064C  6ADA               	clrf	fsr2h,c
  5329  00064E  C074  FFDE         	movff	_cla_add_value$1009,postinc2
  5330  000652  C075  FFDD         	movff	_cla_add_value$1009+1,postdec2
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;classic_detector.c: 35: d->over_trig_value = (d->cur_v > d->config.sig_trig) ? (d->cur_
      +                          v - d->config.sig_trig):0;
  5334  000656  5178               	movf	cla_add_value@d& (0+255),w,b
  5335  000658  6ED9               	movwf	fsr2l,c
  5336  00065A  6ADA               	clrf	fsr2h,c
  5337  00065C  5178               	movf	cla_add_value@d& (0+255),w,b
  5338  00065E  6EE1               	movwf	fsr1l,c
  5339  000660  6AE2               	clrf	fsr1h,c
  5340  000662  0E13               	movlw	19
  5341  000664  D8A6               	call	PL12	;call to abstracted procedure
  5342  000666  E102               	bnz	u2465
  5343  000668  50DF               	movf	indf2,w,c
  5344  00066A  5CE7               	subwf	indf1,w,c
  5345  00066C                     u2465:
  5346  00066C  E303               	bnc	l3355
  5347                           
  5348                           ; BSR set to: 0
  5349  00066E  6B76               	clrf	_cla_add_value$1010& (0+255),b	;volatile
  5350  000670  6B77               	clrf	(_cla_add_value$1010+1)& (0+255),b	;volatile
  5351  000672  D017               	goto	l712
  5352  000674                     l3355:
  5353                           
  5354                           ; BSR set to: 0
  5355  000674  5178               	movf	cla_add_value@d& (0+255),w,b
  5356  000676  6ED9               	movwf	fsr2l,c
  5357  000678  6ADA               	clrf	fsr2h,c
  5358  00067A  0E13               	movlw	19
  5359  00067C  26D9               	addwf	fsr2l,f,c
  5360  00067E  6ADA               	clrf	fsr2h,c
  5361  000680  CFDE F070          	movff	postinc2,??_cla_add_value
  5362  000684  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5363  000688  5178               	movf	cla_add_value@d& (0+255),w,b
  5364  00068A  6ED9               	movwf	fsr2l,c
  5365  00068C  6ADA               	clrf	fsr2h,c
  5366  00068E  CFDE F072          	movff	postinc2,??_cla_add_value+2
  5367  000692  CFDD F073          	movff	postdec2,??_cla_add_value+3
  5368  000696  5170               	movf	??_cla_add_value& (0+255),w,b
  5369  000698  5D72               	subwf	(??_cla_add_value+2)& (0+255),w,b
  5370  00069A  6F76               	movwf	_cla_add_value$1010& (0+255),b	;volatile
  5371  00069C  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5372  00069E  5973               	subwfb	(??_cla_add_value+3)& (0+255),w,b
  5373  0006A0  6F77               	movwf	(_cla_add_value$1010+1)& (0+255),b	;volatile
  5374  0006A2                     l712:
  5375                           
  5376                           ; BSR set to: 0
  5377  0006A2  D8B1               	call	PL34	;call to abstracted procedure
  5378  0006A4  C076  FFDE         	movff	_cla_add_value$1010,postinc2	;volatile
  5379  0006A8  C077  FFDD         	movff	_cla_add_value$1010+1,postdec2	;volatile
  5380                           
  5381                           ;classic_detector.c: 36: if (d->status.over_trig)
  5382  0006AC  D88D               	call	PL14	;call to abstracted procedure
  5383  0006AE  50DF               	movf	indf2,w,c
  5384  0006B0  6F70               	movwf	??_cla_add_value& (0+255),b
  5385  0006B2  A570               	btfss	??_cla_add_value& (0+255),2,b
  5386  0006B4  D05D               	goto	l3377
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;classic_detector.c: 37: {
  5390                           ;classic_detector.c: 38: d->sig_count++;
  5391  0006B6  5178               	movf	cla_add_value@d& (0+255),w,b
  5392  0006B8  6ED9               	movwf	fsr2l,c
  5393  0006BA  6ADA               	clrf	fsr2h,c
  5394  0006BC  0E08               	movlw	8
  5395  0006BE  26D9               	addwf	fsr2l,f,c
  5396  0006C0  6ADA               	clrf	fsr2h,c
  5397  0006C2  2ADE               	incf	postinc2,f,c
  5398  0006C4  0E00               	movlw	0
  5399  0006C6  22DD               	addwfc	postdec2,f,c
  5400                           
  5401                           ;classic_detector.c: 39: d->sig_sum += d->over_trig_value;
  5402  0006C8  D89E               	call	PL34	;call to abstracted procedure
  5403  0006CA  CFDE F070          	movff	postinc2,??_cla_add_value
  5404  0006CE  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5405  0006D2  D881               	call	PL18	;call to abstracted procedure
  5406  0006D4  5170               	movf	??_cla_add_value& (0+255),w,b
  5407  0006D6  26DE               	addwf	postinc2,f,c
  5408  0006D8  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5409  0006DA  22DD               	addwfc	postdec2,f,c
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;classic_detector.c: 40: if (d->sig_sum > d->config.sig_sum_trig && d->status.alarm == F
      +                          ALSE)
  5413  0006DC  D87C               	call	PL18	;call to abstracted procedure
  5414  0006DE  5178               	movf	cla_add_value@d& (0+255),w,b
  5415  0006E0  6EE1               	movwf	fsr1l,c
  5416  0006E2  6AE2               	clrf	fsr1h,c
  5417  0006E4  0E11               	movlw	17
  5418  0006E6  D865               	call	PL12	;call to abstracted procedure
  5419  0006E8  E102               	bnz	u2485
  5420  0006EA  50DF               	movf	indf2,w,c
  5421  0006EC  5CE7               	subwf	indf1,w,c
  5422  0006EE                     u2485:
  5423  0006EE  E231               	bc	l3373
  5424                           
  5425                           ; BSR set to: 0
  5426  0006F0  D86B               	call	PL14	;call to abstracted procedure
  5427  0006F2  50DF               	movf	indf2,w,c
  5428  0006F4  6F70               	movwf	??_cla_add_value& (0+255),b
  5429  0006F6  B170               	btfsc	??_cla_add_value& (0+255),0,b
  5430  0006F8  D02C               	goto	l3373
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;classic_detector.c: 41: {
  5434                           ;classic_detector.c: 42: d->status.over_trig = FALSE;
  5435  0006FA  5178               	movf	cla_add_value@d& (0+255),w,b
  5436  0006FC  6ED9               	movwf	fsr2l,c
  5437  0006FE  6ADA               	clrf	fsr2h,c
  5438  000700  0E0E               	movlw	14
  5439  000702  26D9               	addwf	fsr2l,f,c
  5440  000704  6ADA               	clrf	fsr2h,c
  5441  000706  0EFB               	movlw	-5
  5442  000708  16DF               	andwf	223,f,c
  5443                           
  5444                           ;classic_detector.c: 43: d->status.alarm=TRUE;
  5445  00070A  D85E               	call	PL14	;call to abstracted procedure
  5446  00070C  0E01               	movlw	1
  5447  00070E  12DF               	iorwf	223,f,c
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;classic_detector.c: 44: d->last_sig_count = d->sig_count;
  5451  000710  5178               	movf	cla_add_value@d& (0+255),w,b
  5452  000712  D870               	call	PL22	;call to abstracted procedure
  5453  000714  0E0C               	movlw	12
  5454  000716  26E1               	addwf	fsr1l,f,c
  5455  000718  6AE2               	clrf	fsr1h,c
  5456  00071A  CFDE FFE6          	movff	postinc2,postinc1
  5457  00071E  CFDD FFE5          	movff	postdec2,postdec1
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;classic_detector.c: 45: d->last_sig_sum = d->sig_sum;
  5461  000722  D859               	call	PL18	;call to abstracted procedure
  5462  000724  5178               	movf	cla_add_value@d& (0+255),w,b
  5463  000726  6EE1               	movwf	fsr1l,c
  5464  000728  6AE2               	clrf	fsr1h,c
  5465  00072A  0E0A               	movlw	10
  5466  00072C  26E1               	addwf	fsr1l,f,c
  5467  00072E  6AE2               	clrf	fsr1h,c
  5468  000730  CFDE FFE6          	movff	postinc2,postinc1
  5469  000734  CFDD FFE5          	movff	postdec2,postdec1
  5470                           
  5471                           ;classic_detector.c: 46: d->sig_count = 0;
  5472  000738  5178               	movf	cla_add_value@d& (0+255),w,b
  5473  00073A  6ED9               	movwf	fsr2l,c
  5474  00073C  6ADA               	clrf	fsr2h,c
  5475  00073E  0E08               	movlw	8
  5476  000740  26D9               	addwf	fsr2l,f,c
  5477  000742  6ADA               	clrf	fsr2h,c
  5478  000744  6ADE               	clrf	postinc2,c
  5479  000746  6ADD               	clrf	postdec2,c
  5480                           
  5481                           ;classic_detector.c: 47: d->sig_sum = 0;
  5482  000748  D846               	call	PL18	;call to abstracted procedure
  5483  00074A  0E00               	movlw	0
  5484  00074C  6EDE               	movwf	postinc2,c
  5485  00074E  6EDD               	movwf	postdec2,c
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;classic_detector.c: 48: return TRUE;
  5489  000750  0C01               	retlw	1
  5490  000752                     l3373:
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;classic_detector.c: 49: }
  5494                           ;classic_detector.c: 51: if (d->sig_count > d->config.sig_max_count)
  5495  000752  5178               	movf	cla_add_value@d& (0+255),w,b
  5496  000754  D84F               	call	PL22	;call to abstracted procedure
  5497  000756  0E0F               	movlw	15
  5498  000758  D82C               	call	PL12	;call to abstracted procedure
  5499  00075A  E102               	bnz	u2505
  5500  00075C  50DF               	movf	indf2,w,c
  5501  00075E  5CE7               	subwf	indf1,w,c
  5502  000760                     u2505:
  5503  000760  E227               	bc	l3381
  5504                           
  5505                           ; BSR set to: 0
  5506                           ;classic_detector.c: 52: {
  5507                           ;classic_detector.c: 53: d->status.over_trig = FALSE;
  5508  000762  D832               	call	PL14	;call to abstracted procedure
  5509  000764  0EFB               	movlw	-5
  5510  000766  16DF               	andwf	223,f,c
  5511                           
  5512                           ;classic_detector.c: 54: d->status.alarm = FALSE;
  5513  000768  D82F               	call	PL14	;call to abstracted procedure
  5514  00076A  0EFE               	movlw	-2
  5515  00076C  16DF               	andwf	223,f,c
  5516  00076E  0C00               	retlw	0
  5517  000770                     l3377:
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;classic_detector.c: 59: else if (d->over_trig_value > d->config.sig_trig)
  5521  000770  D84A               	call	PL34	;call to abstracted procedure
  5522  000772  5178               	movf	cla_add_value@d& (0+255),w,b
  5523  000774  6EE1               	movwf	fsr1l,c
  5524  000776  6AE2               	clrf	fsr1h,c
  5525  000778  0E13               	movlw	19
  5526  00077A  D81B               	call	PL12	;call to abstracted procedure
  5527  00077C  E102               	bnz	u2515
  5528  00077E  50DF               	movf	indf2,w,c
  5529  000780  5CE7               	subwf	indf1,w,c
  5530  000782                     u2515:
  5531  000782  E216               	bc	l3381
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;classic_detector.c: 60: {
  5535                           ;classic_detector.c: 61: d->status.over_trig = TRUE;
  5536  000784  D821               	call	PL14	;call to abstracted procedure
  5537  000786  0E04               	movlw	4
  5538  000788  12DF               	iorwf	223,f,c
  5539                           
  5540                           ;classic_detector.c: 62: d->status.alarm = FALSE;
  5541  00078A  D81E               	call	PL14	;call to abstracted procedure
  5542  00078C  0EFE               	movlw	-2
  5543  00078E  16DF               	andwf	223,f,c
  5544                           
  5545                           ;classic_detector.c: 63: d->last_sig_count = 0;
  5546  000790  5178               	movf	cla_add_value@d& (0+255),w,b
  5547  000792  6ED9               	movwf	fsr2l,c
  5548  000794  6ADA               	clrf	fsr2h,c
  5549  000796  0E0C               	movlw	12
  5550                           
  5551                           ;classic_detector.c: 64: d->last_sig_sum = 0;
  5552  000798  D825               	call	PL20	;call to abstracted procedure
  5553  00079A  0E0A               	movlw	10
  5554                           
  5555                           ;classic_detector.c: 65: d->sig_count = 0;
  5556  00079C  D823               	call	PL20	;call to abstracted procedure
  5557  00079E  0E08               	movlw	8
  5558  0007A0  26D9               	addwf	fsr2l,f,c
  5559  0007A2  6ADA               	clrf	fsr2h,c
  5560  0007A4  6ADE               	clrf	postinc2,c
  5561  0007A6  6ADD               	clrf	postdec2,c
  5562                           
  5563                           ;classic_detector.c: 66: d->sig_sum = 0;
  5564  0007A8  D816               	call	PL18	;call to abstracted procedure
  5565  0007AA  0E00               	movlw	0
  5566  0007AC  6EDE               	movwf	postinc2,c
  5567  0007AE  6EDD               	movwf	postdec2,c
  5568  0007B0                     l3381:
  5569                           
  5570                           ; BSR set to: 0
  5571                           
  5572                           ; BSR set to: 0
  5573                           ;classic_detector.c: 67: }
  5574                           ;classic_detector.c: 68: return FALSE;
  5575  0007B0  0C00               	retlw	0
  5576  0007B2                     __end_of_cla_add_value:
  5577                           	opt stack 0
  5578  0007B2                     PL12:
  5579                           	opt stack 24
  5580  0007B2  26E1               	addwf	fsr1l,f,c
  5581  0007B4  6AE2               	clrf	fsr1h,c
  5582  0007B6  52E6               	movf	postinc1,f,c
  5583  0007B8  52DE               	movf	postinc2,f,c
  5584  0007BA  50E5               	movf	postdec1,w,c
  5585  0007BC  0A80               	xorlw	128
  5586  0007BE  6F70               	movwf	??_cla_add_value& (0+255),b
  5587  0007C0  50DD               	movf	postdec2,w,c
  5588  0007C2  0A80               	xorlw	128
  5589  0007C4  5D70               	subwf	??_cla_add_value& (0+255),w,b
  5590  0007C6  0012               	return	
  5591  0007C8                     __end_ofPL12:
  5592                           	opt stack 0
  5593  0007C8                     PL14:
  5594                           	opt stack 24
  5595  0007C8  5178               	movf	cla_add_value@d& (0+255),w,b
  5596  0007CA  6ED9               	movwf	fsr2l,c
  5597  0007CC  6ADA               	clrf	fsr2h,c
  5598  0007CE  0E0E               	movlw	14
  5599  0007D0  26D9               	addwf	fsr2l,f,c
  5600  0007D2  6ADA               	clrf	fsr2h,c
  5601  0007D4  0012               	return	
  5602  0007D6                     __end_ofPL14:
  5603                           	opt stack 0
  5604  0007D6                     PL18:
  5605                           	opt stack 24
  5606  0007D6  5178               	movf	cla_add_value@d& (0+255),w,b
  5607  0007D8  6ED9               	movwf	fsr2l,c
  5608  0007DA  6ADA               	clrf	fsr2h,c
  5609  0007DC  0E06               	movlw	6
  5610  0007DE  26D9               	addwf	fsr2l,f,c
  5611  0007E0  6ADA               	clrf	fsr2h,c
  5612  0007E2  0012               	return	
  5613  0007E4                     __end_ofPL18:
  5614                           	opt stack 0
  5615  0007E4                     PL20:
  5616                           	opt stack 24
  5617  0007E4  26D9               	addwf	fsr2l,f,c
  5618  0007E6  6ADA               	clrf	fsr2h,c
  5619  0007E8  6ADE               	clrf	postinc2,c
  5620  0007EA  6ADD               	clrf	postdec2,c
  5621  0007EC  5178               	movf	cla_add_value@d& (0+255),w,b
  5622  0007EE  6ED9               	movwf	fsr2l,c
  5623  0007F0  6ADA               	clrf	fsr2h,c
  5624  0007F2  0012               	return	
  5625  0007F4                     __end_ofPL20:
  5626                           	opt stack 0
  5627  0007F4                     PL22:
  5628                           	opt stack 24
  5629  0007F4  6ED9               	movwf	fsr2l,c
  5630  0007F6  6ADA               	clrf	fsr2h,c
  5631  0007F8  0E08               	movlw	8
  5632  0007FA  26D9               	addwf	fsr2l,f,c
  5633  0007FC  6ADA               	clrf	fsr2h,c
  5634  0007FE  5178               	movf	cla_add_value@d& (0+255),w,b
  5635  000800  6EE1               	movwf	fsr1l,c
  5636  000802  6AE2               	clrf	fsr1h,c
  5637  000804  0012               	return	
  5638  000806                     __end_ofPL22:
  5639                           	opt stack 0
  5640  000806                     PL34:
  5641                           	opt stack 24
  5642  000806  5178               	movf	cla_add_value@d& (0+255),w,b
  5643  000808  6ED9               	movwf	fsr2l,c
  5644  00080A  6ADA               	clrf	fsr2h,c
  5645  00080C  0E04               	movlw	4
  5646  00080E  26D9               	addwf	fsr2l,f,c
  5647  000810  6ADA               	clrf	fsr2h,c
  5648  000812  0012               	return	
  5649  000814                     __end_ofPL34:
  5650                           	opt stack 0
  5651                           tosu	equ	0xFFF
  5652                           tosh	equ	0xFFE
  5653                           tosl	equ	0xFFD
  5654                           pclath	equ	0xFFA
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           prodh	equ	0xFF4
  5660                           prodl	equ	0xFF3
  5661                           intcon	equ	0xFF2
  5662                           indf0	equ	0xFEF
  5663                           postinc0	equ	0xFEE
  5664                           fsr0h	equ	0xFEA
  5665                           fsr0l	equ	0xFE9
  5666                           wreg	equ	0xFE8
  5667                           indf1	equ	0xFE7
  5668                           postinc1	equ	0xFE6
  5669                           postdec1	equ	0xFE5
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _pd_add_value *****************
  5680 ;; Defined at:
  5681 ;;		line 33 in file "src/modules/peak_detector.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;  d               2   20[BANK0 ] PTR volatile struct .
  5684 ;;		 -> pd_detector(101), 
  5685 ;;  val             2   22[BANK0 ] int 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  tmp             2   40[BANK0 ] int 
  5688 ;;  i               1   42[BANK0 ] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      unsigned char 
  5691 ;; Registers used:
  5692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : F/0
  5695 ;;		On exit  : F/0
  5696 ;;		Unchanged: FFFFFFF0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5698 ;;      Params:         0       4       0       0       0       0       0
  5699 ;;      Locals:         0      13       0       0       0       0       0
  5700 ;;      Temps:          0       6       0       0       0       0       0
  5701 ;;      Totals:         0      23       0       0       0       0       0
  5702 ;;Total ram usage:       23 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    6
  5705 ;; This function calls:
  5706 ;;		___lbmod
  5707 ;;		___awdiv
  5708 ;;		___wmul
  5709 ;;		___awmod
  5710 ;; This function is called by:
  5711 ;;		_detection_task
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text21
  5716  0000F4                     __ptext21:
  5717                           	opt stack 0
  5718  0000F4                     _pd_add_value:
  5719                           	opt stack 23
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;peak_detector.c: 34: IDX8 i;
  5723                           ;peak_detector.c: 35: INT16 tmp;
  5724                           ;peak_detector.c: 37: d->last_v_idx %= d->config.lval_cnt;
  5725                           
  5726                           ; BSR set to: 0
  5727  0000F4  EE20 F028          	lfsr	2,40
  5728  0000F8  5174               	movf	pd_add_value@d& (0+255),w,b
  5729  0000FA  26D9               	addwf	fsr2l,f,c
  5730  0000FC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5731  0000FE  22DA               	addwfc	fsr2h,f,c
  5732  000100  EE10 F063          	lfsr	1,99
  5733  000104  5174               	movf	pd_add_value@d& (0+255),w,b
  5734  000106  26E1               	addwf	fsr1l,f,c
  5735  000108  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5736  00010A  22E2               	addwfc	fsr1h,f,c
  5737  00010C  50E7               	movf	indf1,w,c
  5738  00010E  6F6C               	movwf	?___lbmod& (0+255),b
  5739  000110  EE10 F028          	lfsr	1,40
  5740  000114  5174               	movf	pd_add_value@d& (0+255),w,b
  5741  000116  26E1               	addwf	fsr1l,f,c
  5742  000118  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5743  00011A  22E2               	addwfc	fsr1h,f,c
  5744  00011C  50E7               	movf	indf1,w,c
  5745  00011E  EC89  F00C         	call	___lbmod
  5746  000122  6EDF               	movwf	indf2,c
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;peak_detector.c: 38: d->last_v_buf[d->last_v_idx] = (INT16) val;
  5750  000124  EE20 F028          	lfsr	2,40
  5751  000128  5174               	movf	pd_add_value@d& (0+255),w,b
  5752  00012A  26D9               	addwf	fsr2l,f,c
  5753  00012C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5754  00012E  22DA               	addwfc	fsr2h,f,c
  5755  000130  50DF               	movf	indf2,w,c
  5756  000132  DA52               	call	PL50	;call to abstracted procedure
  5757  000134  C076  FFDE         	movff	pd_add_value@val,postinc2
  5758  000138  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;peak_detector.c: 39: d->last_v_idx++;
  5762  00013C  EE20 F028          	lfsr	2,40
  5763  000140  5174               	movf	pd_add_value@d& (0+255),w,b
  5764  000142  26D9               	addwf	fsr2l,f,c
  5765  000144  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5766  000146  22DA               	addwfc	fsr2h,f,c
  5767  000148  2ADF               	incf	indf2,f,c
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;peak_detector.c: 40: d->last_v = d->cur_v;
  5771  00014A  EE20 F058          	lfsr	2,88
  5772  00014E  5174               	movf	pd_add_value@d& (0+255),w,b
  5773  000150  26D9               	addwf	fsr2l,f,c
  5774  000152  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5775  000154  22DA               	addwfc	fsr2h,f,c
  5776  000156  EE10 F029          	lfsr	1,41
  5777                           
  5778                           ; BSR set to: 0
  5779                           ;peak_detector.c: 41: d->cur_v = d->next_v;
  5780  00015A  D9ED               	call	PL26	;call to abstracted procedure
  5781  00015C  EE10 F058          	lfsr	1,88
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;peak_detector.c: 42: d->next_v = val;
  5785  000160  D9EA               	call	PL26	;call to abstracted procedure
  5786  000162  C076  FFDE         	movff	pd_add_value@val,postinc2
  5787  000166  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;peak_detector.c: 44: tmp = 0;
  5791  00016A  6B88               	clrf	pd_add_value@tmp& (0+255),b
  5792  00016C  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;peak_detector.c: 45: for (i = 0; i < d->config.lval_cnt; i++) {
  5796  00016E  6B8A               	clrf	pd_add_value@i& (0+255),b
  5797  000170  D003               	goto	l3415
  5798  000172                     l3411:
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;peak_detector.c: 46: tmp += d->last_v_buf[i];
  5802  000172  518A               	movf	pd_add_value@i& (0+255),w,b
  5803  000174  DA31               	call	PL50	;call to abstracted procedure
  5804                           
  5805                           ; BSR set to: 0
  5806  000176  DA3F               	call	PL58	;call to abstracted procedure
  5807  000178                     l3415:
  5808                           
  5809                           ; BSR set to: 0
  5810  000178  D9ED               	call	PL28	;call to abstracted procedure
  5811  00017A  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  5812  00017C  E3FA               	bnc	l3411
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;peak_detector.c: 47: }
  5816                           ;peak_detector.c: 48: d->avlv = tmp/d->config.lval_cnt;
  5817  00017E  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  5818  000182  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  5819  000186  D9E6               	call	PL28	;call to abstracted procedure
  5820  000188  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  5821  00018A  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  5822  00018C  EC8C  F009         	call	___awdiv	;wreg free
  5823  000190  EE20 F056          	lfsr	2,86
  5824  000194  D9FD               	call	PL36	;call to abstracted procedure
  5825                           
  5826                           ;peak_detector.c: 50: d->wval = d->cur_v * d->cur_v - d->avlv * d->next_v;
  5827  000196  EE20 F058          	lfsr	2,88
  5828  00019A  5174               	movf	pd_add_value@d& (0+255),w,b
  5829  00019C  26D9               	addwf	fsr2l,f,c
  5830  00019E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5831  0001A0  22DA               	addwfc	fsr2h,f,c
  5832  0001A2  CFDE F06C          	movff	postinc2,?___wmul
  5833  0001A6  CFDD F06D          	movff	postdec2,?___wmul+1
  5834  0001AA  EE20 F058          	lfsr	2,88
  5835  0001AE  5174               	movf	pd_add_value@d& (0+255),w,b
  5836  0001B0  26D9               	addwf	fsr2l,f,c
  5837  0001B2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5838  0001B4  22DA               	addwfc	fsr2h,f,c
  5839  0001B6  CFDE F06E          	movff	postinc2,?___wmul+2
  5840  0001BA  CFDD F06F          	movff	postdec2,?___wmul+3
  5841  0001BE  EC73  F00C         	call	___wmul	;wreg free
  5842  0001C2  C06C  F078         	movff	?___wmul,??_pd_add_value
  5843  0001C6  C06D  F079         	movff	?___wmul+1,??_pd_add_value+1
  5844  0001CA  EE20 F056          	lfsr	2,86
  5845  0001CE  5174               	movf	pd_add_value@d& (0+255),w,b
  5846  0001D0  26D9               	addwf	fsr2l,f,c
  5847  0001D2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5848  0001D4  22DA               	addwfc	fsr2h,f,c
  5849  0001D6  CFDE F06C          	movff	postinc2,?___wmul
  5850  0001DA  CFDD F06D          	movff	postdec2,?___wmul+1
  5851  0001DE  EE20 F05A          	lfsr	2,90
  5852  0001E2  5174               	movf	pd_add_value@d& (0+255),w,b
  5853  0001E4  26D9               	addwf	fsr2l,f,c
  5854  0001E6  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5855  0001E8  22DA               	addwfc	fsr2h,f,c
  5856  0001EA  CFDE F06E          	movff	postinc2,?___wmul+2
  5857  0001EE  CFDD F06F          	movff	postdec2,?___wmul+3
  5858  0001F2  EC73  F00C         	call	___wmul	;wreg free
  5859  0001F6  516C               	movf	?___wmul& (0+255),w,b
  5860  0001F8  5D78               	subwf	??_pd_add_value& (0+255),w,b
  5861  0001FA  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  5862  0001FC  516D               	movf	(?___wmul+1)& (0+255),w,b
  5863  0001FE  5979               	subwfb	(??_pd_add_value+1)& (0+255),w,b
  5864  000200  6F7B               	movwf	(??_pd_add_value+3)& (0+255),b
  5865  000202  EE20 F05C          	lfsr	2,92
  5866  000206  5174               	movf	pd_add_value@d& (0+255),w,b
  5867  000208  26D9               	addwf	fsr2l,f,c
  5868  00020A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5869  00020C  22DA               	addwfc	fsr2h,f,c
  5870  00020E  C07A  FFDE         	movff	??_pd_add_value+2,postinc2
  5871  000212  C07B  FFDD         	movff	??_pd_add_value+3,postdec2
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;peak_detector.c: 52: if ((((d->wval)<0?(-(d->wval)):(d->wval))) > d->config.wtrigger) {
  5875  000216  D976               	call	PL8	;call to abstracted procedure
  5876  000218  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  5877  00021A  D00B               	goto	l3423
  5878                           
  5879                           ; BSR set to: 0
  5880  00021C  EE20 F05C          	lfsr	2,92
  5881  000220  5174               	movf	pd_add_value@d& (0+255),w,b
  5882  000222  26D9               	addwf	fsr2l,f,c
  5883  000224  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5884  000226  22DA               	addwfc	fsr2h,f,c
  5885  000228  CFDE F07E          	movff	postinc2,_pd_add_value$1123	;volatile
  5886  00022C  CFDD F07F          	movff	postdec2,_pd_add_value$1123+1	;volatile
  5887  000230  D00B               	goto	l748
  5888  000232                     l3423:
  5889                           
  5890                           ; BSR set to: 0
  5891  000232  EE20 F05C          	lfsr	2,92
  5892  000236  5174               	movf	pd_add_value@d& (0+255),w,b
  5893  000238  26D9               	addwf	fsr2l,f,c
  5894  00023A  D95B               	call	PL6	;call to abstracted procedure
  5895  00023C  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  5896  00023E  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  5897  000240  C078  F07E         	movff	??_pd_add_value,_pd_add_value$1123	;volatile
  5898  000244  C079  F07F         	movff	??_pd_add_value+1,_pd_add_value$1123+1	;volatile
  5899  000248                     l748:
  5900                           
  5901                           ; BSR set to: 0
  5902  000248  EE20 F05F          	lfsr	2,95
  5903  00024C  5174               	movf	pd_add_value@d& (0+255),w,b
  5904  00024E  26D9               	addwf	fsr2l,f,c
  5905  000250  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5906  000252  22DA               	addwfc	fsr2h,f,c
  5907  000254  CFDE F078          	movff	postinc2,??_pd_add_value
  5908  000258  CFDD F079          	movff	postdec2,??_pd_add_value+1
  5909  00025C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  5910  00025E  0A80               	xorlw	128
  5911  000260  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  5912  000262  517E               	movf	_pd_add_value$1123& (0+255),w,b	;volatile
  5913  000264  5D78               	subwf	??_pd_add_value& (0+255),w,b
  5914  000266  517F               	movf	(_pd_add_value$1123+1)& (0+255),w,b	;volatile
  5915  000268  0A80               	xorlw	128
  5916  00026A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  5917  00026C  E216               	bc	l3435
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;peak_detector.c: 53: if (!d->status.alarm && !d->status.firststart) {
  5921  00026E  D9A3               	call	PL42	;call to abstracted procedure
  5922  000270  B178               	btfsc	??_pd_add_value& (0+255),0,b
  5923  000272  D013               	goto	l3435
  5924                           
  5925                           ; BSR set to: 0
  5926  000274  EE20 F05E          	lfsr	2,94
  5927  000278  5174               	movf	pd_add_value@d& (0+255),w,b
  5928  00027A  26D9               	addwf	fsr2l,f,c
  5929  00027C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5930  00027E  22DA               	addwfc	fsr2h,f,c
  5931  000280  50DF               	movf	indf2,w,c
  5932  000282  6F78               	movwf	??_pd_add_value& (0+255),b
  5933  000284  B578               	btfsc	??_pd_add_value& (0+255),2,b
  5934  000286  D009               	goto	l3435
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;peak_detector.c: 54: d->status.alarm = 1;
  5938  000288  EE20 F05E          	lfsr	2,94
  5939  00028C  5174               	movf	pd_add_value@d& (0+255),w,b
  5940  00028E  26D9               	addwf	fsr2l,f,c
  5941  000290  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5942  000292  22DA               	addwfc	fsr2h,f,c
  5943  000294  0E01               	movlw	1
  5944  000296  12DF               	iorwf	223,f,c
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;peak_detector.c: 55: return TRUE;
  5948  000298  0C01               	retlw	1
  5949  00029A                     l3435:
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;peak_detector.c: 56: }
  5953                           ;peak_detector.c: 57: }
  5954                           ;peak_detector.c: 58: if (d->status.alarm && (((d->wval)<0?(-(d->wval)):(d->wval))) < (1
      +                          000)
  5955                           ;peak_detector.c: 59: && ((d->cur_v - d->ref_v)<0?(-(d->cur_v - d->ref_v)):(d->cur_v - d
      +                          ->ref_v)) < d->config.tolerance
  5956                           ;peak_detector.c: 60: && ((d->next_v - d->ref_v)<0?(-(d->next_v - d->ref_v)):(d->next_v 
      +                          - d->ref_v)) < d->config.tolerance) {
  5957  00029A  D98D               	call	PL42	;call to abstracted procedure
  5958  00029C  A178               	btfss	??_pd_add_value& (0+255),0,b
  5959  00029E  D09B               	goto	l751
  5960                           
  5961                           ; BSR set to: 0
  5962  0002A0  EE20 F05C          	lfsr	2,92
  5963  0002A4  5174               	movf	pd_add_value@d& (0+255),w,b
  5964  0002A6  26D9               	addwf	fsr2l,f,c
  5965  0002A8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5966  0002AA  22DA               	addwfc	fsr2h,f,c
  5967  0002AC  CFDE F078          	movff	postinc2,??_pd_add_value
  5968  0002B0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  5969  0002B4  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  5970  0002B6  D00B               	goto	l3441
  5971                           
  5972                           ; BSR set to: 0
  5973  0002B8  EE20 F05C          	lfsr	2,92
  5974  0002BC  5174               	movf	pd_add_value@d& (0+255),w,b
  5975  0002BE  26D9               	addwf	fsr2l,f,c
  5976  0002C0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  5977  0002C2  22DA               	addwfc	fsr2h,f,c
  5978  0002C4  CFDE F080          	movff	postinc2,_pd_add_value$1124	;volatile
  5979  0002C8  CFDD F081          	movff	postdec2,_pd_add_value$1124+1	;volatile
  5980  0002CC  D00B               	goto	l3443
  5981  0002CE                     l3441:
  5982                           
  5983                           ; BSR set to: 0
  5984  0002CE  EE20 F05C          	lfsr	2,92
  5985  0002D2  5174               	movf	pd_add_value@d& (0+255),w,b
  5986  0002D4  26D9               	addwf	fsr2l,f,c
  5987  0002D6  D90D               	call	PL6	;call to abstracted procedure
  5988  0002D8  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  5989  0002DA  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  5990  0002DC  C078  F080         	movff	??_pd_add_value,_pd_add_value$1124	;volatile
  5991  0002E0  C079  F081         	movff	??_pd_add_value+1,_pd_add_value$1124+1	;volatile
  5992  0002E4                     l3443:
  5993                           
  5994                           ; BSR set to: 0
  5995  0002E4  5181               	movf	(_pd_add_value$1124+1)& (0+255),w,b	;volatile
  5996  0002E6  0A80               	xorlw	128
  5997  0002E8  0F7D               	addlw	-131
  5998  0002EA  0EE8               	movlw	232
  5999  0002EC  B4D8               	btfsc	status,2,c
  6000  0002EE  5D80               	subwf	_pd_add_value$1124& (0+255),w,b	;volatile
  6001  0002F0  E272               	bc	l751
  6002                           
  6003                           ; BSR set to: 0
  6004  0002F2  EE20 F054          	lfsr	2,84
  6005  0002F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6006  0002F8  D8DE               	call	PL2	;call to abstracted procedure
  6007  0002FA  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6008  0002FC  D982               	call	PL60	;call to abstracted procedure
  6009  0002FE  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6010  000300  D009               	goto	l3449
  6011                           
  6012                           ; BSR set to: 0
  6013  000302  EE20 F054          	lfsr	2,84
  6014  000306  5174               	movf	pd_add_value@d& (0+255),w,b
  6015  000308  D8D6               	call	PL2	;call to abstracted procedure
  6016  00030A  6F82               	movwf	_pd_add_value$1125& (0+255),b	;volatile
  6017  00030C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6018  00030E  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6019  000310  6F83               	movwf	(_pd_add_value$1125+1)& (0+255),b	;volatile
  6020  000312  D00B               	goto	l759
  6021  000314                     l3449:
  6022                           
  6023                           ; BSR set to: 0
  6024  000314  EE20 F054          	lfsr	2,84
  6025  000318  5174               	movf	pd_add_value@d& (0+255),w,b
  6026  00031A  D8CD               	call	PL2	;call to abstracted procedure
  6027  00031C  D965               	call	PL56	;call to abstracted procedure
  6028  00031E  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6029  000320  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6030  000322  C07C  F082         	movff	??_pd_add_value+4,_pd_add_value$1125	;volatile
  6031  000326  C07D  F083         	movff	??_pd_add_value+5,_pd_add_value$1125+1	;volatile
  6032  00032A                     l759:
  6033                           
  6034                           ; BSR set to: 0
  6035  00032A  D91C               	call	PL30	;call to abstracted procedure
  6036  00032C  5183               	movf	(_pd_add_value$1125+1)& (0+255),w,b	;volatile
  6037  00032E  0A80               	xorlw	128
  6038  000330  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6039  000332  5178               	movf	??_pd_add_value& (0+255),w,b
  6040  000334  5D82               	subwf	_pd_add_value$1125& (0+255),w,b	;volatile
  6041  000336  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6042  000338  0A80               	xorlw	128
  6043  00033A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6044  00033C  E24C               	bc	l751
  6045                           
  6046                           ; BSR set to: 0
  6047  00033E  D8ED               	call	PL10	;call to abstracted procedure
  6048  000340  D8CE               	call	PL4	;call to abstracted procedure
  6049  000342  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6050  000344  D95E               	call	PL60	;call to abstracted procedure
  6051  000346  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6052  000348  D013               	goto	l3455
  6053                           
  6054                           ; BSR set to: 0
  6055  00034A  EE20 F054          	lfsr	2,84
  6056  00034E  5174               	movf	pd_add_value@d& (0+255),w,b
  6057  000350  26D9               	addwf	fsr2l,f,c
  6058  000352  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6059  000354  22DA               	addwfc	fsr2h,f,c
  6060  000356  CFDE F078          	movff	postinc2,??_pd_add_value
  6061  00035A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6062  00035E  EE20 F05A          	lfsr	2,90
  6063  000362  5174               	movf	pd_add_value@d& (0+255),w,b
  6064  000364  D8BC               	call	PL4	;call to abstracted procedure
  6065  000366  6F84               	movwf	_pd_add_value$1126& (0+255),b	;volatile
  6066  000368  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6067  00036A  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6068  00036C  6F85               	movwf	(_pd_add_value$1126+1)& (0+255),b	;volatile
  6069  00036E  D009               	goto	l763
  6070  000370                     l3455:
  6071                           
  6072                           ; BSR set to: 0
  6073  000370  D8D4               	call	PL10	;call to abstracted procedure
  6074  000372  D8B5               	call	PL4	;call to abstracted procedure
  6075  000374  D939               	call	PL56	;call to abstracted procedure
  6076  000376  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6077  000378  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6078  00037A  C07C  F084         	movff	??_pd_add_value+4,_pd_add_value$1126	;volatile
  6079  00037E  C07D  F085         	movff	??_pd_add_value+5,_pd_add_value$1126+1	;volatile
  6080  000382                     l763:
  6081                           
  6082                           ; BSR set to: 0
  6083  000382  D8F0               	call	PL30	;call to abstracted procedure
  6084  000384  5185               	movf	(_pd_add_value$1126+1)& (0+255),w,b	;volatile
  6085  000386  0A80               	xorlw	128
  6086  000388  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6087  00038A  5178               	movf	??_pd_add_value& (0+255),w,b
  6088  00038C  5D84               	subwf	_pd_add_value$1126& (0+255),w,b	;volatile
  6089  00038E  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6090  000390  0A80               	xorlw	128
  6091  000392  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6092  000394  E220               	bc	l751
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;peak_detector.c: 62: for (i = 0; i < d->config.lval_cnt; i++) {
  6096  000396  6B8A               	clrf	pd_add_value@i& (0+255),b
  6097  000398  D013               	goto	l3463
  6098  00039A                     l3459:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;peak_detector.c: 63: d->last_v_buf[i] = d->cur_v;
  6102  00039A  EE20 F058          	lfsr	2,88
  6103  00039E  5174               	movf	pd_add_value@d& (0+255),w,b
  6104  0003A0  26D9               	addwf	fsr2l,f,c
  6105  0003A2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6106  0003A4  22DA               	addwfc	fsr2h,f,c
  6107  0003A6  518A               	movf	pd_add_value@i& (0+255),w,b
  6108  0003A8  0D02               	mullw	2
  6109  0003AA  50F3               	movf	prodl,w,c
  6110  0003AC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6111  0003AE  6EE1               	movwf	fsr1l,c
  6112  0003B0  50F4               	movf	prodh,w,c
  6113  0003B2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6114  0003B4  6EE2               	movwf	fsr1h,c
  6115  0003B6  CFDE FFE6          	movff	postinc2,postinc1
  6116  0003BA  CFDD FFE5          	movff	postdec2,postdec1
  6117                           
  6118                           ; BSR set to: 0
  6119  0003BE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6120  0003C0                     l3463:
  6121                           
  6122                           ; BSR set to: 0
  6123  0003C0  D8C9               	call	PL28	;call to abstracted procedure
  6124  0003C2  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6125  0003C4  E3EA               	bnc	l3459
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;peak_detector.c: 64: }
  6129                           ;peak_detector.c: 65: d->status.alarm = FALSE;
  6130  0003C6  EE20 F05E          	lfsr	2,94
  6131  0003CA  5174               	movf	pd_add_value@d& (0+255),w,b
  6132  0003CC  26D9               	addwf	fsr2l,f,c
  6133  0003CE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6134  0003D0  22DA               	addwfc	fsr2h,f,c
  6135  0003D2  0EFE               	movlw	-2
  6136  0003D4  16DF               	andwf	223,f,c
  6137  0003D6                     l751:
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;peak_detector.c: 66: }
  6141                           ;peak_detector.c: 69: if (((d->wval)<0?(-(d->wval)):(d->wval)) < (10)) {
  6142  0003D6  D896               	call	PL8	;call to abstracted procedure
  6143  0003D8  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6144  0003DA  D00B               	goto	l3469
  6145                           
  6146                           ; BSR set to: 0
  6147  0003DC  EE20 F05C          	lfsr	2,92
  6148  0003E0  5174               	movf	pd_add_value@d& (0+255),w,b
  6149  0003E2  26D9               	addwf	fsr2l,f,c
  6150  0003E4  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6151  0003E6  22DA               	addwfc	fsr2h,f,c
  6152  0003E8  CFDE F086          	movff	postinc2,_pd_add_value$1127	;volatile
  6153  0003EC  CFDD F087          	movff	postdec2,_pd_add_value$1127+1	;volatile
  6154  0003F0  D00B               	goto	l3471
  6155  0003F2                     l3469:
  6156                           
  6157                           ; BSR set to: 0
  6158  0003F2  EE20 F05C          	lfsr	2,92
  6159  0003F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6160  0003F8  26D9               	addwf	fsr2l,f,c
  6161  0003FA  D87B               	call	PL6	;call to abstracted procedure
  6162  0003FC  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6163  0003FE  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6164  000400  C078  F086         	movff	??_pd_add_value,_pd_add_value$1127	;volatile
  6165  000404  C079  F087         	movff	??_pd_add_value+1,_pd_add_value$1127+1	;volatile
  6166  000408                     l3471:
  6167                           
  6168                           ; BSR set to: 0
  6169  000408  5187               	movf	(_pd_add_value$1127+1)& (0+255),w,b	;volatile
  6170  00040A  0A80               	xorlw	128
  6171  00040C  0F80               	addlw	-128
  6172  00040E  0E0A               	movlw	10
  6173  000410  B4D8               	btfsc	status,2,c
  6174  000412  5D86               	subwf	_pd_add_value$1127& (0+255),w,b	;volatile
  6175  000414  E24F               	bc	l3493
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;peak_detector.c: 70: if (d->ref_v_idx == 9) {
  6179  000416  EE20 F053          	lfsr	2,83
  6180  00041A  5174               	movf	pd_add_value@d& (0+255),w,b
  6181  00041C  26D9               	addwf	fsr2l,f,c
  6182  00041E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6183  000420  22DA               	addwfc	fsr2h,f,c
  6184  000422  0E09               	movlw	9
  6185  000424  62DF               	cpfseq	indf2,c
  6186  000426  D008               	goto	l3477
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;peak_detector.c: 71: d->status.firststart = FALSE;
  6190  000428  EE20 F05E          	lfsr	2,94
  6191  00042C  5174               	movf	pd_add_value@d& (0+255),w,b
  6192  00042E  26D9               	addwf	fsr2l,f,c
  6193  000430  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6194  000432  22DA               	addwfc	fsr2h,f,c
  6195  000434  0EFB               	movlw	-5
  6196  000436  16DF               	andwf	223,f,c
  6197  000438                     l3477:
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;peak_detector.c: 72: }
  6201                           ;peak_detector.c: 75: d->ref_v_buf[d->ref_v_idx] = d->cur_v;
  6202  000438  EE20 F058          	lfsr	2,88
  6203  00043C  5174               	movf	pd_add_value@d& (0+255),w,b
  6204  00043E  D89D               	call	PL32	;call to abstracted procedure
  6205  000440  D8B0               	call	PL38	;call to abstracted procedure
  6206  000442  6EE1               	movwf	fsr1l,c
  6207  000444  0E00               	movlw	0
  6208  000446  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6209  000448  6EE2               	movwf	fsr1h,c
  6210  00044A  CFDE FFE6          	movff	postinc2,postinc1
  6211  00044E  CFDD FFE5          	movff	postdec2,postdec1
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;peak_detector.c: 76: d->ref_v_idx = (d->ref_v_idx + 1) % d->config.rval_cnt;
  6215  000452  EE20 F053          	lfsr	2,83
  6216  000456  5174               	movf	pd_add_value@d& (0+255),w,b
  6217  000458  D890               	call	PL32	;call to abstracted procedure
  6218  00045A  6F78               	movwf	??_pd_add_value& (0+255),b
  6219  00045C  2978               	incf	??_pd_add_value& (0+255),w,b
  6220  00045E  6F6C               	movwf	?___awmod& (0+255),b
  6221  000460  6B6D               	clrf	(?___awmod+1)& (0+255),b
  6222  000462  0E00               	movlw	0
  6223  000464  236D               	addwfc	(?___awmod+1)& (0+255),f,b
  6224  000466  EE10 F064          	lfsr	1,100
  6225  00046A  5174               	movf	pd_add_value@d& (0+255),w,b
  6226  00046C  26E1               	addwf	fsr1l,f,c
  6227  00046E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6228  000470  22E2               	addwfc	fsr1h,f,c
  6229  000472  50E7               	movf	indf1,w,c
  6230  000474  6F6E               	movwf	(?___awmod+2)& (0+255),b
  6231  000476  6B6F               	clrf	(?___awmod+3)& (0+255),b
  6232  000478  ECAC  F00A         	call	___awmod	;wreg free
  6233  00047C  516C               	movf	?___awmod& (0+255),w,b
  6234  00047E  6EDF               	movwf	indf2,c
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;peak_detector.c: 79: tmp = 0;
  6238  000480  6B88               	clrf	pd_add_value@tmp& (0+255),b
  6239  000482  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;peak_detector.c: 80: for (i = 0; i < d->config.rval_cnt; i++) {
  6243  000484  6B8A               	clrf	pd_add_value@i& (0+255),b
  6244  000486  D007               	goto	l3489
  6245  000488                     l3485:
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;peak_detector.c: 81: tmp += d->ref_v_buf[i];
  6249  000488  518A               	movf	pd_add_value@i& (0+255),w,b
  6250  00048A  D88B               	call	PL38	;call to abstracted procedure
  6251  00048C  6ED9               	movwf	fsr2l,c
  6252  00048E  0E00               	movlw	0
  6253  000490  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6254  000492  6EDA               	movwf	fsr2h,c
  6255                           
  6256                           ; BSR set to: 0
  6257  000494  D8B0               	call	PL58	;call to abstracted procedure
  6258  000496                     l3489:
  6259                           
  6260                           ; BSR set to: 0
  6261  000496  D898               	call	PL48	;call to abstracted procedure
  6262  000498  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6263  00049A  E3F6               	bnc	l3485
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;peak_detector.c: 82: }
  6267                           ;peak_detector.c: 84: d->ref_v = tmp/d->config.rval_cnt;
  6268  00049C  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  6269  0004A0  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  6270  0004A4  D891               	call	PL48	;call to abstracted procedure
  6271  0004A6  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  6272  0004A8  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  6273  0004AA  EC8C  F009         	call	___awdiv	;wreg free
  6274  0004AE  EE20 F054          	lfsr	2,84
  6275  0004B2  D86E               	call	PL36	;call to abstracted procedure
  6276  0004B4                     l3493:
  6277                           
  6278                           ; BSR set to: 0
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;peak_detector.c: 85: }
  6282                           ;peak_detector.c: 87: return FALSE;
  6283  0004B4  0C00               	retlw	0
  6284  0004B6                     __end_of_pd_add_value:
  6285                           	opt stack 0
  6286  0004B6                     PL2:
  6287                           	opt stack 23
  6288  0004B6  26D9               	addwf	fsr2l,f,c
  6289  0004B8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6290  0004BA  22DA               	addwfc	fsr2h,f,c
  6291  0004BC  CFDE F078          	movff	postinc2,??_pd_add_value
  6292  0004C0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6293  0004C4  EE20 F058          	lfsr	2,88
  6294  0004C8  5174               	movf	pd_add_value@d& (0+255),w,b
  6295  0004CA  26D9               	addwf	fsr2l,f,c
  6296  0004CC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6297  0004CE  22DA               	addwfc	fsr2h,f,c
  6298  0004D0  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6299  0004D4  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6300  0004D8  5178               	movf	??_pd_add_value& (0+255),w,b
  6301  0004DA  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6302  0004DC  0012               	return	
  6303  0004DE                     __end_ofPL2:
  6304                           	opt stack 0
  6305  0004DE                     PL4:
  6306                           	opt stack 23
  6307  0004DE  26D9               	addwf	fsr2l,f,c
  6308  0004E0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6309  0004E2  22DA               	addwfc	fsr2h,f,c
  6310  0004E4  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6311  0004E8  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6312  0004EC  5178               	movf	??_pd_add_value& (0+255),w,b
  6313  0004EE  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6314  0004F0  0012               	return	
  6315  0004F2                     __end_ofPL4:
  6316                           	opt stack 0
  6317  0004F2                     PL6:
  6318                           	opt stack 23
  6319  0004F2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6320  0004F4  22DA               	addwfc	fsr2h,f,c
  6321  0004F6  CFDE F078          	movff	postinc2,??_pd_add_value
  6322  0004FA  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6323  0004FE  1F78               	comf	??_pd_add_value& (0+255),f,b
  6324  000500  1F79               	comf	(??_pd_add_value+1)& (0+255),f,b
  6325  000502  0012               	return	
  6326  000504                     __end_ofPL6:
  6327                           	opt stack 0
  6328  000504                     PL8:
  6329                           	opt stack 23
  6330  000504  EE20 F05C          	lfsr	2,92
  6331  000508  5174               	movf	pd_add_value@d& (0+255),w,b
  6332  00050A  26D9               	addwf	fsr2l,f,c
  6333  00050C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6334  00050E  22DA               	addwfc	fsr2h,f,c
  6335  000510  CFDE F078          	movff	postinc2,??_pd_add_value
  6336  000514  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6337  000518  0012               	return	
  6338  00051A                     __end_ofPL8:
  6339                           	opt stack 0
  6340  00051A                     PL10:
  6341                           	opt stack 23
  6342  00051A  EE20 F054          	lfsr	2,84
  6343  00051E  5174               	movf	pd_add_value@d& (0+255),w,b
  6344  000520  26D9               	addwf	fsr2l,f,c
  6345  000522  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6346  000524  22DA               	addwfc	fsr2h,f,c
  6347  000526  CFDE F078          	movff	postinc2,??_pd_add_value
  6348  00052A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6349  00052E  EE20 F05A          	lfsr	2,90
  6350  000532  5174               	movf	pd_add_value@d& (0+255),w,b
  6351  000534  0012               	return	
  6352  000536                     __end_ofPL10:
  6353                           	opt stack 0
  6354  000536                     PL26:
  6355                           	opt stack 23
  6356  000536  5174               	movf	pd_add_value@d& (0+255),w,b
  6357  000538  26E1               	addwf	fsr1l,f,c
  6358  00053A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6359  00053C  22E2               	addwfc	fsr1h,f,c
  6360  00053E  CFDE FFE6          	movff	postinc2,postinc1
  6361  000542  CFDD FFE5          	movff	postdec2,postdec1
  6362  000546  EE20 F05A          	lfsr	2,90
  6363  00054A  5174               	movf	pd_add_value@d& (0+255),w,b
  6364  00054C  26D9               	addwf	fsr2l,f,c
  6365  00054E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6366  000550  22DA               	addwfc	fsr2h,f,c
  6367  000552  0012               	return	
  6368  000554                     __end_ofPL26:
  6369                           	opt stack 0
  6370  000554                     PL28:
  6371                           	opt stack 23
  6372  000554  EE20 F063          	lfsr	2,99
  6373  000558  5174               	movf	pd_add_value@d& (0+255),w,b
  6374  00055A  26D9               	addwf	fsr2l,f,c
  6375  00055C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6376  00055E  22DA               	addwfc	fsr2h,f,c
  6377  000560  50DF               	movf	indf2,w,c
  6378  000562  0012               	return	
  6379  000564                     __end_ofPL28:
  6380                           	opt stack 0
  6381  000564                     PL30:
  6382                           	opt stack 23
  6383  000564  EE20 F061          	lfsr	2,97
  6384  000568  5174               	movf	pd_add_value@d& (0+255),w,b
  6385  00056A  26D9               	addwf	fsr2l,f,c
  6386  00056C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6387  00056E  22DA               	addwfc	fsr2h,f,c
  6388  000570  CFDE F078          	movff	postinc2,??_pd_add_value
  6389  000574  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6390  000578  0012               	return	
  6391  00057A                     __end_ofPL30:
  6392                           	opt stack 0
  6393  00057A                     PL32:
  6394                           	opt stack 23
  6395  00057A  26D9               	addwf	fsr2l,f,c
  6396  00057C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6397  00057E  22DA               	addwfc	fsr2h,f,c
  6398  000580  EE10 F053          	lfsr	1,83
  6399  000584  5174               	movf	pd_add_value@d& (0+255),w,b
  6400  000586  26E1               	addwf	fsr1l,f,c
  6401  000588  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6402  00058A  22E2               	addwfc	fsr1h,f,c
  6403  00058C  50E7               	movf	indf1,w,c
  6404  00058E  0012               	return	
  6405  000590                     __end_ofPL32:
  6406                           	opt stack 0
  6407  000590                     PL36:
  6408                           	opt stack 23
  6409  000590  5174               	movf	pd_add_value@d& (0+255),w,b
  6410  000592  26D9               	addwf	fsr2l,f,c
  6411  000594  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6412  000596  22DA               	addwfc	fsr2h,f,c
  6413  000598  C06C  FFDE         	movff	?___awdiv,postinc2
  6414  00059C  C06D  FFDD         	movff	?___awdiv+1,postdec2
  6415  0005A0  0012               	return	
  6416  0005A2                     __end_ofPL36:
  6417                           	opt stack 0
  6418  0005A2                     PL38:
  6419                           	opt stack 23
  6420  0005A2  0D02               	mullw	2
  6421  0005A4  50F3               	movf	prodl,w,c
  6422  0005A6  2574               	addwf	pd_add_value@d& (0+255),w,b
  6423  0005A8  6F78               	movwf	??_pd_add_value& (0+255),b
  6424  0005AA  50F4               	movf	prodh,w,c
  6425  0005AC  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6426  0005AE  6F79               	movwf	(??_pd_add_value+1)& (0+255),b
  6427  0005B0  0E2B               	movlw	43
  6428  0005B2  2578               	addwf	??_pd_add_value& (0+255),w,b
  6429  0005B4  0012               	return	
  6430  0005B6                     __end_ofPL38:
  6431                           	opt stack 0
  6432  0005B6                     PL42:
  6433                           	opt stack 23
  6434  0005B6  EE20 F05E          	lfsr	2,94
  6435  0005BA  5174               	movf	pd_add_value@d& (0+255),w,b
  6436  0005BC  26D9               	addwf	fsr2l,f,c
  6437  0005BE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6438  0005C0  22DA               	addwfc	fsr2h,f,c
  6439  0005C2  50DF               	movf	indf2,w,c
  6440  0005C4  6F78               	movwf	??_pd_add_value& (0+255),b
  6441  0005C6  0012               	return	
  6442  0005C8                     __end_ofPL42:
  6443                           	opt stack 0
  6444  0005C8                     PL48:
  6445                           	opt stack 23
  6446  0005C8  EE20 F064          	lfsr	2,100
  6447  0005CC  5174               	movf	pd_add_value@d& (0+255),w,b
  6448  0005CE  26D9               	addwf	fsr2l,f,c
  6449  0005D0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6450  0005D2  22DA               	addwfc	fsr2h,f,c
  6451  0005D4  50DF               	movf	indf2,w,c
  6452  0005D6  0012               	return	
  6453  0005D8                     __end_ofPL48:
  6454                           	opt stack 0
  6455  0005D8                     PL50:
  6456                           	opt stack 23
  6457  0005D8  0D02               	mullw	2
  6458  0005DA  50F3               	movf	prodl,w,c
  6459  0005DC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6460  0005DE  6ED9               	movwf	fsr2l,c
  6461  0005E0  50F4               	movf	prodh,w,c
  6462  0005E2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6463  0005E4  6EDA               	movwf	fsr2h,c
  6464  0005E6  0012               	return	
  6465  0005E8                     __end_ofPL50:
  6466                           	opt stack 0
  6467  0005E8                     PL56:
  6468                           	opt stack 23
  6469  0005E8  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6470  0005EA  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6471  0005EC  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6472  0005EE  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6473  0005F0  1F7C               	comf	(??_pd_add_value+4)& (0+255),f,b
  6474  0005F2  1F7D               	comf	(??_pd_add_value+5)& (0+255),f,b
  6475  0005F4  0012               	return	
  6476  0005F6                     __end_ofPL56:
  6477                           	opt stack 0
  6478  0005F6                     PL58:
  6479                           	opt stack 23
  6480  0005F6  50DE               	movf	postinc2,w,c
  6481  0005F8  2788               	addwf	pd_add_value@tmp& (0+255),f,b
  6482  0005FA  50DD               	movf	postdec2,w,c
  6483  0005FC  2389               	addwfc	(pd_add_value@tmp+1)& (0+255),f,b
  6484  0005FE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6485  000600  0012               	return	
  6486  000602                     __end_ofPL58:
  6487                           	opt stack 0
  6488  000602                     PL60:
  6489                           	opt stack 23
  6490  000602  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6491  000604  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6492  000606  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6493  000608  0012               	return	
  6494  00060A                     __end_ofPL60:
  6495                           	opt stack 0
  6496                           tosu	equ	0xFFF
  6497                           tosh	equ	0xFFE
  6498                           tosl	equ	0xFFD
  6499                           pclath	equ	0xFFA
  6500                           tblptru	equ	0xFF8
  6501                           tblptrh	equ	0xFF7
  6502                           tblptrl	equ	0xFF6
  6503                           tablat	equ	0xFF5
  6504                           prodh	equ	0xFF4
  6505                           prodl	equ	0xFF3
  6506                           intcon	equ	0xFF2
  6507                           indf0	equ	0xFEF
  6508                           postinc0	equ	0xFEE
  6509                           fsr0h	equ	0xFEA
  6510                           fsr0l	equ	0xFE9
  6511                           wreg	equ	0xFE8
  6512                           indf1	equ	0xFE7
  6513                           postinc1	equ	0xFE6
  6514                           postdec1	equ	0xFE5
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _set_parameter *****************
  6525 ;; Defined at:
  6526 ;;		line 43 in file "src/modules/on_parameter_found.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  p_id            1    wreg     char 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;  p_id            1   31[BANK0 ] char 
  6531 ;;  ok              1   32[BANK0 ] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      unsigned char 
  6534 ;; Registers used:
  6535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : F/0
  6538 ;;		On exit  : F/0
  6539 ;;		Unchanged: FFFFFFF0/0
  6540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6541 ;;      Params:         0       0       0       0       0       0       0
  6542 ;;      Locals:         0       2       0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0
  6544 ;;      Totals:         0       2       0       0       0       0       0
  6545 ;;Total ram usage:        2 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    7
  6548 ;; This function calls:
  6549 ;;		_syntax_as_integer
  6550 ;;		_syntax_get_text
  6551 ;;		_serialport_write
  6552 ;; This function is called by:
  6553 ;;		_on_parameter_found
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text22
  6558  001064                     __ptext22:
  6559                           	opt stack 0
  6560  001064                     _set_parameter:
  6561                           	opt stack 20
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;set_parameter@p_id stored from wreg
  6565  001064  CFE8 F07F          	movff	wreg,set_parameter@p_id
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;on_parameter_found.c: 44: CHAR ok = FALSE;
  6569  001068  6B80               	clrf	set_parameter@ok& (0+255),b
  6570                           
  6571                           ;on_parameter_found.c: 45: switch (p_id )
  6572  00106A  D008               	goto	l5091
  6573  00106C                     l5085:
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;on_parameter_found.c: 52: LATD = syntax_as_integer()&0x0f;
  6577  00106C  EC2B  F00D         	call	_syntax_as_integer	;wreg free
  6578  001070  516C               	movf	?_syntax_as_integer& (0+255),w,b
  6579  001072  0B0F               	andlw	15
  6580  001074  6E8C               	movwf	3980,c	;volatile
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;on_parameter_found.c: 53: ok = TRUE;
  6584  001076  0E01               	movlw	1
  6585  001078  6F80               	movwf	set_parameter@ok& (0+255),b
  6586                           
  6587                           ;on_parameter_found.c: 54: break;
  6588  00107A  D022               	goto	l5093
  6589  00107C                     l5091:
  6590                           
  6591                           ; BSR set to: 0
  6592  00107C  517F               	movf	set_parameter@p_id& (0+255),w,b
  6593                           
  6594                           ; Switch size 1, requested type "space"
  6595                           ; Number of cases is 17, Range of values is 4 to 26
  6596                           ; switch strategies available:
  6597                           ; Name         Instructions Cycles
  6598                           ; simple_byte           52    27 (average)
  6599                           ;	Chosen strategy is simple_byte
  6600  00107E  0A04               	xorlw	4	; case 4
  6601  001080  E01F               	bz	l5093
  6602  001082  0A03               	xorlw	3	; case 7
  6603  001084  E0F3               	bz	l5085
  6604  001086  0A0A               	xorlw	10	; case 13
  6605  001088  E01B               	bz	l5093
  6606  00108A  0A03               	xorlw	3	; case 14
  6607  00108C  E019               	bz	l5093
  6608  00108E  0A00               	xorlw	0	; case 14
  6609  001090  E017               	bz	l5093
  6610  001092  0A01               	xorlw	1	; case 15
  6611  001094  E015               	bz	l5093
  6612  001096  0A1F               	xorlw	31	; case 16
  6613  001098  E013               	bz	l5093
  6614  00109A  0A01               	xorlw	1	; case 17
  6615  00109C  E011               	bz	l5093
  6616  00109E  0A03               	xorlw	3	; case 18
  6617  0010A0  E00F               	bz	l5093
  6618  0010A2  0A01               	xorlw	1	; case 19
  6619  0010A4  E00D               	bz	l5093
  6620  0010A6  0A07               	xorlw	7	; case 20
  6621  0010A8  E00B               	bz	l5093
  6622  0010AA  0A01               	xorlw	1	; case 21
  6623  0010AC  E009               	bz	l5093
  6624  0010AE  0A03               	xorlw	3	; case 22
  6625  0010B0  E007               	bz	l5093
  6626  0010B2  0A01               	xorlw	1	; case 23
  6627  0010B4  E005               	bz	l5093
  6628  0010B6  0A0F               	xorlw	15	; case 24
  6629  0010B8  A4D8               	btfss	status,2,c
  6630  0010BA  0A01               	xorlw	1	; case 25
  6631  0010BC  A4D8               	btfss	status,2,c
  6632  0010BE  0A03               	xorlw	3	; case 26
  6633  0010C0                     l5093:
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;on_parameter_found.c: 104: serialport_write( syntax_get_text() );
  6637  0010C0  EC25  F00D         	call	_syntax_get_text	;wreg free
  6638  0010C4  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  6639  0010C8  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  6640  0010CC  0100               	movlb	0	; () banked
  6641  0010CE  EC38  F00B         	call	_serialport_write	;wreg free
  6642                           
  6643                           ;on_parameter_found.c: 105: if( ok )
  6644  0010D2  0100               	movlb	0	; () banked
  6645  0010D4  5180               	movf	set_parameter@ok& (0+255),w,b
  6646  0010D6  E007               	bz	l5099
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;on_parameter_found.c: 106: {
  6650                           ;on_parameter_found.c: 107: serialport_write( ":ok " );
  6651  0010D8  0E7F               	movlw	high STR_29
  6652  0010DA  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  6653  0010DC  0EFA               	movlw	low STR_29
  6654  0010DE  6F7D               	movwf	?_serialport_write& (0+255),b
  6655  0010E0  EC38  F00B         	call	_serialport_write	;wreg free
  6656                           
  6657                           ;on_parameter_found.c: 108: }
  6658  0010E4  D006               	goto	l5101
  6659  0010E6                     l5099:
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;on_parameter_found.c: 109: else
  6663                           ;on_parameter_found.c: 110: {
  6664                           ;on_parameter_found.c: 111: serialport_write( ":err " );
  6665  0010E6  0E7F               	movlw	high STR_30
  6666  0010E8  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  6667  0010EA  0EEF               	movlw	low STR_30
  6668  0010EC  6F7D               	movwf	?_serialport_write& (0+255),b
  6669  0010EE  EC38  F00B         	call	_serialport_write	;wreg free
  6670  0010F2                     l5101:
  6671                           
  6672                           ;on_parameter_found.c: 112: }
  6673                           ;on_parameter_found.c: 113: return ok;
  6674  0010F2  0100               	movlb	0	; () banked
  6675  0010F4  5180               	movf	set_parameter@ok& (0+255),w,b
  6676                           
  6677                           ; BSR set to: 0
  6678  0010F6  0012               	return	
  6679  0010F8                     __end_of_set_parameter:
  6680                           	opt stack 0
  6681                           tosu	equ	0xFFF
  6682                           tosh	equ	0xFFE
  6683                           tosl	equ	0xFFD
  6684                           pclath	equ	0xFFA
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           indf0	equ	0xFEF
  6693                           postinc0	equ	0xFEE
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           indf1	equ	0xFE7
  6698                           postinc1	equ	0xFE6
  6699                           postdec1	equ	0xFE5
  6700                           fsr1h	equ	0xFE2
  6701                           fsr1l	equ	0xFE1
  6702                           indf2	equ	0xFDF
  6703                           postinc2	equ	0xFDE
  6704                           postdec2	equ	0xFDD
  6705                           fsr2h	equ	0xFDA
  6706                           fsr2l	equ	0xFD9
  6707                           status	equ	0xFD8
  6708                           
  6709 ;; *************** function _syntax_as_integer *****************
  6710 ;; Defined at:
  6711 ;;		line 200 in file "src/modules/syntax.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;		None
  6714 ;; Auto vars:     Size  Location     Type
  6715 ;;		None
  6716 ;; Return value:  Size  Location     Type
  6717 ;;                  2   12[BANK0 ] int 
  6718 ;; Registers used:
  6719 ;;		None
  6720 ;; Tracked objects:
  6721 ;;		On entry : F/0
  6722 ;;		On exit  : F/0
  6723 ;;		Unchanged: FFFFFFF0/0
  6724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6725 ;;      Params:         0       2       0       0       0       0       0
  6726 ;;      Locals:         0       0       0       0       0       0       0
  6727 ;;      Temps:          0       0       0       0       0       0       0
  6728 ;;      Totals:         0       2       0       0       0       0       0
  6729 ;;Total ram usage:        2 bytes
  6730 ;; Hardware stack levels used:    1
  6731 ;; Hardware stack levels required when called:    5
  6732 ;; This function calls:
  6733 ;;		Nothing
  6734 ;; This function is called by:
  6735 ;;		_set_parameter
  6736 ;; This function uses a non-reentrant model
  6737 ;;
  6738                           
  6739                           	psect	text23
  6740  001A56                     __ptext23:
  6741                           	opt stack 0
  6742  001A56                     _syntax_as_integer:
  6743                           	opt stack 21
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;syntax.c: 201: return *((INT16*)parameter_value);
  6747                           
  6748                           ; BSR set to: 0
  6749  001A56  C200  F06C         	movff	_parameter_value,?_syntax_as_integer
  6750  001A5A  C201  F06D         	movff	_parameter_value+1,?_syntax_as_integer+1
  6751                           
  6752                           ; BSR set to: 0
  6753  001A5E  0012               	return	
  6754  001A60                     __end_of_syntax_as_integer:
  6755                           	opt stack 0
  6756                           tosu	equ	0xFFF
  6757                           tosh	equ	0xFFE
  6758                           tosl	equ	0xFFD
  6759                           pclath	equ	0xFFA
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           intcon	equ	0xFF2
  6767                           indf0	equ	0xFEF
  6768                           postinc0	equ	0xFEE
  6769                           fsr0h	equ	0xFEA
  6770                           fsr0l	equ	0xFE9
  6771                           wreg	equ	0xFE8
  6772                           indf1	equ	0xFE7
  6773                           postinc1	equ	0xFE6
  6774                           postdec1	equ	0xFE5
  6775                           fsr1h	equ	0xFE2
  6776                           fsr1l	equ	0xFE1
  6777                           indf2	equ	0xFDF
  6778                           postinc2	equ	0xFDE
  6779                           postdec2	equ	0xFDD
  6780                           fsr2h	equ	0xFDA
  6781                           fsr2l	equ	0xFD9
  6782                           status	equ	0xFD8
  6783                           
  6784 ;; *************** function _get_parameter *****************
  6785 ;; Defined at:
  6786 ;;		line 116 in file "src/modules/on_parameter_found.c"
  6787 ;; Parameters:    Size  Location     Type
  6788 ;;  p_id            1    wreg     char 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  p_id            1   31[BANK0 ] char 
  6791 ;;  ok              1    0        unsigned char 
  6792 ;; Return value:  Size  Location     Type
  6793 ;;                  1    wreg      unsigned char 
  6794 ;; Registers used:
  6795 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6796 ;; Tracked objects:
  6797 ;;		On entry : F/0
  6798 ;;		On exit  : 0/0
  6799 ;;		Unchanged: FFFFFFF0/0
  6800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6801 ;;      Params:         0       0       0       0       0       0       0
  6802 ;;      Locals:         0       2       0       0       0       0       0
  6803 ;;      Temps:          0       0       0       0       0       0       0
  6804 ;;      Totals:         0       2       0       0       0       0       0
  6805 ;;Total ram usage:        2 bytes
  6806 ;; Hardware stack levels used:    1
  6807 ;; Hardware stack levels required when called:    7
  6808 ;; This function calls:
  6809 ;;		_syntax_get_text
  6810 ;;		_serialport_write
  6811 ;; This function is called by:
  6812 ;;		_on_parameter_found
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text24
  6817  001296                     __ptext24:
  6818                           	opt stack 0
  6819  001296                     _get_parameter:
  6820                           	opt stack 20
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;get_parameter@p_id stored from wreg
  6824  001296  CFE8 F07F          	movff	wreg,get_parameter@p_id
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;on_parameter_found.c: 119: serialport_write( syntax_get_text() );
  6828                           
  6829                           ; BSR set to: 0
  6830  00129A  EC25  F00D         	call	_syntax_get_text	;wreg free
  6831  00129E  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  6832  0012A2  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  6833  0012A6  0100               	movlb	0	; () banked
  6834  0012A8  EC38  F00B         	call	_serialport_write	;wreg free
  6835                           
  6836                           ;on_parameter_found.c: 121: switch (p_id ) {
  6837  0012AC  0100               	movlb	0	; () banked
  6838  0012AE  517F               	movf	get_parameter@p_id& (0+255),w,b
  6839                           
  6840                           ; Switch size 1, requested type "space"
  6841                           ; Number of cases is 23, Range of values is 4 to 26
  6842                           ; switch strategies available:
  6843                           ; Name         Instructions Cycles
  6844                           ; simple_byte           70    36 (average)
  6845                           ;	Chosen strategy is simple_byte
  6846  0012B0  0A04               	xorlw	4	; case 4
  6847  0012B2  E02B               	bz	l5113
  6848  0012B4  0A01               	xorlw	1	; case 5
  6849  0012B6  E029               	bz	l5113
  6850  0012B8  0A03               	xorlw	3	; case 6
  6851  0012BA  E027               	bz	l5113
  6852  0012BC  0A01               	xorlw	1	; case 7
  6853  0012BE  E025               	bz	l5113
  6854  0012C0  0A0F               	xorlw	15	; case 8
  6855  0012C2  E023               	bz	l5113
  6856  0012C4  0A01               	xorlw	1	; case 9
  6857  0012C6  E021               	bz	l5113
  6858  0012C8  0A03               	xorlw	3	; case 10
  6859  0012CA  E01F               	bz	l5113
  6860  0012CC  0A01               	xorlw	1	; case 11
  6861  0012CE  E01D               	bz	l5113
  6862  0012D0  0A07               	xorlw	7	; case 12
  6863  0012D2  E01B               	bz	l5113
  6864  0012D4  0A01               	xorlw	1	; case 13
  6865  0012D6  E019               	bz	l5113
  6866  0012D8  0A03               	xorlw	3	; case 14
  6867  0012DA  E017               	bz	l5113
  6868  0012DC  0A01               	xorlw	1	; case 15
  6869  0012DE  E015               	bz	l5113
  6870  0012E0  0A1F               	xorlw	31	; case 16
  6871  0012E2  E013               	bz	l5113
  6872  0012E4  0A01               	xorlw	1	; case 17
  6873  0012E6  E011               	bz	l5113
  6874  0012E8  0A03               	xorlw	3	; case 18
  6875  0012EA  E00F               	bz	l5113
  6876  0012EC  0A01               	xorlw	1	; case 19
  6877  0012EE  E00D               	bz	l5113
  6878  0012F0  0A07               	xorlw	7	; case 20
  6879  0012F2  E00B               	bz	l5113
  6880  0012F4  0A01               	xorlw	1	; case 21
  6881  0012F6  E009               	bz	l5113
  6882  0012F8  0A03               	xorlw	3	; case 22
  6883  0012FA  E007               	bz	l5113
  6884  0012FC  0A01               	xorlw	1	; case 23
  6885  0012FE  E005               	bz	l5113
  6886  001300  0A0F               	xorlw	15	; case 24
  6887  001302  A4D8               	btfss	status,2,c
  6888  001304  0A01               	xorlw	1	; case 25
  6889  001306  A4D8               	btfss	status,2,c
  6890  001308  0A03               	xorlw	3	; case 26
  6891  00130A                     l5113:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;on_parameter_found.c: 176: else
  6895                           ;on_parameter_found.c: 177: {
  6896                           ;on_parameter_found.c: 178: serialport_write( ":err " );
  6897                           
  6898                           ; BSR set to: 0
  6899  00130A  0E7F               	movlw	high STR_30
  6900  00130C  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  6901  00130E  0EEF               	movlw	low STR_30
  6902  001310  6F7D               	movwf	?_serialport_write& (0+255),b
  6903  001312  EC38  F00B         	call	_serialport_write	;wreg free
  6904                           
  6905                           ;on_parameter_found.c: 179: }
  6906                           ;on_parameter_found.c: 180: return ok;
  6907  001316  0C00               	retlw	0
  6908  001318                     __end_of_get_parameter:
  6909                           	opt stack 0
  6910                           tosu	equ	0xFFF
  6911                           tosh	equ	0xFFE
  6912                           tosl	equ	0xFFD
  6913                           pclath	equ	0xFFA
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           indf0	equ	0xFEF
  6922                           postinc0	equ	0xFEE
  6923                           fsr0h	equ	0xFEA
  6924                           fsr0l	equ	0xFE9
  6925                           wreg	equ	0xFE8
  6926                           indf1	equ	0xFE7
  6927                           postinc1	equ	0xFE6
  6928                           postdec1	equ	0xFE5
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           indf2	equ	0xFDF
  6932                           postinc2	equ	0xFDE
  6933                           postdec2	equ	0xFDD
  6934                           fsr2h	equ	0xFDA
  6935                           fsr2l	equ	0xFD9
  6936                           status	equ	0xFD8
  6937                           
  6938 ;; *************** function _serialport_write *****************
  6939 ;; Defined at:
  6940 ;;		line 52 in file "src/modules/serialport.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  pstr            2   29[BANK0 ] PTR const unsigned char 
  6943 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
  6944 ;;		 -> parameter_text(127), 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;		None
  6947 ;; Return value:  Size  Location     Type
  6948 ;;		None               void
  6949 ;; Registers used:
  6950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6951 ;; Tracked objects:
  6952 ;;		On entry : C/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: FFFFFFF0/0
  6955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6956 ;;      Params:         0       2       0       0       0       0       0
  6957 ;;      Locals:         0       0       0       0       0       0       0
  6958 ;;      Temps:          0       0       0       0       0       0       0
  6959 ;;      Totals:         0       2       0       0       0       0       0
  6960 ;;Total ram usage:        2 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    6
  6963 ;; This function calls:
  6964 ;;		_rd_buffer_put
  6965 ;; This function is called by:
  6966 ;;		_on_parameter_found
  6967 ;;		_set_parameter
  6968 ;;		_get_parameter
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text25
  6973  001670                     __ptext25:
  6974                           	opt stack 0
  6975  001670                     _serialport_write:
  6976                           	opt stack 21
  6977                           
  6978                           ;serialport.c: 53: while (pstr && *pstr)
  6979  001670  D00D               	goto	l5059
  6980  001672                     l5055:
  6981                           
  6982                           ;serialport.c: 54: {
  6983                           ;serialport.c: 55: rd_buffer_put(&g_tx_buffer, (UINT8*)pstr);
  6984  001672  0E01               	movlw	high _g_tx_buffer
  6985  001674  0100               	movlb	0	; () banked
  6986  001676  6F6D               	movwf	(?_rd_buffer_put+1)& (0+255),b
  6987  001678  0E00               	movlw	low _g_tx_buffer
  6988  00167A  6F6C               	movwf	?_rd_buffer_put& (0+255),b
  6989  00167C  C07D  F06E         	movff	serialport_write@pstr,?_rd_buffer_put+2
  6990  001680  C07E  F06F         	movff	serialport_write@pstr+1,?_rd_buffer_put+3
  6991  001684  ECB6  F004         	call	_rd_buffer_put	;wreg free
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;serialport.c: 56: pstr++;
  6995  001688  4B7D               	infsnz	serialport_write@pstr& (0+255),f,b
  6996  00168A  2B7E               	incf	(serialport_write@pstr+1)& (0+255),f,b
  6997  00168C                     l5059:
  6998  00168C  0100               	movlb	0	; () banked
  6999  00168E  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7000  001690  117D               	iorwf	serialport_write@pstr& (0+255),w,b
  7001  001692  B4D8               	btfsc	status,2,c
  7002  001694  0012               	return	
  7003                           
  7004                           ; BSR set to: 0
  7005  001696  517D               	movf	serialport_write@pstr& (0+255),w,b
  7006  001698  6EF6               	movwf	tblptrl,c
  7007  00169A  6EE9               	movwf	fsr0l,c
  7008  00169C  0E05               	movlw	(high __ramtop+-1)
  7009  00169E  6EEA               	movwf	fsr0h,c
  7010  0016A0  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7011  0016A2  64EA               	cpfsgt	fsr0h,c
  7012  0016A4  D003               	bra	u5187
  7013  0016A6  6EEA               	movwf	fsr0h,c
  7014  0016A8  50EF               	movf	indf0,w,c
  7015  0016AA  D003               	bra	u5180
  7016  0016AC                     u5187:
  7017  0016AC  6EF7               	movwf	tblptrh,c
  7018  0016AE  0008               	tblrd		*
  7019  0016B0  50F5               	movf	tablat,w,c
  7020  0016B2                     u5180:
  7021  0016B2  0900               	iorlw	0
  7022  0016B4  B4D8               	btfsc	status,2,c
  7023  0016B6  0012               	return	
  7024  0016B8  D7DC               	goto	l5055
  7025  0016BA                     __end_of_serialport_write:
  7026                           	opt stack 0
  7027                           tosu	equ	0xFFF
  7028                           tosh	equ	0xFFE
  7029                           tosl	equ	0xFFD
  7030                           pclath	equ	0xFFA
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           intcon	equ	0xFF2
  7038                           indf0	equ	0xFEF
  7039                           postinc0	equ	0xFEE
  7040                           fsr0h	equ	0xFEA
  7041                           fsr0l	equ	0xFE9
  7042                           wreg	equ	0xFE8
  7043                           indf1	equ	0xFE7
  7044                           postinc1	equ	0xFE6
  7045                           postdec1	equ	0xFE5
  7046                           fsr1h	equ	0xFE2
  7047                           fsr1l	equ	0xFE1
  7048                           indf2	equ	0xFDF
  7049                           postinc2	equ	0xFDE
  7050                           postdec2	equ	0xFDD
  7051                           fsr2h	equ	0xFDA
  7052                           fsr2l	equ	0xFD9
  7053                           status	equ	0xFD8
  7054                           
  7055 ;; *************** function _rd_buffer_put *****************
  7056 ;; Defined at:
  7057 ;;		line 153 in file "src/modules/rd_buffer.c"
  7058 ;; Parameters:    Size  Location     Type
  7059 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  7060 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7061 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  7062 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
  7063 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  ind             2   27[BANK0 ] int 
  7066 ;;  mes_rec         2   22[BANK0 ] PTR volatile unsigned ch
  7067 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7068 ;;  sz              2   25[BANK0 ] int 
  7069 ;;  result          1    0        unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      unsigned char 
  7072 ;; Registers used:
  7073 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7074 ;; Tracked objects:
  7075 ;;		On entry : F/0
  7076 ;;		On exit  : F/0
  7077 ;;		Unchanged: FFFFFFF0/0
  7078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7079 ;;      Params:         0       4       0       0       0       0       0
  7080 ;;      Locals:         0       8       0       0       0       0       0
  7081 ;;      Temps:          0       5       0       0       0       0       0
  7082 ;;      Totals:         0      17       0       0       0       0       0
  7083 ;;Total ram usage:       17 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    5
  7086 ;; This function calls:
  7087 ;;		Nothing
  7088 ;; This function is called by:
  7089 ;;		_serialport_write
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text26
  7094  00096C                     __ptext26:
  7095                           	opt stack 0
  7096  00096C                     _rd_buffer_put:
  7097                           	opt stack 21
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;rd_buffer.c: 155: SIZE sz ;
  7101                           ;rd_buffer.c: 156: sz = pbuffer->head.last - pbuffer->head.first;
  7102                           
  7103                           ; BSR set to: 0
  7104  00096C  EE20 F002          	lfsr	2,2
  7105  000970  D894               	call	PL44	;call to abstracted procedure
  7106  000972  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7107  000976  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7108  00097A  CFDE F072          	movff	postinc2,??_rd_buffer_put+2
  7109  00097E  CFDD F073          	movff	postdec2,??_rd_buffer_put+3
  7110  000982  5170               	movf	??_rd_buffer_put& (0+255),w,b
  7111  000984  5D72               	subwf	(??_rd_buffer_put+2)& (0+255),w,b
  7112  000986  6F79               	movwf	rd_buffer_put@sz& (0+255),b
  7113  000988  5171               	movf	(??_rd_buffer_put+1)& (0+255),w,b
  7114  00098A  5973               	subwfb	(??_rd_buffer_put+3)& (0+255),w,b
  7115  00098C  6F7A               	movwf	(rd_buffer_put@sz+1)& (0+255),b
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;rd_buffer.c: 157: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
  7119  00098E  0E01               	movlw	1
  7120  000990  6F78               	movwf	_rd_buffer_put$482& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123  000992  D88C               	call	PL54	;call to abstracted procedure
  7124  000994  64EA               	cpfsgt	fsr0h,c
  7125  000996  D003               	bra	u5017
  7126  000998  6EEA               	movwf	fsr0h,c
  7127  00099A  50EF               	movf	indf0,w,c
  7128  00099C  D003               	bra	u5010
  7129  00099E                     u5017:
  7130  00099E  6EF7               	movwf	tblptrh,c
  7131  0009A0  0008               	tblrd		*
  7132  0009A2  50F5               	movf	tablat,w,c
  7133  0009A4                     u5010:
  7134  0009A4  0A0A               	xorlw	10
  7135  0009A6  E00E               	bz	l4969
  7136  0009A8  0100               	movlb	0	; () banked
  7137  0009AA  D880               	call	PL54	;call to abstracted procedure
  7138  0009AC  64EA               	cpfsgt	fsr0h,c
  7139  0009AE  D003               	bra	u5037
  7140  0009B0  6EEA               	movwf	fsr0h,c
  7141  0009B2  50EF               	movf	indf0,w,c
  7142  0009B4  D003               	bra	u5030
  7143  0009B6                     u5037:
  7144  0009B6  6EF7               	movwf	tblptrh,c
  7145  0009B8  0008               	tblrd		*
  7146  0009BA  50F5               	movf	tablat,w,c
  7147  0009BC                     u5030:
  7148  0009BC  0A0D               	xorlw	13
  7149  0009BE  E002               	bz	l4969
  7150  0009C0  0100               	movlb	0	; () banked
  7151  0009C2  6B78               	clrf	_rd_buffer_put$482& (0+255),b
  7152  0009C4                     l4969:
  7153  0009C4  0100               	movlb	0	; () banked
  7154  0009C6  5178               	movf	_rd_buffer_put$482& (0+255),w,b
  7155  0009C8  13BC               	iorwf	_this_contains_crlf& (0+255),f,b
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;rd_buffer.c: 159: if(sz < 0 ) {
  7159  0009CA  AF7A               	btfss	(rd_buffer_put@sz+1)& (0+255),7,b
  7160  0009CC  D00A               	goto	l288
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;rd_buffer.c: 160: sz += pbuffer->head.size;
  7164  0009CE  EE20 F004          	lfsr	2,4
  7165  0009D2  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7166  0009D4  26D9               	addwf	fsr2l,f,c
  7167  0009D6  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7168  0009D8  22DA               	addwfc	fsr2h,f,c
  7169  0009DA  50DE               	movf	postinc2,w,c
  7170  0009DC  2779               	addwf	rd_buffer_put@sz& (0+255),f,b
  7171  0009DE  50DD               	movf	postdec2,w,c
  7172  0009E0  237A               	addwfc	(rd_buffer_put@sz+1)& (0+255),f,b
  7173  0009E2                     l288:
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;rd_buffer.c: 161: }
  7177                           ;rd_buffer.c: 162: if(sz < (pbuffer->head.size - 1))
  7178  0009E2  EE20 F004          	lfsr	2,4
  7179  0009E6  D859               	call	PL44	;call to abstracted procedure
  7180  0009E8  0EFF               	movlw	255
  7181  0009EA  2570               	addwf	??_rd_buffer_put& (0+255),w,b
  7182  0009EC  6F72               	movwf	(??_rd_buffer_put+2)& (0+255),b
  7183  0009EE  0EFF               	movlw	255
  7184  0009F0  2171               	addwfc	(??_rd_buffer_put+1)& (0+255),w,b
  7185  0009F2  6F73               	movwf	(??_rd_buffer_put+3)& (0+255),b
  7186  0009F4  517A               	movf	(rd_buffer_put@sz+1)& (0+255),w,b
  7187  0009F6  0A80               	xorlw	128
  7188  0009F8  6F74               	movwf	(??_rd_buffer_put+4)& (0+255),b
  7189  0009FA  5172               	movf	(??_rd_buffer_put+2)& (0+255),w,b
  7190  0009FC  5D79               	subwf	rd_buffer_put@sz& (0+255),w,b
  7191  0009FE  5173               	movf	(??_rd_buffer_put+3)& (0+255),w,b
  7192  000A00  0A80               	xorlw	128
  7193  000A02  5974               	subwfb	(??_rd_buffer_put+4)& (0+255),w,b
  7194  000A04  B0D8               	btfsc	status,0,c
  7195  000A06  0012               	return	
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;rd_buffer.c: 163: {
  7199                           ;rd_buffer.c: 164: INT ind = pbuffer->head.last;
  7200  000A08  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7201  000A0C  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7202  000A10  CFDE F07B          	movff	postinc2,rd_buffer_put@ind
  7203  000A14  CFDD F07C          	movff	postdec2,rd_buffer_put@ind+1
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;rd_buffer.c: 165: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
  7207  000A18  C06C  F070         	movff	rd_buffer_put@pbuffer,??_rd_buffer_put
  7208  000A1C  C06D  F071         	movff	rd_buffer_put@pbuffer+1,??_rd_buffer_put+1
  7209  000A20  517B               	movf	rd_buffer_put@ind& (0+255),w,b
  7210  000A22  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7211  000A24  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7212  000A26  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7213  000A28  0E06               	movlw	6
  7214  000A2A  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7215  000A2C  0E00               	movlw	0
  7216  000A2E  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7217  000A30  C070  F076         	movff	??_rd_buffer_put,rd_buffer_put@mes_rec
  7218  000A34  C071  F077         	movff	??_rd_buffer_put+1,rd_buffer_put@mes_rec+1
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;rd_buffer.c: 166: (*mes_rec) = (*prec);
  7222  000A38  C06E  FFF6         	movff	rd_buffer_put@prec,tblptrl
  7223  000A3C  C06F  FFF7         	movff	rd_buffer_put@prec+1,tblptrh
  7224  000A40  6AF8               	clrf	tblptru,c
  7225  000A42  C076  FFD9         	movff	rd_buffer_put@mes_rec,fsr2l
  7226  000A46  C077  FFDA         	movff	rd_buffer_put@mes_rec+1,fsr2h
  7227  000A4A  0E05               	movlw	(high __ramtop+-1)
  7228  000A4C  64F7               	cpfsgt	tblptrh,c
  7229  000A4E  D003               	bra	u5077
  7230  000A50  0008               	tblrd		*
  7231  000A52  50F5               	movf	tablat,w,c
  7232  000A54  D005               	bra	u5070
  7233  000A56                     u5077:
  7234  000A56  CFF6 FFE9          	movff	tblptrl,fsr0l
  7235  000A5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  7236  000A5E  50EF               	movf	indf0,w,c
  7237  000A60                     u5070:
  7238  000A60  6EDF               	movwf	indf2,c
  7239                           
  7240                           ;rd_buffer.c: 167: ind++;
  7241  000A62  0100               	movlb	0	; () banked
  7242  000A64  4B7B               	infsnz	rd_buffer_put@ind& (0+255),f,b
  7243  000A66  2B7C               	incf	(rd_buffer_put@ind+1)& (0+255),f,b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;rd_buffer.c: 169: if(ind == pbuffer->head.size ) {
  7247  000A68  EE20 F004          	lfsr	2,4
  7248  000A6C  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7249  000A6E  26D9               	addwf	fsr2l,f,c
  7250  000A70  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7251  000A72  22DA               	addwfc	fsr2h,f,c
  7252  000A74  52DE               	movf	postinc2,f,c
  7253  000A76  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7254  000A78  18DD               	xorwf	postdec2,w,c
  7255  000A7A  C07B  FFE8         	movff	rd_buffer_put@ind,wreg
  7256  000A7E  B4D8               	btfsc	status,2,c
  7257  000A80  18DF               	xorwf	indf2,w,c
  7258  000A82  E102               	bnz	l4987
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;rd_buffer.c: 170: ind = 0;
  7262  000A84  6B7B               	clrf	rd_buffer_put@ind& (0+255),b
  7263  000A86  6B7C               	clrf	(rd_buffer_put@ind+1)& (0+255),b
  7264  000A88                     l4987:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;rd_buffer.c: 171: }
  7268                           ;rd_buffer.c: 172: pbuffer->head.last = ind;
  7269  000A88  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7270  000A8C  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7271  000A90  C07B  FFDE         	movff	rd_buffer_put@ind,postinc2
  7272  000A94  C07C  FFDD         	movff	rd_buffer_put@ind+1,postdec2
  7273                           
  7274                           ; BSR set to: 0
  7275                           
  7276                           ; BSR set to: 0
  7277  000A98  0012               	return	
  7278  000A9A                     __end_of_rd_buffer_put:
  7279                           	opt stack 0
  7280  000A9A                     PL44:
  7281                           	opt stack 21
  7282  000A9A  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7283  000A9C  26D9               	addwf	fsr2l,f,c
  7284  000A9E  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7285  000AA0  22DA               	addwfc	fsr2h,f,c
  7286  000AA2  CFDE F070          	movff	postinc2,??_rd_buffer_put
  7287  000AA6  CFDD F071          	movff	postdec2,??_rd_buffer_put+1
  7288  000AAA  0012               	return	
  7289  000AAC                     __end_ofPL44:
  7290                           	opt stack 0
  7291  000AAC                     PL54:
  7292                           	opt stack 21
  7293  000AAC  516E               	movf	rd_buffer_put@prec& (0+255),w,b
  7294  000AAE  6EF6               	movwf	tblptrl,c
  7295  000AB0  6EE9               	movwf	fsr0l,c
  7296  000AB2  0E05               	movlw	(high __ramtop+-1)
  7297  000AB4  6EEA               	movwf	fsr0h,c
  7298  000AB6  516F               	movf	(rd_buffer_put@prec+1)& (0+255),w,b
  7299  000AB8  0012               	return	
  7300  000ABA                     __end_ofPL54:
  7301                           	opt stack 0
  7302                           tosu	equ	0xFFF
  7303                           tosh	equ	0xFFE
  7304                           tosl	equ	0xFFD
  7305                           pclath	equ	0xFFA
  7306                           tblptru	equ	0xFF8
  7307                           tblptrh	equ	0xFF7
  7308                           tblptrl	equ	0xFF6
  7309                           tablat	equ	0xFF5
  7310                           prodh	equ	0xFF4
  7311                           prodl	equ	0xFF3
  7312                           intcon	equ	0xFF2
  7313                           indf0	equ	0xFEF
  7314                           postinc0	equ	0xFEE
  7315                           fsr0h	equ	0xFEA
  7316                           fsr0l	equ	0xFE9
  7317                           wreg	equ	0xFE8
  7318                           indf1	equ	0xFE7
  7319                           postinc1	equ	0xFE6
  7320                           postdec1	equ	0xFE5
  7321                           fsr1h	equ	0xFE2
  7322                           fsr1l	equ	0xFE1
  7323                           indf2	equ	0xFDF
  7324                           postinc2	equ	0xFDE
  7325                           postdec2	equ	0xFDD
  7326                           fsr2h	equ	0xFDA
  7327                           fsr2l	equ	0xFD9
  7328                           status	equ	0xFD8
  7329                           
  7330 ;; *************** function _syntax_get_text *****************
  7331 ;; Defined at:
  7332 ;;		line 194 in file "src/modules/syntax.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  2    wreg      PTR const unsigned char 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2
  7341 ;; Tracked objects:
  7342 ;;		On entry : F/0
  7343 ;;		On exit  : F/3
  7344 ;;		Unchanged: FFFFFFF0/0
  7345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7346 ;;      Params:         0       0       0       0       0       0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    5
  7353 ;; This function calls:
  7354 ;;		Nothing
  7355 ;; This function is called by:
  7356 ;;		_set_parameter
  7357 ;;		_get_parameter
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text27
  7362  001A4A                     __ptext27:
  7363                           	opt stack 0
  7364  001A4A                     _syntax_get_text:
  7365                           	opt stack 21
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;syntax.c: 195: return parameter_text;
  7369                           
  7370                           ; BSR set to: 0
  7371  001A4A  0103               	movlb	3	; () banked
  7372  001A4C  0E03               	movlw	high _parameter_text
  7373  001A4E  6E02               	movwf	?_syntax_get_text+1,c
  7374  001A50  0E00               	movlw	low _parameter_text
  7375  001A52  6E01               	movwf	?_syntax_get_text,c
  7376                           
  7377                           ; BSR set to: 3
  7378  001A54  0012               	return	
  7379  001A56                     __end_of_syntax_get_text:
  7380                           	opt stack 0
  7381                           tosu	equ	0xFFF
  7382                           tosh	equ	0xFFE
  7383                           tosl	equ	0xFFD
  7384                           pclath	equ	0xFFA
  7385                           tblptru	equ	0xFF8
  7386                           tblptrh	equ	0xFF7
  7387                           tblptrl	equ	0xFF6
  7388                           tablat	equ	0xFF5
  7389                           prodh	equ	0xFF4
  7390                           prodl	equ	0xFF3
  7391                           intcon	equ	0xFF2
  7392                           indf0	equ	0xFEF
  7393                           postinc0	equ	0xFEE
  7394                           fsr0h	equ	0xFEA
  7395                           fsr0l	equ	0xFE9
  7396                           wreg	equ	0xFE8
  7397                           indf1	equ	0xFE7
  7398                           postinc1	equ	0xFE6
  7399                           postdec1	equ	0xFE5
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _startup *****************
  7410 ;; Defined at:
  7411 ;;		line 16 in file "src/startup/startup.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  result          1   19[BANK0 ] enum E3388
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      enum E3388
  7418 ;; Registers used:
  7419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : F/0
  7423 ;;		Unchanged: FFFFFFF0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7425 ;;      Params:         0       0       0       0       0       0       0
  7426 ;;      Locals:         0       1       0       0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0
  7428 ;;      Totals:         0       1       0       0       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    8
  7432 ;; This function calls:
  7433 ;;		_gpio_init
  7434 ;;		_sysclk_init
  7435 ;;		_adc_init
  7436 ;;		_uart_init
  7437 ;;		_uart_puts
  7438 ;;		_serialport_startup
  7439 ;; This function is called by:
  7440 ;;		_main
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text28
  7445  001702                     __ptext28:
  7446                           	opt stack 0
  7447  001702                     _startup:
  7448                           	opt stack 22
  7449                           
  7450                           ;startup.c: 17: ResultSuccess_t result = RESULT_FAIL;
  7451                           
  7452                           ; BSR set to: 3
  7453  001702  0100               	movlb	0	; () banked
  7454  001704  6B73               	clrf	startup@result& (0+255),b
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;startup.c: 18: gpio_init();
  7458  001706  EC03  F00D         	call	_gpio_init	;wreg free
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;startup.c: 19: sysclk_init();
  7462  00170A  EC38  F00D         	call	_sysclk_init	;wreg free
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;startup.c: 20: adc_init();
  7466  00170E  ECE7  F00C         	call	_adc_init	;wreg free
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;startup.c: 21: uart_init();
  7470  001712  EC9E  F00C         	call	_uart_init	;wreg free
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;startup.c: 22: events[(5)] = (PEVENT)serialport_task;
  7474  001716  0E14               	movlw	high _serialport_task
  7475  001718  6FB2               	movwf	(_events+11)& (0+255),b	;volatile
  7476  00171A  0E06               	movlw	low _serialport_task
  7477  00171C  6FB1               	movwf	(_events+10)& (0+255),b	;volatile
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;startup.c: 23: events[(2)] = (PEVENT)detection_task;
  7481  00171E  0E13               	movlw	high _detection_task
  7482  001720  6FAC               	movwf	(_events+5)& (0+255),b	;volatile
  7483  001722  0E90               	movlw	low _detection_task
  7484  001724  6FAB               	movwf	(_events+4)& (0+255),b	;volatile
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;startup.c: 25: uart_puts("hello",100);
  7488  001726  0E7F               	movlw	high STR_32
  7489  001728  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  7490  00172A  0EE9               	movlw	low STR_32
  7491  00172C  6F6D               	movwf	?_uart_puts& (0+255),b
  7492  00172E  6B70               	clrf	(?_uart_puts+3)& (0+255),b
  7493  001730  0E64               	movlw	100
  7494  001732  6F6F               	movwf	(?_uart_puts+2)& (0+255),b
  7495  001734  EC25  F00C         	call	_uart_puts	;wreg free
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;startup.c: 27: if(!serialport_startup()) break;
  7499  001738  EC42  F00C         	call	_serialport_startup	;wreg free
  7500  00173C  0900               	iorlw	0
  7501  00173E  E002               	bz	l963
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;startup.c: 31: result = RESULT_SUCCESS;
  7505  001740  0E01               	movlw	1
  7506  001742  6F73               	movwf	startup@result& (0+255),b
  7507  001744                     l963:
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;startup.c: 32: }while(0);
  7511                           ;startup.c: 33: return result;
  7512  001744  5173               	movf	startup@result& (0+255),w,b
  7513                           
  7514                           ; BSR set to: 0
  7515  001746  0012               	return	
  7516  001748                     __end_of_startup:
  7517                           	opt stack 0
  7518                           tosu	equ	0xFFF
  7519                           tosh	equ	0xFFE
  7520                           tosl	equ	0xFFD
  7521                           pclath	equ	0xFFA
  7522                           tblptru	equ	0xFF8
  7523                           tblptrh	equ	0xFF7
  7524                           tblptrl	equ	0xFF6
  7525                           tablat	equ	0xFF5
  7526                           prodh	equ	0xFF4
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           indf0	equ	0xFEF
  7530                           postinc0	equ	0xFEE
  7531                           fsr0h	equ	0xFEA
  7532                           fsr0l	equ	0xFE9
  7533                           wreg	equ	0xFE8
  7534                           indf1	equ	0xFE7
  7535                           postinc1	equ	0xFE6
  7536                           postdec1	equ	0xFE5
  7537                           fsr1h	equ	0xFE2
  7538                           fsr1l	equ	0xFE1
  7539                           indf2	equ	0xFDF
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           fsr2h	equ	0xFDA
  7543                           fsr2l	equ	0xFD9
  7544                           status	equ	0xFD8
  7545                           
  7546 ;; *************** function _sysclk_init *****************
  7547 ;; Defined at:
  7548 ;;		line 7 in file "src/drivers/sysclk.c"
  7549 ;; Parameters:    Size  Location     Type
  7550 ;;		None
  7551 ;; Auto vars:     Size  Location     Type
  7552 ;;		None
  7553 ;; Return value:  Size  Location     Type
  7554 ;;		None               void
  7555 ;; Registers used:
  7556 ;;		wreg, status,2, status,0, cstack
  7557 ;; Tracked objects:
  7558 ;;		On entry : F/0
  7559 ;;		On exit  : F/0
  7560 ;;		Unchanged: FFFFFFF0/0
  7561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7562 ;;      Params:         0       0       0       0       0       0       0
  7563 ;;      Locals:         0       0       0       0       0       0       0
  7564 ;;      Temps:          0       0       0       0       0       0       0
  7565 ;;      Totals:         0       0       0       0       0       0       0
  7566 ;;Total ram usage:        0 bytes
  7567 ;; Hardware stack levels used:    1
  7568 ;; Hardware stack levels required when called:    6
  7569 ;; This function calls:
  7570 ;;		_sysclk_setup_intosc
  7571 ;; This function is called by:
  7572 ;;		_startup
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           	psect	text29
  7577  001A70                     __ptext29:
  7578                           	opt stack 0
  7579  001A70                     _sysclk_init:
  7580                           	opt stack 23
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;sysclk.c: 8: sysclk_setup_intosc(INTOSC_4MHZ);
  7584                           
  7585                           ; BSR set to: 0
  7586  001A70  0E05               	movlw	5
  7587  001A72  EF15  F00D         	goto	_sysclk_setup_intosc
  7588  001A76                     __end_of_sysclk_init:
  7589                           	opt stack 0
  7590                           tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclath	equ	0xFFA
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           indf0	equ	0xFEF
  7602                           postinc0	equ	0xFEE
  7603                           fsr0h	equ	0xFEA
  7604                           fsr0l	equ	0xFE9
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postinc1	equ	0xFE6
  7608                           postdec1	equ	0xFE5
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _sysclk_setup_intosc *****************
  7619 ;; Defined at:
  7620 ;;		line 12 in file "src/drivers/sysclk.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;  frequency       1    wreg     enum E1
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;  frequency       1   12[BANK0 ] enum E1
  7625 ;; Return value:  Size  Location     Type
  7626 ;;		None               void
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0
  7629 ;; Tracked objects:
  7630 ;;		On entry : F/0
  7631 ;;		On exit  : F/0
  7632 ;;		Unchanged: FFFFFFF0/0
  7633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7634 ;;      Params:         0       0       0       0       0       0       0
  7635 ;;      Locals:         0       1       0       0       0       0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0
  7637 ;;      Totals:         0       1       0       0       0       0       0
  7638 ;;Total ram usage:        1 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    5
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_sysclk_init
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text30
  7649  001A2A                     __ptext30:
  7650                           	opt stack 0
  7651  001A2A                     _sysclk_setup_intosc:
  7652                           	opt stack 23
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;sysclk_setup_intosc@frequency stored from wreg
  7656  001A2A  CFE8 F06C          	movff	wreg,sysclk_setup_intosc@frequency
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;sysclk.c: 13: OSCCON &= ~(0x07<<4);
  7660  001A2E  0E8F               	movlw	143
  7661  001A30  16D3               	andwf	4051,f,c	;volatile
  7662                           
  7663                           ;sysclk.c: 14: OSCCON |= frequency<<4;
  7664  001A32  396C               	swapf	sysclk_setup_intosc@frequency& (0+255),w,b
  7665  001A34  0BF0               	andlw	240
  7666  001A36  12D3               	iorwf	4051,f,c	;volatile
  7667                           
  7668                           ; BSR set to: 0
  7669  001A38  0012               	return	
  7670  001A3A                     __end_of_sysclk_setup_intosc:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           indf0	equ	0xFEF
  7684                           postinc0	equ	0xFEE
  7685                           fsr0h	equ	0xFEA
  7686                           fsr0l	equ	0xFE9
  7687                           wreg	equ	0xFE8
  7688                           indf1	equ	0xFE7
  7689                           postinc1	equ	0xFE6
  7690                           postdec1	equ	0xFE5
  7691                           fsr1h	equ	0xFE2
  7692                           fsr1l	equ	0xFE1
  7693                           indf2	equ	0xFDF
  7694                           postinc2	equ	0xFDE
  7695                           postdec2	equ	0xFDD
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _uart_init *****************
  7701 ;; Defined at:
  7702 ;;		line 5 in file "src/drivers/uart.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;		None               void
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : F/0
  7713 ;;		On exit  : F/0
  7714 ;;		Unchanged: FFFFFFF0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7716 ;;      Params:         0       0       0       0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    6
  7723 ;; This function calls:
  7724 ;;		_uart_set_baudrate
  7725 ;; This function is called by:
  7726 ;;		_startup
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text31
  7731  00193C                     __ptext31:
  7732                           	opt stack 0
  7733  00193C                     _uart_init:
  7734                           	opt stack 23
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;uart.c: 6: TXSTA = 0b00100110;
  7738                           
  7739                           ; BSR set to: 0
  7740  00193C  0E26               	movlw	38
  7741  00193E  6EAC               	movwf	4012,c	;volatile
  7742                           
  7743                           ;uart.c: 7: RCSTA = 0b10010000;
  7744  001940  0E90               	movlw	144
  7745  001942  6EAB               	movwf	4011,c	;volatile
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;uart.c: 8: BAUDCTL = 0b00000000;
  7749  001944  6AB8               	clrf	4024,c	;volatile
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;uart.c: 9: BAUDCON = 0b00000000;
  7753  001946  6AB8               	clrf	4024,c	;volatile
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;uart.c: 10: uart_set_baudrate(19200);
  7757  001948  6B6C               	clrf	?_uart_set_baudrate& (0+255),b
  7758  00194A  0E4B               	movlw	75
  7759  00194C  6F6D               	movwf	(?_uart_set_baudrate+1)& (0+255),b
  7760  00194E  0E00               	movlw	0
  7761  001950  6B6E               	clrf	(?_uart_set_baudrate+2)& (0+255),b
  7762  001952  EC3B  F00D         	call	_uart_set_baudrate	;wreg free
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;uart.c: 12: PIE1bits.RCIE=1;
  7766  001956  8A9D               	bsf	3997,5,c	;volatile
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;uart.c: 13: PIR1bits.RCIF=1;
  7770  001958  8A9E               	bsf	3998,5,c	;volatile
  7771                           
  7772                           ; BSR set to: 0
  7773  00195A  0012               	return	
  7774  00195C                     __end_of_uart_init:
  7775                           	opt stack 0
  7776                           tosu	equ	0xFFF
  7777                           tosh	equ	0xFFE
  7778                           tosl	equ	0xFFD
  7779                           pclath	equ	0xFFA
  7780                           tblptru	equ	0xFF8
  7781                           tblptrh	equ	0xFF7
  7782                           tblptrl	equ	0xFF6
  7783                           tablat	equ	0xFF5
  7784                           prodh	equ	0xFF4
  7785                           prodl	equ	0xFF3
  7786                           intcon	equ	0xFF2
  7787                           indf0	equ	0xFEF
  7788                           postinc0	equ	0xFEE
  7789                           fsr0h	equ	0xFEA
  7790                           fsr0l	equ	0xFE9
  7791                           wreg	equ	0xFE8
  7792                           indf1	equ	0xFE7
  7793                           postinc1	equ	0xFE6
  7794                           postdec1	equ	0xFE5
  7795                           fsr1h	equ	0xFE2
  7796                           fsr1l	equ	0xFE1
  7797                           indf2	equ	0xFDF
  7798                           postinc2	equ	0xFDE
  7799                           postdec2	equ	0xFDD
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function _uart_set_baudrate *****************
  7805 ;; Defined at:
  7806 ;;		line 17 in file "src/drivers/uart.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;  baudrate        3   12[BANK0 ] unsigned um
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;		None
  7811 ;; Return value:  Size  Location     Type
  7812 ;;		None               void
  7813 ;; Registers used:
  7814 ;;		wreg, status,2
  7815 ;; Tracked objects:
  7816 ;;		On entry : F/0
  7817 ;;		On exit  : F/0
  7818 ;;		Unchanged: FFFFFFF0/0
  7819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7820 ;;      Params:         0       3       0       0       0       0       0
  7821 ;;      Locals:         0       0       0       0       0       0       0
  7822 ;;      Temps:          0       0       0       0       0       0       0
  7823 ;;      Totals:         0       3       0       0       0       0       0
  7824 ;;Total ram usage:        3 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    5
  7827 ;; This function calls:
  7828 ;;		Nothing
  7829 ;; This function is called by:
  7830 ;;		_uart_init
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text32
  7835  001A76                     __ptext32:
  7836                           	opt stack 0
  7837  001A76                     _uart_set_baudrate:
  7838                           	opt stack 23
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;uart.c: 19: SPBRG = 12;
  7842                           
  7843                           ; BSR set to: 0
  7844  001A76  0E0C               	movlw	12
  7845  001A78  6EAF               	movwf	4015,c	;volatile
  7846                           
  7847                           ; BSR set to: 0
  7848  001A7A  0C0C               	retlw	12
  7849  001A7C                     __end_of_uart_set_baudrate:
  7850                           	opt stack 0
  7851                           tosu	equ	0xFFF
  7852                           tosh	equ	0xFFE
  7853                           tosl	equ	0xFFD
  7854                           pclath	equ	0xFFA
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           indf0	equ	0xFEF
  7863                           postinc0	equ	0xFEE
  7864                           fsr0h	equ	0xFEA
  7865                           fsr0l	equ	0xFE9
  7866                           wreg	equ	0xFE8
  7867                           indf1	equ	0xFE7
  7868                           postinc1	equ	0xFE6
  7869                           postdec1	equ	0xFE5
  7870                           fsr1h	equ	0xFE2
  7871                           fsr1l	equ	0xFE1
  7872                           indf2	equ	0xFDF
  7873                           postinc2	equ	0xFDE
  7874                           postdec2	equ	0xFDD
  7875                           fsr2h	equ	0xFDA
  7876                           fsr2l	equ	0xFD9
  7877                           status	equ	0xFD8
  7878                           
  7879 ;; *************** function _uart_puts *****************
  7880 ;; Defined at:
  7881 ;;		line 31 in file "src/drivers/uart.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  pstr            2   13[BANK0 ] PTR const unsigned char 
  7884 ;;		 -> STR_32(6), 
  7885 ;;  size            2   15[BANK0 ] int 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;		None
  7888 ;; Return value:  Size  Location     Type
  7889 ;;		None               void
  7890 ;; Registers used:
  7891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  7892 ;; Tracked objects:
  7893 ;;		On entry : F/0
  7894 ;;		On exit  : F/0
  7895 ;;		Unchanged: FFFFFFF0/0
  7896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7897 ;;      Params:         0       4       0       0       0       0       0
  7898 ;;      Locals:         0       0       0       0       0       0       0
  7899 ;;      Temps:          0       0       0       0       0       0       0
  7900 ;;      Totals:         0       4       0       0       0       0       0
  7901 ;;Total ram usage:        4 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; Hardware stack levels required when called:    7
  7904 ;; This function calls:
  7905 ;;		_uart_putc
  7906 ;; This function is called by:
  7907 ;;		_startup
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text33
  7912  00184A                     __ptext33:
  7913                           	opt stack 0
  7914  00184A                     _uart_puts:
  7915                           	opt stack 22
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;uart.c: 32: while(size-- && *pstr)
  7919                           
  7920                           ; BSR set to: 0
  7921  00184A  D00A               	goto	l2825
  7922  00184C                     l2821:
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;uart.c: 33: {
  7926                           ;uart.c: 34: uart_putc(*pstr);
  7927  00184C  C06D  FFF6         	movff	uart_puts@pstr,tblptrl
  7928  001850  C06E  FFF7         	movff	uart_puts@pstr+1,tblptrh
  7929  001854  0008               	tblrd		*
  7930  001856  50F5               	movf	tablat,w,c
  7931  001858  ECFA  F00C         	call	_uart_putc
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;uart.c: 35: pstr++;
  7935  00185C  4B6D               	infsnz	uart_puts@pstr& (0+255),f,b
  7936  00185E  2B6E               	incf	(uart_puts@pstr+1)& (0+255),f,b
  7937  001860                     l2825:
  7938                           
  7939                           ; BSR set to: 0
  7940  001860  076F               	decf	uart_puts@size& (0+255),f,b
  7941  001862  A0D8               	btfss	status,0,c
  7942  001864  0770               	decf	(uart_puts@size+1)& (0+255),f,b
  7943  001866  0100               	movlb	0	; () banked
  7944  001868  296F               	incf	uart_puts@size& (0+255),w,b
  7945  00186A  B4D8               	btfsc	status,2,c
  7946  00186C  2970               	incf	(uart_puts@size+1)& (0+255),w,b
  7947  00186E  B4D8               	btfsc	status,2,c
  7948  001870  0012               	return	
  7949                           
  7950                           ; BSR set to: 0
  7951  001872  C06D  FFF6         	movff	uart_puts@pstr,tblptrl
  7952  001876  C06E  FFF7         	movff	uart_puts@pstr+1,tblptrh
  7953  00187A  0008               	tblrd		*
  7954  00187C  50F5               	movf	tablat,w,c
  7955  00187E  B4D8               	btfsc	status,2,c
  7956  001880  0012               	return	
  7957  001882  D7E4               	goto	l2821
  7958  001884                     __end_of_uart_puts:
  7959                           	opt stack 0
  7960                           tosu	equ	0xFFF
  7961                           tosh	equ	0xFFE
  7962                           tosl	equ	0xFFD
  7963                           pclath	equ	0xFFA
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           indf0	equ	0xFEF
  7972                           postinc0	equ	0xFEE
  7973                           fsr0h	equ	0xFEA
  7974                           fsr0l	equ	0xFE9
  7975                           wreg	equ	0xFE8
  7976                           indf1	equ	0xFE7
  7977                           postinc1	equ	0xFE6
  7978                           postdec1	equ	0xFE5
  7979                           fsr1h	equ	0xFE2
  7980                           fsr1l	equ	0xFE1
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function _uart_putc *****************
  7989 ;; Defined at:
  7990 ;;		line 40 in file "src/drivers/uart.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  byte            1    wreg     unsigned char 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  byte            1   12[BANK0 ] unsigned char 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;		None               void
  7997 ;; Registers used:
  7998 ;;		wreg, status,2, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : F/0
  8001 ;;		On exit  : F/0
  8002 ;;		Unchanged: FFFFFFF0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8004 ;;      Params:         0       0       0       0       0       0       0
  8005 ;;      Locals:         0       1       0       0       0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0
  8007 ;;      Totals:         0       1       0       0       0       0       0
  8008 ;;Total ram usage:        1 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    6
  8011 ;; This function calls:
  8012 ;;		_uart_byte_sent
  8013 ;; This function is called by:
  8014 ;;		_uart_puts
  8015 ;;		_serialport_task
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text34
  8020  0019F4                     __ptext34:
  8021                           	opt stack 0
  8022  0019F4                     _uart_putc:
  8023                           	opt stack 23
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;uart_putc@byte stored from wreg
  8027  0019F4  CFE8 F06C          	movff	wreg,uart_putc@byte
  8028  0019F8                     l2831:
  8029                           
  8030                           ; BSR set to: 0
  8031  0019F8  EC30  F00D         	call	_uart_byte_sent	;wreg free
  8032  0019FC  0900               	iorlw	0
  8033  0019FE  E0FC               	bz	l2831
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;uart.c: 42: TXREG = byte;
  8037  001A00  C06C  FFAD         	movff	uart_putc@byte,4013	;volatile
  8038                           
  8039                           ; BSR set to: 0
  8040  001A04  0012               	return	
  8041  001A06                     __end_of_uart_putc:
  8042                           	opt stack 0
  8043                           tosu	equ	0xFFF
  8044                           tosh	equ	0xFFE
  8045                           tosl	equ	0xFFD
  8046                           pclath	equ	0xFFA
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           intcon	equ	0xFF2
  8054                           indf0	equ	0xFEF
  8055                           postinc0	equ	0xFEE
  8056                           fsr0h	equ	0xFEA
  8057                           fsr0l	equ	0xFE9
  8058                           wreg	equ	0xFE8
  8059                           indf1	equ	0xFE7
  8060                           postinc1	equ	0xFE6
  8061                           postdec1	equ	0xFE5
  8062                           fsr1h	equ	0xFE2
  8063                           fsr1l	equ	0xFE1
  8064                           indf2	equ	0xFDF
  8065                           postinc2	equ	0xFDE
  8066                           postdec2	equ	0xFDD
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function _uart_byte_sent *****************
  8072 ;; Defined at:
  8073 ;;		line 46 in file "src/drivers/uart.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;		None
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;		None
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      unsigned char 
  8080 ;; Registers used:
  8081 ;;		wreg
  8082 ;; Tracked objects:
  8083 ;;		On entry : F/0
  8084 ;;		On exit  : F/0
  8085 ;;		Unchanged: FFFFFFF0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8087 ;;      Params:         0       0       0       0       0       0       0
  8088 ;;      Locals:         0       0       0       0       0       0       0
  8089 ;;      Temps:          0       0       0       0       0       0       0
  8090 ;;      Totals:         0       0       0       0       0       0       0
  8091 ;;Total ram usage:        0 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    5
  8094 ;; This function calls:
  8095 ;;		Nothing
  8096 ;; This function is called by:
  8097 ;;		_uart_putc
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text35
  8102  001A60                     __ptext35:
  8103                           	opt stack 0
  8104  001A60                     _uart_byte_sent:
  8105                           	opt stack 23
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;uart.c: 47: return TXIF;
  8109                           
  8110                           ; BSR set to: 0
  8111  001A60  0E00               	movlw	0
  8112  001A62  B89E               	btfsc	3998,4,c	;volatile
  8113  001A64  0E01               	movlw	1
  8114                           
  8115                           ; BSR set to: 0
  8116  001A66  0012               	return	
  8117  001A68                     __end_of_uart_byte_sent:
  8118                           	opt stack 0
  8119                           tosu	equ	0xFFF
  8120                           tosh	equ	0xFFE
  8121                           tosl	equ	0xFFD
  8122                           pclath	equ	0xFFA
  8123                           tblptru	equ	0xFF8
  8124                           tblptrh	equ	0xFF7
  8125                           tblptrl	equ	0xFF6
  8126                           tablat	equ	0xFF5
  8127                           prodh	equ	0xFF4
  8128                           prodl	equ	0xFF3
  8129                           intcon	equ	0xFF2
  8130                           indf0	equ	0xFEF
  8131                           postinc0	equ	0xFEE
  8132                           fsr0h	equ	0xFEA
  8133                           fsr0l	equ	0xFE9
  8134                           wreg	equ	0xFE8
  8135                           indf1	equ	0xFE7
  8136                           postinc1	equ	0xFE6
  8137                           postdec1	equ	0xFE5
  8138                           fsr1h	equ	0xFE2
  8139                           fsr1l	equ	0xFE1
  8140                           indf2	equ	0xFDF
  8141                           postinc2	equ	0xFDE
  8142                           postdec2	equ	0xFDD
  8143                           fsr2h	equ	0xFDA
  8144                           fsr2l	equ	0xFD9
  8145                           status	equ	0xFD8
  8146                           
  8147 ;; *************** function _adc_init *****************
  8148 ;; Defined at:
  8149 ;;		line 5 in file "src/drivers/adc.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;		None
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;		None
  8154 ;; Return value:  Size  Location     Type
  8155 ;;		None               void
  8156 ;; Registers used:
  8157 ;;		wreg, status,2
  8158 ;; Tracked objects:
  8159 ;;		On entry : F/0
  8160 ;;		On exit  : F/0
  8161 ;;		Unchanged: FFFFFFF0/0
  8162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8163 ;;      Params:         0       0       0       0       0       0       0
  8164 ;;      Locals:         0       0       0       0       0       0       0
  8165 ;;      Temps:          0       0       0       0       0       0       0
  8166 ;;      Totals:         0       0       0       0       0       0       0
  8167 ;;Total ram usage:        0 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    5
  8170 ;; This function calls:
  8171 ;;		Nothing
  8172 ;; This function is called by:
  8173 ;;		_startup
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           	psect	text36
  8178  0019CE                     __ptext36:
  8179                           	opt stack 0
  8180  0019CE                     _adc_init:
  8181                           	opt stack 24
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;adc.c: 6: ADCON0 = 0b00000001;
  8185                           
  8186                           ; BSR set to: 0
  8187  0019CE  0E01               	movlw	1
  8188  0019D0  6EC2               	movwf	4034,c	;volatile
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;adc.c: 7: ADCON1 = 0b00000000;
  8192  0019D2  6AC1               	clrf	4033,c	;volatile
  8193                           
  8194                           ;adc.c: 8: ADCON2 = 0b00010110;
  8195  0019D4  0E16               	movlw	22
  8196  0019D6  6EC0               	movwf	4032,c	;volatile
  8197                           
  8198                           ;adc.c: 9: ANSEL = 0b01100011;
  8199  0019D8  0E63               	movlw	99
  8200  0019DA  6E7E               	movwf	3966,c	;volatile
  8201                           
  8202                           ; BSR set to: 0
  8203                           ;adc.c: 10: ANSELH = 0;
  8204  0019DC  6A7F               	clrf	3967,c	;volatile
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;adc.c: 11: PIE1bits.ADIE = 1;
  8208  0019DE  8C9D               	bsf	3997,6,c	;volatile
  8209                           
  8210                           ; BSR set to: 0
  8211  0019E0  0012               	return	
  8212  0019E2                     __end_of_adc_init:
  8213                           	opt stack 0
  8214                           tosu	equ	0xFFF
  8215                           tosh	equ	0xFFE
  8216                           tosl	equ	0xFFD
  8217                           pclath	equ	0xFFA
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           intcon	equ	0xFF2
  8225                           indf0	equ	0xFEF
  8226                           postinc0	equ	0xFEE
  8227                           fsr0h	equ	0xFEA
  8228                           fsr0l	equ	0xFE9
  8229                           wreg	equ	0xFE8
  8230                           indf1	equ	0xFE7
  8231                           postinc1	equ	0xFE6
  8232                           postdec1	equ	0xFE5
  8233                           fsr1h	equ	0xFE2
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           postdec2	equ	0xFDD
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           
  8242 ;; *************** function _gpio_init *****************
  8243 ;; Defined at:
  8244 ;;		line 4 in file "src/drivers/gpio.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;		None
  8247 ;; Auto vars:     Size  Location     Type
  8248 ;;		None
  8249 ;; Return value:  Size  Location     Type
  8250 ;;		None               void
  8251 ;; Registers used:
  8252 ;;		wreg, status,2
  8253 ;; Tracked objects:
  8254 ;;		On entry : F/0
  8255 ;;		On exit  : F/0
  8256 ;;		Unchanged: FFFFFFF0/0
  8257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8258 ;;      Params:         0       0       0       0       0       0       0
  8259 ;;      Locals:         0       0       0       0       0       0       0
  8260 ;;      Temps:          0       0       0       0       0       0       0
  8261 ;;      Totals:         0       0       0       0       0       0       0
  8262 ;;Total ram usage:        0 bytes
  8263 ;; Hardware stack levels used:    1
  8264 ;; Hardware stack levels required when called:    5
  8265 ;; This function calls:
  8266 ;;		Nothing
  8267 ;; This function is called by:
  8268 ;;		_startup
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           	psect	text37
  8273  001A06                     __ptext37:
  8274                           	opt stack 0
  8275  001A06                     _gpio_init:
  8276                           	opt stack 24
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;gpio.c: 7: TRISA=0xff;
  8280                           
  8281                           ; BSR set to: 0
  8282  001A06  6892               	setf	3986,c	;volatile
  8283                           
  8284                           ;gpio.c: 8: TRISB=0xff;
  8285  001A08  6893               	setf	3987,c	;volatile
  8286                           
  8287                           ;gpio.c: 9: ANSELH=0;
  8288  001A0A  6A7F               	clrf	3967,c	;volatile
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;gpio.c: 10: TRISC=0xc1;
  8292  001A0C  0EC1               	movlw	193
  8293  001A0E  6E94               	movwf	3988,c	;volatile
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;gpio.c: 11: TRISD=0x00;
  8297  001A10  6A95               	clrf	3989,c	;volatile
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;gpio.c: 12: LATC=0;
  8301  001A12  6A8B               	clrf	3979,c	;volatile
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;gpio.c: 13: LATD=0;
  8305  001A14  6A8C               	clrf	3980,c	;volatile
  8306                           
  8307                           ; BSR set to: 0
  8308  001A16  0012               	return	
  8309  001A18                     __end_of_gpio_init:
  8310                           	opt stack 0
  8311                           tosu	equ	0xFFF
  8312                           tosh	equ	0xFFE
  8313                           tosl	equ	0xFFD
  8314                           pclath	equ	0xFFA
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodh	equ	0xFF4
  8320                           prodl	equ	0xFF3
  8321                           intcon	equ	0xFF2
  8322                           indf0	equ	0xFEF
  8323                           postinc0	equ	0xFEE
  8324                           fsr0h	equ	0xFEA
  8325                           fsr0l	equ	0xFE9
  8326                           wreg	equ	0xFE8
  8327                           indf1	equ	0xFE7
  8328                           postinc1	equ	0xFE6
  8329                           postdec1	equ	0xFE5
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _serialport_startup *****************
  8340 ;; Defined at:
  8341 ;;		line 16 in file "src/modules/serialport.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  result          1   18[BANK0 ] enum E3388
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      enum E3388
  8348 ;; Registers used:
  8349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : F/0
  8352 ;;		On exit  : F/0
  8353 ;;		Unchanged: FFFFFFF0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8355 ;;      Params:         0       0       0       0       0       0       0
  8356 ;;      Locals:         0       1       0       0       0       0       0
  8357 ;;      Temps:          0       1       0       0       0       0       0
  8358 ;;      Totals:         0       2       0       0       0       0       0
  8359 ;;Total ram usage:        2 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    6
  8362 ;; This function calls:
  8363 ;;		_rd_buffer_init
  8364 ;; This function is called by:
  8365 ;;		_startup
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text38
  8370  001884                     __ptext38:
  8371                           	opt stack 0
  8372  001884                     _serialport_startup:
  8373                           	opt stack 23
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;serialport.c: 18: result = (ResultSuccess_t) rd_buffer_init(&g_rx_buffer, ((100)))
  8377                           ;serialport.c: 19: | (ResultSuccess_t) rd_buffer_init(&g_tx_buffer, ((100)));
  8378                           
  8379                           ; BSR set to: 0
  8380                           
  8381                           ; BSR set to: 0
  8382  001884  0E01               	movlw	high _g_tx_buffer
  8383  001886  0100               	movlb	0	; () banked
  8384  001888  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8385  00188A  0E00               	movlw	low _g_tx_buffer
  8386  00188C  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8387  00188E  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8388  001890  0E64               	movlw	100
  8389  001892  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8390  001894  ECC7  F00B         	call	_rd_buffer_init	;wreg free
  8391  001898  6F71               	movwf	??_serialport_startup& (0+255),b
  8392  00189A  0E02               	movlw	high _g_rx_buffer
  8393  00189C  0100               	movlb	0	; () banked
  8394  00189E  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8395  0018A0  0E7F               	movlw	low _g_rx_buffer
  8396  0018A2  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8397  0018A4  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8398  0018A6  0E64               	movlw	100
  8399  0018A8  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8400  0018AA  ECC7  F00B         	call	_rd_buffer_init	;wreg free
  8401  0018AE  1171               	iorwf	??_serialport_startup& (0+255),w,b
  8402  0018B0  6F72               	movwf	serialport_startup@result& (0+255),b
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;serialport.c: 20: return result;
  8406  0018B2  5172               	movf	serialport_startup@result& (0+255),w,b
  8407                           
  8408                           ; BSR set to: 0
  8409  0018B4  0012               	return	
  8410  0018B6                     __end_of_serialport_startup:
  8411                           	opt stack 0
  8412                           tosu	equ	0xFFF
  8413                           tosh	equ	0xFFE
  8414                           tosl	equ	0xFFD
  8415                           pclath	equ	0xFFA
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           intcon	equ	0xFF2
  8423                           indf0	equ	0xFEF
  8424                           postinc0	equ	0xFEE
  8425                           fsr0h	equ	0xFEA
  8426                           fsr0l	equ	0xFE9
  8427                           wreg	equ	0xFE8
  8428                           indf1	equ	0xFE7
  8429                           postinc1	equ	0xFE6
  8430                           postdec1	equ	0xFE5
  8431                           fsr1h	equ	0xFE2
  8432                           fsr1l	equ	0xFE1
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           postdec2	equ	0xFDD
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function _rd_buffer_init *****************
  8441 ;; Defined at:
  8442 ;;		line 16 in file "src/modules/rd_buffer.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  8445 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  8446 ;;  size            2   14[BANK0 ] int 
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  result          1   16[BANK0 ] unsigned char 
  8449 ;; Return value:  Size  Location     Type
  8450 ;;                  1    wreg      unsigned char 
  8451 ;; Registers used:
  8452 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8453 ;; Tracked objects:
  8454 ;;		On entry : F/0
  8455 ;;		On exit  : F/0
  8456 ;;		Unchanged: FFFFFFF0/0
  8457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8458 ;;      Params:         0       4       0       0       0       0       0
  8459 ;;      Locals:         0       1       0       0       0       0       0
  8460 ;;      Temps:          0       0       0       0       0       0       0
  8461 ;;      Totals:         0       5       0       0       0       0       0
  8462 ;;Total ram usage:        5 bytes
  8463 ;; Hardware stack levels used:    1
  8464 ;; Hardware stack levels required when called:    5
  8465 ;; This function calls:
  8466 ;;		Nothing
  8467 ;; This function is called by:
  8468 ;;		_serialport_startup
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text39
  8473  00178E                     __ptext39:
  8474                           	opt stack 0
  8475  00178E                     _rd_buffer_init:
  8476                           	opt stack 23
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;rd_buffer.c: 17: CHAR result = FALSE;
  8480                           
  8481                           ; BSR set to: 0
  8482  00178E  6B70               	clrf	rd_buffer_init@result& (0+255),b
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;rd_buffer.c: 18: if(pbuffer != (0) ){
  8486  001790  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8487  001792  116C               	iorwf	rd_buffer_init@pbuffer& (0+255),w,b
  8488  001794  E01A               	bz	l2889
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;rd_buffer.c: 19: pbuffer->head.first = 0;
  8492  001796  EE20 F002          	lfsr	2,2
  8493  00179A  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  8494  00179C  26D9               	addwf	fsr2l,f,c
  8495  00179E  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8496  0017A0  22DA               	addwfc	fsr2h,f,c
  8497  0017A2  6ADE               	clrf	postinc2,c
  8498  0017A4  6ADD               	clrf	postdec2,c
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;rd_buffer.c: 20: pbuffer->head.last = 0;
  8502  0017A6  C06C  FFD9         	movff	rd_buffer_init@pbuffer,fsr2l
  8503  0017AA  C06D  FFDA         	movff	rd_buffer_init@pbuffer+1,fsr2h
  8504  0017AE  6ADE               	clrf	postinc2,c
  8505  0017B0  6ADD               	clrf	postdec2,c
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;rd_buffer.c: 22: pbuffer->head.size = size;
  8509  0017B2  EE20 F004          	lfsr	2,4
  8510  0017B6  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  8511  0017B8  26D9               	addwf	fsr2l,f,c
  8512  0017BA  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8513  0017BC  22DA               	addwfc	fsr2h,f,c
  8514  0017BE  C06E  FFDE         	movff	rd_buffer_init@size,postinc2
  8515  0017C2  C06F  FFDD         	movff	rd_buffer_init@size+1,postdec2
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;rd_buffer.c: 23: result = TRUE;
  8519  0017C6  0E01               	movlw	1
  8520  0017C8  6F70               	movwf	rd_buffer_init@result& (0+255),b
  8521  0017CA                     l2889:
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;rd_buffer.c: 24: }
  8525                           ;rd_buffer.c: 25: return result;
  8526  0017CA  5170               	movf	rd_buffer_init@result& (0+255),w,b
  8527                           
  8528                           ; BSR set to: 0
  8529  0017CC  0012               	return	
  8530  0017CE                     __end_of_rd_buffer_init:
  8531                           	opt stack 0
  8532                           tosu	equ	0xFFF
  8533                           tosh	equ	0xFFE
  8534                           tosl	equ	0xFFD
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           indf0	equ	0xFEF
  8544                           postinc0	equ	0xFEE
  8545                           fsr0h	equ	0xFEA
  8546                           fsr0l	equ	0xFE9
  8547                           wreg	equ	0xFE8
  8548                           indf1	equ	0xFE7
  8549                           postinc1	equ	0xFE6
  8550                           postdec1	equ	0xFE5
  8551                           fsr1h	equ	0xFE2
  8552                           fsr1l	equ	0xFE1
  8553                           indf2	equ	0xFDF
  8554                           postinc2	equ	0xFDE
  8555                           postdec2	equ	0xFDD
  8556                           fsr2h	equ	0xFDA
  8557                           fsr2l	equ	0xFD9
  8558                           status	equ	0xFD8
  8559                           
  8560 ;; *************** function ___awdiv *****************
  8561 ;; Defined at:
  8562 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awdiv.c"
  8563 ;; Parameters:    Size  Location     Type
  8564 ;;  dividend        2   12[BANK0 ] int 
  8565 ;;  divisor         2   14[BANK0 ] int 
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  quotient        2   18[BANK0 ] int 
  8568 ;;  sign            1   17[BANK0 ] unsigned char 
  8569 ;;  counter         1   16[BANK0 ] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  2   12[BANK0 ] int 
  8572 ;; Registers used:
  8573 ;;		wreg, status,2, status,0
  8574 ;; Tracked objects:
  8575 ;;		On entry : F/0
  8576 ;;		On exit  : F/0
  8577 ;;		Unchanged: FFFFFFF0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8579 ;;      Params:         0       4       0       0       0       0       0
  8580 ;;      Locals:         0       4       0       0       0       0       0
  8581 ;;      Temps:          0       0       0       0       0       0       0
  8582 ;;      Totals:         0       8       0       0       0       0       0
  8583 ;;Total ram usage:        8 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    5
  8586 ;; This function calls:
  8587 ;;		Nothing
  8588 ;; This function is called by:
  8589 ;;		_pd_add_value
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           	psect	text40
  8594  001318                     __ptext40:
  8595                           	opt stack 0
  8596  001318                     ___awdiv:
  8597                           	opt stack 23
  8598                           
  8599                           ; BSR set to: 0
  8600                           
  8601                           ; BSR set to: 0
  8602  001318  6B71               	clrf	___awdiv@sign& (0+255),b
  8603  00131A  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8604  00131C  D006               	goto	l3641
  8605                           
  8606                           ; BSR set to: 0
  8607  00131E  6D6E               	negf	___awdiv@divisor& (0+255),b
  8608  001320  1F6F               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8609  001322  B0D8               	btfsc	status,0,c
  8610  001324  2B6F               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8611                           
  8612                           ; BSR set to: 0
  8613  001326  0E01               	movlw	1
  8614  001328  6F71               	movwf	___awdiv@sign& (0+255),b
  8615  00132A                     l3641:
  8616                           
  8617                           ; BSR set to: 0
  8618  00132A  AF6D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8619  00132C  D006               	goto	l3647
  8620                           
  8621                           ; BSR set to: 0
  8622  00132E  6D6C               	negf	___awdiv@dividend& (0+255),b
  8623  001330  1F6D               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8624  001332  B0D8               	btfsc	status,0,c
  8625  001334  2B6D               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8626                           
  8627                           ; BSR set to: 0
  8628  001336  0E01               	movlw	1
  8629  001338  1B71               	xorwf	___awdiv@sign& (0+255),f,b
  8630  00133A                     l3647:
  8631                           
  8632                           ; BSR set to: 0
  8633  00133A  6B72               	clrf	___awdiv@quotient& (0+255),b
  8634  00133C  6B73               	clrf	(___awdiv@quotient+1)& (0+255),b
  8635                           
  8636                           ; BSR set to: 0
  8637  00133E  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8638  001340  116E               	iorwf	___awdiv@divisor& (0+255),w,b
  8639  001342  E01B               	bz	l3669
  8640                           
  8641                           ; BSR set to: 0
  8642  001344  0E01               	movlw	1
  8643  001346  6F70               	movwf	___awdiv@counter& (0+255),b
  8644  001348  D004               	goto	l3655
  8645  00134A                     l3653:
  8646                           
  8647                           ; BSR set to: 0
  8648  00134A  90D8               	bcf	status,0,c
  8649  00134C  376E               	rlcf	___awdiv@divisor& (0+255),f,b
  8650  00134E  376F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8651  001350  2B70               	incf	___awdiv@counter& (0+255),f,b
  8652  001352                     l3655:
  8653                           
  8654                           ; BSR set to: 0
  8655  001352  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8656  001354  D7FA               	goto	l3653
  8657  001356                     l3657:
  8658                           
  8659                           ; BSR set to: 0
  8660  001356  90D8               	bcf	status,0,c
  8661  001358  3772               	rlcf	___awdiv@quotient& (0+255),f,b
  8662  00135A  3773               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8663                           
  8664                           ; BSR set to: 0
  8665  00135C  516E               	movf	___awdiv@divisor& (0+255),w,b
  8666  00135E  5D6C               	subwf	___awdiv@dividend& (0+255),w,b
  8667  001360  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8668  001362  596D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8669  001364  E305               	bnc	l3665
  8670                           
  8671                           ; BSR set to: 0
  8672  001366  516E               	movf	___awdiv@divisor& (0+255),w,b
  8673  001368  5F6C               	subwf	___awdiv@dividend& (0+255),f,b
  8674  00136A  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8675  00136C  5B6D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8676                           
  8677                           ; BSR set to: 0
  8678  00136E  8172               	bsf	___awdiv@quotient& (0+255),0,b
  8679  001370                     l3665:
  8680                           
  8681                           ; BSR set to: 0
  8682  001370  90D8               	bcf	status,0,c
  8683  001372  336F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8684  001374  336E               	rrcf	___awdiv@divisor& (0+255),f,b
  8685                           
  8686                           ; BSR set to: 0
  8687  001376  2F70               	decfsz	___awdiv@counter& (0+255),f,b
  8688  001378  D7EE               	goto	l3657
  8689  00137A                     l3669:
  8690                           
  8691                           ; BSR set to: 0
  8692  00137A  5171               	movf	___awdiv@sign& (0+255),w,b
  8693  00137C  E004               	bz	l3673
  8694                           
  8695                           ; BSR set to: 0
  8696  00137E  6D72               	negf	___awdiv@quotient& (0+255),b
  8697  001380  1F73               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8698  001382  B0D8               	btfsc	status,0,c
  8699  001384  2B73               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8700  001386                     l3673:
  8701                           
  8702                           ; BSR set to: 0
  8703  001386  C072  F06C         	movff	___awdiv@quotient,?___awdiv
  8704  00138A  C073  F06D         	movff	___awdiv@quotient+1,?___awdiv+1
  8705                           
  8706                           ; BSR set to: 0
  8707  00138E  0012               	return	
  8708  001390                     __end_of___awdiv:
  8709                           	opt stack 0
  8710                           tosu	equ	0xFFF
  8711                           tosh	equ	0xFFE
  8712                           tosl	equ	0xFFD
  8713                           pclath	equ	0xFFA
  8714                           tblptru	equ	0xFF8
  8715                           tblptrh	equ	0xFF7
  8716                           tblptrl	equ	0xFF6
  8717                           tablat	equ	0xFF5
  8718                           prodh	equ	0xFF4
  8719                           prodl	equ	0xFF3
  8720                           intcon	equ	0xFF2
  8721                           indf0	equ	0xFEF
  8722                           postinc0	equ	0xFEE
  8723                           fsr0h	equ	0xFEA
  8724                           fsr0l	equ	0xFE9
  8725                           wreg	equ	0xFE8
  8726                           indf1	equ	0xFE7
  8727                           postinc1	equ	0xFE6
  8728                           postdec1	equ	0xFE5
  8729                           fsr1h	equ	0xFE2
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function ___awmod *****************
  8739 ;; Defined at:
  8740 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awmod.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;  dividend        2   12[BANK0 ] int 
  8743 ;;  divisor         2   14[BANK0 ] int 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;  sign            1   17[BANK0 ] unsigned char 
  8746 ;;  counter         1   16[BANK0 ] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  2   12[BANK0 ] int 
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0
  8751 ;; Tracked objects:
  8752 ;;		On entry : F/0
  8753 ;;		On exit  : F/0
  8754 ;;		Unchanged: FFFFFFF0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8756 ;;      Params:         0       4       0       0       0       0       0
  8757 ;;      Locals:         0       2       0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0
  8759 ;;      Totals:         0       6       0       0       0       0       0
  8760 ;;Total ram usage:        6 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    5
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_pd_add_value
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text41
  8771  001558                     __ptext41:
  8772                           	opt stack 0
  8773  001558                     ___awmod:
  8774                           	opt stack 23
  8775                           
  8776                           ; BSR set to: 0
  8777                           
  8778                           ; BSR set to: 0
  8779  001558  6B71               	clrf	___awmod@sign& (0+255),b
  8780  00155A  AF6D               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8781  00155C  D006               	goto	l3683
  8782                           
  8783                           ; BSR set to: 0
  8784  00155E  6D6C               	negf	___awmod@dividend& (0+255),b
  8785  001560  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  8786  001562  B0D8               	btfsc	status,0,c
  8787  001564  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  8788                           
  8789                           ; BSR set to: 0
  8790  001566  0E01               	movlw	1
  8791  001568  6F71               	movwf	___awmod@sign& (0+255),b
  8792  00156A                     l3683:
  8793                           
  8794                           ; BSR set to: 0
  8795  00156A  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8796  00156C  D004               	goto	l3687
  8797                           
  8798                           ; BSR set to: 0
  8799  00156E  6D6E               	negf	___awmod@divisor& (0+255),b
  8800  001570  1F6F               	comf	(___awmod@divisor+1)& (0+255),f,b
  8801  001572  B0D8               	btfsc	status,0,c
  8802  001574  2B6F               	incf	(___awmod@divisor+1)& (0+255),f,b
  8803  001576                     l3687:
  8804                           
  8805                           ; BSR set to: 0
  8806  001576  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  8807  001578  116E               	iorwf	___awmod@divisor& (0+255),w,b
  8808  00157A  E017               	bz	l3703
  8809                           
  8810                           ; BSR set to: 0
  8811  00157C  0E01               	movlw	1
  8812  00157E  6F70               	movwf	___awmod@counter& (0+255),b
  8813  001580  D004               	goto	l3693
  8814  001582                     l3691:
  8815                           
  8816                           ; BSR set to: 0
  8817  001582  90D8               	bcf	status,0,c
  8818  001584  376E               	rlcf	___awmod@divisor& (0+255),f,b
  8819  001586  376F               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8820  001588  2B70               	incf	___awmod@counter& (0+255),f,b
  8821  00158A                     l3693:
  8822                           
  8823                           ; BSR set to: 0
  8824  00158A  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8825  00158C  D7FA               	goto	l3691
  8826  00158E                     l3695:
  8827                           
  8828                           ; BSR set to: 0
  8829  00158E  516E               	movf	___awmod@divisor& (0+255),w,b
  8830  001590  5D6C               	subwf	___awmod@dividend& (0+255),w,b
  8831  001592  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  8832  001594  596D               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8833  001596  E304               	bnc	l3699
  8834                           
  8835                           ; BSR set to: 0
  8836  001598  516E               	movf	___awmod@divisor& (0+255),w,b
  8837  00159A  5F6C               	subwf	___awmod@dividend& (0+255),f,b
  8838  00159C  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  8839  00159E  5B6D               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8840  0015A0                     l3699:
  8841                           
  8842                           ; BSR set to: 0
  8843  0015A0  90D8               	bcf	status,0,c
  8844  0015A2  336F               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8845  0015A4  336E               	rrcf	___awmod@divisor& (0+255),f,b
  8846                           
  8847                           ; BSR set to: 0
  8848  0015A6  2F70               	decfsz	___awmod@counter& (0+255),f,b
  8849  0015A8  D7F2               	goto	l3695
  8850  0015AA                     l3703:
  8851                           
  8852                           ; BSR set to: 0
  8853  0015AA  5171               	movf	___awmod@sign& (0+255),w,b
  8854  0015AC  E004               	bz	l3707
  8855                           
  8856                           ; BSR set to: 0
  8857  0015AE  6D6C               	negf	___awmod@dividend& (0+255),b
  8858  0015B0  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  8859  0015B2  B0D8               	btfsc	status,0,c
  8860  0015B4  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  8861  0015B6                     l3707:
  8862                           
  8863                           ; BSR set to: 0
  8864  0015B6  C06C  F06C         	movff	___awmod@dividend,?___awmod
  8865  0015BA  C06D  F06D         	movff	___awmod@dividend+1,?___awmod+1
  8866                           
  8867                           ; BSR set to: 0
  8868  0015BE  0012               	return	
  8869  0015C0                     __end_of___awmod:
  8870                           	opt stack 0
  8871                           tosu	equ	0xFFF
  8872                           tosh	equ	0xFFE
  8873                           tosl	equ	0xFFD
  8874                           pclath	equ	0xFFA
  8875                           tblptru	equ	0xFF8
  8876                           tblptrh	equ	0xFF7
  8877                           tblptrl	equ	0xFF6
  8878                           tablat	equ	0xFF5
  8879                           prodh	equ	0xFF4
  8880                           prodl	equ	0xFF3
  8881                           intcon	equ	0xFF2
  8882                           indf0	equ	0xFEF
  8883                           postinc0	equ	0xFEE
  8884                           fsr0h	equ	0xFEA
  8885                           fsr0l	equ	0xFE9
  8886                           wreg	equ	0xFE8
  8887                           indf1	equ	0xFE7
  8888                           postinc1	equ	0xFE6
  8889                           postdec1	equ	0xFE5
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           indf2	equ	0xFDF
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           fsr2h	equ	0xFDA
  8896                           fsr2l	equ	0xFD9
  8897                           status	equ	0xFD8
  8898                           
  8899 ;; *************** function ___lbmod *****************
  8900 ;; Defined at:
  8901 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lbmod.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;  dividend        1    wreg     unsigned char 
  8904 ;;  divisor         1   12[BANK0 ] unsigned char 
  8905 ;; Auto vars:     Size  Location     Type
  8906 ;;  dividend        1   13[BANK0 ] unsigned char 
  8907 ;;  rem             1   15[BANK0 ] unsigned char 
  8908 ;;  counter         1   14[BANK0 ] unsigned char 
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      unsigned char 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2, status,0
  8913 ;; Tracked objects:
  8914 ;;		On entry : F/0
  8915 ;;		On exit  : F/0
  8916 ;;		Unchanged: FFFFFFF0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8918 ;;      Params:         0       1       0       0       0       0       0
  8919 ;;      Locals:         0       3       0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0
  8921 ;;      Totals:         0       4       0       0       0       0       0
  8922 ;;Total ram usage:        4 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    5
  8925 ;; This function calls:
  8926 ;;		Nothing
  8927 ;; This function is called by:
  8928 ;;		_pd_add_value
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text42
  8933  001912                     __ptext42:
  8934                           	opt stack 0
  8935  001912                     ___lbmod:
  8936                           	opt stack 23
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;___lbmod@dividend stored from wreg
  8940  001912  CFE8 F06D          	movff	wreg,___lbmod@dividend
  8941                           
  8942                           ; BSR set to: 0
  8943  001916  0E08               	movlw	8
  8944  001918  6F6E               	movwf	___lbmod@counter& (0+255),b
  8945                           
  8946                           ; BSR set to: 0
  8947  00191A  6B6F               	clrf	___lbmod@rem& (0+255),b
  8948  00191C                     l3715:
  8949                           
  8950                           ; BSR set to: 0
  8951  00191C  90D8               	bcf	status,0,c
  8952  00191E  0100               	movlb	0	; () banked
  8953  001920  356D               	rlcf	___lbmod@dividend& (0+255),w,b
  8954  001922  356F               	rlcf	___lbmod@rem& (0+255),w,b
  8955  001924  6F6F               	movwf	___lbmod@rem& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958  001926  90D8               	bcf	status,0,c
  8959  001928  376D               	rlcf	___lbmod@dividend& (0+255),f,b
  8960                           
  8961                           ; BSR set to: 0
  8962  00192A  516C               	movf	___lbmod@divisor& (0+255),w,b
  8963  00192C  5D6F               	subwf	___lbmod@rem& (0+255),w,b
  8964  00192E  E302               	bnc	l3723
  8965                           
  8966                           ; BSR set to: 0
  8967  001930  516C               	movf	___lbmod@divisor& (0+255),w,b
  8968  001932  5F6F               	subwf	___lbmod@rem& (0+255),f,b
  8969  001934                     l3723:
  8970                           
  8971                           ; BSR set to: 0
  8972  001934  2F6E               	decfsz	___lbmod@counter& (0+255),f,b
  8973  001936  D7F2               	goto	l3715
  8974                           
  8975                           ; BSR set to: 0
  8976  001938  516F               	movf	___lbmod@rem& (0+255),w,b
  8977                           
  8978                           ; BSR set to: 0
  8979  00193A  0012               	return	
  8980  00193C                     __end_of___lbmod:
  8981                           	opt stack 0
  8982                           tosu	equ	0xFFF
  8983                           tosh	equ	0xFFE
  8984                           tosl	equ	0xFFD
  8985                           pclath	equ	0xFFA
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           indf0	equ	0xFEF
  8994                           postinc0	equ	0xFEE
  8995                           fsr0h	equ	0xFEA
  8996                           fsr0l	equ	0xFE9
  8997                           wreg	equ	0xFE8
  8998                           indf1	equ	0xFE7
  8999                           postinc1	equ	0xFE6
  9000                           postdec1	equ	0xFE5
  9001                           fsr1h	equ	0xFE2
  9002                           fsr1l	equ	0xFE1
  9003                           indf2	equ	0xFDF
  9004                           postinc2	equ	0xFDE
  9005                           postdec2	equ	0xFDD
  9006                           fsr2h	equ	0xFDA
  9007                           fsr2l	equ	0xFD9
  9008                           status	equ	0xFD8
  9009                           
  9010 ;; *************** function ___wmul *****************
  9011 ;; Defined at:
  9012 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.12\sources\wmul.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;  multiplier      2   12[BANK0 ] unsigned int 
  9015 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  9016 ;; Auto vars:     Size  Location     Type
  9017 ;;  product         2   16[BANK0 ] unsigned int 
  9018 ;; Return value:  Size  Location     Type
  9019 ;;                  2   12[BANK0 ] unsigned int 
  9020 ;; Registers used:
  9021 ;;		wreg, status,2, status,0
  9022 ;; Tracked objects:
  9023 ;;		On entry : F/0
  9024 ;;		On exit  : F/0
  9025 ;;		Unchanged: FFFFFFF0/0
  9026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9027 ;;      Params:         0       4       0       0       0       0       0
  9028 ;;      Locals:         0       2       0       0       0       0       0
  9029 ;;      Temps:          0       0       0       0       0       0       0
  9030 ;;      Totals:         0       6       0       0       0       0       0
  9031 ;;Total ram usage:        6 bytes
  9032 ;; Hardware stack levels used:    1
  9033 ;; Hardware stack levels required when called:    5
  9034 ;; This function calls:
  9035 ;;		Nothing
  9036 ;; This function is called by:
  9037 ;;		_pd_add_value
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text43
  9042  0018E6                     __ptext43:
  9043                           	opt stack 0
  9044  0018E6                     ___wmul:
  9045                           	opt stack 23
  9046                           
  9047                           ; BSR set to: 0
  9048                           
  9049                           ; BSR set to: 0
  9050  0018E6  6B70               	clrf	___wmul@product& (0+255),b
  9051  0018E8  6B71               	clrf	(___wmul@product+1)& (0+255),b
  9052  0018EA                     l1533:
  9053                           
  9054                           ; BSR set to: 0
  9055  0018EA  A16C               	btfss	___wmul@multiplier& (0+255),0,b
  9056  0018EC  D004               	goto	l3733
  9057                           
  9058                           ; BSR set to: 0
  9059  0018EE  516E               	movf	___wmul@multiplicand& (0+255),w,b
  9060  0018F0  2770               	addwf	___wmul@product& (0+255),f,b
  9061  0018F2  516F               	movf	(___wmul@multiplicand+1)& (0+255),w,b
  9062  0018F4  2371               	addwfc	(___wmul@product+1)& (0+255),f,b
  9063  0018F6                     l3733:
  9064                           
  9065                           ; BSR set to: 0
  9066  0018F6  90D8               	bcf	status,0,c
  9067  0018F8  376E               	rlcf	___wmul@multiplicand& (0+255),f,b
  9068  0018FA  376F               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
  9069                           
  9070                           ; BSR set to: 0
  9071  0018FC  90D8               	bcf	status,0,c
  9072  0018FE  336D               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
  9073  001900  336C               	rrcf	___wmul@multiplier& (0+255),f,b
  9074  001902  516D               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9075  001904  116C               	iorwf	___wmul@multiplier& (0+255),w,b
  9076  001906  E1F1               	bnz	l1533
  9077                           
  9078                           ; BSR set to: 0
  9079  001908  C070  F06C         	movff	___wmul@product,?___wmul
  9080  00190C  C071  F06D         	movff	___wmul@product+1,?___wmul+1
  9081                           
  9082                           ; BSR set to: 0
  9083  001910  0012               	return	
  9084  001912                     __end_of___wmul:
  9085                           	opt stack 0
  9086                           tosu	equ	0xFFF
  9087                           tosh	equ	0xFFE
  9088                           tosl	equ	0xFFD
  9089                           pclath	equ	0xFFA
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodh	equ	0xFF4
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           indf0	equ	0xFEF
  9098                           postinc0	equ	0xFEE
  9099                           fsr0h	equ	0xFEA
  9100                           fsr0l	equ	0xFE9
  9101                           wreg	equ	0xFE8
  9102                           indf1	equ	0xFE7
  9103                           postinc1	equ	0xFE6
  9104                           postdec1	equ	0xFE5
  9105                           fsr1h	equ	0xFE2
  9106                           fsr1l	equ	0xFE1
  9107                           indf2	equ	0xFDF
  9108                           postinc2	equ	0xFDE
  9109                           postdec2	equ	0xFDD
  9110                           fsr2h	equ	0xFDA
  9111                           fsr2l	equ	0xFD9
  9112                           status	equ	0xFD8
  9113                           
  9114 ;; *************** function _isr_high *****************
  9115 ;; Defined at:
  9116 ;;		line 16 in file "src/interrupts.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;		None
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9130 ;;      Params:         0       0       0       0       0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0
  9132 ;;      Temps:          8       0       0       0       0       0       0
  9133 ;;      Totals:         8       0       0       0       0       0       0
  9134 ;;Total ram usage:        8 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    4
  9137 ;; This function calls:
  9138 ;;		_delay_interrupt_service
  9139 ;;		_serialport_service
  9140 ;;		_detection_obtain_analog_service
  9141 ;; This function is called by:
  9142 ;;		Interrupt level 2
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146 ;; *************** function interrupts@isr_high *****************
  9147 ;; Defined at:
  9148 ;;		line 16 in file "src/interrupts.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;		None
  9151 ;; Auto vars:     Size  Location     Type
  9152 ;;		None
  9153 ;; Return value:  Size  Location     Type
  9154 ;;		None               void
  9155 ;; Registers used:
  9156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9157 ;; Tracked objects:
  9158 ;;		On entry : 0/0
  9159 ;;		On exit  : 0/0
  9160 ;;		Unchanged: 0/0
  9161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9162 ;;      Params:         0       0       0       0       0       0       0
  9163 ;;      Locals:         0       0       0       0       0       0       0
  9164 ;;      Temps:          0       8       0       0       0       0       0
  9165 ;;      Totals:         0       8       0       0       0       0       0
  9166 ;;Total ram usage:        8 bytes
  9167 ;; Hardware stack levels used:    1
  9168 ;; Hardware stack levels required when called:    4
  9169 ;; This function calls:
  9170 ;;		_delay_interrupt_service
  9171 ;;		_serialport_service
  9172 ;;		_detection_obtain_analog_service
  9173 ;; This function is called by:
  9174 ;;		Interrupt level 2
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	intcode
  9179  000008                     __pintcode:
  9180                           	opt stack 0
  9181  000008                     _isr_high:
  9182                           	opt stack 19
  9183                           
  9184                           ; BSR set to: 0
  9185  000008  CFE9 F012          	movff	fsr0l,??_isr_high
  9186  00000C  CFEA F013          	movff	fsr0h,??_isr_high+1
  9187  000010  CFD9 F014          	movff	fsr2l,??_isr_high+2
  9188  000014  CFDA F015          	movff	fsr2h,??_isr_high+3
  9189  000018  CFF6 F016          	movff	tblptrl,??_isr_high+4
  9190  00001C  CFF7 F017          	movff	tblptrh,??_isr_high+5
  9191  000020  CFF8 F018          	movff	tblptru,??_isr_high+6
  9192  000024  CFF5 F019          	movff	tablat,??_isr_high+7
  9193  000028                     
  9194                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
  9195  000028  A4F2               	btfss	intcon,2,c	;volatile
  9196  00002A  D001               	goto	i2u525_41
  9197  00002C  D001               	goto	i2u525_40
  9198  00002E                     i2u525_41:
  9199  00002E  D007               	goto	i2l5155
  9200  000030                     i2u525_40:
  9201  000030                     
  9202                           ;interrupts.c: 19: {
  9203                           ;interrupts.c: 20: delay_interrupt_service();
  9204  000030  EC0C  F00D         	call	_delay_interrupt_service	;wreg free
  9205  000034                     
  9206                           ; BSR set to: 0
  9207  000034  94F2               	bcf	intcon,2,c	;volatile
  9208  000036                     
  9209                           ; BSR set to: 0
  9210  000036  0EFE               	movlw	254
  9211  000038  6ED7               	movwf	4055,c	;volatile
  9212  00003A  0E0C               	movlw	12
  9213  00003C  6ED6               	movwf	4054,c	;volatile
  9214  00003E                     i2l5155:
  9215                           
  9216                           ;interrupts.c: 23: }
  9217                           ;interrupts.c: 25: if(PIR1bits.RCIF)
  9218  00003E  AA9E               	btfss	3998,5,c	;volatile
  9219  000040  D001               	goto	i2u526_41
  9220  000042  D001               	goto	i2u526_40
  9221  000044                     i2u526_41:
  9222  000044  D003               	goto	i2l5161
  9223  000046                     i2u526_40:
  9224  000046                     
  9225                           ;interrupts.c: 26: {
  9226                           ;interrupts.c: 28: serialport_service();
  9227  000046  EC5D  F00B         	call	_serialport_service	;wreg free
  9228  00004A                     
  9229                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
  9230  00004A  9A9E               	bcf	3998,5,c	;volatile
  9231  00004C                     i2l5161:
  9232                           
  9233                           ;interrupts.c: 30: }
  9234                           ;interrupts.c: 35: if(PIR1bits.ADIF)
  9235  00004C  AC9E               	btfss	3998,6,c	;volatile
  9236  00004E  D001               	goto	i2u527_41
  9237  000050  D001               	goto	i2u527_40
  9238  000052                     i2u527_41:
  9239  000052  D003               	goto	i2l984
  9240  000054                     i2u527_40:
  9241  000054                     
  9242                           ;interrupts.c: 36: {
  9243                           ;interrupts.c: 38: detection_obtain_analog_service();
  9244  000054  ECAE  F00C         	call	_detection_obtain_analog_service	;wreg free
  9245  000058                     
  9246                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
  9247  000058  9C9E               	bcf	3998,6,c	;volatile
  9248  00005A                     i2l984:
  9249  00005A  C019  FFF5         	movff	??_isr_high+7,tablat
  9250  00005E  C018  FFF8         	movff	??_isr_high+6,tblptru
  9251  000062  C017  FFF7         	movff	??_isr_high+5,tblptrh
  9252  000066  C016  FFF6         	movff	??_isr_high+4,tblptrl
  9253  00006A  C015  FFDA         	movff	??_isr_high+3,fsr2h
  9254  00006E  C014  FFD9         	movff	??_isr_high+2,fsr2l
  9255  000072  C013  FFEA         	movff	??_isr_high+1,fsr0h
  9256  000076  C012  FFE9         	movff	??_isr_high,fsr0l
  9257  00007A  0011               	retfie		f
  9258  00007C                     __end_of_isr_high:
  9259                           	opt stack 0
  9260  00007C                     interrupts@isr_high:
  9261                           	opt stack 19
  9262  00007C  CFE9 F064          	movff	fsr0l,??interrupts@isr_high
  9263  000080  CFEA F065          	movff	fsr0h,??interrupts@isr_high+1
  9264  000084  CFD9 F066          	movff	fsr2l,??interrupts@isr_high+2
  9265  000088  CFDA F067          	movff	fsr2h,??interrupts@isr_high+3
  9266  00008C  CFF6 F068          	movff	tblptrl,??interrupts@isr_high+4
  9267  000090  CFF7 F069          	movff	tblptrh,??interrupts@isr_high+5
  9268  000094  CFF8 F06A          	movff	tblptru,??interrupts@isr_high+6
  9269  000098  CFF5 F06B          	movff	tablat,??interrupts@isr_high+7
  9270  00009C                     
  9271                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
  9272  00009C  A4F2               	btfss	intcon,2,c	;volatile
  9273  00009E  D001               	goto	i2u553_41
  9274  0000A0  D001               	goto	i2u553_40
  9275  0000A2                     i2u553_41:
  9276  0000A2  D007               	goto	i2l5289
  9277  0000A4                     i2u553_40:
  9278  0000A4                     
  9279                           ;interrupts.c: 19: {
  9280                           ;interrupts.c: 20: delay_interrupt_service();
  9281  0000A4  EC0C  F00D         	call	_delay_interrupt_service	;wreg free
  9282  0000A8                     
  9283                           ; BSR set to: 0
  9284  0000A8  94F2               	bcf	intcon,2,c	;volatile
  9285  0000AA                     
  9286                           ; BSR set to: 0
  9287  0000AA  0EFE               	movlw	254
  9288  0000AC  6ED7               	movwf	4055,c	;volatile
  9289  0000AE  0E0C               	movlw	12
  9290  0000B0  6ED6               	movwf	4054,c	;volatile
  9291  0000B2                     i2l5289:
  9292                           
  9293                           ;interrupts.c: 23: }
  9294                           ;interrupts.c: 25: if(PIR1bits.RCIF)
  9295  0000B2  AA9E               	btfss	3998,5,c	;volatile
  9296  0000B4  D001               	goto	i2u554_41
  9297  0000B6  D001               	goto	i2u554_40
  9298  0000B8                     i2u554_41:
  9299  0000B8  D003               	goto	i2l5295
  9300  0000BA                     i2u554_40:
  9301  0000BA                     
  9302                           ;interrupts.c: 26: {
  9303                           ;interrupts.c: 28: serialport_service();
  9304  0000BA  EC5D  F00B         	call	_serialport_service	;wreg free
  9305  0000BE                     
  9306                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
  9307  0000BE  9A9E               	bcf	3998,5,c	;volatile
  9308  0000C0                     i2l5295:
  9309                           
  9310                           ;interrupts.c: 30: }
  9311                           ;interrupts.c: 35: if(PIR1bits.ADIF)
  9312  0000C0  AC9E               	btfss	3998,6,c	;volatile
  9313  0000C2  D001               	goto	i2u555_41
  9314  0000C4  D001               	goto	i2u555_40
  9315  0000C6                     i2u555_41:
  9316  0000C6  D003               	goto	i2l1008
  9317  0000C8                     i2u555_40:
  9318  0000C8                     
  9319                           ;interrupts.c: 36: {
  9320                           ;interrupts.c: 38: detection_obtain_analog_service();
  9321  0000C8  ECAE  F00C         	call	_detection_obtain_analog_service	;wreg free
  9322  0000CC                     
  9323                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
  9324  0000CC  9C9E               	bcf	3998,6,c	;volatile
  9325  0000CE                     i2l1008:
  9326  0000CE  C06B  FFF5         	movff	??interrupts@isr_high+7,tablat
  9327  0000D2  C06A  FFF8         	movff	??interrupts@isr_high+6,tblptru
  9328  0000D6  C069  FFF7         	movff	??interrupts@isr_high+5,tblptrh
  9329  0000DA  C068  FFF6         	movff	??interrupts@isr_high+4,tblptrl
  9330  0000DE  C067  FFDA         	movff	??interrupts@isr_high+3,fsr2h
  9331  0000E2  C066  FFD9         	movff	??interrupts@isr_high+2,fsr2l
  9332  0000E6  C065  FFEA         	movff	??interrupts@isr_high+1,fsr0h
  9333  0000EA  C064  FFE9         	movff	??interrupts@isr_high,fsr0l
  9334  0000EE  0011               	retfie		f
  9335  0000F0                     __end_ofinterrupts@isr_high:
  9336                           	opt stack 0
  9337  0000F0                     tosu	equ	0xFFF
  9338                           tosh	equ	0xFFE
  9339                           tosl	equ	0xFFD
  9340                           pclath	equ	0xFFA
  9341                           tblptru	equ	0xFF8
  9342                           tblptrh	equ	0xFF7
  9343                           tblptrl	equ	0xFF6
  9344                           tablat	equ	0xFF5
  9345                           prodh	equ	0xFF4
  9346                           prodl	equ	0xFF3
  9347                           intcon	equ	0xFF2
  9348                           indf0	equ	0xFEF
  9349                           postinc0	equ	0xFEE
  9350                           fsr0h	equ	0xFEA
  9351                           fsr0l	equ	0xFE9
  9352                           wreg	equ	0xFE8
  9353                           indf1	equ	0xFE7
  9354                           postinc1	equ	0xFE6
  9355                           postdec1	equ	0xFE5
  9356                           fsr1h	equ	0xFE2
  9357                           fsr1l	equ	0xFE1
  9358                           indf2	equ	0xFDF
  9359                           postinc2	equ	0xFDE
  9360                           postdec2	equ	0xFDD
  9361                           fsr2h	equ	0xFDA
  9362                           fsr2l	equ	0xFD9
  9363                           status	equ	0xFD8
  9364                           
  9365 ;; *************** function _delay_interrupt_service *****************
  9366 ;; Defined at:
  9367 ;;		line 70 in file "src/drivers/delay.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;		None
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg, status,2, status,0
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : F/0
  9379 ;;		Unchanged: FFFFFFF0/0
  9380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9381 ;;      Params:         0       0       0       0       0       0       0
  9382 ;;      Locals:         0       0       0       0       0       0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0
  9384 ;;      Totals:         0       0       0       0       0       0       0
  9385 ;;Total ram usage:        0 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; This function calls:
  9388 ;;		Nothing
  9389 ;; This function is called by:
  9390 ;;		_isr_high
  9391 ;;		interrupts@isr_high
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text45
  9396  001A18                     __ptext45:
  9397                           	opt stack 0
  9398  001A18                     _delay_interrupt_service:
  9399                           	opt stack 22
  9400                           
  9401                           ;delay.c: 71: if(this_delay_timer_ms > 0u) {
  9402  001A18  0100               	movlb	0	; () banked
  9403  001A1A  51EC               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  9404  001A1C  11EB               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  9405  001A1E  B4D8               	btfsc	status,2,c
  9406  001A20  0012               	return	
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;delay.c: 72: this_delay_timer_ms--;
  9410  001A22  07EB               	decf	_this_delay_timer_ms& (0+255),f,b	;volatile
  9411  001A24  A0D8               	btfss	status,0,c
  9412  001A26  07EC               	decf	(_this_delay_timer_ms+1)& (0+255),f,b	;volatile
  9413                           
  9414                           ; BSR set to: 0
  9415  001A28  0012               	return	
  9416  001A2A                     __end_of_delay_interrupt_service:
  9417                           	opt stack 0
  9418                           tosu	equ	0xFFF
  9419                           tosh	equ	0xFFE
  9420                           tosl	equ	0xFFD
  9421                           pclath	equ	0xFFA
  9422                           tblptru	equ	0xFF8
  9423                           tblptrh	equ	0xFF7
  9424                           tblptrl	equ	0xFF6
  9425                           tablat	equ	0xFF5
  9426                           prodh	equ	0xFF4
  9427                           prodl	equ	0xFF3
  9428                           intcon	equ	0xFF2
  9429                           indf0	equ	0xFEF
  9430                           postinc0	equ	0xFEE
  9431                           fsr0h	equ	0xFEA
  9432                           fsr0l	equ	0xFE9
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           postinc1	equ	0xFE6
  9436                           postdec1	equ	0xFE5
  9437                           fsr1h	equ	0xFE2
  9438                           fsr1l	equ	0xFE1
  9439                           indf2	equ	0xFDF
  9440                           postinc2	equ	0xFDE
  9441                           postdec2	equ	0xFDD
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _serialport_service *****************
  9447 ;; Defined at:
  9448 ;;		line 24 in file "src/modules/serialport.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  byte            1    3[BANK0 ] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;		None               void
  9455 ;; Registers used:
  9456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: FFFFFFF0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9462 ;;      Params:         0       0       0       0       0       0       0
  9463 ;;      Locals:         0       1       0       0       0       0       0
  9464 ;;      Temps:          0       1       0       0       0       0       0
  9465 ;;      Totals:         0       2       0       0       0       0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    3
  9469 ;; This function calls:
  9470 ;;		_uart_byte_available
  9471 ;;		_uart_getc
  9472 ;;		i2_rd_buffer_put
  9473 ;; This function is called by:
  9474 ;;		_isr_high
  9475 ;;		interrupts@isr_high
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           	psect	text46
  9480  0016BA                     __ptext46:
  9481                           	opt stack 0
  9482  0016BA                     _serialport_service:
  9483                           	opt stack 19
  9484                           
  9485                           ;serialport.c: 25: UINT8 byte;
  9486                           ;serialport.c: 26: if (uart_byte_available()) {
  9487                           
  9488                           ; BSR set to: 0
  9489  0016BA  EC34  F00D         	call	_uart_byte_available	;wreg free
  9490  0016BE  0900               	iorlw	0
  9491  0016C0  B4D8               	btfsc	status,2,c
  9492  0016C2  0012               	return	
  9493                           
  9494                           ;serialport.c: 27: if (uart_getc(&byte) == RESULT_SUCCESS) {
  9495  0016C4  0100               	movlb	0	; () banked
  9496  0016C6  0E63               	movlw	serialport_service@byte& (0+255)
  9497  0016C8  EC5B  F00C         	call	_uart_getc
  9498  0016CC  6F62               	movwf	??_serialport_service& (0+255),b
  9499  0016CE  0562               	decf	??_serialport_service& (0+255),w,b
  9500  0016D0  E10B               	bnz	i2l5275
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;serialport.c: 28: rd_buffer_put(&g_rx_buffer, &byte);
  9504  0016D2  0E02               	movlw	high _g_rx_buffer
  9505  0016D4  6E1B               	movwf	?i2_rd_buffer_put+1,c
  9506  0016D6  0E7F               	movlw	low _g_rx_buffer
  9507  0016D8  6E1A               	movwf	?i2_rd_buffer_put,c
  9508  0016DA  0100               	movlb	0	; () banked
  9509  0016DC  0E00               	movlw	high serialport_service@byte
  9510  0016DE  6E1D               	movwf	?i2_rd_buffer_put+3,c
  9511  0016E0  0E63               	movlw	low serialport_service@byte
  9512  0016E2  6E1C               	movwf	?i2_rd_buffer_put+2,c
  9513  0016E4  EC5D  F005         	call	i2_rd_buffer_put	;wreg free
  9514  0016E8                     i2l5275:
  9515                           
  9516                           ;serialport.c: 29: }
  9517                           ;serialport.c: 30: if(byte=='\n' || byte=='\r')
  9518  0016E8  0100               	movlb	0	; () banked
  9519  0016EA  5163               	movf	serialport_service@byte& (0+255),w,b
  9520  0016EC  0A0A               	xorlw	10
  9521  0016EE  E004               	bz	i2l5279
  9522                           
  9523                           ; BSR set to: 0
  9524  0016F0  5163               	movf	serialport_service@byte& (0+255),w,b
  9525  0016F2  0A0D               	xorlw	13
  9526  0016F4  A4D8               	btfss	status,2,c
  9527  0016F6  0012               	return	
  9528  0016F8                     i2l5279:
  9529                           
  9530                           ; BSR set to: 0
  9531  0016F8  0E01               	movlw	1
  9532  0016FA  6E38               	movwf	_pool+5,c	;volatile
  9533  0016FC  0E0A               	movlw	10
  9534  0016FE  6E30               	movwf	_event_miss+5,c	;volatile
  9535  001700  0C0A               	retlw	10
  9536  001702                     __end_of_serialport_service:
  9537                           	opt stack 0
  9538                           tosu	equ	0xFFF
  9539                           tosh	equ	0xFFE
  9540                           tosl	equ	0xFFD
  9541                           pclath	equ	0xFFA
  9542                           tblptru	equ	0xFF8
  9543                           tblptrh	equ	0xFF7
  9544                           tblptrl	equ	0xFF6
  9545                           tablat	equ	0xFF5
  9546                           prodh	equ	0xFF4
  9547                           prodl	equ	0xFF3
  9548                           intcon	equ	0xFF2
  9549                           indf0	equ	0xFEF
  9550                           postinc0	equ	0xFEE
  9551                           fsr0h	equ	0xFEA
  9552                           fsr0l	equ	0xFE9
  9553                           wreg	equ	0xFE8
  9554                           indf1	equ	0xFE7
  9555                           postinc1	equ	0xFE6
  9556                           postdec1	equ	0xFE5
  9557                           fsr1h	equ	0xFE2
  9558                           fsr1l	equ	0xFE1
  9559                           indf2	equ	0xFDF
  9560                           postinc2	equ	0xFDE
  9561                           postdec2	equ	0xFDD
  9562                           fsr2h	equ	0xFDA
  9563                           fsr2l	equ	0xFD9
  9564                           status	equ	0xFD8
  9565                           
  9566 ;; *************** function _uart_getc *****************
  9567 ;; Defined at:
  9568 ;;		line 56 in file "src/drivers/uart.c"
  9569 ;; Parameters:    Size  Location     Type
  9570 ;;  pbyte           1    wreg     PTR unsigned char 
  9571 ;;		 -> serialport_service@byte(1), 
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  pbyte           1   26[COMRAM] PTR unsigned char 
  9574 ;;		 -> serialport_service@byte(1), 
  9575 ;;  result          1   27[COMRAM] enum E3388
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  1    wreg      enum E3388
  9578 ;; Registers used:
  9579 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : F/0
  9582 ;;		On exit  : F/0
  9583 ;;		Unchanged: FFFFFFF0/0
  9584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9585 ;;      Params:         0       0       0       0       0       0       0
  9586 ;;      Locals:         2       0       0       0       0       0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0
  9588 ;;      Totals:         2       0       0       0       0       0       0
  9589 ;;Total ram usage:        2 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    2
  9592 ;; This function calls:
  9593 ;;		_uart_error
  9594 ;;		_uart_reset
  9595 ;;		_uart_byte_available
  9596 ;; This function is called by:
  9597 ;;		_serialport_service
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text47
  9602  0018B6                     __ptext47:
  9603                           	opt stack 0
  9604  0018B6                     _uart_getc:
  9605                           	opt stack 19
  9606                           
  9607                           ;uart_getc@pbyte stored from wreg
  9608  0018B6  CFE8 F01B          	movff	wreg,uart_getc@pbyte
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;uart.c: 57: ResultSuccess_t result = RESULT_FAIL;
  9612  0018BA  6A1C               	clrf	uart_getc@result,c
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;uart.c: 58: if ( uart_error())
  9616  0018BC  EC1D  F00D         	call	_uart_error	;wreg free
  9617  0018C0  0900               	iorlw	0
  9618  0018C2  E003               	bz	i2l5257
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;uart.c: 59: {
  9622                           ;uart.c: 60: uart_reset();
  9623  0018C4  ECBE  F00C         	call	_uart_reset	;wreg free
  9624                           
  9625                           ;uart.c: 61: }
  9626  0018C8  D00C               	goto	i2l5265
  9627  0018CA                     i2l5257:
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;uart.c: 62: else
  9631                           ;uart.c: 63: if( uart_byte_available() )
  9632  0018CA  EC34  F00D         	call	_uart_byte_available	;wreg free
  9633  0018CE  0900               	iorlw	0
  9634  0018D0  E008               	bz	i2l5265
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;uart.c: 64: {
  9638                           ;uart.c: 65: *pbyte = RCREG;
  9639  0018D2  501B               	movf	uart_getc@pbyte,w,c
  9640  0018D4  6ED9               	movwf	fsr2l,c
  9641  0018D6  6ADA               	clrf	fsr2h,c
  9642  0018D8  CFAE FFDF          	movff	4014,indf2	;volatile
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;uart.c: 66: RCIF = 0;
  9646  0018DC  9A9E               	bcf	3998,5,c	;volatile
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;uart.c: 67: result = RESULT_SUCCESS;
  9650  0018DE  0E01               	movlw	1
  9651  0018E0  6E1C               	movwf	uart_getc@result,c
  9652  0018E2                     i2l5265:
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;uart.c: 68: }
  9656                           ;uart.c: 69: return result;
  9657  0018E2  501C               	movf	uart_getc@result,w,c
  9658                           
  9659                           ; BSR set to: 0
  9660  0018E4  0012               	return	
  9661  0018E6                     __end_of_uart_getc:
  9662                           	opt stack 0
  9663                           tosu	equ	0xFFF
  9664                           tosh	equ	0xFFE
  9665                           tosl	equ	0xFFD
  9666                           pclath	equ	0xFFA
  9667                           tblptru	equ	0xFF8
  9668                           tblptrh	equ	0xFF7
  9669                           tblptrl	equ	0xFF6
  9670                           tablat	equ	0xFF5
  9671                           prodh	equ	0xFF4
  9672                           prodl	equ	0xFF3
  9673                           intcon	equ	0xFF2
  9674                           indf0	equ	0xFEF
  9675                           postinc0	equ	0xFEE
  9676                           fsr0h	equ	0xFEA
  9677                           fsr0l	equ	0xFE9
  9678                           wreg	equ	0xFE8
  9679                           indf1	equ	0xFE7
  9680                           postinc1	equ	0xFE6
  9681                           postdec1	equ	0xFE5
  9682                           fsr1h	equ	0xFE2
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           fsr2h	equ	0xFDA
  9688                           fsr2l	equ	0xFD9
  9689                           status	equ	0xFD8
  9690                           
  9691 ;; *************** function _uart_reset *****************
  9692 ;; Defined at:
  9693 ;;		line 73 in file "src/drivers/uart.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;		None
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;		None
  9698 ;; Return value:  Size  Location     Type
  9699 ;;		None               void
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : F/0
  9704 ;;		On exit  : F/0
  9705 ;;		Unchanged: FFFFFFF0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9707 ;;      Params:         0       0       0       0       0       0       0
  9708 ;;      Locals:         0       0       0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0
  9710 ;;      Totals:         0       0       0       0       0       0       0
  9711 ;;Total ram usage:        0 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    1
  9714 ;; This function calls:
  9715 ;;		_uart_byte_available
  9716 ;;		_uart_error
  9717 ;; This function is called by:
  9718 ;;		_uart_getc
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text48
  9723  00197C                     __ptext48:
  9724                           	opt stack 0
  9725  00197C                     _uart_reset:
  9726                           	opt stack 19
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;uart.c: 74: while(uart_error() )
  9730                           
  9731                           ; BSR set to: 0
  9732  00197C  D008               	goto	i2l5245
  9733  00197E                     i2l169:
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;uart.c: 75: {
  9737                           ;uart.c: 76: CREN = 0;
  9738  00197E  98AB               	bcf	4011,4,c	;volatile
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;uart.c: 77: RCREG;
  9742  001980  50AE               	movf	4014,w,c	;volatile
  9743                           
  9744                           ;uart.c: 78: RCREG;
  9745  001982  50AE               	movf	4014,w,c	;volatile
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;uart.c: 79: CREN = 1;
  9749  001984  88AB               	bsf	4011,4,c	;volatile
  9750  001986                     i2l5243:
  9751                           
  9752                           ; BSR set to: 0
  9753  001986  EC34  F00D         	call	_uart_byte_available	;wreg free
  9754  00198A  0900               	iorlw	0
  9755  00198C  E1FC               	bnz	i2l5243
  9756  00198E                     i2l5245:
  9757                           
  9758                           ; BSR set to: 0
  9759  00198E  EC1D  F00D         	call	_uart_error	;wreg free
  9760  001992  0900               	iorlw	0
  9761  001994  B4D8               	btfsc	status,2,c
  9762  001996  0012               	return	
  9763  001998  D7F2               	goto	i2l169
  9764  00199A                     __end_of_uart_reset:
  9765                           	opt stack 0
  9766                           tosu	equ	0xFFF
  9767                           tosh	equ	0xFFE
  9768                           tosl	equ	0xFFD
  9769                           pclath	equ	0xFFA
  9770                           tblptru	equ	0xFF8
  9771                           tblptrh	equ	0xFF7
  9772                           tblptrl	equ	0xFF6
  9773                           tablat	equ	0xFF5
  9774                           prodh	equ	0xFF4
  9775                           prodl	equ	0xFF3
  9776                           intcon	equ	0xFF2
  9777                           indf0	equ	0xFEF
  9778                           postinc0	equ	0xFEE
  9779                           fsr0h	equ	0xFEA
  9780                           fsr0l	equ	0xFE9
  9781                           wreg	equ	0xFE8
  9782                           indf1	equ	0xFE7
  9783                           postinc1	equ	0xFE6
  9784                           postdec1	equ	0xFE5
  9785                           fsr1h	equ	0xFE2
  9786                           fsr1l	equ	0xFE1
  9787                           indf2	equ	0xFDF
  9788                           postinc2	equ	0xFDE
  9789                           postdec2	equ	0xFDD
  9790                           fsr2h	equ	0xFDA
  9791                           fsr2l	equ	0xFD9
  9792                           status	equ	0xFD8
  9793                           
  9794 ;; *************** function _uart_byte_available *****************
  9795 ;; Defined at:
  9796 ;;		line 52 in file "src/drivers/uart.c"
  9797 ;; Parameters:    Size  Location     Type
  9798 ;;		None
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;		None
  9801 ;; Return value:  Size  Location     Type
  9802 ;;                  1    wreg      unsigned char 
  9803 ;; Registers used:
  9804 ;;		wreg
  9805 ;; Tracked objects:
  9806 ;;		On entry : 0/0
  9807 ;;		On exit  : 0/0
  9808 ;;		Unchanged: FFFFFFFF/0
  9809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9810 ;;      Params:         0       0       0       0       0       0       0
  9811 ;;      Locals:         0       0       0       0       0       0       0
  9812 ;;      Temps:          0       0       0       0       0       0       0
  9813 ;;      Totals:         0       0       0       0       0       0       0
  9814 ;;Total ram usage:        0 bytes
  9815 ;; Hardware stack levels used:    1
  9816 ;; This function calls:
  9817 ;;		Nothing
  9818 ;; This function is called by:
  9819 ;;		_uart_getc
  9820 ;;		_uart_reset
  9821 ;;		_serialport_service
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           	psect	text49
  9826  001A68                     __ptext49:
  9827                           	opt stack 0
  9828  001A68                     _uart_byte_available:
  9829                           	opt stack 20
  9830                           
  9831                           ;uart.c: 53: return RC1IF;
  9832                           
  9833                           ; BSR set to: 0
  9834  001A68  0E00               	movlw	0
  9835  001A6A  BA9E               	btfsc	3998,5,c	;volatile
  9836  001A6C  0E01               	movlw	1
  9837  001A6E  0012               	return	
  9838  001A70                     __end_of_uart_byte_available:
  9839                           	opt stack 0
  9840                           tosu	equ	0xFFF
  9841                           tosh	equ	0xFFE
  9842                           tosl	equ	0xFFD
  9843                           pclath	equ	0xFFA
  9844                           tblptru	equ	0xFF8
  9845                           tblptrh	equ	0xFF7
  9846                           tblptrl	equ	0xFF6
  9847                           tablat	equ	0xFF5
  9848                           prodh	equ	0xFF4
  9849                           prodl	equ	0xFF3
  9850                           intcon	equ	0xFF2
  9851                           indf0	equ	0xFEF
  9852                           postinc0	equ	0xFEE
  9853                           fsr0h	equ	0xFEA
  9854                           fsr0l	equ	0xFE9
  9855                           wreg	equ	0xFE8
  9856                           indf1	equ	0xFE7
  9857                           postinc1	equ	0xFE6
  9858                           postdec1	equ	0xFE5
  9859                           fsr1h	equ	0xFE2
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _uart_error *****************
  9869 ;; Defined at:
  9870 ;;		line 85 in file "src/drivers/uart.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;                  1    wreg      unsigned char 
  9877 ;; Registers used:
  9878 ;;		wreg, status,2
  9879 ;; Tracked objects:
  9880 ;;		On entry : F/0
  9881 ;;		On exit  : F/0
  9882 ;;		Unchanged: FFFFFFF0/0
  9883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9884 ;;      Params:         0       0       0       0       0       0       0
  9885 ;;      Locals:         1       0       0       0       0       0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0
  9887 ;;      Totals:         1       0       0       0       0       0       0
  9888 ;;Total ram usage:        1 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; This function calls:
  9891 ;;		Nothing
  9892 ;; This function is called by:
  9893 ;;		_uart_getc
  9894 ;;		_uart_reset
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           	psect	text50
  9899  001A3A                     __ptext50:
  9900                           	opt stack 0
  9901  001A3A                     _uart_error:
  9902                           	opt stack 19
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;uart.c: 86: return RCSTAbits.OERR || RCSTAbits.FERR ;
  9906  001A3A  0E01               	movlw	1
  9907  001A3C  6E1A               	movwf	_uart_error$257,c
  9908                           
  9909                           ; BSR set to: 0
  9910  001A3E  A2AB               	btfss	4011,1,c	;volatile
  9911                           
  9912                           ; BSR set to: 0
  9913  001A40  B4AB               	btfsc	4011,2,c	;volatile
  9914  001A42  D001               	goto	i2l4947
  9915                           
  9916                           ; BSR set to: 0
  9917  001A44  6A1A               	clrf	_uart_error$257,c
  9918  001A46                     i2l4947:
  9919                           
  9920                           ; BSR set to: 0
  9921  001A46  501A               	movf	_uart_error$257,w,c
  9922                           
  9923                           ; BSR set to: 0
  9924  001A48  0012               	return	
  9925  001A4A                     __end_of_uart_error:
  9926                           	opt stack 0
  9927                           tosu	equ	0xFFF
  9928                           tosh	equ	0xFFE
  9929                           tosl	equ	0xFFD
  9930                           pclath	equ	0xFFA
  9931                           tblptru	equ	0xFF8
  9932                           tblptrh	equ	0xFF7
  9933                           tblptrl	equ	0xFF6
  9934                           tablat	equ	0xFF5
  9935                           prodh	equ	0xFF4
  9936                           prodl	equ	0xFF3
  9937                           intcon	equ	0xFF2
  9938                           indf0	equ	0xFEF
  9939                           postinc0	equ	0xFEE
  9940                           fsr0h	equ	0xFEA
  9941                           fsr0l	equ	0xFE9
  9942                           wreg	equ	0xFE8
  9943                           indf1	equ	0xFE7
  9944                           postinc1	equ	0xFE6
  9945                           postdec1	equ	0xFE5
  9946                           fsr1h	equ	0xFE2
  9947                           fsr1l	equ	0xFE1
  9948                           indf2	equ	0xFDF
  9949                           postinc2	equ	0xFDE
  9950                           postdec2	equ	0xFDD
  9951                           fsr2h	equ	0xFDA
  9952                           fsr2l	equ	0xFD9
  9953                           status	equ	0xFD8
  9954                           
  9955 ;; *************** function _detection_obtain_analog_service *****************
  9956 ;; Defined at:
  9957 ;;		line 137 in file "src/modules/detection.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;		None
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  adc_data        1    2[BANK0 ] unsigned char 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;		None               void
  9964 ;; Registers used:
  9965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9971 ;;      Params:         0       0       0       0       0       0       0
  9972 ;;      Locals:         0       1       0       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0
  9974 ;;      Totals:         0       1       0       0       0       0       0
  9975 ;;Total ram usage:        1 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    1
  9978 ;; This function calls:
  9979 ;;		_adc_read
  9980 ;;		i2_rd_buffer_put
  9981 ;; This function is called by:
  9982 ;;		_isr_high
  9983 ;;		interrupts@isr_high
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           	psect	text51
  9988  00195C                     __ptext51:
  9989                           	opt stack 0
  9990  00195C                     _detection_obtain_analog_service:
  9991                           	opt stack 21
  9992                           
  9993                           ;detection.c: 138: UINT8 adc_data;
  9994                           ;detection.c: 139: adc_data = adc_read(0);
  9995                           
  9996                           ; BSR set to: 0
  9997  00195C  0E00               	movlw	0
  9998  00195E  ECA4  F00B         	call	_adc_read
  9999  001962  501A               	movf	?_adc_read,w,c
 10000  001964  0100               	movlb	0	; () banked
 10001  001966  6F62               	movwf	detection_obtain_analog_service@adc_data& (0+255),b
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;detection.c: 140: rd_buffer_put(&meas_buffer, &adc_data);
 10005  001968  0E04               	movlw	high _meas_buffer
 10006  00196A  6E1B               	movwf	?i2_rd_buffer_put+1,c
 10007  00196C  0E50               	movlw	low _meas_buffer
 10008  00196E  6E1A               	movwf	?i2_rd_buffer_put,c
 10009  001970  0E00               	movlw	high detection_obtain_analog_service@adc_data
 10010  001972  6E1D               	movwf	?i2_rd_buffer_put+3,c
 10011  001974  0E62               	movlw	low detection_obtain_analog_service@adc_data
 10012  001976  6E1C               	movwf	?i2_rd_buffer_put+2,c
 10013  001978  EF5D  F005         	goto	i2_rd_buffer_put	;wreg free
 10014  00197C                     __end_of_detection_obtain_analog_service:
 10015                           	opt stack 0
 10016                           tosu	equ	0xFFF
 10017                           tosh	equ	0xFFE
 10018                           tosl	equ	0xFFD
 10019                           pclath	equ	0xFFA
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           indf1	equ	0xFE7
 10033                           postinc1	equ	0xFE6
 10034                           postdec1	equ	0xFE5
 10035                           fsr1h	equ	0xFE2
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _adc_read *****************
 10045 ;; Defined at:
 10046 ;;		line 22 in file "src/drivers/adc.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  adc_number      1    wreg     unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  adc_number      1   28[COMRAM] unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  2   25[COMRAM] unsigned short 
 10053 ;; Registers used:
 10054 ;;		wreg, status,2, status,0
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10060 ;;      Params:         2       0       0       0       0       0       0
 10061 ;;      Locals:         1       0       0       0       0       0       0
 10062 ;;      Temps:          1       0       0       0       0       0       0
 10063 ;;      Totals:         4       0       0       0       0       0       0
 10064 ;;Total ram usage:        4 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_detection_obtain_analog_service
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           	psect	text52
 10074  001748                     __ptext52:
 10075                           	opt stack 0
 10076  001748                     _adc_read:
 10077                           	opt stack 21
 10078                           
 10079                           ;adc_read@adc_number stored from wreg
 10080  001748  CFE8 F01D          	movff	wreg,adc_read@adc_number
 10081                           
 10082                           ;adc.c: 23: if(ADCON0bits.CHS != adc_number)
 10083  00174C  30C2               	rrcf	4034,w,c	;volatile
 10084  00174E  32E8               	rrcf	wreg,f,c
 10085  001750  0B0F               	andlw	15
 10086  001752  181D               	xorwf	adc_read@adc_number,w,c
 10087  001754  E010               	bz	i2l4955
 10088                           
 10089                           ;adc.c: 24: {
 10090                           ;adc.c: 25: ADCON0bits.CHS = adc_number;
 10091  001756  C01D  F01C         	movff	adc_read@adc_number,??_adc_read
 10092  00175A  461C               	rlncf	??_adc_read,f,c
 10093  00175C  461C               	rlncf	??_adc_read,f,c
 10094  00175E  50C2               	movf	4034,w,c	;volatile
 10095  001760  181C               	xorwf	??_adc_read,w,c
 10096  001762  0BC3               	andlw	-61
 10097  001764  181C               	xorwf	??_adc_read,w,c
 10098  001766  6EC2               	movwf	4034,c	;volatile
 10099  001768  F000               	nop		;# 
 10100  00176A  F000               	nop		;# 
 10101  00176C  F000               	nop		;# 
 10102  00176E  F000               	nop		;# 
 10103  001770  F000               	nop		;# 
 10104  001772  F000               	nop		;# 
 10105  001774  F000               	nop		;# 
 10106  001776                     i2l4955:
 10107                           
 10108                           ;adc.c: 27: }
 10109                           ;adc.c: 28: ADCON0bits.GO_nDONE = TRUE;
 10110  001776  82C2               	bsf	4034,1,c	;volatile
 10111                           
 10112                           ;adc.c: 29: while (GODONE) {asm(" nop");asm(" nop");}
 10113  001778  D002               	goto	i2l227
 10114  00177A                     i2l228:
 10115  00177A  F000               	nop		;# 
 10116  00177C  F000               	nop		;# 
 10117  00177E                     i2l227:
 10118  00177E  B2C2               	btfsc	4034,1,c	;volatile
 10119  001780  D7FC               	goto	i2l228
 10120                           
 10121                           ;adc.c: 30: ADIF = FALSE;
 10122  001782  9C9E               	bcf	3998,6,c	;volatile
 10123                           
 10124                           ;adc.c: 31: return ADRES;
 10125  001784  CFC3 F01A          	movff	4035,?_adc_read	;volatile
 10126  001788  CFC4 F01B          	movff	4036,?_adc_read+1	;volatile
 10127  00178C  0012               	return	
 10128  00178E                     __end_of_adc_read:
 10129                           	opt stack 0
 10130                           tosu	equ	0xFFF
 10131                           tosh	equ	0xFFE
 10132                           tosl	equ	0xFFD
 10133                           pclath	equ	0xFFA
 10134                           tblptru	equ	0xFF8
 10135                           tblptrh	equ	0xFF7
 10136                           tblptrl	equ	0xFF6
 10137                           tablat	equ	0xFF5
 10138                           prodh	equ	0xFF4
 10139                           prodl	equ	0xFF3
 10140                           intcon	equ	0xFF2
 10141                           indf0	equ	0xFEF
 10142                           postinc0	equ	0xFEE
 10143                           fsr0h	equ	0xFEA
 10144                           fsr0l	equ	0xFE9
 10145                           wreg	equ	0xFE8
 10146                           indf1	equ	0xFE7
 10147                           postinc1	equ	0xFE6
 10148                           postdec1	equ	0xFE5
 10149                           fsr1h	equ	0xFE2
 10150                           fsr1l	equ	0xFE1
 10151                           indf2	equ	0xFDF
 10152                           postinc2	equ	0xFDE
 10153                           postdec2	equ	0xFDD
 10154                           fsr2h	equ	0xFDA
 10155                           fsr2l	equ	0xFD9
 10156                           status	equ	0xFD8
 10157                           
 10158 ;; *************** function i2_rd_buffer_put *****************
 10159 ;; Defined at:
 10160 ;;		line 153 in file "src/modules/rd_buffer.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;  rd_buffer_pu    2   25[COMRAM] PTR struct .
 10163 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10164 ;;  rd_buffer_pu    2   27[COMRAM] PTR unsigned char 
 10165 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
 10166 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  rd_buffer_pu    2   40[COMRAM] int 
 10169 ;;  rd_buffer_pu    2   38[COMRAM] int 
 10170 ;;  rd_buffer_pu    2   35[COMRAM] PTR volatile unsigned ch
 10171 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10172 ;;  rd_buffer_pu    1   37[COMRAM] unsigned char 
 10173 ;;  rd_buffer_pu    1    0        unsigned char 
 10174 ;; Return value:  Size  Location     Type
 10175 ;;                  1    wreg      unsigned char 
 10176 ;; Registers used:
 10177 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10178 ;; Tracked objects:
 10179 ;;		On entry : F/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: FFFFFFF0/0
 10182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10183 ;;      Params:         4       0       0       0       0       0       0
 10184 ;;      Locals:         8       0       0       0       0       0       0
 10185 ;;      Temps:          5       0       0       0       0       0       0
 10186 ;;      Totals:        17       0       0       0       0       0       0
 10187 ;;Total ram usage:       17 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_serialport_service
 10193 ;;		_detection_obtain_analog_service
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           	psect	text53
 10198  000ABA                     __ptext53:
 10199                           	opt stack 0
 10200  000ABA                     i2_rd_buffer_put:
 10201                           	opt stack 21
 10202                           
 10203                           ; BSR set to: 0
 10204                           ;rd_buffer.c: 155: SIZE sz ;
 10205                           ;rd_buffer.c: 156: sz = pbuffer->head.last - pbuffer->head.first;
 10206                           
 10207                           ; BSR set to: 0
 10208  000ABA  EE20 F002          	lfsr	2,2
 10209  000ABE  D891               	call	PL40	;call to abstracted procedure
 10210  000AC0  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10211  000AC4  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10212  000AC8  CFDE F020          	movff	postinc2,??i2_rd_buffer_put+2
 10213  000ACC  CFDD F021          	movff	postdec2,??i2_rd_buffer_put+3
 10214  000AD0  501E               	movf	??i2_rd_buffer_put,w,c
 10215  000AD2  5C20               	subwf	??i2_rd_buffer_put+2,w,c
 10216  000AD4  6E27               	movwf	i2rd_buffer_put@sz,c
 10217  000AD6  501F               	movf	??i2_rd_buffer_put+1,w,c
 10218  000AD8  5821               	subwfb	??i2_rd_buffer_put+3,w,c
 10219  000ADA  6E28               	movwf	i2rd_buffer_put@sz+1,c
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;rd_buffer.c: 157: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
 10223  000ADC  0E01               	movlw	1
 10224  000ADE  6E26               	movwf	i2_rd_buffer_put$482,c
 10225                           
 10226                           ; BSR set to: 0
 10227  000AE0  D889               	call	PL52	;call to abstracted procedure
 10228  000AE2  64EA               	cpfsgt	fsr0h,c
 10229  000AE4  D003               	bra	i2u537_47
 10230  000AE6  6EEA               	movwf	fsr0h,c
 10231  000AE8  50EF               	movf	indf0,w,c
 10232  000AEA  D003               	bra	i2u537_40
 10233  000AEC                     i2u537_47:
 10234  000AEC  6EF7               	movwf	tblptrh,c
 10235  000AEE  0008               	tblrd		*
 10236  000AF0  50F5               	movf	tablat,w,c
 10237  000AF2                     i2u537_40:
 10238  000AF2  0A0A               	xorlw	10
 10239  000AF4  E00C               	bz	i2l5213
 10240  000AF6  D87E               	call	PL52	;call to abstracted procedure
 10241  000AF8  64EA               	cpfsgt	fsr0h,c
 10242  000AFA  D003               	bra	i2u539_47
 10243  000AFC  6EEA               	movwf	fsr0h,c
 10244  000AFE  50EF               	movf	indf0,w,c
 10245  000B00  D003               	bra	i2u539_40
 10246  000B02                     i2u539_47:
 10247  000B02  6EF7               	movwf	tblptrh,c
 10248  000B04  0008               	tblrd		*
 10249  000B06  50F5               	movf	tablat,w,c
 10250  000B08                     i2u539_40:
 10251  000B08  0A0D               	xorlw	13
 10252  000B0A  A4D8               	btfss	status,2,c
 10253  000B0C  6A26               	clrf	i2_rd_buffer_put$482,c
 10254  000B0E                     i2l5213:
 10255  000B0E  5026               	movf	i2_rd_buffer_put$482,w,c
 10256  000B10  0100               	movlb	0	; () banked
 10257  000B12  13BC               	iorwf	_this_contains_crlf& (0+255),f,b
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;rd_buffer.c: 159: if(sz < 0 ) {
 10261  000B14  AE28               	btfss	i2rd_buffer_put@sz+1,7,c
 10262  000B16  D00A               	goto	i2l288
 10263                           
 10264                           ; BSR set to: 0
 10265                           ;rd_buffer.c: 160: sz += pbuffer->head.size;
 10266  000B18  EE20 F004          	lfsr	2,4
 10267  000B1C  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10268  000B1E  26D9               	addwf	fsr2l,f,c
 10269  000B20  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10270  000B22  22DA               	addwfc	fsr2h,f,c
 10271  000B24  50DE               	movf	postinc2,w,c
 10272  000B26  2627               	addwf	i2rd_buffer_put@sz,f,c
 10273  000B28  50DD               	movf	postdec2,w,c
 10274  000B2A  2228               	addwfc	i2rd_buffer_put@sz+1,f,c
 10275  000B2C                     i2l288:
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;rd_buffer.c: 161: }
 10279                           ;rd_buffer.c: 162: if(sz < (pbuffer->head.size - 1))
 10280  000B2C  EE20 F004          	lfsr	2,4
 10281  000B30  D858               	call	PL40	;call to abstracted procedure
 10282  000B32  0EFF               	movlw	255
 10283  000B34  241E               	addwf	??i2_rd_buffer_put,w,c
 10284  000B36  6E20               	movwf	(??i2_rd_buffer_put+2)& (0+255),c
 10285  000B38  0EFF               	movlw	255
 10286  000B3A  201F               	addwfc	??i2_rd_buffer_put+1,w,c
 10287  000B3C  6E21               	movwf	(??i2_rd_buffer_put+3)& (0+255),c
 10288  000B3E  5028               	movf	i2rd_buffer_put@sz+1,w,c
 10289  000B40  0A80               	xorlw	128
 10290  000B42  6E22               	movwf	(??i2_rd_buffer_put+4)& (0+255),c
 10291  000B44  5020               	movf	??i2_rd_buffer_put+2,w,c
 10292  000B46  5C27               	subwf	i2rd_buffer_put@sz,w,c
 10293  000B48  5021               	movf	??i2_rd_buffer_put+3,w,c
 10294  000B4A  0A80               	xorlw	128
 10295  000B4C  5822               	subwfb	(??i2_rd_buffer_put+4)& (0+255),w,c
 10296  000B4E  B0D8               	btfsc	status,0,c
 10297  000B50  0012               	return	
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;rd_buffer.c: 163: {
 10301                           ;rd_buffer.c: 164: INT ind = pbuffer->head.last;
 10302  000B52  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10303  000B56  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10304  000B5A  CFDE F029          	movff	postinc2,i2rd_buffer_put@ind
 10305  000B5E  CFDD F02A          	movff	postdec2,i2rd_buffer_put@ind+1
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;rd_buffer.c: 165: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
 10309  000B62  C01A  F01E         	movff	i2rd_buffer_put@pbuffer,??i2_rd_buffer_put
 10310  000B66  C01B  F01F         	movff	i2rd_buffer_put@pbuffer+1,??i2_rd_buffer_put+1
 10311  000B6A  5029               	movf	i2rd_buffer_put@ind,w,c
 10312  000B6C  261E               	addwf	??i2_rd_buffer_put,f,c
 10313  000B6E  502A               	movf	i2rd_buffer_put@ind+1,w,c
 10314  000B70  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 10315  000B72  0E06               	movlw	6
 10316  000B74  261E               	addwf	??i2_rd_buffer_put,f,c
 10317  000B76  0E00               	movlw	0
 10318  000B78  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 10319  000B7A  C01E  F024         	movff	??i2_rd_buffer_put,i2rd_buffer_put@mes_rec
 10320  000B7E  C01F  F025         	movff	??i2_rd_buffer_put+1,i2rd_buffer_put@mes_rec+1
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;rd_buffer.c: 166: (*mes_rec) = (*prec);
 10324  000B82  C01C  FFF6         	movff	i2rd_buffer_put@prec,tblptrl
 10325  000B86  C01D  FFF7         	movff	i2rd_buffer_put@prec+1,tblptrh
 10326  000B8A  6AF8               	clrf	tblptru,c
 10327  000B8C  C024  FFD9         	movff	i2rd_buffer_put@mes_rec,fsr2l
 10328  000B90  C025  FFDA         	movff	i2rd_buffer_put@mes_rec+1,fsr2h
 10329  000B94  0E05               	movlw	(high __ramtop+-1)
 10330  000B96  64F7               	cpfsgt	tblptrh,c
 10331  000B98  D003               	bra	i2u543_47
 10332  000B9A  0008               	tblrd		*
 10333  000B9C  50F5               	movf	tablat,w,c
 10334  000B9E  D005               	bra	i2u543_40
 10335  000BA0                     i2u543_47:
 10336  000BA0  CFF6 FFE9          	movff	tblptrl,fsr0l
 10337  000BA4  CFF7 FFEA          	movff	tblptrh,fsr0h
 10338  000BA8  50EF               	movf	indf0,w,c
 10339  000BAA                     i2u543_40:
 10340  000BAA  6EDF               	movwf	indf2,c
 10341                           
 10342                           ;rd_buffer.c: 167: ind++;
 10343  000BAC  4A29               	infsnz	i2rd_buffer_put@ind,f,c
 10344  000BAE  2A2A               	incf	i2rd_buffer_put@ind+1,f,c
 10345                           
 10346                           ;rd_buffer.c: 169: if(ind == pbuffer->head.size ) {
 10347  000BB0  EE20 F004          	lfsr	2,4
 10348  000BB4  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10349  000BB6  26D9               	addwf	fsr2l,f,c
 10350  000BB8  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10351  000BBA  22DA               	addwfc	fsr2h,f,c
 10352  000BBC  52DE               	movf	postinc2,f,c
 10353  000BBE  502A               	movf	i2rd_buffer_put@ind+1,w,c
 10354  000BC0  18DD               	xorwf	postdec2,w,c
 10355  000BC2  C029  FFE8         	movff	i2rd_buffer_put@ind,wreg
 10356  000BC6  B4D8               	btfsc	status,2,c
 10357  000BC8  18DF               	xorwf	indf2,w,c
 10358  000BCA  E102               	bnz	i2l5231
 10359                           
 10360                           ;rd_buffer.c: 170: ind = 0;
 10361  000BCC  6A29               	clrf	i2rd_buffer_put@ind,c
 10362  000BCE  6A2A               	clrf	i2rd_buffer_put@ind+1,c
 10363  000BD0                     i2l5231:
 10364                           
 10365                           ;rd_buffer.c: 171: }
 10366                           ;rd_buffer.c: 172: pbuffer->head.last = ind;
 10367  000BD0  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10368  000BD4  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10369  000BD8  C029  FFDE         	movff	i2rd_buffer_put@ind,postinc2
 10370  000BDC  C02A  FFDD         	movff	i2rd_buffer_put@ind+1,postdec2
 10371  000BE0  0012               	return	
 10372  000BE2                     __end_ofi2_rd_buffer_put:
 10373                           	opt stack 0
 10374  000BE2                     PL40:
 10375                           	opt stack 21
 10376  000BE2  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10377  000BE4  26D9               	addwf	fsr2l,f,c
 10378  000BE6  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10379  000BE8  22DA               	addwfc	fsr2h,f,c
 10380  000BEA  CFDE F01E          	movff	postinc2,??i2_rd_buffer_put
 10381  000BEE  CFDD F01F          	movff	postdec2,??i2_rd_buffer_put+1
 10382  000BF2  0012               	return	
 10383  000BF4                     __end_ofPL40:
 10384                           	opt stack 0
 10385  000BF4                     PL52:
 10386                           	opt stack 21
 10387  000BF4  501C               	movf	i2rd_buffer_put@prec,w,c
 10388  000BF6  6EF6               	movwf	tblptrl,c
 10389  000BF8  6EE9               	movwf	fsr0l,c
 10390  000BFA  0E05               	movlw	(high __ramtop+-1)
 10391  000BFC  6EEA               	movwf	fsr0h,c
 10392  000BFE  501D               	movf	i2rd_buffer_put@prec+1,w,c
 10393  000C00  0012               	return	
 10394  000C02                     __end_ofPL52:
 10395                           	opt stack 0
 10396                           tosu	equ	0xFFF
 10397                           tosh	equ	0xFFE
 10398                           tosl	equ	0xFFD
 10399                           pclath	equ	0xFFA
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           indf0	equ	0xFEF
 10408                           postinc0	equ	0xFEE
 10409                           fsr0h	equ	0xFEA
 10410                           fsr0l	equ	0xFE9
 10411                           wreg	equ	0xFE8
 10412                           indf1	equ	0xFE7
 10413                           postinc1	equ	0xFE6
 10414                           postdec1	equ	0xFE5
 10415                           fsr1h	equ	0xFE2
 10416                           fsr1l	equ	0xFE1
 10417                           indf2	equ	0xFDF
 10418                           postinc2	equ	0xFDE
 10419                           postdec2	equ	0xFDD
 10420                           fsr2h	equ	0xFDA
 10421                           fsr2l	equ	0xFD9
 10422                           status	equ	0xFD8
 10423                           tosu	equ	0xFFF
 10424                           tosh	equ	0xFFE
 10425                           tosl	equ	0xFFD
 10426                           pclath	equ	0xFFA
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           prodh	equ	0xFF4
 10432                           prodl	equ	0xFF3
 10433                           intcon	equ	0xFF2
 10434                           indf0	equ	0xFEF
 10435                           postinc0	equ	0xFEE
 10436                           fsr0h	equ	0xFEA
 10437                           fsr0l	equ	0xFE9
 10438                           wreg	equ	0xFE8
 10439                           indf1	equ	0xFE7
 10440                           postinc1	equ	0xFE6
 10441                           postdec1	equ	0xFE5
 10442                           fsr1h	equ	0xFE2
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           fsr2h	equ	0xFDA
 10448                           fsr2l	equ	0xFD9
 10449                           status	equ	0xFD8
 10450                           
 10451                           	psect	param0
 10452  0000                     tosu	equ	0xFFF
 10453                           tosh	equ	0xFFE
 10454                           tosl	equ	0xFFD
 10455                           pclath	equ	0xFFA
 10456                           tblptru	equ	0xFF8
 10457                           tblptrh	equ	0xFF7
 10458                           tblptrl	equ	0xFF6
 10459                           tablat	equ	0xFF5
 10460                           prodh	equ	0xFF4
 10461                           prodl	equ	0xFF3
 10462                           intcon	equ	0xFF2
 10463                           indf0	equ	0xFEF
 10464                           postinc0	equ	0xFEE
 10465                           fsr0h	equ	0xFEA
 10466                           fsr0l	equ	0xFE9
 10467                           wreg	equ	0xFE8
 10468                           indf1	equ	0xFE7
 10469                           postinc1	equ	0xFE6
 10470                           postdec1	equ	0xFE5
 10471                           fsr1h	equ	0xFE2
 10472                           fsr1l	equ	0xFE1
 10473                           indf2	equ	0xFDF
 10474                           postinc2	equ	0xFDE
 10475                           postdec2	equ	0xFDD
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           tosu	equ	0xFFF
 10480                           tosh	equ	0xFFE
 10481                           tosl	equ	0xFFD
 10482                           pclath	equ	0xFFA
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           indf0	equ	0xFEF
 10491                           postinc0	equ	0xFEE
 10492                           fsr0h	equ	0xFEA
 10493                           fsr0l	equ	0xFE9
 10494                           wreg	equ	0xFE8
 10495                           indf1	equ	0xFE7
 10496                           postinc1	equ	0xFE6
 10497                           postdec1	equ	0xFE5
 10498                           fsr1h	equ	0xFE2
 10499                           fsr1l	equ	0xFE1
 10500                           indf2	equ	0xFDF
 10501                           postinc2	equ	0xFDE
 10502                           postdec2	equ	0xFDD
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    621
    Data        0
    BSS         1075
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      66
    BANK0           160     71     141
    BANK1           256      0     208
    BANK2           256      0     234
    BANK3           256      0     227
    BANK4           256      0     187
    BANK5           256      0     127

Pointer List with Targets:

    ?___awmod	int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_syntax_as_integer	int  size(1) Largest target is 0

    ?_syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    on_parameter_found@p	PTR const void  size(3) Largest target is 32767
		 -> parameter_text(BANK3[127]), parameter_value(BANK2[127]), ROM(CODE[32767]), 

    ?_string_utils_from_hex	int  size(1) Largest target is 0

    ?_string_utils_strchr	int  size(1) Largest target is 0

    ?_string_utils_split	int  size(1) Largest target is 0

    ?_string_utils_copy	int  size(1) Largest target is 0

    ?_string_utils_strlen	int  size(1) Largest target is 0

    ?_rd_buffer_cnt	int  size(1) Largest target is 0

    ?_adc_read	unsigned short  size(1) Largest target is 0

    events	volatile PTR FTN()void [8] size(2) Largest target is 0
		 -> detection_task(), serialport_task(), 

    pd_add_value@d	PTR volatile struct . size(2) Largest target is 101
		 -> pd_detector(BANK1[101]), 

    cla_add_value@d	PTR volatile struct . size(1) Largest target is 21
		 -> cla_detector(BANK0[21]), 

    sp__syntax_as_bytearray	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    sp__syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    syntax_string@pchain	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    syntax_string@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    this_parse_item@pitem	PTR char  size(1) Largest target is 1
		 -> parameter_id(BANK0[1]), command_id(BANK0[1]), 

    this_parse_item@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    this_parse_item@pvar	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_item@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_variable_load_from_text@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_from_hex@pdata	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_from_hex@phex_str	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_strncmp@pstr2	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strncmp@pstr1	PTR const unsigned char  size(2) Largest target is 621
		 -> syntax@syntax_data(CODE[621]), 

    string_utils_strchr@pbuf	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_split@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    string_utils_copy@pdst	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), parameter_value(BANK2[127]), 

    string_utils_copy@psrc	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_strlen@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), parameter_value(BANK2[127]), 

    serialport_write@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[5]), STR_28(CODE[5]), 
		 -> parameter_text(BANK3[127]), 

    S514$callback_function	PTR FTN()void  size(1) Largest target is 0

    timers_list.callback_function	PTR FTN()void  size(1) Largest target is 0

    rd_buffer_put@mes_rec	PTR volatile unsigned char  size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_put@prec	PTR unsigned char  size(2) Largest target is 127
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[5]), STR_28(CODE[5]), 
		 -> detection_obtain_analog_service@adc_data(BANK0[1]), parameter_text(BANK3[127]), putch@byte(COMRAM[1]), serialport_service@byte(BANK0[1]), 

    rd_buffer_put@pbuffer	PTR struct . size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_get@prec	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_task@byte(BANK0[1]), rd_buffer_readline@ch(BANK0[1]), 

    rd_buffer_get@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_cnt@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_readline@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_rx_buffer(BANK2[107]), 

    rd_buffer_readline@pdata	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    rd_buffer_readline@psize	PTR int  size(1) Largest target is 2
		 -> serialport_task@size(BANK0[2]), 

    rd_buffer_init@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    uart_getc@pbyte	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_service@byte(BANK0[1]), 

    uart_puts@pstr	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_32(CODE[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr_high in COMRAM

    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put
    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put

Critical Paths under _main in BANK0

    _main->_serialport_task
    _serialport_task->_syntax_string
    _rd_buffer_readline->_rd_buffer_get
    _syntax_string->_this_parse_item
    _this_parse_item->_this_variable_load_from_text
    _string_utils_strncmp->_string_utils_is_upper_case
    _this_variable_load_from_text->_string_utils_from_hex
    _string_utils_from_hex->_string_utils_strlen
    _string_utils_strlen->_string_utils_is_symbol
    _on_parameter_found->_set_parameter
    _on_parameter_found->_get_parameter
    _detection_task->_pd_add_value
    _pd_add_value->___awdiv
    _set_parameter->_serialport_write
    _get_parameter->_serialport_write
    _serialport_write->_rd_buffer_put
    _startup->_serialport_startup
    _sysclk_init->_sysclk_setup_intosc
    _uart_init->_uart_set_baudrate
    _uart_puts->_uart_putc
    _serialport_startup->_rd_buffer_init

Critical Paths under _isr_high in BANK0

    interrupts@isr_high->_serialport_service

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   16035
                                             67 BANK0      4     4      0
                           _delay_ms
                            _startup
                     _detection_task
                    _serialport_task
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2      22
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serialport_task                                      3     3      0   11040
                                             64 BANK0      3     3      0
                      _syntax_string
                 _rd_buffer_readline
                      _rd_buffer_get
                          _uart_putc
                      _rd_buffer_cnt
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_readline                                   6     1      5     514
                                             22 BANK0      6     1      5
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_get                                       10     7      3     291
                                             12 BANK0     10     7      3
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_cnt                                        8     6      2     112
                                             12 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _syntax_string                                       11     6      5    9767
                                             53 BANK0     11     6      5
                 _string_utils_split
                    _this_parse_item
                 _on_parameter_found
                _string_utils_strlen
 ---------------------------------------------------------------------------------
 (3) _string_utils_split                                  13     6      7     319
                                             12 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _this_parse_item                                     17    14      3    2471
                                             36 BANK0     17    14      3
                _string_utils_strlen
                _string_utils_strchr
                  _string_utils_copy
               _string_utils_strncmp
       _this_variable_load_from_text
 ---------------------------------------------------------------------------------
 (4) _string_utils_strncmp                                14     7      7     407
                                             14 BANK0     14     7      7
         _string_utils_is_upper_case
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_upper_case                           2     2      0      68
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _this_variable_load_from_text                         5     2      3     933
                                             31 BANK0      5     2      3
                _string_utils_strchr
                  _string_utils_copy
              _string_utils_from_hex
 ---------------------------------------------------------------------------------
 (5) _string_utils_copy                                    9     2      7     121
                                             12 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (5) _string_utils_strchr                                 11     7      4     202
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (5) _string_utils_from_hex                               13     9      4     499
                                             18 BANK0     13     9      4
                _string_utils_strlen
               _symb_from_hex_to_bin
 ---------------------------------------------------------------------------------
 (3) _string_utils_strlen                                  4     2      2     202
                                             14 BANK0      4     2      2
             _string_utils_is_symbol
 ---------------------------------------------------------------------------------
 (4) _string_utils_is_symbol                               2     2      0      68
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _symb_from_hex_to_bin                                 1     1      0      88
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _on_parameter_found                                   8     2      6    5820
                                             33 BANK0      7     1      6
                      _set_parameter
                      _get_parameter
                   _serialport_write
 ---------------------------------------------------------------------------------
 (1) _detection_task                                       3     3      0    3534
                                             43 BANK0      3     3      0
                       _pd_add_value
                      _cla_add_value
 ---------------------------------------------------------------------------------
 (2) _cla_add_value                                       13     9      4     906
                                             12 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _pd_add_value                                        23    19      4    2605
                                             20 BANK0     23    19      4
                            ___lbmod
                            ___awdiv
                             ___wmul
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _set_parameter                                        2     2      0    1885
                                             31 BANK0      2     2      0
                  _syntax_as_integer
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (5) _syntax_as_integer                                    2     0      2       0
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _get_parameter                                        2     2      0    1870
                                             31 BANK0      2     2      0
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (4) _serialport_write                                     2     0      2    1645
                                             29 BANK0      2     0      2
                      _rd_buffer_put
                    _syntax_get_text (ARG)
 ---------------------------------------------------------------------------------
 (5) _rd_buffer_put                                       17    13      4    1420
                                             12 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (5) _syntax_get_text                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup                                              1     1      0     369
                                             19 BANK0      1     1      0
                          _gpio_init
                        _sysclk_init
                           _adc_init
                          _uart_init
                          _uart_puts
                 _serialport_startup
 ---------------------------------------------------------------------------------
 (2) _sysclk_init                                          0     0      0      22
                _sysclk_setup_intosc
 ---------------------------------------------------------------------------------
 (3) _sysclk_setup_intosc                                  1     1      0      22
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
                  _uart_set_baudrate
 ---------------------------------------------------------------------------------
 (3) _uart_set_baudrate                                    3     0      3       0
                                             12 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            4     0      4      89
                                             13 BANK0      4     0      4
                          _uart_putc
 ---------------------------------------------------------------------------------
 (2) _uart_putc                                            1     1      0      22
                                             12 BANK0      1     1      0
                     _uart_byte_sent
 ---------------------------------------------------------------------------------
 (3) _uart_byte_sent                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialport_startup                                   2     2      0     158
                                             17 BANK0      2     2      0
                     _rd_buffer_init
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_init                                       5     1      4     134
                                             12 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     300
                                             12 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     296
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     159
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4      92
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr_high                                             8     8      0    6795
                                             17 COMRAM     8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3625
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 (8) interrupts@isr_high                                   8     8      0    6795
                                              4 BANK0      8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3625
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _startup
     _gpio_init
     _sysclk_init
       _sysclk_setup_intosc
     _adc_init
     _uart_init
       _uart_set_baudrate
     _uart_puts
       _uart_putc
         _uart_byte_sent
     _serialport_startup
       _rd_buffer_init
   _detection_task
     _pd_add_value
       ___lbmod
       ___awdiv
       ___wmul
       ___awmod
     _cla_add_value
   _serialport_task
     _syntax_string
       _string_utils_split
       _this_parse_item
         _string_utils_strlen
           _string_utils_is_symbol
         _string_utils_strchr
         _string_utils_copy
         _string_utils_strncmp
           _string_utils_is_upper_case
         _this_variable_load_from_text
           _string_utils_strchr
           _string_utils_copy
           _string_utils_from_hex
             _string_utils_strlen
               _string_utils_is_symbol
             _symb_from_hex_to_bin
       _on_parameter_found
         _set_parameter
           _syntax_as_integer
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _get_parameter
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _serialport_write
           _rd_buffer_put
           _syntax_get_text (ARG)
       _string_utils_strlen
         _string_utils_is_symbol
     _rd_buffer_readline
       _rd_buffer_get
     _rd_buffer_get
     _uart_putc
       _uart_byte_sent
     _rd_buffer_cnt

 _isr_high (ROOT)
   _delay_interrupt_service
   _serialport_service
     _uart_byte_available
     _uart_getc
       _uart_error
       _uart_reset
         _uart_byte_available
         _uart_error
       _uart_byte_available
     i2_rd_buffer_put
   _detection_obtain_analog_service
     _adc_read
     i2_rd_buffer_put

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0      7F      14       49.6%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      BB      13       73.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      E3      11       88.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      EA       9       91.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     47      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      11       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4A6      15        0.0%
DATA                 0      0     4B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Thu Oct 15 00:58:23 2015

                ?_delay_interrupt_service 0001                  __size_of_this_parse_item 0158  
                   __end_of_syntax_string 0D1E                          ?i2_rd_buffer_put 001A  
                                      PL2 04B6                                        PL4 04DE  
                                      PL6 04F2                                        PL8 0504  
                            ___awdiv@sign 0071                       ___wmul@multiplicand 006E  
                string_utils_from_hex@len 0079             string_utils_from_hex@phex_str 0074  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                                     PL10 051A                                       PL20 07E4  
                                     PL12 07B2                                       PL30 0564  
                                     PL22 07F4                                       PL14 07C8  
                                     PL40 0BE2                                       PL32 057A  
                                     PL24 0D1E                                       PL16 0FAC  
                                     PL50 05D8                                       PL42 05B6  
                                     PL34 0806                                       PL26 0536  
                                     PL18 07D6                                       PL60 0602  
                                     PL52 0BF4                                       PL44 0A9A  
                                     PL36 0590                                       PL28 0554  
                                     PL54 0AAC                                       PL46 0D32  
                                     PL38 05A2                                       PL56 05E8  
                                     PL48 05C8                                       PL58 05F6  
                                     l504 19B0                                       l264 1552  
                                     l514 19CA                                       l288 09E2  
                                     l712 06A2                                       l456 1802  
                                     l552 0F20                                       l493 0FA2  
                                     l662 0898                                       l751 03D6  
                                     l832 13DA                                       l657 1168  
                                     l834 13DE                                       l763 0382  
                                     l835 13E4                                       l748 0248  
                                     l759 032A                                       l963 1744  
                            __CFG_CPB$OFF 000000                __size_of_string_utils_copy 0088  
                            __CFG_CPD$OFF 000000                              __CFG_BORV$27 000000  
                            ___awmod@sign 0071                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   __end_of_cla_add_value 07B2                              __CFG_LVP$OFF 000000  
                                    l1030 0DCA                                      l1023 0D5E  
                                    l1033 0DFC                                      l3111 120A  
                                    l3107 11D6                                      l3211 0F24  
                                    l3203 0F08                                      l1533 18EA  
                                    l3221 1480                                      l3213 0F28  
                                    l3133 1256                                      l3125 123A  
                                    l3215 0F38                                      l3303 093E  
                                    l3119 121E      __end_of_this_variable_load_from_text 118A  
   __size_of_this_variable_load_from_text 0092              _this_variable_load_from_text 10F8  
                                    l3225 1486                                      l3161 0F4E  
                                    l3209 0F1A                                      l3313 0968  
                                    l3137 1266                                      l3411 0172  
                                    l3235 1492                                      l3075 17DA  
                                    l3251 1042                                      l3307 0956  
                                    l3147 127C                                      l5003 145A  
                                    l5101 10F2                                      l3229 148C  
                                    l3245 0FEE                                      l3165 0F76  
                                    l3261 1152                                      l3309 095E  
                                    l3423 0232                                      l3415 0178  
                                    l3167 0F7A                                      l5031 0C76  
                                    l5023 0C4C                                      l5113 130A  
                                    l3441 02CE                                      l3265 1170  
                                    l5041 0CE2                                      l5033 0C80  
                                    l3443 02E4                                      l3435 029A  
                                    l3355 0674                                      l3347 0628  
                                    l3099 119A                                      l3283 08A0  
                                    l5043 0CF4                                      l3507 13EA  
                                    l2821 184C                                      l3381 07B0  
                                    l3373 0752                                      l3349 0648  
                                    l3189 0EBA                                      l3293 08D4  
                                    l5045 0CFC                                      l2901 1506  
                                    l3509 13F8                                      l3703 15AA  
                                    l2831 19F8                                      l5055 1672  
                                    l3471 0408                                      l3463 03C0  
                                    l3455 0370                                      l3199 0EFA  
                                    l5039 0CC6                                      l3641 132A  
                                    l2825 1860                                      l3449 0314  
                                    l3377 0770                                      l5073 1822  
                                    l5049 0D0C                                      l2905 1512  
                                    l2913 153E                                      l3723 1934  
                                    l3715 191C                                      l3707 15B6  
                                    l5059 168C                                      l5091 107C  
                                    l3459 039A                                      l5067 1816  
                                    l5075 182E                                      l2907 1522  
                                    l5171 0D50                                      l3733 18F6  
                                    l3653 134A                                      l5093 10C0  
                                    l5085 106C                                      l3485 0488  
                                    l3477 0438                                      l3493 04B4  
                                    l3469 03F2                                      l5069 181C  
                                    l2941 0EA2                                      l3655 1352  
                                    l3647 133A                                      l2951 1666  
                                    l2919 1556                                      l5183 0D86  
                                    l3673 1386                                      l3665 1370  
                                    l3657 1356                                      l3489 0496  
                                    l5185 0D90                                      l5177 0D66  
                                    l5169 0D44                                      l3691 1582  
                                    l3683 156A                                      l5099 10E6  
                                    l2939 0E9E                                      l2795 19EA  
                                    l3693 158A                                      l3669 137A  
                                    l5189 0D96                                      l3695 158E  
                                    l3687 1576                                      l2889 17CA  
                                    l3699 15A0                                      _ADIF 007CF6  
                                    l4969 09C4                                      l4987 0A88  
                                    l4995 1408                                      l4997 1422  
                                    l4999 1442                                      _CREN 007D5C  
                                    u2070 11BE                                      _LATC 000F8B  
                                    u2160 0F66                                      u2080 11F6  
                                    _LATD 000F8C                                      u2077 11B4  
                                    u2190 0F9E                                      u2167 0F5C  
                                    u2087 11EC                                      u2505 0760  
                                    u5010 09A4                                      u2515 0782  
                                    u2197 0F94                                      u5030 09BC  
                                    u2375 08F4                                      u5017 099E  
                                    u2465 066C                                      u5037 09B6  
                                    u2485 06EE                                      u5070 0A60  
                                    u1795 0E30                                      u5180 16B2  
                                    u5077 0A56                                      u5187 16AC  
                                    u5348 0DB2                                      _RCIF 007CF5  
                                    u5349 0DC6                                      u5368 0DDE  
                                    u5369 0DF2                                      _TMR0 000FD6  
                                    _TXIF 007CF4            string_utils_is_upper_case@symb 006D  
            __end_of_symb_from_hex_to_bin 14EE                              __CFG_PWRT$ON 000000  
                        ??_uart_byte_sent 006C               __size_of_string_utils_split 0084  
                        ??_rd_buffer_init 0070                           set_parameter@ok 0080  
                                    _main 0D42                                      _pool 0033  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      indf1 000FE7  
                                    fsr1l 000FE1                                      indf2 000FDF  
                                    fsr2l 000FD9                         rd_buffer_get@last 0071  
                       rd_buffer_get@prec 006E                                      prodh 000FF4  
                                    prodl 000FF3                           _serialport_task 1406  
                                    start 00F0                             __CFG_IESO$OFF 000000  
                           __CFG_MCLRE$ON 000000                       i2_rd_buffer_put$482 0026  
                                   ?_main 0001                           __end_of___awdiv 1390  
                                   _ADRES 000FC3                                     STR_30 7FEF  
                                   STR_31 7FEF                                     STR_32 7FE9  
                                   STR_28 7FF5                           __end_of___awmod 15C0  
                                   STR_29 7FFA                           __end_of___lbmod 193C  
                                   _ANSEL 000F7E                           ___awdiv@divisor 006E  
                           ?_pd_add_value 0074                                     _RC1IF 007CF5  
                                   i2l227 177E                                     i2l228 177A  
                           __CFG_WDTEN$ON 000000                                     i2l169 197E  
                                   i2l288 0B2C                           ___awdiv@counter 0070  
                                   i2l984 005A                                     _RCREG 000FAE  
                                   _RCSTA 000FAB                       this_parse_item@pval 008F  
                                   _SPBRG 000FAF                       this_parse_item@pvar 008B  
                     this_parse_item@pstr 0084                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                         rd_buffer_put@prec 006E  
                                   _TXREG 000FAD                                     _TXSTA 000FAC  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
 __end_of_detection_obtain_analog_service 197C  __size_of_detection_obtain_analog_service 0020  
       ??_detection_obtain_analog_service 002B          ?_detection_obtain_analog_service 0001  
                          __CFG_EBTR1$OFF 000000           _detection_obtain_analog_service 195C  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
            __size_of_string_utils_strchr 0070              __size_of_string_utils_strlen 003E  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
              string_utils_is_symbol@symb 006D                               _sysclk_init 1A70  
                                   main@i 00A6                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                      rd_buffer_get@first 0074             ?_this_variable_load_from_text 007F  
                                   status 000FD8                           __end_of_startup 1748  
                        ?_syntax_get_text 0001                          _serialport_write 1670  
                          __CFG_HFOFST$ON 000000                           ??_get_parameter 007F  
              __end_ofinterrupts@isr_high 00F0                           __initialization 15C0  
                symb_from_hex_to_bin@symb 006C                 uart_set_baudrate@baudrate 006C  
                 rd_buffer_readline@pdata 0078                              __end_of_main 19E2  
                 rd_buffer_readline@psize 007A                 rd_buffer_readline@pbuffer 0076  
             __size_of_rd_buffer_readline 006A                        rd_buffer_init@size 006E  
                          ??_pd_add_value 0078                                    ??_main 00A3  
                           __activetblptr 000002                         ??_this_parse_item 0087  
            __size_of_uart_byte_available 0008                       serialport_task@byte 00A0  
                     serialport_task@size 00A1            _string_utils_is_upper_case$799 006C  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                          ___awdiv@dividend 006C  
                 __end_of_serialport_task 147A                                    _ANSELH 000F7F  
                                  _GODONE 007E11                          __end_of_adc_init 19E2  
                        __end_of_adc_read 178E                                    i2l1008 00CE  
              __end_of_serialport_service 1702                                    i2l5213 0B0E  
                                  i2l5231 0BD0                                    i2l5151 0034  
                                  i2l5161 004C                                    i2l5153 0036  
                                  i2l5243 1986                                    i2l5163 0054  
                                  i2l5155 003E                                    i2l5147 0028  
                                  i2l5245 198E                                    i2l5165 0058  
                                  i2l5157 0046                                    i2l5149 0030  
                                  i2l5159 004A                                    i2l5281 009C  
                                  i2l5265 18E2                                    i2l5257 18CA  
                                  i2l5291 00BA                                    i2l5283 00A4  
                                  i2l5275 16E8                                    i2l5293 00BE  
                                  i2l5285 00A8                                    i2l5295 00C0  
                                  i2l5287 00AA                                    i2l5279 16F8  
                                  i2l5297 00C8                                    i2l5289 00B2  
                                  i2l5299 00CC                                    i2l4955 1776  
                                  i2l4947 1A46               string_utils_split@delimeter 0072  
                                  _OSCCON 000FD3                     rd_buffer_init@pbuffer 006C  
              __end_of_serialport_startup 18B6                      this_parse_item@pitem 0086  
                                  _STATUS 000FD8                             main@event_old 00A4  
                        __end_of_delay_ms 19F4                            __CFG_XINST$OFF 000000  
                      _cla_add_value$1010 0076                        _cla_add_value$1009 0074  
                       get_parameter@p_id 007F             __size_of_string_utils_strncmp 0096  
                       set_parameter@p_id 007F                                    ___wmul 18E6  
                               ??___awdiv 0070                            __CFG_STVREN$ON 000000  
                               ??___awmod 0070                                 ??___lbmod 006D  
             __end_of_sysclk_setup_intosc 1A3A                                    _events 00A7  
                                  clear_0 15C6                                    clear_1 15D2  
                                  clear_2 15DE                                    clear_3 15EA  
                                  clear_4 15F6                                    clear_5 1602  
                                  clear_6 160E                          ___awdiv@quotient 0072  
                         ___awmod@divisor 006E                           ___awmod@counter 0070  
                        __end_of_isr_high 007C                      _symb_from_hex_to_bin 147A  
                serialport_startup@result 0072                         _serialport_buffer 037F  
                            __mediumconst 7D7C                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                     rd_buffer_get@result 0073                    __size_of_rd_buffer_get 00A6  
                  __size_of_rd_buffer_cnt 0052                    __size_of_rd_buffer_put 012E  
                               ??_startup 0073                   string_utils_strchr@pbuf 006C  
                         ___lbmod@divisor 006C                                __accesstop 0060  
                 __end_of__initialization 1614                           ___lbmod@counter 006E  
                         __CFG_PBADEN$OFF 000000                   string_utils_strlen@pstr 006E  
          ??_this_variable_load_from_text 0082                   string_utils_strncmp@len 0072  
                 string_utils_strncmp@pos 0078                            __pcstackCOMRAM 0001  
                            _cla_detector 00C0                          cla_add_value@val 006C  
                 detection_task@alarm_cla 00BE                   detection_task@alarm_wav 00BF  
                   __end_of_set_parameter 10F8                                __end_ofPL2 04DE  
                              __end_ofPL4 04F2                                __end_ofPL6 0504  
                              __end_ofPL8 051A                     ?_symb_from_hex_to_bin 0001  
        __size_of_delay_interrupt_service 0012          this_variable_load_from_text@pval 007F  
             __size_of_on_parameter_found 003E                     _string_utils_from_hex 0FD0  
                         __CFG_LPT1OSC$ON 000000                          ?_serialport_task 0001  
                              __pbssBANK0 00A7                                __pbssBANK1 0100  
                              __pbssBANK2 0200                                __pbssBANK3 0300  
                              __pbssBANK4 0400                                __pbssBANK5 0500  
                      __size_of_gpio_init 0012                      __end_of_pd_add_value 04B6  
                 __size_of_detection_task 0076                         fp__detection_task 00F0  
                     _string_utils_strchr 0F3C                       _string_utils_strlen 17CE  
                           _rd_buffer_get 0E00                             _rd_buffer_cnt 161E  
                           _rd_buffer_put 096C                                   ?___wmul 006C  
                                 _BAUDCON 000FB8                                   _BAUDCTL 000FB8  
                  i2rd_buffer_put@mes_rec 0024                    i2rd_buffer_put@pbuffer 001A  
 detection_obtain_analog_service@adc_data 0062                                 ?_adc_init 0001  
                               ?_adc_read 001A           this_variable_load_from_text@len 0082  
                __end_of_serialport_write 16BA                       syntax_string@chains 009F  
                      __size_of_uart_getc 0030                        __size_of_uart_init 0020  
                      __size_of_uart_putc 0012                       syntax_string@pchain 009D  
                      __size_of_uart_puts 003A                  __size_ofi2_rd_buffer_put 0128  
                     syntax_string@result 009B                      ?_string_utils_strchr 006C  
                               ?_delay_ms 006C                      ?_string_utils_strlen 006E  
                         __CFG_WDTPS$1024 000000                                _command_id 00E9  
                   this_parse_item@result 008A                              ?_sysclk_init 0001  
              __end_of_string_utils_split 1296                         _rd_buffer_put$482 0078  
                  __size_of_syntax_string 011C                  string_utils_split@chains 0075  
                ??_string_utils_is_symbol 006C                       _uart_byte_available 1A68  
                               ?_isr_high 0001                                   __Hparam 0000  
                                 __Lparam 0000                            ?_rd_buffer_get 006C  
                          ?_rd_buffer_cnt 006C                            ?_rd_buffer_put 006C  
                         _this_parse_item 0814                                   ___awdiv 1318  
                                 ___awmod 1558                                   ___lbmod 1912  
                              _event_miss 002B                           __size_of___wmul 002C  
                  __size_of_cla_add_value 01A8                    ??_symb_from_hex_to_bin 006C  
                  serialport_service@byte 0063                      serialport_write@pstr 007D  
                                 __pcinit 15C0                                   __ramtop 0600  
                              ??_adc_init 006C                                ??_adc_read 001C  
                                 __ptext0 0D42                                   __ptext1 19E2  
                                 __ptext2 1390                                   __ptext3 1406  
                                 __ptext4 14EE                                   __ptext5 0E00  
                                 __ptext6 161E                                   __ptext7 0C02  
                                 __ptext8 1212                                   __ptext9 0814  
                       __end_of_gpio_init 1A18                      ?_uart_byte_available 0001  
                      interrupts@isr_high 007C                          ___awmod@dividend 006C  
                   ??_string_utils_strchr 0070                     ??_string_utils_strlen 0070  
                              ??_delay_ms 006E                    ?_string_utils_from_hex 0072  
                                 _startup 1702                       ?interrupts@isr_high 0001  
                    end_of_initialization 1614                         _syntax_as_integer 1A56  
                       i2rd_buffer_put@sz 0027                             __Lmediumconst 7D7C  
                      ?_syntax_as_integer 006C                                ??_isr_high 0012  
                       __end_of_uart_getc 18E6                         __end_of_uart_init 195C  
                       __end_of_uart_putc 1A06                         __end_of_uart_puts 1884  
                   __end_of_get_parameter 1318                   this_parse_item@is_equal 0089  
                    rd_buffer_get@pbuffer 006C                __end_of_rd_buffer_readline 1558  
                     ??_syntax_as_integer 006E                                 _RCSTAbits 000FAB  
                                 postdec1 000FE5                                   postdec2 000FDD  
                     _this_case_sensitive 00BB                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                 __size_of_uart_byte_sent 0008                        _serialport_service 16BA  
                    rd_buffer_cnt@pbuffer 006C                  __size_of_syntax_get_text 000C  
                    ??interrupts@isr_high 0064                   __size_of_rd_buffer_init 0040  
                           _syntax_string 0C02                        _serialport_startup 1884  
                              _this_alarm 00BA                                _uart_error 1A3A  
                              _uart_reset 197C              ??_string_utils_is_upper_case 006C  
                   ??_uart_byte_available 001A                       ?_serialport_service 0001  
                 _delay_interrupt_service 1A18                       ?_serialport_startup 0001  
                        ___lbmod@dividend 006D              __end_of_string_utils_strncmp 0F3C  
                           pd_add_value@d 0074                             pd_add_value@i 008A  
                  string_utils_from_hex@i 007D                    string_utils_from_hex@j 007B  
               __end_of_syntax_as_integer 1A60                             _cla_add_value 060A  
                   __size_of_pd_add_value 03C2                         ??i2_rd_buffer_put 001E  
                             ___lbmod@rem 006F                   __end_of_this_parse_item 096C  
                    ??_serialport_service 0062           __size_of_string_utils_is_symbol 001A  
                         ??_rd_buffer_get 006F                           ??_rd_buffer_cnt 006E  
                    ??_serialport_startup 0071                           ??_rd_buffer_put 0070  
     __size_of_string_utils_is_upper_case 001A                            _detection_task 1390  
                           startup@result 0073                            ?_syntax_string 0095  
                      detection_task@zero 008B                         cla_add_value@zero 006E  
                           delay_ms@delay 006C                            __end_of___wmul 1912  
                        rd_buffer_put@ind 007B                              _pd_add_value 00F4  
                             __end_ofPL10 0536                               __end_ofPL20 07F4  
                             __end_ofPL12 07C8                               __end_ofPL30 057A  
                             __end_ofPL22 0806                               __end_ofPL14 07D6  
                             __end_ofPL40 0BF4                               __end_ofPL32 0590  
                             __end_ofPL24 0D32                               __end_ofPL16 0FD0  
                             __end_ofPL50 05E8                               __end_ofPL42 05C8  
                             __end_ofPL34 0814                               __end_ofPL26 0554  
                             __end_ofPL18 07E4                               __end_ofPL60 060A  
                             __end_ofPL52 0C02                               __end_ofPL44 0AAC  
                             __end_ofPL36 05A2                               __end_ofPL28 0564  
                             __end_ofPL54 0ABA                               __end_ofPL46 0D42  
                             __end_ofPL38 05B6                               __end_ofPL56 05F6  
                             __end_ofPL48 05D8                               __end_ofPL58 0602  
                     start_initialization 15C0                 string_utils_strchr@result 0073  
            __size_of_sysclk_setup_intosc 0010                           _parameter_value 0200  
                       _uart_set_baudrate 1A76                            cla_add_value@d 0078  
                          ?_cla_add_value 006C                        ?_uart_set_baudrate 006C  
                    __size_of_sysclk_init 0006                    __end_of_detection_task 1406  
            sysclk_setup_intosc@frequency 006C                       ??_uart_set_baudrate 006F  
                       syntax@syntax_data 7D7C                         syntax_string@pstr 0095  
                    rd_buffer_init@result 0070                    string_utils_split@pbuf 006C  
                  string_utils_split@prev 0077                    string_utils_split@pstr 006E  
                  string_utils_split@symb 0078                                  ??___wmul 0070  
                             ?_uart_error 0001                               ?_uart_reset 0001  
               ??_delay_interrupt_service 001A                    _string_utils_is_symbol 19B4  
                  string_utils_strchr@pos 0075                         ??_syntax_get_text 006C  
                       ?_serialport_write 007D                 __end_of_uart_set_baudrate 1A7C  
              __end_of_on_parameter_found 184A                         __size_of_adc_init 0014  
                       __size_of_adc_read 0046                               __pbssCOMRAM 002B  
                           __pcstackBANK0 0060                        ??_serialport_write 007F  
                     __end_of__stringdata 7FFF                __size_of_syntax_as_integer 000A  
                         uart_getc@result 001C                      rd_buffer_readline@ch 007B  
                       __size_of_delay_ms 0012                    __size_of_set_parameter 0094  
               __end_ofsyntax@syntax_data 7FE9                 string_utils_strncmp@pstr1 006E  
               string_utils_strncmp@pstr2 0070                 string_utils_strncmp@symb1 007A  
               string_utils_strncmp@symb2 007B                          ?_this_parse_item 0084  
                         ?_detection_task 0001                                 _g_analog0 00B7  
                               _g_analog1 003D                                 _g_analog2 003F  
                               __pnvBANK0 00EB                            _uart_error$257 001A  
                __size_of_serialport_task 0074                        fp__serialport_task 00F0  
                      _string_utils_split 1212                           ??_syntax_string 009A  
                       __CFG_CCP2MX$PORTC 000000                         __size_of_isr_high 0074  
                    _string_utils_strncmp 0EA6                                 __pintcode 0008  
                          _uart_byte_sent 1A60                             __pmediumconst 7D7C  
                          _rd_buffer_init 178E                                  ?___awdiv 006C  
                                ?___awmod 006C                                  ?___lbmod 006C  
              _string_utils_is_symbol$805 006C        __end_of_string_utils_is_upper_case 19B4  
              _string_utils_is_upper_case 199A                       ?_string_utils_split 006C  
                 ??_string_utils_from_hex 0076                              _parameter_id 00EA  
                         ??_cla_add_value 0070                                 _gpio_init 1A06  
                                ?_startup 0001                               _g_rx_buffer 027F  
         __end_of_delay_interrupt_service 1A2A                      ??_string_utils_split 0073  
                     __size_of_uart_error 0010                       __size_of_uart_reset 001E  
                             _g_tx_buffer 0100                            ___wmul@product 0070  
                                _PIE1bits 000F9D                    on_parameter_found@p_id 0082  
                  __end_of_uart_byte_sent 1A68                    on_parameter_found@type 0086  
                     _this_delay_timer_ms 00EB                    __end_of_rd_buffer_init 17CE  
                                _PIR1bits 000F9E                                  i2u525_40 0030  
                                i2u525_41 002E                                  i2u526_40 0046  
                                i2u526_41 0044                                  i2u543_40 0BAA  
                                i2u527_40 0054                                  i2u527_41 0052  
                   ?_string_utils_strncmp 006E                                  i2u543_47 0BA0  
                                i2u553_40 00A4                                  i2u537_40 0AF2  
                                i2u553_41 00A2                                  i2u537_47 0AEC  
                                i2u554_40 00BA                                  i2u554_41 00B8  
                                i2u555_40 00C8                                  i2u539_40 0B08  
                                i2u555_41 00C6                                  i2u539_47 0B02  
                   string_utils_copy@pdst 006C                     string_utils_copy@psrc 006E  
                    syntax_string@str_len 0097                                 _uart_getc 18B6  
                               _uart_init 193C                    this_parse_item@var_len 0093  
                               _uart_putc 19F4                                 _uart_puts 184A  
                      _this_contains_crlf 00BC                             _set_parameter 1064  
                  this_parse_item@str_len 008D               __end_of_string_utils_strchr 0FAC  
             __end_of_string_utils_strlen 180C                      rd_buffer_put@mes_rec 0076  
           __size_of_symb_from_hex_to_bin 0074                                _ADCON0bits 000FC2  
                    rd_buffer_put@pbuffer 006C                               __stringdata 7FE9  
                       ___wmul@multiplier 006C                           i2_rd_buffer_put 0ABA  
              __size_of_uart_set_baudrate 0006                        _rd_buffer_readline 14EE  
                        this_parse_item@i 0092                           rd_buffer_cnt@sz 0072  
                              ?_gpio_init 0001                           rd_buffer_put@sz 0079  
                     ?_rd_buffer_readline 0076                               _meas_buffer 0450  
                                _i2c_buff 0042                            _parameter_text 0300  
                          _parameter_type 00B9                                  __Hparam0 0000  
                     i2rd_buffer_put@prec 001C                               _pd_detector 016B  
                        syntax_string@pos 009C                                  __Lparam0 0000  
                         ?_uart_byte_sent 0001                                  _g_CONFIG 00D5  
                   string_utils_split@len 0070                           ?_rd_buffer_init 006C  
                     _sysclk_setup_intosc 1A2A                                ?_uart_getc 0001  
                              ?_uart_init 0001               __end_of_uart_byte_available 1A70  
                                _g_STATUS 003B                      ??_rd_buffer_readline 007B  
                              ?_uart_putc 0001                                ?_uart_puts 006D  
             __size_ofinterrupts@isr_high 0074                            ?_set_parameter 0001  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
                        __size_of___lbmod 002A                         _pd_add_value$1123 007E  
                       _pd_add_value$1124 0080                         _pd_add_value$1125 0082  
                       _pd_add_value$1126 0084                         _pd_add_value$1127 0086  
                       ??_serialport_task 00A0                                  _adc_init 19CE  
                                _adc_read 1748                            uart_getc@pbyte 001B  
                    ?_sysclk_setup_intosc 0001                string_utils_from_hex@pdata 0072  
                       _string_utils_copy 118A                                  _delay_ms 19E2  
                  __size_of_get_parameter 0082                                  __ptext10 0EA6  
                                __ptext11 199A                                  __ptext20 060A  
                                __ptext12 10F8                                  __ptext21 00F4  
                                __ptext13 118A                                  __ptext30 1A2A  
                                __ptext22 1064                                  __ptext14 0F3C  
                                __ptext31 193C                                  __ptext23 1A56  
                                __ptext15 0FD0                                  __ptext40 1318  
                                __ptext32 1A76                                  __ptext24 1296  
                                __ptext16 17CE                                  __ptext41 1558  
                                __ptext33 184A                                  __ptext25 1670  
                                __ptext17 19B4                                  __ptext50 1A3A  
                                __ptext42 1912                                  __ptext34 19F4  
                                __ptext26 096C                                  __ptext18 147A  
                                __ptext51 195C                                  __ptext43 18E6  
                                __ptext35 1A60                                  __ptext27 1A4A  
                                __ptext19 180C                                  __ptext52 1748  
                                __ptext36 19CE                                  __ptext28 1702  
                                __ptext53 0ABA                                  __ptext45 1A18  
                                __ptext37 1A06                                  __ptext29 1A70  
                                __ptext46 16BA                                  __ptext38 1884  
                                __ptext47 18B6                                  __ptext39 178E  
                                __ptext48 197C                                  __ptext49 1A68  
                                _bitcount 0041                        ?_string_utils_copy 006C  
                        __size_of_startup 0046               on_parameter_found@operation 0087  
                           __size_of_main 0CA0                       ??_string_utils_copy 0073  
             __size_of_serialport_service 0048                                  _isr_high 0008  
                  ??_string_utils_strncmp 0075               __size_of_serialport_startup 0032  
                   __end_of_rd_buffer_get 0EA6                     __end_of_rd_buffer_cnt 1670  
                   __end_of_rd_buffer_put 0A9A               syntax_string@case_sensitive 0099  
                         _syntax_get_text 1A4A                                  _this_buf 0500  
                 __end_ofi2_rd_buffer_put 0BE2                   ?_string_utils_is_symbol 0001  
      string_utils_strncmp@case_sensitive 0074                              ??_uart_error 001A  
                            ??_uart_reset 001B                 __end_of_string_utils_copy 1212  
              string_utils_strncmp@result 0077                     ??_sysclk_setup_intosc 006C  
                              _INTCONbits 000FF2                        i2rd_buffer_put@ind 0029  
                             ??_gpio_init 006C                             ??_sysclk_init 006D  
                on_parameter_found@cmd_id 0081                          ??_detection_task 008B  
                    string_utils_strlen@i 0070                                  intlevel2 0000  
                      _on_parameter_found 180C                        __end_of_uart_error 1A4A  
               __size_of_serialport_write 004A                        __end_of_uart_reset 199A  
                            _this_warning 00BD                   string_utils_copy@maxlen 0071  
                           _get_parameter 1296            __end_of_string_utils_is_symbol 19CE  
                         ??_set_parameter 007F                       ?_on_parameter_found 0081  
                 string_utils_copy@result 0073                               ??_uart_getc 001B  
                             ??_uart_init 006F                               ??_uart_putc 006C  
                             ??_uart_puts 0071               ?_string_utils_is_upper_case 0001  
                     string_utils_split@i 0073            __size_of_string_utils_from_hex 0094  
           __end_of_string_utils_from_hex 1064                       on_parameter_found@p 0083  
                    ??_on_parameter_found 0087              string_utils_strchr@delimeter 006F  
                             _timers_list 0400                             uart_putc@byte 006C  
                 __end_of_syntax_get_text 1A56                         __CFG_FOSC$INTIO67 000000  
                     __end_of_sysclk_init 1A76                             uart_puts@size 006F  
                           uart_puts@pstr 006D                        adc_read@adc_number 001D  
                      main@event_priority 00A5                            ?_get_parameter 0001  
                         pd_add_value@val 0076                           pd_add_value@tmp 0088  
