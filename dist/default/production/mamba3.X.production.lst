

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Sat Oct 17 13:23:10 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    83                           	psect	param0,global,class=BANK0,space=1,delta=1
    84                           	psect	pa_nodes,global,class=CODE,delta=1
    85  0000                     tosu	equ	0xFFF
    86                           tosh	equ	0xFFE
    87                           tosl	equ	0xFFD
    88                           pclath	equ	0xFFA
    89                           tblptru	equ	0xFF8
    90                           tblptrh	equ	0xFF7
    91                           tblptrl	equ	0xFF6
    92                           tablat	equ	0xFF5
    93                           prodh	equ	0xFF4
    94                           prodl	equ	0xFF3
    95                           intcon	equ	0xFF2
    96                           indf0	equ	0xFEF
    97                           fsr0h	equ	0xFEA
    98                           fsr0l	equ	0xFE9
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           postinc1	equ	0xFE6
   102                           postdec1	equ	0xFE5
   103                           fsr1h	equ	0xFE2
   104                           fsr1l	equ	0xFE1
   105                           indf2	equ	0xFDF
   106                           postinc2	equ	0xFDE
   107                           postdec2	equ	0xFDD
   108                           fsr2h	equ	0xFDA
   109                           fsr2l	equ	0xFD9
   110                           status	equ	0xFD8
   111                           
   112                           	psect	mediumconst
   113  007D6C                     __pmediumconst:
   114                           	opt stack 0
   115  007D6C                     _dpowers:
   116                           	opt stack 0
   117  007D6C  0001               	dw	1
   118  007D6E  000A               	dw	10
   119  007D70  0064               	dw	100
   120  007D72  03E8               	dw	1000
   121  007D74  2710               	dw	10000
   122  007D76                     __end_of_dpowers:
   123                           	opt stack 0
   124  007D76                     syntax@syntax_data:
   125                           	opt stack 0
   126  007D76  73                 	db	115
   127  007D77  65                 	db	101
   128  007D78  74                 	db	116
   129  007D79  00                 	db	0
   130  007D7A  00                 	db	0
   131  007D7B  00                 	db	0
   132  007D7C  00                 	db	0
   133  007D7D  00                 	db	0
   134  007D7E  00                 	db	0
   135  007D7F  00                 	db	0
   136  007D80  00                 	db	0
   137  007D81  00                 	db	0
   138  007D82  00                 	db	0
   139  007D83  00                 	db	0
   140  007D84  00                 	db	0
   141  007D85  00                 	db	0
   142  007D86  00                 	db	0
   143  007D87  00                 	db	0
   144  007D88  00                 	db	0
   145  007D89  00                 	db	0
   146  007D8A  03                 	db	3
   147  007D8B  00                 	db	0
   148  007D8C  00                 	db	0
   149  007D8D  67                 	db	103
   150  007D8E  65                 	db	101
   151  007D8F  74                 	db	116
   152  007D90  00                 	db	0
   153  007D91  00                 	db	0
   154  007D92  00                 	db	0
   155  007D93  00                 	db	0
   156  007D94  00                 	db	0
   157  007D95  00                 	db	0
   158  007D96  00                 	db	0
   159  007D97  00                 	db	0
   160  007D98  00                 	db	0
   161  007D99  00                 	db	0
   162  007D9A  00                 	db	0
   163  007D9B  00                 	db	0
   164  007D9C  00                 	db	0
   165  007D9D  00                 	db	0
   166  007D9E  00                 	db	0
   167  007D9F  00                 	db	0
   168  007DA0  00                 	db	0
   169  007DA1  03                 	db	3
   170  007DA2  01                 	db	1
   171  007DA3  00                 	db	0
   172  007DA4  69                 	db	105
   173  007DA5  6E                 	db	110
   174  007DA6  69                 	db	105
   175  007DA7  74                 	db	116
   176  007DA8  00                 	db	0
   177  007DA9  00                 	db	0
   178  007DAA  00                 	db	0
   179  007DAB  00                 	db	0
   180  007DAC  00                 	db	0
   181  007DAD  00                 	db	0
   182  007DAE  00                 	db	0
   183  007DAF  00                 	db	0
   184  007DB0  00                 	db	0
   185  007DB1  00                 	db	0
   186  007DB2  00                 	db	0
   187  007DB3  00                 	db	0
   188  007DB4  00                 	db	0
   189  007DB5  00                 	db	0
   190  007DB6  00                 	db	0
   191  007DB7  00                 	db	0
   192  007DB8  04                 	db	4
   193  007DB9  02                 	db	2
   194  007DBA  00                 	db	0
   195  007DBB  73                 	db	115
   196  007DBC  65                 	db	101
   197  007DBD  6C                 	db	108
   198  007DBE  66                 	db	102
   199  007DBF  74                 	db	116
   200  007DC0  65                 	db	101
   201  007DC1  73                 	db	115
   202  007DC2  74                 	db	116
   203  007DC3  00                 	db	0
   204  007DC4  00                 	db	0
   205  007DC5  00                 	db	0
   206  007DC6  00                 	db	0
   207  007DC7  00                 	db	0
   208  007DC8  00                 	db	0
   209  007DC9  00                 	db	0
   210  007DCA  00                 	db	0
   211  007DCB  00                 	db	0
   212  007DCC  00                 	db	0
   213  007DCD  00                 	db	0
   214  007DCE  00                 	db	0
   215  007DCF  08                 	db	8
   216  007DD0  03                 	db	3
   217  007DD1  00                 	db	0
   218  007DD2  73                 	db	115
   219  007DD3  69                 	db	105
   220  007DD4  67                 	db	103
   221  007DD5  6E                 	db	110
   222  007DD6  61                 	db	97
   223  007DD7  6C                 	db	108
   224  007DD8  00                 	db	0
   225  007DD9  00                 	db	0
   226  007DDA  00                 	db	0
   227  007DDB  00                 	db	0
   228  007DDC  00                 	db	0
   229  007DDD  00                 	db	0
   230  007DDE  00                 	db	0
   231  007DDF  00                 	db	0
   232  007DE0  00                 	db	0
   233  007DE1  00                 	db	0
   234  007DE2  00                 	db	0
   235  007DE3  00                 	db	0
   236  007DE4  00                 	db	0
   237  007DE5  00                 	db	0
   238  007DE6  06                 	db	6
   239  007DE7  04                 	db	4
   240  007DE8  03                 	db	3
   241  007DE9  69                 	db	105
   242  007DEA  6D                 	db	109
   243  007DEB  70                 	db	112
   244  007DEC  00                 	db	0
   245  007DED  00                 	db	0
   246  007DEE  00                 	db	0
   247  007DEF  00                 	db	0
   248  007DF0  00                 	db	0
   249  007DF1  00                 	db	0
   250  007DF2  00                 	db	0
   251  007DF3  00                 	db	0
   252  007DF4  00                 	db	0
   253  007DF5  00                 	db	0
   254  007DF6  00                 	db	0
   255  007DF7  00                 	db	0
   256  007DF8  00                 	db	0
   257  007DF9  00                 	db	0
   258  007DFA  00                 	db	0
   259  007DFB  00                 	db	0
   260  007DFC  00                 	db	0
   261  007DFD  03                 	db	3
   262  007DFE  05                 	db	5
   263  007DFF  03                 	db	3
   264  007E00  70                 	db	112
   265  007E01  77                 	db	119
   266  007E02  72                 	db	114
   267  007E03  00                 	db	0
   268  007E04  00                 	db	0
   269  007E05  00                 	db	0
   270  007E06  00                 	db	0
   271  007E07  00                 	db	0
   272  007E08  00                 	db	0
   273  007E09  00                 	db	0
   274  007E0A  00                 	db	0
   275  007E0B  00                 	db	0
   276  007E0C  00                 	db	0
   277  007E0D  00                 	db	0
   278  007E0E  00                 	db	0
   279  007E0F  00                 	db	0
   280  007E10  00                 	db	0
   281  007E11  00                 	db	0
   282  007E12  00                 	db	0
   283  007E13  00                 	db	0
   284  007E14  03                 	db	3
   285  007E15  06                 	db	6
   286  007E16  03                 	db	3
   287  007E17  70                 	db	112
   288  007E18  6F                 	db	111
   289  007E19  74                 	db	116
   290  007E1A  00                 	db	0
   291  007E1B  00                 	db	0
   292  007E1C  00                 	db	0
   293  007E1D  00                 	db	0
   294  007E1E  00                 	db	0
   295  007E1F  00                 	db	0
   296  007E20  00                 	db	0
   297  007E21  00                 	db	0
   298  007E22  00                 	db	0
   299  007E23  00                 	db	0
   300  007E24  00                 	db	0
   301  007E25  00                 	db	0
   302  007E26  00                 	db	0
   303  007E27  00                 	db	0
   304  007E28  00                 	db	0
   305  007E29  00                 	db	0
   306  007E2A  00                 	db	0
   307  007E2B  03                 	db	3
   308  007E2C  07                 	db	7
   309  007E2D  03                 	db	3
   310  007E2E  76                 	db	118
   311  007E2F  65                 	db	101
   312  007E30  72                 	db	114
   313  007E31  00                 	db	0
   314  007E32  00                 	db	0
   315  007E33  00                 	db	0
   316  007E34  00                 	db	0
   317  007E35  00                 	db	0
   318  007E36  00                 	db	0
   319  007E37  00                 	db	0
   320  007E38  00                 	db	0
   321  007E39  00                 	db	0
   322  007E3A  00                 	db	0
   323  007E3B  00                 	db	0
   324  007E3C  00                 	db	0
   325  007E3D  00                 	db	0
   326  007E3E  00                 	db	0
   327  007E3F  00                 	db	0
   328  007E40  00                 	db	0
   329  007E41  00                 	db	0
   330  007E42  03                 	db	3
   331  007E43  08                 	db	8
   332  007E44  03                 	db	3
   333  007E45  73                 	db	115
   334  007E46  74                 	db	116
   335  007E47  61                 	db	97
   336  007E48  74                 	db	116
   337  007E49  75                 	db	117
   338  007E4A  73                 	db	115
   339  007E4B  00                 	db	0
   340  007E4C  00                 	db	0
   341  007E4D  00                 	db	0
   342  007E4E  00                 	db	0
   343  007E4F  00                 	db	0
   344  007E50  00                 	db	0
   345  007E51  00                 	db	0
   346  007E52  00                 	db	0
   347  007E53  00                 	db	0
   348  007E54  00                 	db	0
   349  007E55  00                 	db	0
   350  007E56  00                 	db	0
   351  007E57  00                 	db	0
   352  007E58  00                 	db	0
   353  007E59  06                 	db	6
   354  007E5A  09                 	db	9
   355  007E5B  03                 	db	3
   356  007E5C  61                 	db	97
   357  007E5D  63                 	db	99
   358  007E5E  63                 	db	99
   359  007E5F  00                 	db	0
   360  007E60  00                 	db	0
   361  007E61  00                 	db	0
   362  007E62  00                 	db	0
   363  007E63  00                 	db	0
   364  007E64  00                 	db	0
   365  007E65  00                 	db	0
   366  007E66  00                 	db	0
   367  007E67  00                 	db	0
   368  007E68  00                 	db	0
   369  007E69  00                 	db	0
   370  007E6A  00                 	db	0
   371  007E6B  00                 	db	0
   372  007E6C  00                 	db	0
   373  007E6D  00                 	db	0
   374  007E6E  00                 	db	0
   375  007E6F  00                 	db	0
   376  007E70  03                 	db	3
   377  007E71  0A                 	db	10
   378  007E72  03                 	db	3
   379  007E73  61                 	db	97
   380  007E74  64                 	db	100
   381  007E75  72                 	db	114
   382  007E76  00                 	db	0
   383  007E77  00                 	db	0
   384  007E78  00                 	db	0
   385  007E79  00                 	db	0
   386  007E7A  00                 	db	0
   387  007E7B  00                 	db	0
   388  007E7C  00                 	db	0
   389  007E7D  00                 	db	0
   390  007E7E  00                 	db	0
   391  007E7F  00                 	db	0
   392  007E80  00                 	db	0
   393  007E81  00                 	db	0
   394  007E82  00                 	db	0
   395  007E83  00                 	db	0
   396  007E84  00                 	db	0
   397  007E85  00                 	db	0
   398  007E86  00                 	db	0
   399  007E87  03                 	db	3
   400  007E88  0B                 	db	11
   401  007E89  03                 	db	3
   402  007E8A  65                 	db	101
   403  007E8B  72                 	db	114
   404  007E8C  72                 	db	114
   405  007E8D  6F                 	db	111
   406  007E8E  72                 	db	114
   407  007E8F  00                 	db	0
   408  007E90  00                 	db	0
   409  007E91  00                 	db	0
   410  007E92  00                 	db	0
   411  007E93  00                 	db	0
   412  007E94  00                 	db	0
   413  007E95  00                 	db	0
   414  007E96  00                 	db	0
   415  007E97  00                 	db	0
   416  007E98  00                 	db	0
   417  007E99  00                 	db	0
   418  007E9A  00                 	db	0
   419  007E9B  00                 	db	0
   420  007E9C  00                 	db	0
   421  007E9D  00                 	db	0
   422  007E9E  05                 	db	5
   423  007E9F  0C                 	db	12
   424  007EA0  03                 	db	3
   425  007EA1  64                 	db	100
   426  007EA2  65                 	db	101
   427  007EA3  66                 	db	102
   428  007EA4  61                 	db	97
   429  007EA5  75                 	db	117
   430  007EA6  6C                 	db	108
   431  007EA7  74                 	db	116
   432  007EA8  73                 	db	115
   433  007EA9  00                 	db	0
   434  007EAA  00                 	db	0
   435  007EAB  00                 	db	0
   436  007EAC  00                 	db	0
   437  007EAD  00                 	db	0
   438  007EAE  00                 	db	0
   439  007EAF  00                 	db	0
   440  007EB0  00                 	db	0
   441  007EB1  00                 	db	0
   442  007EB2  00                 	db	0
   443  007EB3  00                 	db	0
   444  007EB4  00                 	db	0
   445  007EB5  08                 	db	8
   446  007EB6  0D                 	db	13
   447  007EB7  03                 	db	3
   448  007EB8  6D                 	db	109
   449  007EB9  6F                 	db	111
   450  007EBA  64                 	db	100
   451  007EBB  00                 	db	0
   452  007EBC  00                 	db	0
   453  007EBD  00                 	db	0
   454  007EBE  00                 	db	0
   455  007EBF  00                 	db	0
   456  007EC0  00                 	db	0
   457  007EC1  00                 	db	0
   458  007EC2  00                 	db	0
   459  007EC3  00                 	db	0
   460  007EC4  00                 	db	0
   461  007EC5  00                 	db	0
   462  007EC6  00                 	db	0
   463  007EC7  00                 	db	0
   464  007EC8  00                 	db	0
   465  007EC9  00                 	db	0
   466  007ECA  00                 	db	0
   467  007ECB  00                 	db	0
   468  007ECC  03                 	db	3
   469  007ECD  0E                 	db	14
   470  007ECE  01                 	db	1
   471  007ECF  70                 	db	112
   472  007ED0  72                 	db	114
   473  007ED1  6F                 	db	111
   474  007ED2  66                 	db	102
   475  007ED3  69                 	db	105
   476  007ED4  6C                 	db	108
   477  007ED5  65                 	db	101
   478  007ED6  00                 	db	0
   479  007ED7  00                 	db	0
   480  007ED8  00                 	db	0
   481  007ED9  00                 	db	0
   482  007EDA  00                 	db	0
   483  007EDB  00                 	db	0
   484  007EDC  00                 	db	0
   485  007EDD  00                 	db	0
   486  007EDE  00                 	db	0
   487  007EDF  00                 	db	0
   488  007EE0  00                 	db	0
   489  007EE1  00                 	db	0
   490  007EE2  00                 	db	0
   491  007EE3  07                 	db	7
   492  007EE4  0F                 	db	15
   493  007EE5  03                 	db	3
   494  007EE6  70                 	db	112
   495  007EE7  77                 	db	119
   496  007EE8  72                 	db	114
   497  007EE9  74                 	db	116
   498  007EEA  72                 	db	114
   499  007EEB  69                 	db	105
   500  007EEC  67                 	db	103
   501  007EED  00                 	db	0
   502  007EEE  00                 	db	0
   503  007EEF  00                 	db	0
   504  007EF0  00                 	db	0
   505  007EF1  00                 	db	0
   506  007EF2  00                 	db	0
   507  007EF3  00                 	db	0
   508  007EF4  00                 	db	0
   509  007EF5  00                 	db	0
   510  007EF6  00                 	db	0
   511  007EF7  00                 	db	0
   512  007EF8  00                 	db	0
   513  007EF9  00                 	db	0
   514  007EFA  07                 	db	7
   515  007EFB  10                 	db	16
   516  007EFC  03                 	db	3
   517  007EFD  61                 	db	97
   518  007EFE  63                 	db	99
   519  007EFF  63                 	db	99
   520  007F00  74                 	db	116
   521  007F01  72                 	db	114
   522  007F02  69                 	db	105
   523  007F03  67                 	db	103
   524  007F04  00                 	db	0
   525  007F05  00                 	db	0
   526  007F06  00                 	db	0
   527  007F07  00                 	db	0
   528  007F08  00                 	db	0
   529  007F09  00                 	db	0
   530  007F0A  00                 	db	0
   531  007F0B  00                 	db	0
   532  007F0C  00                 	db	0
   533  007F0D  00                 	db	0
   534  007F0E  00                 	db	0
   535  007F0F  00                 	db	0
   536  007F10  00                 	db	0
   537  007F11  07                 	db	7
   538  007F12  11                 	db	17
   539  007F13  03                 	db	3
   540  007F14  74                 	db	116
   541  007F15  72                 	db	114
   542  007F16  69                 	db	105
   543  007F17  67                 	db	103
   544  007F18  6C                 	db	108
   545  007F19  65                 	db	101
   546  007F1A  76                 	db	118
   547  007F1B  00                 	db	0
   548  007F1C  00                 	db	0
   549  007F1D  00                 	db	0
   550  007F1E  00                 	db	0
   551  007F1F  00                 	db	0
   552  007F20  00                 	db	0
   553  007F21  00                 	db	0
   554  007F22  00                 	db	0
   555  007F23  00                 	db	0
   556  007F24  00                 	db	0
   557  007F25  00                 	db	0
   558  007F26  00                 	db	0
   559  007F27  00                 	db	0
   560  007F28  07                 	db	7
   561  007F29  12                 	db	18
   562  007F2A  03                 	db	3
   563  007F2B  74                 	db	116
   564  007F2C  72                 	db	114
   565  007F2D  69                 	db	105
   566  007F2E  67                 	db	103
   567  007F2F  73                 	db	115
   568  007F30  75                 	db	117
   569  007F31  6D                 	db	109
   570  007F32  00                 	db	0
   571  007F33  00                 	db	0
   572  007F34  00                 	db	0
   573  007F35  00                 	db	0
   574  007F36  00                 	db	0
   575  007F37  00                 	db	0
   576  007F38  00                 	db	0
   577  007F39  00                 	db	0
   578  007F3A  00                 	db	0
   579  007F3B  00                 	db	0
   580  007F3C  00                 	db	0
   581  007F3D  00                 	db	0
   582  007F3E  00                 	db	0
   583  007F3F  07                 	db	7
   584  007F40  13                 	db	19
   585  007F41  03                 	db	3
   586  007F42  74                 	db	116
   587  007F43  72                 	db	114
   588  007F44  69                 	db	105
   589  007F45  67                 	db	103
   590  007F46  63                 	db	99
   591  007F47  6E                 	db	110
   592  007F48  74                 	db	116
   593  007F49  00                 	db	0
   594  007F4A  00                 	db	0
   595  007F4B  00                 	db	0
   596  007F4C  00                 	db	0
   597  007F4D  00                 	db	0
   598  007F4E  00                 	db	0
   599  007F4F  00                 	db	0
   600  007F50  00                 	db	0
   601  007F51  00                 	db	0
   602  007F52  00                 	db	0
   603  007F53  00                 	db	0
   604  007F54  00                 	db	0
   605  007F55  00                 	db	0
   606  007F56  07                 	db	7
   607  007F57  14                 	db	20
   608  007F58  03                 	db	3
   609  007F59  77                 	db	119
   610  007F5A  61                 	db	97
   611  007F5B  76                 	db	118
   612  007F5C  74                 	db	116
   613  007F5D  6F                 	db	111
   614  007F5E  6C                 	db	108
   615  007F5F  65                 	db	101
   616  007F60  00                 	db	0
   617  007F61  00                 	db	0
   618  007F62  00                 	db	0
   619  007F63  00                 	db	0
   620  007F64  00                 	db	0
   621  007F65  00                 	db	0
   622  007F66  00                 	db	0
   623  007F67  00                 	db	0
   624  007F68  00                 	db	0
   625  007F69  00                 	db	0
   626  007F6A  00                 	db	0
   627  007F6B  00                 	db	0
   628  007F6C  00                 	db	0
   629  007F6D  07                 	db	7
   630  007F6E  15                 	db	21
   631  007F6F  03                 	db	3
   632  007F70  77                 	db	119
   633  007F71  61                 	db	97
   634  007F72  76                 	db	118
   635  007F73  74                 	db	116
   636  007F74  72                 	db	114
   637  007F75  69                 	db	105
   638  007F76  67                 	db	103
   639  007F77  00                 	db	0
   640  007F78  00                 	db	0
   641  007F79  00                 	db	0
   642  007F7A  00                 	db	0
   643  007F7B  00                 	db	0
   644  007F7C  00                 	db	0
   645  007F7D  00                 	db	0
   646  007F7E  00                 	db	0
   647  007F7F  00                 	db	0
   648  007F80  00                 	db	0
   649  007F81  00                 	db	0
   650  007F82  00                 	db	0
   651  007F83  00                 	db	0
   652  007F84  07                 	db	7
   653  007F85  16                 	db	22
   654  007F86  03                 	db	3
   655  007F87  77                 	db	119
   656  007F88  61                 	db	97
   657  007F89  76                 	db	118
   658  007F8A  6C                 	db	108
   659  007F8B  63                 	db	99
   660  007F8C  6E                 	db	110
   661  007F8D  74                 	db	116
   662  007F8E  00                 	db	0
   663  007F8F  00                 	db	0
   664  007F90  00                 	db	0
   665  007F91  00                 	db	0
   666  007F92  00                 	db	0
   667  007F93  00                 	db	0
   668  007F94  00                 	db	0
   669  007F95  00                 	db	0
   670  007F96  00                 	db	0
   671  007F97  00                 	db	0
   672  007F98  00                 	db	0
   673  007F99  00                 	db	0
   674  007F9A  00                 	db	0
   675  007F9B  07                 	db	7
   676  007F9C  17                 	db	23
   677  007F9D  03                 	db	3
   678  007F9E  77                 	db	119
   679  007F9F  61                 	db	97
   680  007FA0  76                 	db	118
   681  007FA1  72                 	db	114
   682  007FA2  63                 	db	99
   683  007FA3  6E                 	db	110
   684  007FA4  74                 	db	116
   685  007FA5  00                 	db	0
   686  007FA6  00                 	db	0
   687  007FA7  00                 	db	0
   688  007FA8  00                 	db	0
   689  007FA9  00                 	db	0
   690  007FAA  00                 	db	0
   691  007FAB  00                 	db	0
   692  007FAC  00                 	db	0
   693  007FAD  00                 	db	0
   694  007FAE  00                 	db	0
   695  007FAF  00                 	db	0
   696  007FB0  00                 	db	0
   697  007FB1  00                 	db	0
   698  007FB2  07                 	db	7
   699  007FB3  18                 	db	24
   700  007FB4  03                 	db	3
   701  007FB5  69                 	db	105
   702  007FB6  64                 	db	100
   703  007FB7  69                 	db	105
   704  007FB8  64                 	db	100
   705  007FB9  00                 	db	0
   706  007FBA  00                 	db	0
   707  007FBB  00                 	db	0
   708  007FBC  00                 	db	0
   709  007FBD  00                 	db	0
   710  007FBE  00                 	db	0
   711  007FBF  00                 	db	0
   712  007FC0  00                 	db	0
   713  007FC1  00                 	db	0
   714  007FC2  00                 	db	0
   715  007FC3  00                 	db	0
   716  007FC4  00                 	db	0
   717  007FC5  00                 	db	0
   718  007FC6  00                 	db	0
   719  007FC7  00                 	db	0
   720  007FC8  00                 	db	0
   721  007FC9  04                 	db	4
   722  007FCA  19                 	db	25
   723  007FCB  03                 	db	3
   724  007FCC  70                 	db	112
   725  007FCD  73                 	db	115
   726  007FCE  77                 	db	119
   727  007FCF  70                 	db	112
   728  007FD0  73                 	db	115
   729  007FD1  77                 	db	119
   730  007FD2  00                 	db	0
   731  007FD3  00                 	db	0
   732  007FD4  00                 	db	0
   733  007FD5  00                 	db	0
   734  007FD6  00                 	db	0
   735  007FD7  00                 	db	0
   736  007FD8  00                 	db	0
   737  007FD9  00                 	db	0
   738  007FDA  00                 	db	0
   739  007FDB  00                 	db	0
   740  007FDC  00                 	db	0
   741  007FDD  00                 	db	0
   742  007FDE  00                 	db	0
   743  007FDF  00                 	db	0
   744  007FE0  06                 	db	6
   745  007FE1  1A                 	db	26
   746  007FE2  03                 	db	3
   747  007FE3                     __end_ofsyntax@syntax_data:
   748                           	opt stack 0
   749  0000                     _ADRES	set	4035
   750  0000                     _TMR0	set	4054
   751  0000                     _ADCON0	set	4034
   752  0000                     _ADCON0bits	set	4034
   753  0000                     _ADCON1	set	4033
   754  0000                     _ADCON2	set	4032
   755  0000                     _ANSEL	set	3966
   756  0000                     _ANSELH	set	3967
   757  0000                     _BAUDCON	set	4024
   758  0000                     _BAUDCTL	set	4024
   759  0000                     _INTCONbits	set	4082
   760  0000                     _LATC	set	3979
   761  0000                     _LATD	set	3980
   762  0000                     _OSCCON	set	4051
   763  0000                     _PIE1bits	set	3997
   764  0000                     _PIR1bits	set	3998
   765  0000                     _RCREG	set	4014
   766  0000                     _RCSTA	set	4011
   767  0000                     _RCSTAbits	set	4011
   768  0000                     _SPBRG	set	4015
   769  0000                     _STATUS	set	4056
   770  0000                     _TRISA	set	3986
   771  0000                     _TRISB	set	3987
   772  0000                     _TRISC	set	3988
   773  0000                     _TRISD	set	3989
   774  0000                     _TXREG	set	4013
   775  0000                     _TXSTA	set	4012
   776  0000                     _ADIF	set	31990
   777  0000                     _CREN	set	32092
   778  0000                     _GODONE	set	32273
   779  0000                     _RC1IF	set	31989
   780  0000                     _RCIF	set	31989
   781  0000                     _TXIF	set	31988
   782  007FE3                     __stringdata:
   783                           	opt stack 0
   784  007FE3                     STR_32:
   785  007FE3  68                 	db	104	;'h'
   786  007FE4  65                 	db	101	;'e'
   787  007FE5  6C                 	db	108	;'l'
   788  007FE6  6C                 	db	108	;'l'
   789  007FE7  6F                 	db	111	;'o'
   790  007FE8  00                 	db	0
   791  007FE9                     STR_30:
   792  007FE9  3A                 	db	58	;':'
   793  007FEA  65                 	db	101	;'e'
   794  007FEB  72                 	db	114	;'r'
   795  007FEC  72                 	db	114	;'r'
   796  007FED  20                 	db	32
   797  007FEE  00                 	db	0
   798  007FEF                     STR_28:
   799  007FEF  65                 	db	101	;'e'
   800  007FF0  72                 	db	114	;'r'
   801  007FF1  72                 	db	114	;'r'
   802  007FF2  0A                 	db	10
   803  007FF3  00                 	db	0
   804  007FF4                     STR_29:
   805  007FF4  3A                 	db	58	;':'
   806  007FF5  6F                 	db	111	;'o'
   807  007FF6  6B                 	db	107	;'k'
   808  007FF7  20                 	db	32
   809  007FF8  00                 	db	0
   810  007FF9                     STR_33:
   811  007FF9  0A                 	db	10
   812  007FFA  25                 	db	37
   813  007FFB  64                 	db	100	;'d'
   814  007FFC  00                 	db	0
   815  007FFD                     STR_34:
   816  007FFD  31                 	db	49	;'1'
   817  007FFE  00                 	db	0
   818  007FFF                     __end_of__stringdata:
   819                           	opt stack 0
   820                           
   821                           ; #config settings
   822  007FFF  00                 	db	0	; dummy byte at the end
   823  0000                     tosu	equ	0xFFF
   824                           tosh	equ	0xFFE
   825                           tosl	equ	0xFFD
   826                           pclath	equ	0xFFA
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           prodh	equ	0xFF4
   832                           prodl	equ	0xFF3
   833                           intcon	equ	0xFF2
   834                           indf0	equ	0xFEF
   835                           fsr0h	equ	0xFEA
   836                           fsr0l	equ	0xFE9
   837                           wreg	equ	0xFE8
   838                           indf1	equ	0xFE7
   839                           postinc1	equ	0xFE6
   840                           postdec1	equ	0xFE5
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           indf2	equ	0xFDF
   844                           postinc2	equ	0xFDE
   845                           postdec2	equ	0xFDD
   846                           fsr2h	equ	0xFDA
   847                           fsr2l	equ	0xFD9
   848                           status	equ	0xFD8
   849                           
   850                           	psect	nvBANK0
   851  0000F1                     __pnvBANK0:
   852                           	opt stack 0
   853  0000F1                     _this_delay_timer_ms:
   854                           	opt stack 0
   855  0000F1                     	ds	2
   856                           tosu	equ	0xFFF
   857                           tosh	equ	0xFFE
   858                           tosl	equ	0xFFD
   859                           pclath	equ	0xFFA
   860                           tblptru	equ	0xFF8
   861                           tblptrh	equ	0xFF7
   862                           tblptrl	equ	0xFF6
   863                           tablat	equ	0xFF5
   864                           prodh	equ	0xFF4
   865                           prodl	equ	0xFF3
   866                           intcon	equ	0xFF2
   867                           indf0	equ	0xFEF
   868                           fsr0h	equ	0xFEA
   869                           fsr0l	equ	0xFE9
   870                           wreg	equ	0xFE8
   871                           indf1	equ	0xFE7
   872                           postinc1	equ	0xFE6
   873                           postdec1	equ	0xFE5
   874                           fsr1h	equ	0xFE2
   875                           fsr1l	equ	0xFE1
   876                           indf2	equ	0xFDF
   877                           postinc2	equ	0xFDE
   878                           postdec2	equ	0xFDD
   879                           fsr2h	equ	0xFDA
   880                           fsr2l	equ	0xFD9
   881                           status	equ	0xFD8
   882                           
   883                           	psect	cinit
   884  001C28                     __pcinit:
   885                           	opt stack 0
   886  001C28                     start_initialization:
   887                           	opt stack 0
   888  001C28                     __initialization:
   889                           	opt stack 0
   890                           
   891                           ; Clear objects allocated to BANK5 (127 bytes)
   892  001C28  EE05  F000         	lfsr	0,__pbssBANK5
   893  001C2C  0E7F               	movlw	127
   894  001C2E                     clear_0:
   895  001C2E  6AEE               	clrf	postinc0,c
   896  001C30  06E8               	decf	wreg,f,c
   897  001C32  E1FD               	bnz	clear_0
   898                           
   899                           ; Clear objects allocated to BANK4 (187 bytes)
   900  001C34  EE04  F000         	lfsr	0,__pbssBANK4
   901  001C38  0EBB               	movlw	187
   902  001C3A                     clear_1:
   903  001C3A  6AEE               	clrf	postinc0,c
   904  001C3C  06E8               	decf	wreg,f,c
   905  001C3E  E1FD               	bnz	clear_1
   906                           
   907                           ; Clear objects allocated to BANK3 (227 bytes)
   908  001C40  EE03  F000         	lfsr	0,__pbssBANK3
   909  001C44  0EE3               	movlw	227
   910  001C46                     clear_2:
   911  001C46  6AEE               	clrf	postinc0,c
   912  001C48  06E8               	decf	wreg,f,c
   913  001C4A  E1FD               	bnz	clear_2
   914                           
   915                           ; Clear objects allocated to BANK2 (234 bytes)
   916  001C4C  EE02  F000         	lfsr	0,__pbssBANK2
   917  001C50  0EEA               	movlw	234
   918  001C52                     clear_3:
   919  001C52  6AEE               	clrf	postinc0,c
   920  001C54  06E8               	decf	wreg,f,c
   921  001C56  E1FD               	bnz	clear_3
   922                           
   923                           ; Clear objects allocated to BANK1 (228 bytes)
   924  001C58  EE01  F000         	lfsr	0,__pbssBANK1
   925  001C5C  0EE4               	movlw	228
   926  001C5E                     clear_4:
   927  001C5E  6AEE               	clrf	postinc0,c
   928  001C60  06E8               	decf	wreg,f,c
   929  001C62  E1FD               	bnz	clear_4
   930                           
   931                           ; Clear objects allocated to BANK0 (57 bytes)
   932  001C64  EE00  F0B8         	lfsr	0,__pbssBANK0
   933  001C68  0E39               	movlw	57
   934  001C6A                     clear_5:
   935  001C6A  6AEE               	clrf	postinc0,c
   936  001C6C  06E8               	decf	wreg,f,c
   937  001C6E  E1FD               	bnz	clear_5
   938                           
   939                           ; Clear objects allocated to COMRAM (24 bytes)
   940  001C70  EE00  F02B         	lfsr	0,__pbssCOMRAM
   941  001C74  0E18               	movlw	24
   942  001C76                     clear_6:
   943  001C76  6AEE               	clrf	postinc0,c
   944  001C78  06E8               	decf	wreg,f,c
   945  001C7A  E1FD               	bnz	clear_6
   946  001C7C                     end_of_initialization:
   947                           	opt stack 0
   948  001C7C                     __end_of__initialization:
   949                           	opt stack 0
   950  001C7C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   951  001C7E  6EF8               	movwf	tblptru,c
   952  001C80  0100               	movlb	0
   953  001C82  EFB2  F009         	goto	_main	;jump to C main() function
   954                           tosu	equ	0xFFF
   955                           tosh	equ	0xFFE
   956                           tosl	equ	0xFFD
   957                           pclath	equ	0xFFA
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           prodh	equ	0xFF4
   963                           prodl	equ	0xFF3
   964                           intcon	equ	0xFF2
   965                           indf0	equ	0xFEF
   966                           postinc0	equ	0xFEE
   967                           fsr0h	equ	0xFEA
   968                           fsr0l	equ	0xFE9
   969                           wreg	equ	0xFE8
   970                           indf1	equ	0xFE7
   971                           postinc1	equ	0xFE6
   972                           postdec1	equ	0xFE5
   973                           fsr1h	equ	0xFE2
   974                           fsr1l	equ	0xFE1
   975                           indf2	equ	0xFDF
   976                           postinc2	equ	0xFDE
   977                           postdec2	equ	0xFDD
   978                           fsr2h	equ	0xFDA
   979                           fsr2l	equ	0xFD9
   980                           status	equ	0xFD8
   981                           
   982                           	psect	bssCOMRAM
   983  00002B                     __pbssCOMRAM:
   984                           	opt stack 0
   985  00002B                     _event_miss:
   986                           	opt stack 0
   987  00002B                     	ds	8
   988  000033                     _pool:
   989                           	opt stack 0
   990  000033                     	ds	8
   991  00003B                     _g_STATUS:
   992                           	opt stack 0
   993  00003B                     	ds	2
   994  00003D                     _g_analog1:
   995                           	opt stack 0
   996  00003D                     	ds	2
   997  00003F                     _g_analog2:
   998                           	opt stack 0
   999  00003F                     	ds	2
  1000  000041                     _bitcount:
  1001                           	opt stack 0
  1002  000041                     	ds	1
  1003  000042                     _i2c_buff:
  1004                           	opt stack 0
  1005  000042                     	ds	1
  1006                           tosu	equ	0xFFF
  1007                           tosh	equ	0xFFE
  1008                           tosl	equ	0xFFD
  1009                           pclath	equ	0xFFA
  1010                           tblptru	equ	0xFF8
  1011                           tblptrh	equ	0xFF7
  1012                           tblptrl	equ	0xFF6
  1013                           tablat	equ	0xFF5
  1014                           prodh	equ	0xFF4
  1015                           prodl	equ	0xFF3
  1016                           intcon	equ	0xFF2
  1017                           indf0	equ	0xFEF
  1018                           postinc0	equ	0xFEE
  1019                           fsr0h	equ	0xFEA
  1020                           fsr0l	equ	0xFE9
  1021                           wreg	equ	0xFE8
  1022                           indf1	equ	0xFE7
  1023                           postinc1	equ	0xFE6
  1024                           postdec1	equ	0xFE5
  1025                           fsr1h	equ	0xFE2
  1026                           fsr1l	equ	0xFE1
  1027                           indf2	equ	0xFDF
  1028                           postinc2	equ	0xFDE
  1029                           postdec2	equ	0xFDD
  1030                           fsr2h	equ	0xFDA
  1031                           fsr2l	equ	0xFD9
  1032                           status	equ	0xFD8
  1033                           
  1034                           	psect	bssBANK0
  1035  0000B8                     __pbssBANK0:
  1036                           	opt stack 0
  1037  0000B8                     _events:
  1038                           	opt stack 0
  1039  0000B8                     	ds	16
  1040  0000C8                     _g_analog0:
  1041                           	opt stack 0
  1042  0000C8                     	ds	2
  1043  0000CA                     _parameter_type:
  1044                           	opt stack 0
  1045  0000CA                     	ds	1
  1046  0000CB                     _this_alarm:
  1047                           	opt stack 0
  1048  0000CB                     	ds	1
  1049  0000CC                     _this_contains_crlf:
  1050                           	opt stack 0
  1051  0000CC                     	ds	1
  1052  0000CD                     _this_warning:
  1053                           	opt stack 0
  1054  0000CD                     	ds	1
  1055  0000CE                     detection_task@alarm_cla:
  1056                           	opt stack 0
  1057  0000CE                     	ds	1
  1058  0000CF                     detection_task@alarm_wav:
  1059                           	opt stack 0
  1060  0000CF                     	ds	1
  1061  0000D0                     _cla_detector:
  1062                           	opt stack 0
  1063  0000D0                     	ds	21
  1064  0000E5                     _tmp:
  1065                           	opt stack 0
  1066  0000E5                     	ds	10
  1067  0000EF                     _command_id:
  1068                           	opt stack 0
  1069  0000EF                     	ds	1
  1070  0000F0                     _parameter_id:
  1071                           	opt stack 0
  1072  0000F0                     	ds	1
  1073                           tosu	equ	0xFFF
  1074                           tosh	equ	0xFFE
  1075                           tosl	equ	0xFFD
  1076                           pclath	equ	0xFFA
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           prodh	equ	0xFF4
  1082                           prodl	equ	0xFF3
  1083                           intcon	equ	0xFF2
  1084                           indf0	equ	0xFEF
  1085                           postinc0	equ	0xFEE
  1086                           fsr0h	equ	0xFEA
  1087                           fsr0l	equ	0xFE9
  1088                           wreg	equ	0xFE8
  1089                           indf1	equ	0xFE7
  1090                           postinc1	equ	0xFE6
  1091                           postdec1	equ	0xFE5
  1092                           fsr1h	equ	0xFE2
  1093                           fsr1l	equ	0xFE1
  1094                           indf2	equ	0xFDF
  1095                           postinc2	equ	0xFDE
  1096                           postdec2	equ	0xFDD
  1097                           fsr2h	equ	0xFDA
  1098                           fsr2l	equ	0xFD9
  1099                           status	equ	0xFD8
  1100                           
  1101                           	psect	bssBANK1
  1102  000100                     __pbssBANK1:
  1103                           	opt stack 0
  1104  000100                     _g_tx_buffer:
  1105                           	opt stack 0
  1106  000100                     	ds	107
  1107  00016B                     _pd_detector:
  1108                           	opt stack 0
  1109  00016B                     	ds	101
  1110  0001D0                     _g_CONFIG:
  1111                           	opt stack 0
  1112  0001D0                     	ds	20
  1113                           tosu	equ	0xFFF
  1114                           tosh	equ	0xFFE
  1115                           tosl	equ	0xFFD
  1116                           pclath	equ	0xFFA
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           prodh	equ	0xFF4
  1122                           prodl	equ	0xFF3
  1123                           intcon	equ	0xFF2
  1124                           indf0	equ	0xFEF
  1125                           postinc0	equ	0xFEE
  1126                           fsr0h	equ	0xFEA
  1127                           fsr0l	equ	0xFE9
  1128                           wreg	equ	0xFE8
  1129                           indf1	equ	0xFE7
  1130                           postinc1	equ	0xFE6
  1131                           postdec1	equ	0xFE5
  1132                           fsr1h	equ	0xFE2
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           postinc2	equ	0xFDE
  1136                           postdec2	equ	0xFDD
  1137                           fsr2h	equ	0xFDA
  1138                           fsr2l	equ	0xFD9
  1139                           status	equ	0xFD8
  1140                           
  1141                           	psect	bssBANK2
  1142  000200                     __pbssBANK2:
  1143                           	opt stack 0
  1144  000200                     _parameter_value:
  1145                           	opt stack 0
  1146  000200                     	ds	127
  1147  00027F                     _g_rx_buffer:
  1148                           	opt stack 0
  1149  00027F                     	ds	107
  1150                           tosu	equ	0xFFF
  1151                           tosh	equ	0xFFE
  1152                           tosl	equ	0xFFD
  1153                           pclath	equ	0xFFA
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           intcon	equ	0xFF2
  1161                           indf0	equ	0xFEF
  1162                           postinc0	equ	0xFEE
  1163                           fsr0h	equ	0xFEA
  1164                           fsr0l	equ	0xFE9
  1165                           wreg	equ	0xFE8
  1166                           indf1	equ	0xFE7
  1167                           postinc1	equ	0xFE6
  1168                           postdec1	equ	0xFE5
  1169                           fsr1h	equ	0xFE2
  1170                           fsr1l	equ	0xFE1
  1171                           indf2	equ	0xFDF
  1172                           postinc2	equ	0xFDE
  1173                           postdec2	equ	0xFDD
  1174                           fsr2h	equ	0xFDA
  1175                           fsr2l	equ	0xFD9
  1176                           status	equ	0xFD8
  1177                           
  1178                           	psect	bssBANK3
  1179  000300                     __pbssBANK3:
  1180                           	opt stack 0
  1181  000300                     _parameter_text:
  1182                           	opt stack 0
  1183  000300                     	ds	127
  1184  00037F                     _serialport_buffer:
  1185                           	opt stack 0
  1186  00037F                     	ds	100
  1187                           tosu	equ	0xFFF
  1188                           tosh	equ	0xFFE
  1189                           tosl	equ	0xFFD
  1190                           pclath	equ	0xFFA
  1191                           tblptru	equ	0xFF8
  1192                           tblptrh	equ	0xFF7
  1193                           tblptrl	equ	0xFF6
  1194                           tablat	equ	0xFF5
  1195                           prodh	equ	0xFF4
  1196                           prodl	equ	0xFF3
  1197                           intcon	equ	0xFF2
  1198                           indf0	equ	0xFEF
  1199                           postinc0	equ	0xFEE
  1200                           fsr0h	equ	0xFEA
  1201                           fsr0l	equ	0xFE9
  1202                           wreg	equ	0xFE8
  1203                           indf1	equ	0xFE7
  1204                           postinc1	equ	0xFE6
  1205                           postdec1	equ	0xFE5
  1206                           fsr1h	equ	0xFE2
  1207                           fsr1l	equ	0xFE1
  1208                           indf2	equ	0xFDF
  1209                           postinc2	equ	0xFDE
  1210                           postdec2	equ	0xFDD
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215                           	psect	bssBANK4
  1216  000400                     __pbssBANK4:
  1217                           	opt stack 0
  1218  000400                     	ds	80
  1219  000450                     _meas_buffer:
  1220                           	opt stack 0
  1221  000450                     	ds	107
  1222                           tosu	equ	0xFFF
  1223                           tosh	equ	0xFFE
  1224                           tosl	equ	0xFFD
  1225                           pclath	equ	0xFFA
  1226                           tblptru	equ	0xFF8
  1227                           tblptrh	equ	0xFF7
  1228                           tblptrl	equ	0xFF6
  1229                           tablat	equ	0xFF5
  1230                           prodh	equ	0xFF4
  1231                           prodl	equ	0xFF3
  1232                           intcon	equ	0xFF2
  1233                           indf0	equ	0xFEF
  1234                           postinc0	equ	0xFEE
  1235                           fsr0h	equ	0xFEA
  1236                           fsr0l	equ	0xFE9
  1237                           wreg	equ	0xFE8
  1238                           indf1	equ	0xFE7
  1239                           postinc1	equ	0xFE6
  1240                           postdec1	equ	0xFE5
  1241                           fsr1h	equ	0xFE2
  1242                           fsr1l	equ	0xFE1
  1243                           indf2	equ	0xFDF
  1244                           postinc2	equ	0xFDE
  1245                           postdec2	equ	0xFDD
  1246                           fsr2h	equ	0xFDA
  1247                           fsr2l	equ	0xFD9
  1248                           status	equ	0xFD8
  1249                           
  1250                           	psect	bssBANK5
  1251  000500                     __pbssBANK5:
  1252                           	opt stack 0
  1253  000500                     _this_buf:
  1254                           	opt stack 0
  1255  000500                     	ds	127
  1256                           tosu	equ	0xFFF
  1257                           tosh	equ	0xFFE
  1258                           tosl	equ	0xFFD
  1259                           pclath	equ	0xFFA
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           indf0	equ	0xFEF
  1268                           postinc0	equ	0xFEE
  1269                           fsr0h	equ	0xFEA
  1270                           fsr0l	equ	0xFE9
  1271                           wreg	equ	0xFE8
  1272                           indf1	equ	0xFE7
  1273                           postinc1	equ	0xFE6
  1274                           postdec1	equ	0xFE5
  1275                           fsr1h	equ	0xFE2
  1276                           fsr1l	equ	0xFE1
  1277                           indf2	equ	0xFDF
  1278                           postinc2	equ	0xFDE
  1279                           postdec2	equ	0xFDD
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284                           	psect	cstackBANK1
  1285  0001E4                     __pcstackBANK1:
  1286                           	opt stack 0
  1287  0001E4                     syntax_string@result:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x0
  1291  0001E4                     	ds	1
  1292  0001E5                     syntax_string@pos:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x1
  1296  0001E5                     	ds	1
  1297  0001E6                     syntax_string@pchain:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x2
  1301  0001E6                     	ds	2
  1302  0001E8                     syntax_string@chains:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x4
  1306  0001E8                     	ds	1
  1307  0001E9                     serialport_task@byte:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x5
  1311  0001E9                     	ds	1
  1312  0001EA                     serialport_task@size:
  1313                           	opt stack 0
  1314                           
  1315                           ; 2 bytes @ 0x6
  1316  0001EA                     	ds	2
  1317  0001EC                     ??_main:
  1318                           
  1319                           ; 0 bytes @ 0x8
  1320  0001EC                     	ds	1
  1321  0001ED                     main@event_old:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x9
  1325  0001ED                     	ds	1
  1326  0001EE                     main@event_priority:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0xA
  1330  0001EE                     	ds	1
  1331  0001EF                     main@i:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0xB
  1335  0001EF                     	ds	1
  1336                           tosu	equ	0xFFF
  1337                           tosh	equ	0xFFE
  1338                           tosl	equ	0xFFD
  1339                           pclath	equ	0xFFA
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           prodh	equ	0xFF4
  1345                           prodl	equ	0xFF3
  1346                           intcon	equ	0xFF2
  1347                           indf0	equ	0xFEF
  1348                           postinc0	equ	0xFEE
  1349                           fsr0h	equ	0xFEA
  1350                           fsr0l	equ	0xFE9
  1351                           wreg	equ	0xFE8
  1352                           indf1	equ	0xFE7
  1353                           postinc1	equ	0xFE6
  1354                           postdec1	equ	0xFE5
  1355                           fsr1h	equ	0xFE2
  1356                           fsr1l	equ	0xFE1
  1357                           indf2	equ	0xFDF
  1358                           postinc2	equ	0xFDE
  1359                           postdec2	equ	0xFDD
  1360                           fsr2h	equ	0xFDA
  1361                           fsr2l	equ	0xFD9
  1362                           status	equ	0xFD8
  1363                           
  1364                           	psect	cstackBANK0
  1365  000060                     __pcstackBANK0:
  1366                           	opt stack 0
  1367  000060                     	ds	2
  1368  000062                     ??_serialport_service:
  1369  000062                     detection_obtain_analog_service@adc_data:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x2
  1373  000062                     	ds	1
  1374  000063                     serialport_service@byte:
  1375                           	opt stack 0
  1376                           
  1377                           ; 1 bytes @ 0x3
  1378  000063                     	ds	1
  1379  000064                     ??interrupts@isr_high:
  1380                           
  1381                           ; 0 bytes @ 0x4
  1382  000064                     	ds	8
  1383  00006C                     ?_uart_set_baudrate:
  1384                           	opt stack 0
  1385  00006C                     ?_delay_ms:
  1386                           	opt stack 0
  1387  00006C                     ?_rd_buffer_get:
  1388                           	opt stack 0
  1389  00006C                     ?_rd_buffer_init:
  1390                           	opt stack 0
  1391  00006C                     ?_rd_buffer_put:
  1392                           	opt stack 0
  1393  00006C                     ?_cla_add_value:
  1394                           	opt stack 0
  1395  00006C                     ?___lbmod:
  1396                           	opt stack 0
  1397  00006C                     ?_rd_buffer_cnt:
  1398                           	opt stack 0
  1399  00006C                     ?_string_utils_copy:
  1400                           	opt stack 0
  1401  00006C                     ?_string_utils_split:
  1402                           	opt stack 0
  1403  00006C                     ?_string_utils_strchr:
  1404                           	opt stack 0
  1405  00006C                     ?_syntax_as_integer:
  1406                           	opt stack 0
  1407  00006C                     ?___awdiv:
  1408                           	opt stack 0
  1409  00006C                     ?___awmod:
  1410                           	opt stack 0
  1411  00006C                     ?___lwdiv:
  1412                           	opt stack 0
  1413  00006C                     ?___wmul:
  1414                           	opt stack 0
  1415  00006C                     ?___ftpack:
  1416                           	opt stack 0
  1417  00006C                     sysclk_setup_intosc@frequency:
  1418                           	opt stack 0
  1419  00006C                     uart_putc@byte:
  1420                           	opt stack 0
  1421  00006C                     _string_utils_is_upper_case$795:
  1422                           	opt stack 0
  1423  00006C                     _string_utils_is_symbol$801:
  1424                           	opt stack 0
  1425  00006C                     _string_utils_is_digit$831:
  1426                           	opt stack 0
  1427  00006C                     symb_from_hex_to_bin@symb:
  1428                           	opt stack 0
  1429  00006C                     ___lbmod@divisor:
  1430                           	opt stack 0
  1431  00006C                     delay_ms@delay:
  1432                           	opt stack 0
  1433  00006C                     rd_buffer_init@pbuffer:
  1434                           	opt stack 0
  1435  00006C                     rd_buffer_cnt@pbuffer:
  1436                           	opt stack 0
  1437  00006C                     rd_buffer_get@pbuffer:
  1438                           	opt stack 0
  1439  00006C                     rd_buffer_put@pbuffer:
  1440                           	opt stack 0
  1441  00006C                     string_utils_copy@pdst:
  1442                           	opt stack 0
  1443  00006C                     string_utils_split@pbuf:
  1444                           	opt stack 0
  1445  00006C                     string_utils_strchr@pbuf:
  1446                           	opt stack 0
  1447  00006C                     cla_add_value@val:
  1448                           	opt stack 0
  1449  00006C                     ___awdiv@dividend:
  1450                           	opt stack 0
  1451  00006C                     ___awmod@dividend:
  1452                           	opt stack 0
  1453  00006C                     ___lwdiv@dividend:
  1454                           	opt stack 0
  1455  00006C                     ___wmul@multiplier:
  1456                           	opt stack 0
  1457  00006C                     ___ftpack@arg:
  1458                           	opt stack 0
  1459                           
  1460                           ; 3 bytes @ 0xC
  1461  00006C                     	ds	1
  1462  00006D                     ?_uart_puts:
  1463                           	opt stack 0
  1464  00006D                     string_utils_is_upper_case@symb:
  1465                           	opt stack 0
  1466  00006D                     string_utils_is_symbol@symb:
  1467                           	opt stack 0
  1468  00006D                     string_utils_is_digit@symb:
  1469                           	opt stack 0
  1470  00006D                     ___lbmod@dividend:
  1471                           	opt stack 0
  1472  00006D                     uart_puts@pstr:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0xD
  1476  00006D                     	ds	1
  1477  00006E                     ??_rd_buffer_cnt:
  1478  00006E                     ?_string_utils_strncmp:
  1479                           	opt stack 0
  1480  00006E                     ?_string_utils_strlen:
  1481                           	opt stack 0
  1482  00006E                     string_utils_strchr@delimeter:
  1483                           	opt stack 0
  1484  00006E                     ___lbmod@counter:
  1485                           	opt stack 0
  1486  00006E                     rd_buffer_init@size:
  1487                           	opt stack 0
  1488  00006E                     rd_buffer_get@prec:
  1489                           	opt stack 0
  1490  00006E                     rd_buffer_put@prec:
  1491                           	opt stack 0
  1492  00006E                     string_utils_strlen@pstr:
  1493                           	opt stack 0
  1494  00006E                     string_utils_copy@psrc:
  1495                           	opt stack 0
  1496  00006E                     string_utils_split@pstr:
  1497                           	opt stack 0
  1498  00006E                     string_utils_strncmp@pstr1:
  1499                           	opt stack 0
  1500  00006E                     cla_add_value@zero:
  1501                           	opt stack 0
  1502  00006E                     ___awdiv@divisor:
  1503                           	opt stack 0
  1504  00006E                     ___awmod@divisor:
  1505                           	opt stack 0
  1506  00006E                     ___lwdiv@divisor:
  1507                           	opt stack 0
  1508  00006E                     ___wmul@multiplicand:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0xE
  1512  00006E                     	ds	1
  1513  00006F                     ___ftpack@exp:
  1514                           	opt stack 0
  1515  00006F                     ___lbmod@rem:
  1516                           	opt stack 0
  1517  00006F                     uart_puts@size:
  1518                           	opt stack 0
  1519  00006F                     string_utils_strchr@result:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0xF
  1523  00006F                     	ds	1
  1524  000070                     ??_rd_buffer_get:
  1525  000070                     ??_rd_buffer_put:
  1526  000070                     ??_cla_add_value:
  1527  000070                     rd_buffer_init@result:
  1528                           	opt stack 0
  1529  000070                     ___awdiv@counter:
  1530                           	opt stack 0
  1531  000070                     ___awmod@counter:
  1532                           	opt stack 0
  1533  000070                     ___ftpack@sign:
  1534                           	opt stack 0
  1535  000070                     ___lwdiv@counter:
  1536                           	opt stack 0
  1537  000070                     string_utils_strlen@i:
  1538                           	opt stack 0
  1539  000070                     string_utils_copy@maxlen:
  1540                           	opt stack 0
  1541  000070                     string_utils_split@len:
  1542                           	opt stack 0
  1543  000070                     string_utils_strncmp@pstr2:
  1544                           	opt stack 0
  1545  000070                     ___wmul@product:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x10
  1549  000070                     	ds	1
  1550  000071                     ??___ftpack:
  1551  000071                     ??_serialport_startup:
  1552  000071                     ___awdiv@sign:
  1553                           	opt stack 0
  1554  000071                     ___awmod@sign:
  1555                           	opt stack 0
  1556  000071                     string_utils_strchr@pos:
  1557                           	opt stack 0
  1558  000071                     ___lwdiv@quotient:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x11
  1562  000071                     	ds	1
  1563  000072                     ?_string_utils_from_hex:
  1564                           	opt stack 0
  1565  000072                     ?_string_utils_atoi:
  1566                           	opt stack 0
  1567  000072                     serialport_startup@result:
  1568                           	opt stack 0
  1569  000072                     string_utils_split@delimeter:
  1570                           	opt stack 0
  1571  000072                     rd_buffer_cnt@sz:
  1572                           	opt stack 0
  1573  000072                     rd_buffer_get@last:
  1574                           	opt stack 0
  1575  000072                     string_utils_copy@result:
  1576                           	opt stack 0
  1577  000072                     string_utils_strncmp@len:
  1578                           	opt stack 0
  1579  000072                     string_utils_from_hex@pdata:
  1580                           	opt stack 0
  1581  000072                     ___awdiv@quotient:
  1582                           	opt stack 0
  1583  000072                     string_utils_atoi@c:
  1584                           	opt stack 0
  1585                           
  1586                           ; 3 bytes @ 0x12
  1587  000072                     	ds	1
  1588  000073                     ?___lwmod:
  1589                           	opt stack 0
  1590  000073                     startup@result:
  1591                           	opt stack 0
  1592  000073                     string_utils_split@i:
  1593                           	opt stack 0
  1594  000073                     ___lwmod@dividend:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x13
  1598  000073                     	ds	1
  1599  000074                     ?_pd_add_value:
  1600                           	opt stack 0
  1601  000074                     ?___ftmul:
  1602                           	opt stack 0
  1603  000074                     ?___lwtoft:
  1604                           	opt stack 0
  1605  000074                     rd_buffer_get@result:
  1606                           	opt stack 0
  1607  000074                     string_utils_strncmp@case_sensitive:
  1608                           	opt stack 0
  1609  000074                     string_utils_from_hex@phex_str:
  1610                           	opt stack 0
  1611  000074                     _cla_add_value$1012:
  1612                           	opt stack 0
  1613  000074                     pd_add_value@d:
  1614                           	opt stack 0
  1615  000074                     ___lwtoft@c:
  1616                           	opt stack 0
  1617  000074                     ___ftmul@f1:
  1618                           	opt stack 0
  1619                           
  1620                           ; 3 bytes @ 0x14
  1621  000074                     	ds	1
  1622  000075                     ??_string_utils_strncmp:
  1623  000075                     ??_string_utils_atoi:
  1624  000075                     rd_buffer_get@first:
  1625                           	opt stack 0
  1626  000075                     string_utils_split@chains:
  1627                           	opt stack 0
  1628  000075                     ___lwmod@divisor:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x15
  1632  000075                     	ds	1
  1633  000076                     ??_string_utils_from_hex:
  1634  000076                     rd_buffer_put@mes_rec:
  1635                           	opt stack 0
  1636  000076                     _cla_add_value$1013:
  1637                           	opt stack 0
  1638  000076                     pd_add_value@val:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x16
  1642  000076                     	ds	1
  1643  000077                     ?_rd_buffer_readline:
  1644                           	opt stack 0
  1645  000077                     string_utils_split@prev:
  1646                           	opt stack 0
  1647  000077                     string_utils_strncmp@result:
  1648                           	opt stack 0
  1649  000077                     ___lwmod@counter:
  1650                           	opt stack 0
  1651  000077                     rd_buffer_readline@pbuffer:
  1652                           	opt stack 0
  1653  000077                     ___ftmul@f2:
  1654                           	opt stack 0
  1655                           
  1656                           ; 3 bytes @ 0x17
  1657  000077                     	ds	1
  1658  000078                     ??_pd_add_value:
  1659  000078                     _rd_buffer_put$482:
  1660                           	opt stack 0
  1661  000078                     string_utils_split@symb:
  1662                           	opt stack 0
  1663  000078                     cla_add_value@d:
  1664                           	opt stack 0
  1665  000078                     string_utils_strncmp@pos:
  1666                           	opt stack 0
  1667  000078                     string_utils_atoi@sign:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x18
  1671  000078                     	ds	1
  1672  000079                     rd_buffer_readline@pdata:
  1673                           	opt stack 0
  1674  000079                     rd_buffer_put@sz:
  1675                           	opt stack 0
  1676  000079                     string_utils_from_hex@len:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x19
  1680  000079                     	ds	1
  1681  00007A                     ??___ftmul:
  1682  00007A                     string_utils_strncmp@symb1:
  1683                           	opt stack 0
  1684  00007A                     string_utils_atoi@value:
  1685                           	opt stack 0
  1686                           
  1687                           ; 2 bytes @ 0x1A
  1688  00007A                     	ds	1
  1689  00007B                     string_utils_strncmp@symb2:
  1690                           	opt stack 0
  1691  00007B                     rd_buffer_readline@psize:
  1692                           	opt stack 0
  1693  00007B                     rd_buffer_put@ind:
  1694                           	opt stack 0
  1695  00007B                     string_utils_from_hex@j:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x1B
  1699  00007B                     	ds	1
  1700  00007C                     ?_sprintf:
  1701                           	opt stack 0
  1702  00007C                     sprintf@f:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x1C
  1706  00007C                     	ds	1
  1707  00007D                     ?_serialport_write:
  1708                           	opt stack 0
  1709  00007D                     rd_buffer_readline@ch:
  1710                           	opt stack 0
  1711  00007D                     serialport_write@pstr:
  1712                           	opt stack 0
  1713  00007D                     string_utils_from_hex@i:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x1D
  1717  00007D                     	ds	1
  1718  00007E                     _pd_add_value$1126:
  1719                           	opt stack 0
  1720                           
  1721                           ; 2 bytes @ 0x1E
  1722  00007E                     	ds	1
  1723  00007F                     set_parameter@p_id:
  1724                           	opt stack 0
  1725  00007F                     get_parameter@p_id:
  1726                           	opt stack 0
  1727  00007F                     ___ftmul@exp:
  1728                           	opt stack 0
  1729                           
  1730                           ; 1 bytes @ 0x1F
  1731  00007F                     	ds	1
  1732  000080                     ??_sprintf:
  1733  000080                     _pd_add_value$1127:
  1734                           	opt stack 0
  1735  000080                     set_parameter@u16_value:
  1736                           	opt stack 0
  1737  000080                     ___ftmul@f3_as_product:
  1738                           	opt stack 0
  1739                           
  1740                           ; 3 bytes @ 0x20
  1741  000080                     	ds	2
  1742  000082                     set_parameter@ok:
  1743                           	opt stack 0
  1744  000082                     sprintf@ap:
  1745                           	opt stack 0
  1746  000082                     _pd_add_value$1128:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x22
  1750  000082                     	ds	1
  1751  000083                     ?_on_parameter_found:
  1752                           	opt stack 0
  1753  000083                     on_parameter_found@cmd_id:
  1754                           	opt stack 0
  1755  000083                     sprintf@flag:
  1756                           	opt stack 0
  1757  000083                     ___ftmul@cntr:
  1758                           	opt stack 0
  1759                           
  1760                           ; 1 bytes @ 0x23
  1761  000083                     	ds	1
  1762  000084                     on_parameter_found@p_id:
  1763                           	opt stack 0
  1764  000084                     sprintf@prec:
  1765                           	opt stack 0
  1766  000084                     ___ftmul@sign:
  1767                           	opt stack 0
  1768  000084                     _pd_add_value$1129:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x24
  1772  000084                     	ds	1
  1773  000085                     ?___ftadd:
  1774                           	opt stack 0
  1775  000085                     ?___asftmul:
  1776                           	opt stack 0
  1777  000085                     ___ftadd@f1:
  1778                           	opt stack 0
  1779  000085                     ___asftmul@f2:
  1780                           	opt stack 0
  1781  000085                     sprintf@_val:
  1782                           	opt stack 0
  1783                           
  1784                           ; 5 bytes @ 0x25
  1785  000085                     	ds	1
  1786  000086                     _pd_add_value$1130:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x26
  1790  000086                     	ds	2
  1791  000088                     ___asftmul@f1p:
  1792                           	opt stack 0
  1793  000088                     pd_add_value@tmp:
  1794                           	opt stack 0
  1795  000088                     ___ftadd@f2:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x28
  1799  000088                     	ds	1
  1800  000089                     on_parameter_found@operation:
  1801                           	opt stack 0
  1802                           
  1803                           ; 1 bytes @ 0x29
  1804  000089                     	ds	1
  1805  00008A                     pd_add_value@i:
  1806                           	opt stack 0
  1807  00008A                     sprintf@sp:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0x2A
  1811  00008A                     	ds	1
  1812  00008B                     ??___ftadd:
  1813  00008B                     sprintf@c:
  1814                           	opt stack 0
  1815  00008B                     detection_task@zero:
  1816                           	opt stack 0
  1817                           
  1818                           ; 3 bytes @ 0x2B
  1819  00008B                     	ds	5
  1820  000090                     ___ftadd@sign:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x30
  1824  000090                     	ds	1
  1825  000091                     ___ftadd@exp2:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0x31
  1829  000091                     	ds	1
  1830  000092                     ___ftadd@exp1:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x32
  1834  000092                     	ds	1
  1835  000093                     ?_string_utils_atof:
  1836                           	opt stack 0
  1837  000093                     string_utils_atof@s:
  1838                           	opt stack 0
  1839                           
  1840                           ; 3 bytes @ 0x33
  1841  000093                     	ds	3
  1842  000096                     ??_string_utils_atof:
  1843                           
  1844                           ; 0 bytes @ 0x36
  1845  000096                     	ds	2
  1846  000098                     string_utils_atof@sign:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x38
  1850  000098                     	ds	2
  1851  00009A                     string_utils_atof@i:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0x3A
  1855  00009A                     	ds	2
  1856  00009C                     string_utils_atof@e:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x3C
  1860  00009C                     	ds	2
  1861  00009E                     string_utils_atof@a:
  1862                           	opt stack 0
  1863                           
  1864                           ; 3 bytes @ 0x3E
  1865  00009E                     	ds	3
  1866  0000A1                     string_utils_atof@c:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x41
  1870  0000A1                     	ds	2
  1871  0000A3                     ?_this_parse_item:
  1872                           	opt stack 0
  1873  0000A3                     this_parse_item@pstr:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x43
  1877  0000A3                     	ds	2
  1878  0000A5                     this_parse_item@pitem:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x45
  1882  0000A5                     	ds	1
  1883  0000A6                     ??_this_parse_item:
  1884                           
  1885                           ; 0 bytes @ 0x46
  1886  0000A6                     	ds	2
  1887  0000A8                     this_parse_item@result:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x48
  1891  0000A8                     	ds	1
  1892  0000A9                     this_parse_item@pvar:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x49
  1896  0000A9                     	ds	2
  1897  0000AB                     this_parse_item@str_len:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x4B
  1901  0000AB                     	ds	2
  1902  0000AD                     this_parse_item@pval:
  1903                           	opt stack 0
  1904                           
  1905                           ; 3 bytes @ 0x4D
  1906  0000AD                     	ds	3
  1907  0000B0                     this_parse_item@i:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x50
  1911  0000B0                     	ds	1
  1912  0000B1                     this_parse_item@var_len:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x51
  1916  0000B1                     	ds	2
  1917  0000B3                     ?_syntax_string:
  1918                           	opt stack 0
  1919  0000B3                     syntax_string@pstr:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x53
  1923  0000B3                     	ds	2
  1924  0000B5                     syntax_string@str_len:
  1925                           	opt stack 0
  1926                           
  1927                           ; 2 bytes @ 0x55
  1928  0000B5                     	ds	2
  1929  0000B7                     ??_syntax_string:
  1930                           
  1931                           ; 0 bytes @ 0x57
  1932  0000B7                     	ds	1
  1933  0000B8                     tosu	equ	0xFFF
  1934                           tosh	equ	0xFFE
  1935                           tosl	equ	0xFFD
  1936                           pclath	equ	0xFFA
  1937                           tblptru	equ	0xFF8
  1938                           tblptrh	equ	0xFF7
  1939                           tblptrl	equ	0xFF6
  1940                           tablat	equ	0xFF5
  1941                           prodh	equ	0xFF4
  1942                           prodl	equ	0xFF3
  1943                           intcon	equ	0xFF2
  1944                           indf0	equ	0xFEF
  1945                           postinc0	equ	0xFEE
  1946                           fsr0h	equ	0xFEA
  1947                           fsr0l	equ	0xFE9
  1948                           wreg	equ	0xFE8
  1949                           indf1	equ	0xFE7
  1950                           postinc1	equ	0xFE6
  1951                           postdec1	equ	0xFE5
  1952                           fsr1h	equ	0xFE2
  1953                           fsr1l	equ	0xFE1
  1954                           indf2	equ	0xFDF
  1955                           postinc2	equ	0xFDE
  1956                           postdec2	equ	0xFDD
  1957                           fsr2h	equ	0xFDA
  1958                           fsr2l	equ	0xFD9
  1959                           status	equ	0xFD8
  1960                           
  1961                           ; 0 bytes @ 0x58
  1962                           
  1963                           	psect	cstackCOMRAM
  1964  000001                     __pcstackCOMRAM:
  1965                           	opt stack 0
  1966  000001                     ?_syntax_get_text:
  1967                           	opt stack 0
  1968  000001                     
  1969                           ; 2 bytes @ 0x0
  1970  000001                     	ds	17
  1971  000012                     ??_isr_high:
  1972                           
  1973                           ; 0 bytes @ 0x11
  1974  000012                     	ds	8
  1975  00001A                     ?i2_rd_buffer_put:
  1976                           	opt stack 0
  1977  00001A                     ?_adc_read:
  1978                           	opt stack 0
  1979  00001A                     _uart_error$257:
  1980                           	opt stack 0
  1981  00001A                     i2rd_buffer_put@pbuffer:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x19
  1985  00001A                     	ds	1
  1986  00001B                     uart_getc@pbyte:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x1A
  1990  00001B                     	ds	1
  1991  00001C                     ??_adc_read:
  1992  00001C                     uart_getc@result:
  1993                           	opt stack 0
  1994  00001C                     i2rd_buffer_put@prec:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x1B
  1998  00001C                     	ds	1
  1999  00001D                     adc_read@adc_number:
  2000                           	opt stack 0
  2001                           
  2002                           ; 1 bytes @ 0x1C
  2003  00001D                     	ds	1
  2004  00001E                     ??i2_rd_buffer_put:
  2005                           
  2006                           ; 0 bytes @ 0x1D
  2007  00001E                     	ds	6
  2008  000024                     i2rd_buffer_put@mes_rec:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x23
  2012  000024                     	ds	2
  2013  000026                     i2_rd_buffer_put$482:
  2014                           	opt stack 0
  2015                           
  2016                           ; 1 bytes @ 0x25
  2017  000026                     	ds	1
  2018  000027                     i2rd_buffer_put@sz:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x26
  2022  000027                     	ds	2
  2023  000029                     i2rd_buffer_put@ind:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x28
  2027  000029                     	ds	2
  2028  00002B                     tosu	equ	0xFFF
  2029                           tosh	equ	0xFFE
  2030                           tosl	equ	0xFFD
  2031                           pclath	equ	0xFFA
  2032                           tblptru	equ	0xFF8
  2033                           tblptrh	equ	0xFF7
  2034                           tblptrl	equ	0xFF6
  2035                           tablat	equ	0xFF5
  2036                           prodh	equ	0xFF4
  2037                           prodl	equ	0xFF3
  2038                           intcon	equ	0xFF2
  2039                           indf0	equ	0xFEF
  2040                           postinc0	equ	0xFEE
  2041                           fsr0h	equ	0xFEA
  2042                           fsr0l	equ	0xFE9
  2043                           wreg	equ	0xFE8
  2044                           indf1	equ	0xFE7
  2045                           postinc1	equ	0xFE6
  2046                           postdec1	equ	0xFE5
  2047                           fsr1h	equ	0xFE2
  2048                           fsr1l	equ	0xFE1
  2049                           indf2	equ	0xFDF
  2050                           postinc2	equ	0xFDE
  2051                           postdec2	equ	0xFDD
  2052                           fsr2h	equ	0xFDA
  2053                           fsr2l	equ	0xFD9
  2054                           status	equ	0xFD8
  2055                           
  2056                           ; 0 bytes @ 0x2A
  2057 ;;
  2058 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2059 ;;
  2060 ;; *************** function _main *****************
  2061 ;; Defined at:
  2062 ;;		line 18 in file "src/main.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;  i               1   11[BANK1 ] unsigned char 
  2067 ;;  event_priori    1   10[BANK1 ] char 
  2068 ;;  event_old       1    9[BANK1 ] char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;                  2  1060[COMRAM] int 
  2071 ;; Registers used:
  2072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2073 ;; Tracked objects:
  2074 ;;		On entry : 0/0
  2075 ;;		On exit  : 0/0
  2076 ;;		Unchanged: 0/0
  2077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2078 ;;      Params:         0       0       0       0       0       0       0
  2079 ;;      Locals:         0       0       3       0       0       0       0
  2080 ;;      Temps:          0       0       1       0       0       0       0
  2081 ;;      Totals:         0       0       4       0       0       0       0
  2082 ;;Total ram usage:        4 bytes
  2083 ;; Hardware stack levels required when called:   12
  2084 ;; This function calls:
  2085 ;;		_delay_ms
  2086 ;;		_startup
  2087 ;;		_string_utils_atoi
  2088 ;;		_sprintf
  2089 ;;		_uart_puts
  2090 ;;		_detection_task
  2091 ;;		_serialport_task
  2092 ;; This function is called by:
  2093 ;;		Startup code after reset
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text0
  2098  001364                     __ptext0:
  2099                           	opt stack 0
  2100  001364                     _main:
  2101                           	opt stack 19
  2102                           
  2103                           ;main.c: 19: while(startup() != RESULT_SUCCESS)
  2104  001364  D007               	goto	l8147
  2105  001366                     l8145:
  2106                           
  2107                           ; BSR set to: 1
  2108                           ;main.c: 20: {
  2109                           ;main.c: 21: delay_ms(1000);
  2110  001366  0E03               	movlw	3
  2111  001368  0100               	movlb	0	; () banked
  2112  00136A  6F6D               	movwf	(?_delay_ms+1)& (0+255),b
  2113  00136C  0EE8               	movlw	232
  2114  00136E  6F6C               	movwf	?_delay_ms& (0+255),b
  2115  001370  EC09  F011         	call	_delay_ms	;wreg free
  2116  001374                     l8147:
  2117  001374  EC59  F00F         	call	_startup	;wreg free
  2118  001378  0101               	movlb	1	; () banked
  2119  00137A  6FEC               	movwf	??_main& (0+255),b
  2120  00137C  05EC               	decf	??_main& (0+255),w,b
  2121  00137E  E1F3               	bnz	l8145
  2122                           
  2123                           ; BSR set to: 1
  2124                           ;main.c: 22: };
  2125                           ;main.c: 23: sprintf(tmp,"\n%d",string_utils_atoi("1"));
  2126  001380  0E7F               	movlw	high STR_33
  2127  001382  0100               	movlb	0	; () banked
  2128  001384  6F7D               	movwf	(?_sprintf+1)& (0+255),b
  2129  001386  0EF9               	movlw	low STR_33
  2130  001388  6F7C               	movwf	?_sprintf& (0+255),b
  2131  00138A  0EFD               	movlw	low STR_34
  2132  00138C  6F72               	movwf	?_string_utils_atoi& (0+255),b
  2133  00138E  0E7F               	movlw	high STR_34
  2134  001390  6F73               	movwf	(?_string_utils_atoi+1)& (0+255),b
  2135  001392  0E00               	movlw	low (STR_34 shr (0+16))
  2136  001394  6F74               	movwf	(?_string_utils_atoi+2)& (0+255),b
  2137  001396  EC2E  F009         	call	_string_utils_atoi	;wreg free
  2138  00139A  C072  F07E         	movff	?_string_utils_atoi,?_sprintf+2
  2139  00139E  C073  F07F         	movff	?_string_utils_atoi+1,?_sprintf+3
  2140  0013A2  0EE5               	movlw	_tmp& (0+255)
  2141  0013A4  ECA8  F008         	call	_sprintf
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;main.c: 24: uart_puts(tmp,100);
  2145  0013A8  0E00               	movlw	high _tmp
  2146  0013AA  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  2147  0013AC  0EE5               	movlw	low _tmp
  2148  0013AE  6F6D               	movwf	?_uart_puts& (0+255),b
  2149  0013B0  6B70               	clrf	(?_uart_puts+3)& (0+255),b
  2150  0013B2  0E64               	movlw	100
  2151  0013B4  6F6F               	movwf	(?_uart_puts+2)& (0+255),b
  2152  0013B6  EC43  F00E         	call	_uart_puts	;wreg free
  2153  0013BA  8EF2               	bsf	intcon,7,c	;volatile
  2154  0013BC  8CF2               	bsf	intcon,6,c	;volatile
  2155  0013BE                     l8157:
  2156  0013BE  0101               	movlb	1	; () banked
  2157  0013C0  69ED               	setf	main@event_old& (0+255),b
  2158                           
  2159                           ; BSR set to: 1
  2160  0013C2  69EE               	setf	main@event_priority& (0+255),b
  2161                           
  2162                           ; BSR set to: 1
  2163  0013C4  6BEF               	clrf	main@i& (0+255),b
  2164  0013C6                     l8167:
  2165                           
  2166                           ; BSR set to: 1
  2167  0013C6  51EF               	movf	main@i& (0+255),w,b
  2168  0013C8  0F33               	addlw	low _pool	;volatile
  2169  0013CA  6ED9               	movwf	fsr2l,c
  2170  0013CC  6ADA               	clrf	fsr2h,c
  2171  0013CE  0E01               	movlw	1
  2172  0013D0  62DF               	cpfseq	indf2,c
  2173  0013D2  D011               	goto	l8179
  2174                           
  2175                           ; BSR set to: 1
  2176  0013D4  51EF               	movf	main@i& (0+255),w,b
  2177  0013D6  0F2B               	addlw	low _event_miss	;volatile
  2178  0013D8  6ED9               	movwf	fsr2l,c
  2179  0013DA  6ADA               	clrf	fsr2h,c
  2180  0013DC  50DF               	movf	indf2,w,c
  2181  0013DE  E103               	bnz	l8173
  2182                           
  2183                           ; BSR set to: 1
  2184  0013E0  C1EF  F1ED         	movff	main@i,main@event_old
  2185  0013E4  D005               	goto	l8175
  2186  0013E6                     l8173:
  2187                           
  2188                           ; BSR set to: 1
  2189  0013E6  51EF               	movf	main@i& (0+255),w,b
  2190  0013E8  0F2B               	addlw	low _event_miss	;volatile
  2191  0013EA  6ED9               	movwf	fsr2l,c
  2192  0013EC  6ADA               	clrf	fsr2h,c
  2193  0013EE  06DF               	decf	indf2,f,c
  2194  0013F0                     l8175:
  2195                           
  2196                           ; BSR set to: 1
  2197  0013F0  BFEE               	btfsc	main@event_priority& (0+255),7,b
  2198                           
  2199                           ; BSR set to: 1
  2200  0013F2  C1EF  F1EE         	movff	main@i,main@event_priority
  2201  0013F6                     l8179:
  2202                           
  2203                           ; BSR set to: 1
  2204  0013F6  2BEF               	incf	main@i& (0+255),f,b
  2205                           
  2206                           ; BSR set to: 1
  2207  0013F8  0E07               	movlw	7
  2208  0013FA  65EF               	cpfsgt	main@i& (0+255),b
  2209  0013FC  D7E4               	goto	l8167
  2210                           
  2211                           ; BSR set to: 1
  2212  0013FE  BFED               	btfsc	main@event_old& (0+255),7,b
  2213  001400  D011               	goto	l1074
  2214                           
  2215                           ; BSR set to: 1
  2216  001402  51ED               	movf	main@event_old& (0+255),w,b
  2217  001404  D827               	call	PL74	;call to abstracted procedure
  2218  001406  D801               	call	u9878
  2219  001408  D00A               	goto	u9879
  2220  00140A                     u9878:
  2221  00140A  0005               	push	
  2222  00140C  6EFA               	movwf	pclath,c
  2223  00140E  50DE               	movf	postinc2,w,c
  2224  001410  6EFD               	movwf	tosl,c
  2225  001412  50DE               	movf	postinc2,w,c
  2226  001414  6EFE               	movwf	tosh,c
  2227  001416  50F8               	movf	tblptru,w,c
  2228  001418  6EFF               	movwf	tosu,c
  2229  00141A  50FA               	movf	pclath,w,c
  2230  00141C  0012               	return		;indir
  2231  00141E                     u9879:
  2232                           
  2233                           ; BSR set to: 0
  2234  00141E  0101               	movlb	1	; () banked
  2235  001420  51ED               	movf	main@event_old& (0+255),w,b
  2236  001422  D012               	goto	L1
  2237  001424                     l1074:
  2238                           
  2239                           ; BSR set to: 1
  2240  001424  BFEE               	btfsc	main@event_priority& (0+255),7,b
  2241  001426  D014               	goto	l1077
  2242                           
  2243                           ; BSR set to: 1
  2244  001428  51EE               	movf	main@event_priority& (0+255),w,b
  2245  00142A  D814               	call	PL74	;call to abstracted procedure
  2246  00142C  D801               	call	u9898
  2247  00142E  D00A               	goto	u9899
  2248  001430                     u9898:
  2249  001430  0005               	push	
  2250  001432  6EFA               	movwf	pclath,c
  2251  001434  50DE               	movf	postinc2,w,c
  2252  001436  6EFD               	movwf	tosl,c
  2253  001438  50DE               	movf	postinc2,w,c
  2254  00143A  6EFE               	movwf	tosh,c
  2255  00143C  50F8               	movf	tblptru,w,c
  2256  00143E  6EFF               	movwf	tosu,c
  2257  001440  50FA               	movf	pclath,w,c
  2258  001442  0012               	return		;indir
  2259  001444                     u9899:
  2260                           
  2261                           ; BSR set to: 0
  2262  001444  0101               	movlb	1	; () banked
  2263  001446  51EE               	movf	main@event_priority& (0+255),w,b
  2264  001448                     L1:
  2265  001448  0F33               	addlw	low _pool	;volatile
  2266  00144A  6ED9               	movwf	fsr2l,c
  2267  00144C  6ADA               	clrf	fsr2h,c
  2268  00144E  6ADF               	clrf	indf2,c
  2269  001450                     l1077:
  2270                           
  2271                           ; BSR set to: 1
  2272  001450  0004               	clrwdt		;# 
  2273  001452  D7B5               	goto	l8157
  2274  001454                     PL74:
  2275                           	opt stack 19
  2276  001454  0D02               	mullw	2
  2277  001456  50F3               	movf	prodl,w,c
  2278  001458  0100               	movlb	0	; () banked
  2279  00145A  0FB8               	addlw	low _events	;volatile
  2280  00145C  6ED9               	movwf	fsr2l,c
  2281  00145E  6ADA               	clrf	fsr2h,c
  2282  001460  0012               	return	
  2283  001462                     __end_ofPL74:
  2284                           	opt stack 0
  2285                           tosu	equ	0xFFF
  2286                           tosh	equ	0xFFE
  2287                           tosl	equ	0xFFD
  2288                           pclath	equ	0xFFA
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           indf0	equ	0xFEF
  2297                           postinc0	equ	0xFEE
  2298                           fsr0h	equ	0xFEA
  2299                           fsr0l	equ	0xFE9
  2300                           wreg	equ	0xFE8
  2301                           indf1	equ	0xFE7
  2302                           postinc1	equ	0xFE6
  2303                           postdec1	equ	0xFE5
  2304                           fsr1h	equ	0xFE2
  2305                           fsr1l	equ	0xFE1
  2306                           indf2	equ	0xFDF
  2307                           postinc2	equ	0xFDE
  2308                           postdec2	equ	0xFDD
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _delay_ms *****************
  2314 ;; Defined at:
  2315 ;;		line 18 in file "src/drivers/delay.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  delay           2   12[BANK0 ] unsigned int 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;		None               void
  2322 ;; Registers used:
  2323 ;;		wreg, status,2, status,0
  2324 ;; Tracked objects:
  2325 ;;		On entry : F/0
  2326 ;;		On exit  : F/0
  2327 ;;		Unchanged: FFFFFFF0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2329 ;;      Params:         0       2       0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0
  2332 ;;      Totals:         0       2       0       0       0       0       0
  2333 ;;Total ram usage:        2 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    5
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_main
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text1
  2344  002212                     __ptext1:
  2345                           	opt stack 0
  2346  002212                     __end_of_main:
  2347                           	opt stack 0
  2348  002212                     _delay_ms:
  2349                           	opt stack 25
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;delay.c: 19: this_delay_timer_ms = delay;
  2353  002212  C06C  F0F1         	movff	delay_ms@delay,_this_delay_timer_ms	;volatile
  2354  002216  C06D  F0F2         	movff	delay_ms@delay+1,_this_delay_timer_ms+1	;volatile
  2355  00221A                     l4943:
  2356                           
  2357                           ; BSR set to: 0
  2358  00221A  51F2               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  2359  00221C  11F1               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  2360  00221E  B4D8               	btfsc	status,2,c
  2361  002220  0012               	return	
  2362  002222  D7FB               	goto	l4943
  2363  002224                     __end_of_delay_ms:
  2364                           	opt stack 0
  2365                           tosu	equ	0xFFF
  2366                           tosh	equ	0xFFE
  2367                           tosl	equ	0xFFD
  2368                           pclath	equ	0xFFA
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           indf0	equ	0xFEF
  2377                           postinc0	equ	0xFEE
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           indf1	equ	0xFE7
  2382                           postinc1	equ	0xFE6
  2383                           postdec1	equ	0xFE5
  2384                           fsr1h	equ	0xFE2
  2385                           fsr1l	equ	0xFE1
  2386                           indf2	equ	0xFDF
  2387                           postinc2	equ	0xFDE
  2388                           postdec2	equ	0xFDD
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _detection_task *****************
  2394 ;; Defined at:
  2395 ;;		line 81 in file "src/modules/detection.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  zero            3   43[BANK0 ] m
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : F/0
  2406 ;;		On exit  : F/0
  2407 ;;		Unchanged: FFFFFFF0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2409 ;;      Params:         0       0       0       0       0       0       0
  2410 ;;      Locals:         0       3       0       0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0
  2412 ;;      Totals:         0       3       0       0       0       0       0
  2413 ;;Total ram usage:        3 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    7
  2416 ;; This function calls:
  2417 ;;		_pd_add_value
  2418 ;;		_cla_add_value
  2419 ;; This function is called by:
  2420 ;;		_startup
  2421 ;;		_main
  2422 ;; This function uses a non-reentrant model
  2423 ;;
  2424                           
  2425                           	psect	text2
  2426  00196C                     __ptext2:
  2427                           	opt stack 0
  2428  00196C                     _detection_task:
  2429                           	opt stack 23
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;detection.c: 82: static CHAR alarm_cla;
  2433                           ;detection.c: 83: static CHAR alarm_wav;
  2434                           ;detection.c: 84: INT24 zero;
  2435                           ;detection.c: 86: alarm_wav = (CHAR)pd_add_value(&pd_detector, (INT24)g_analog0);
  2436                           
  2437                           ; BSR set to: 0
  2438  00196C  0E01               	movlw	high _pd_detector	;volatile
  2439  00196E  0100               	movlb	0	; () banked
  2440  001970  6F75               	movwf	(?_pd_add_value+1)& (0+255),b
  2441  001972  0E6B               	movlw	low _pd_detector	;volatile
  2442  001974  6F74               	movwf	?_pd_add_value& (0+255),b
  2443  001976  C0C8  F076         	movff	_g_analog0,?_pd_add_value+2	;volatile
  2444  00197A  C0C9  F077         	movff	_g_analog0+1,?_pd_add_value+3	;volatile
  2445  00197E  EC7A  F000         	call	_pd_add_value	;wreg free
  2446  001982  6FCF               	movwf	detection_task@alarm_wav& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;detection.c: 87: zero = pd_detector.ref_v;
  2450  001984  C1BF  F08B         	movff	_pd_detector+84,detection_task@zero	;volatile
  2451  001988  0100               	movlb	0	; () banked
  2452  00198A  C1C0  F08C         	movff	_pd_detector+85,detection_task@zero+1	;volatile
  2453  00198E  6B8D               	clrf	(detection_task@zero+2)& (0+255),b
  2454  001990  BF8C               	btfsc	(detection_task@zero+1)& (0+255),7,b
  2455  001992  078D               	decf	(detection_task@zero+2)& (0+255),f,b
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;detection.c: 88: alarm_cla = (CHAR)cla_add_value(&cla_detector, (INT24)g_analog0, zero);
  2459  001994  C0C8  F06C         	movff	_g_analog0,?_cla_add_value	;volatile
  2460  001998  C0C9  F06D         	movff	_g_analog0+1,?_cla_add_value+1	;volatile
  2461  00199C  C08B  F06E         	movff	detection_task@zero,?_cla_add_value+2
  2462  0019A0  C08C  F06F         	movff	detection_task@zero+1,?_cla_add_value+3
  2463  0019A4  0ED0               	movlw	_cla_detector& (0+255)	;volatile
  2464  0019A6  EC23  F004         	call	_cla_add_value
  2465  0019AA  6FCE               	movwf	detection_task@alarm_cla& (0+255),b
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;detection.c: 89: this_warning = cla_detector.status.over_trig;
  2469  0019AC  0E00               	movlw	0
  2470  0019AE  B5DE               	btfsc	(_cla_detector+14)& (0+255),2,b	;volatile
  2471  0019B0  0E01               	movlw	1
  2472  0019B2  6FCD               	movwf	_this_warning& (0+255),b	;volatile
  2473                           
  2474                           ;detection.c: 91: switch (g_CONFIG.det_mode)
  2475  0019B4  D009               	goto	l8069
  2476  0019B6                     l869:
  2477                           
  2478                           ; BSR set to: 1
  2479                           ;detection.c: 97: this_alarm = FALSE;
  2480  0019B6  0100               	movlb	0	; () banked
  2481  0019B8  6BCB               	clrf	_this_alarm& (0+255),b	;volatile
  2482                           
  2483                           ;detection.c: 98: break;
  2484  0019BA  D00E               	goto	l8071
  2485  0019BC                     l871:
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;detection.c: 102: this_alarm = alarm_cla;
  2489  0019BC  C0CE  F0CB         	movff	detection_task@alarm_cla,_this_alarm	;volatile
  2490                           
  2491                           ;detection.c: 103: break;
  2492  0019C0  D00B               	goto	l8071
  2493  0019C2                     l872:
  2494                           
  2495                           ; BSR set to: 1
  2496                           ;detection.c: 110: this_alarm= alarm_wav;
  2497  0019C2  C0CF  F0CB         	movff	detection_task@alarm_wav,_this_alarm	;volatile
  2498                           
  2499                           ;detection.c: 111: break;
  2500  0019C6  D008               	goto	l8071
  2501  0019C8                     l8069:
  2502                           
  2503                           ; BSR set to: 0
  2504  0019C8  0101               	movlb	1	; () banked
  2505  0019CA  51D7               	movf	(_g_CONFIG+7)& (0+255),w,b	;volatile
  2506                           
  2507                           ; Switch size 1, requested type "space"
  2508                           ; Number of cases is 3, Range of values is 0 to 2
  2509                           ; switch strategies available:
  2510                           ; Name         Instructions Cycles
  2511                           ; simple_byte           10     6 (average)
  2512                           ;	Chosen strategy is simple_byte
  2513  0019CC  E0F4               	bz	l869
  2514  0019CE  0A01               	xorlw	1	; case 1
  2515  0019D0  E0F5               	bz	l871
  2516  0019D2  0A03               	xorlw	3	; case 2
  2517  0019D4  E0F6               	bz	l872
  2518  0019D6  D7EF               	goto	l869
  2519  0019D8                     l8071:
  2520                           
  2521                           ;detection.c: 119: if(this_alarm) STATUS |= (1<<0);
  2522  0019D8  0100               	movlb	0	; () banked
  2523  0019DA  51CB               	movf	_this_alarm& (0+255),w,b	;volatile
  2524  0019DC  A4D8               	btfss	status,2,c
  2525                           
  2526                           ; BSR set to: 0
  2527  0019DE  80D8               	bsf	status,0,c	;volatile
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;detection.c: 120: if(this_warning) STATUS |= (1<<1);
  2531  0019E0  51CD               	movf	_this_warning& (0+255),w,b	;volatile
  2532  0019E2  A4D8               	btfss	status,2,c
  2533                           
  2534                           ; BSR set to: 0
  2535  0019E4  82D8               	bsf	status,1,c	;volatile
  2536                           
  2537                           ; BSR set to: 0
  2538  0019E6  0012               	return	
  2539  0019E8                     __end_of_detection_task:
  2540                           	opt stack 0
  2541                           tosu	equ	0xFFF
  2542                           tosh	equ	0xFFE
  2543                           tosl	equ	0xFFD
  2544                           pclath	equ	0xFFA
  2545                           tblptru	equ	0xFF8
  2546                           tblptrh	equ	0xFF7
  2547                           tblptrl	equ	0xFF6
  2548                           tablat	equ	0xFF5
  2549                           prodh	equ	0xFF4
  2550                           prodl	equ	0xFF3
  2551                           intcon	equ	0xFF2
  2552                           indf0	equ	0xFEF
  2553                           postinc0	equ	0xFEE
  2554                           fsr0h	equ	0xFEA
  2555                           fsr0l	equ	0xFE9
  2556                           wreg	equ	0xFE8
  2557                           indf1	equ	0xFE7
  2558                           postinc1	equ	0xFE6
  2559                           postdec1	equ	0xFE5
  2560                           fsr1h	equ	0xFE2
  2561                           fsr1l	equ	0xFE1
  2562                           indf2	equ	0xFDF
  2563                           postinc2	equ	0xFDE
  2564                           postdec2	equ	0xFDD
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _serialport_task *****************
  2570 ;; Defined at:
  2571 ;;		line 38 in file "src/modules/serialport.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  size            2    6[BANK1 ] int 
  2576 ;;  byte            1    5[BANK1 ] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : F/0
  2583 ;;		On exit  : F/0
  2584 ;;		Unchanged: FFFFFFF0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2586 ;;      Params:         0       0       0       0       0       0       0
  2587 ;;      Locals:         0       0       3       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0
  2589 ;;      Totals:         0       0       3       0       0       0       0
  2590 ;;Total ram usage:        3 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:   11
  2593 ;; This function calls:
  2594 ;;		_syntax_string
  2595 ;;		_rd_buffer_readline
  2596 ;;		_rd_buffer_get
  2597 ;;		_uart_putc
  2598 ;;		_rd_buffer_cnt
  2599 ;; This function is called by:
  2600 ;;		_startup
  2601 ;;		_main
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           	psect	text3
  2606  0019E8                     __ptext3:
  2607                           	opt stack 0
  2608  0019E8                     _serialport_task:
  2609                           	opt stack 19
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;serialport.c: 39: SIZE size;
  2613                           ;serialport.c: 40: UINT8 byte;
  2614                           ;serialport.c: 41: while (rd_buffer_readline(&g_rx_buffer, &serialport_buffer, &size)) {
  2615                           
  2616                           ; BSR set to: 0
  2617  0019E8  D00B               	goto	l7525
  2618  0019EA                     l7523:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;serialport.c: 42: syntax_string(serialport_buffer, size);
  2622  0019EA  0E03               	movlw	high _serialport_buffer
  2623  0019EC  0100               	movlb	0	; () banked
  2624  0019EE  6FB4               	movwf	(?_syntax_string+1)& (0+255),b
  2625  0019F0  0E7F               	movlw	low _serialport_buffer
  2626  0019F2  6FB3               	movwf	?_syntax_string& (0+255),b
  2627  0019F4  C1EA  F0B5         	movff	serialport_task@size,?_syntax_string+2
  2628  0019F8  C1EB  F0B6         	movff	serialport_task@size+1,?_syntax_string+3
  2629  0019FC  EC0E  F008         	call	_syntax_string	;wreg free
  2630  001A00                     l7525:
  2631  001A00  0E02               	movlw	high _g_rx_buffer
  2632  001A02  0100               	movlb	0	; () banked
  2633  001A04  6F78               	movwf	(?_rd_buffer_readline+1)& (0+255),b
  2634  001A06  0E7F               	movlw	low _g_rx_buffer
  2635  001A08  6F77               	movwf	?_rd_buffer_readline& (0+255),b
  2636  001A0A  0E03               	movlw	high _serialport_buffer
  2637  001A0C  6F7A               	movwf	(?_rd_buffer_readline+3)& (0+255),b
  2638  001A0E  0E7F               	movlw	low _serialport_buffer
  2639  001A10  6F79               	movwf	(?_rd_buffer_readline+2)& (0+255),b
  2640  001A12  0E01               	movlw	high serialport_task@size
  2641  001A14  6F7C               	movwf	(?_rd_buffer_readline+5)& (0+255),b
  2642  001A16  0EEA               	movlw	low serialport_task@size
  2643  001A18  6F7B               	movwf	(?_rd_buffer_readline+4)& (0+255),b
  2644  001A1A  ECA7  F00D         	call	_rd_buffer_readline	;wreg free
  2645  001A1E  0900               	iorlw	0
  2646  001A20  E010               	bz	l7531
  2647  001A22  D7E3               	goto	l7523
  2648  001A24                     l7527:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;serialport.c: 46: rd_buffer_get(&g_tx_buffer, &byte);
  2652  001A24  0E01               	movlw	high _g_tx_buffer
  2653  001A26  0100               	movlb	0	; () banked
  2654  001A28  6F6D               	movwf	(?_rd_buffer_get+1)& (0+255),b
  2655  001A2A  0E00               	movlw	low _g_tx_buffer
  2656  001A2C  6F6C               	movwf	?_rd_buffer_get& (0+255),b
  2657  001A2E  0E01               	movlw	high serialport_task@byte
  2658  001A30  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2659  001A32  0EE9               	movlw	low serialport_task@byte
  2660  001A34  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2661  001A36  ECAE  F00A         	call	_rd_buffer_get	;wreg free
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;serialport.c: 47: uart_putc(byte);
  2665  001A3A  0101               	movlb	1	; () banked
  2666  001A3C  51E9               	movf	serialport_task@byte& (0+255),w,b
  2667  001A3E  EC12  F011         	call	_uart_putc
  2668  001A42                     l7531:
  2669  001A42  0E01               	movlw	high _g_tx_buffer
  2670  001A44  0100               	movlb	0	; () banked
  2671  001A46  6F6D               	movwf	(?_rd_buffer_cnt+1)& (0+255),b
  2672  001A48  0E00               	movlw	low _g_tx_buffer
  2673  001A4A  6F6C               	movwf	?_rd_buffer_cnt& (0+255),b
  2674  001A4C  EC71  F00E         	call	_rd_buffer_cnt	;wreg free
  2675  001A50  516D               	movf	(?_rd_buffer_cnt+1)& (0+255),w,b
  2676  001A52  0A80               	xorlw	128
  2677  001A54  0F80               	addlw	-128
  2678  001A56  0E01               	movlw	1
  2679  001A58  B4D8               	btfsc	status,2,c
  2680  001A5A  5D6C               	subwf	?_rd_buffer_cnt& (0+255),w,b
  2681  001A5C  A0D8               	btfss	status,0,c
  2682  001A5E  0012               	return	
  2683  001A60  D7E1               	goto	l7527
  2684  001A62                     __end_of_serialport_task:
  2685                           	opt stack 0
  2686                           tosu	equ	0xFFF
  2687                           tosh	equ	0xFFE
  2688                           tosl	equ	0xFFD
  2689                           pclath	equ	0xFFA
  2690                           tblptru	equ	0xFF8
  2691                           tblptrh	equ	0xFF7
  2692                           tblptrl	equ	0xFF6
  2693                           tablat	equ	0xFF5
  2694                           prodh	equ	0xFF4
  2695                           prodl	equ	0xFF3
  2696                           intcon	equ	0xFF2
  2697                           indf0	equ	0xFEF
  2698                           postinc0	equ	0xFEE
  2699                           fsr0h	equ	0xFEA
  2700                           fsr0l	equ	0xFE9
  2701                           wreg	equ	0xFE8
  2702                           indf1	equ	0xFE7
  2703                           postinc1	equ	0xFE6
  2704                           postdec1	equ	0xFE5
  2705                           fsr1h	equ	0xFE2
  2706                           fsr1l	equ	0xFE1
  2707                           indf2	equ	0xFDF
  2708                           postinc2	equ	0xFDE
  2709                           postdec2	equ	0xFDD
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _rd_buffer_readline *****************
  2715 ;; Defined at:
  2716 ;;		line 39 in file "src/modules/rd_buffer.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  pbuffer         2   23[BANK0 ] PTR struct .
  2719 ;;		 -> g_rx_buffer(107), 
  2720 ;;  pdata           2   25[BANK0 ] PTR unsigned char 
  2721 ;;		 -> serialport_buffer(100), 
  2722 ;;  psize           2   27[BANK0 ] PTR int 
  2723 ;;		 -> serialport_task@size(2), 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  ch              1   29[BANK0 ] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      unsigned char 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : F/0
  2732 ;;		On exit  : F/0
  2733 ;;		Unchanged: FFFFFFF0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2735 ;;      Params:         0       6       0       0       0       0       0
  2736 ;;      Locals:         0       1       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0
  2738 ;;      Totals:         0       7       0       0       0       0       0
  2739 ;;Total ram usage:        7 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    6
  2742 ;; This function calls:
  2743 ;;		_rd_buffer_get
  2744 ;; This function is called by:
  2745 ;;		_serialport_task
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text4
  2750  001B4E                     __ptext4:
  2751                           	opt stack 0
  2752  001B4E                     _rd_buffer_readline:
  2753                           	opt stack 23
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;rd_buffer.c: 40: *psize=0;
  2757                           
  2758                           ; BSR set to: 0
  2759  001B4E  C07B  FFD9         	movff	rd_buffer_readline@psize,fsr2l
  2760  001B52  C07C  FFDA         	movff	rd_buffer_readline@psize+1,fsr2h
  2761  001B56  0E00               	movlw	0
  2762  001B58  6EDE               	movwf	postinc2,c
  2763  001B5A  6EDD               	movwf	postdec2,c
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;rd_buffer.c: 41: if(this_contains_crlf && pdata )
  2767  001B5C  51CC               	movf	_this_contains_crlf& (0+255),w,b
  2768  001B5E  E02F               	bz	l5063
  2769                           
  2770                           ; BSR set to: 0
  2771  001B60  517A               	movf	(rd_buffer_readline@pdata+1)& (0+255),w,b
  2772  001B62  1179               	iorwf	rd_buffer_readline@pdata& (0+255),w,b
  2773  001B64  E11E               	bnz	l5057
  2774  001B66  0C00               	retlw	0
  2775  001B68                     l5045:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;rd_buffer.c: 45: {
  2779                           ;rd_buffer.c: 46: if(ch=='\n' || ch=='\r')
  2780  001B68  517D               	movf	rd_buffer_readline@ch& (0+255),w,b
  2781  001B6A  0A0A               	xorlw	10
  2782  001B6C  E003               	bz	l5049
  2783                           
  2784                           ; BSR set to: 0
  2785  001B6E  517D               	movf	rd_buffer_readline@ch& (0+255),w,b
  2786  001B70  0A0D               	xorlw	13
  2787  001B72  E108               	bnz	l5051
  2788  001B74                     l5049:
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;rd_buffer.c: 47: {
  2792                           ;rd_buffer.c: 48: *(++pdata) = '\0';
  2793  001B74  4B79               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2794  001B76  2B7A               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2795  001B78  C079  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2796  001B7C  C07A  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2797  001B80  6ADF               	clrf	indf2,c
  2798                           
  2799                           ;rd_buffer.c: 49: break;
  2800  001B82  D01B               	goto	l264
  2801  001B84                     l5051:
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;rd_buffer.c: 50: }
  2805                           ;rd_buffer.c: 51: *pdata++ = ch;
  2806  001B84  C079  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2807  001B88  C07A  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2808  001B8C  C07D  FFDF         	movff	rd_buffer_readline@ch,indf2
  2809                           
  2810                           ; BSR set to: 0
  2811  001B90  4B79               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2812  001B92  2B7A               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;rd_buffer.c: 52: (*psize)++;
  2816  001B94  C07B  FFD9         	movff	rd_buffer_readline@psize,fsr2l
  2817  001B98  C07C  FFDA         	movff	rd_buffer_readline@psize+1,fsr2h
  2818  001B9C  2ADE               	incf	postinc2,f,c
  2819  001B9E  0E00               	movlw	0
  2820  001BA0  22DD               	addwfc	postdec2,f,c
  2821  001BA2                     l5057:
  2822                           
  2823                           ; BSR set to: 0
  2824  001BA2  C077  F06C         	movff	rd_buffer_readline@pbuffer,?_rd_buffer_get
  2825  001BA6  C078  F06D         	movff	rd_buffer_readline@pbuffer+1,?_rd_buffer_get+1
  2826  001BAA  0E00               	movlw	high rd_buffer_readline@ch
  2827  001BAC  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2828  001BAE  0E7D               	movlw	low rd_buffer_readline@ch
  2829  001BB0  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2830  001BB2  ECAE  F00A         	call	_rd_buffer_get	;wreg free
  2831  001BB6  0900               	iorlw	0
  2832  001BB8  E1D7               	bnz	l5045
  2833  001BBA                     l264:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;rd_buffer.c: 53: }
  2837                           ;rd_buffer.c: 54: this_contains_crlf = FALSE;
  2838  001BBA  6BCC               	clrf	_this_contains_crlf& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;rd_buffer.c: 55: return TRUE;
  2842  001BBC  0C01               	retlw	1
  2843  001BBE                     l5063:
  2844                           
  2845                           ; BSR set to: 0
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;rd_buffer.c: 56: }
  2849                           ;rd_buffer.c: 57: return FALSE;
  2850  001BBE  0C00               	retlw	0
  2851  001BC0                     __end_of_rd_buffer_readline:
  2852                           	opt stack 0
  2853                           tosu	equ	0xFFF
  2854                           tosh	equ	0xFFE
  2855                           tosl	equ	0xFFD
  2856                           pclath	equ	0xFFA
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           indf0	equ	0xFEF
  2865                           postinc0	equ	0xFEE
  2866                           fsr0h	equ	0xFEA
  2867                           fsr0l	equ	0xFE9
  2868                           wreg	equ	0xFE8
  2869                           indf1	equ	0xFE7
  2870                           postinc1	equ	0xFE6
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           indf2	equ	0xFDF
  2875                           postinc2	equ	0xFDE
  2876                           postdec2	equ	0xFDD
  2877                           fsr2h	equ	0xFDA
  2878                           fsr2l	equ	0xFD9
  2879                           status	equ	0xFD8
  2880                           
  2881 ;; *************** function _rd_buffer_get *****************
  2882 ;; Defined at:
  2883 ;;		line 127 in file "src/modules/rd_buffer.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2886 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  2887 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  2888 ;;		 -> serialport_task@byte(1), rd_buffer_readline@ch(1), 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  first           2   21[BANK0 ] int 
  2891 ;;  last            2   18[BANK0 ] int 
  2892 ;;  result          1   20[BANK0 ] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      unsigned char 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2897 ;; Tracked objects:
  2898 ;;		On entry : F/0
  2899 ;;		On exit  : F/0
  2900 ;;		Unchanged: FFFFFFF0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2902 ;;      Params:         0       4       0       0       0       0       0
  2903 ;;      Locals:         0       5       0       0       0       0       0
  2904 ;;      Temps:          0       2       0       0       0       0       0
  2905 ;;      Totals:         0      11       0       0       0       0       0
  2906 ;;Total ram usage:       11 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    5
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_rd_buffer_readline
  2913 ;;		_serialport_task
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text5
  2918  00155C                     __ptext5:
  2919                           	opt stack 0
  2920  00155C                     _rd_buffer_get:
  2921                           	opt stack 24
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;rd_buffer.c: 128: CHAR result = FALSE;
  2925                           
  2926                           ; BSR set to: 0
  2927  00155C  6B74               	clrf	rd_buffer_get@result& (0+255),b
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;rd_buffer.c: 129: INT16 first = pbuffer->head.first;
  2931  00155E  EE20 F002          	lfsr	2,2
  2932  001562  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2933  001564  26D9               	addwf	fsr2l,f,c
  2934  001566  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2935  001568  22DA               	addwfc	fsr2h,f,c
  2936  00156A  CFDE F075          	movff	postinc2,rd_buffer_get@first
  2937  00156E  CFDD F076          	movff	postdec2,rd_buffer_get@first+1
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;rd_buffer.c: 130: INT16 last = pbuffer->head.last;
  2941  001572  C06C  FFD9         	movff	rd_buffer_get@pbuffer,fsr2l
  2942  001576  C06D  FFDA         	movff	rd_buffer_get@pbuffer+1,fsr2h
  2943  00157A  CFDE F072          	movff	postinc2,rd_buffer_get@last
  2944  00157E  CFDD F073          	movff	postdec2,rd_buffer_get@last+1
  2945                           
  2946                           ;rd_buffer.c: 131: if(first != last) {
  2947  001582  5173               	movf	(rd_buffer_get@last+1)& (0+255),w,b
  2948  001584  1976               	xorwf	(rd_buffer_get@first+1)& (0+255),w,b
  2949  001586  E102               	bnz	u4825
  2950  001588  5172               	movf	rd_buffer_get@last& (0+255),w,b
  2951  00158A  1975               	xorwf	rd_buffer_get@first& (0+255),w,b
  2952  00158C                     u4825:
  2953  00158C  E039               	bz	l5085
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;rd_buffer.c: 132: (*prec) = pbuffer->list[first ];
  2957  00158E  C06C  F070         	movff	rd_buffer_get@pbuffer,??_rd_buffer_get
  2958  001592  C06D  F071         	movff	rd_buffer_get@pbuffer+1,??_rd_buffer_get+1
  2959  001596  5175               	movf	rd_buffer_get@first& (0+255),w,b
  2960  001598  2770               	addwf	??_rd_buffer_get& (0+255),f,b
  2961  00159A  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2962  00159C  2371               	addwfc	(??_rd_buffer_get+1)& (0+255),f,b
  2963  00159E  0E06               	movlw	6
  2964  0015A0  2570               	addwf	??_rd_buffer_get& (0+255),w,b
  2965  0015A2  6ED9               	movwf	fsr2l,c
  2966  0015A4  0E00               	movlw	0
  2967  0015A6  2171               	addwfc	(??_rd_buffer_get+1)& (0+255),w,b
  2968  0015A8  6EDA               	movwf	fsr2h,c
  2969  0015AA  C06E  FFE1         	movff	rd_buffer_get@prec,fsr1l
  2970  0015AE  C06F  FFE2         	movff	rd_buffer_get@prec+1,fsr1h
  2971  0015B2  CFDF FFE7          	movff	indf2,indf1
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;rd_buffer.c: 133: first ++;
  2975  0015B6  4B75               	infsnz	rd_buffer_get@first& (0+255),f,b
  2976  0015B8  2B76               	incf	(rd_buffer_get@first+1)& (0+255),f,b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;rd_buffer.c: 134: pbuffer->head.first = first ;
  2980  0015BA  EE20 F002          	lfsr	2,2
  2981  0015BE  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2982  0015C0  26D9               	addwf	fsr2l,f,c
  2983  0015C2  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2984  0015C4  22DA               	addwfc	fsr2h,f,c
  2985  0015C6  C075  FFDE         	movff	rd_buffer_get@first,postinc2
  2986  0015CA  C076  FFDD         	movff	rd_buffer_get@first+1,postdec2
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;rd_buffer.c: 135: if(first == pbuffer->head.size){
  2990  0015CE  EE20 F004          	lfsr	2,4
  2991  0015D2  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2992  0015D4  26D9               	addwf	fsr2l,f,c
  2993  0015D6  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2994  0015D8  22DA               	addwfc	fsr2h,f,c
  2995  0015DA  52DE               	movf	postinc2,f,c
  2996  0015DC  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2997  0015DE  18DD               	xorwf	postdec2,w,c
  2998  0015E0  C075  FFE8         	movff	rd_buffer_get@first,wreg
  2999  0015E4  B4D8               	btfsc	status,2,c
  3000  0015E6  18DF               	xorwf	indf2,w,c
  3001  0015E8  E109               	bnz	l5083
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;rd_buffer.c: 136: pbuffer->head.first = 0;
  3005  0015EA  EE20 F002          	lfsr	2,2
  3006  0015EE  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  3007  0015F0  26D9               	addwf	fsr2l,f,c
  3008  0015F2  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  3009  0015F4  22DA               	addwfc	fsr2h,f,c
  3010  0015F6  0E00               	movlw	0
  3011  0015F8  6EDE               	movwf	postinc2,c
  3012  0015FA  6EDD               	movwf	postdec2,c
  3013  0015FC                     l5083:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;rd_buffer.c: 137: }
  3017                           ;rd_buffer.c: 138: result = TRUE;
  3018  0015FC  0E01               	movlw	1
  3019  0015FE  6F74               	movwf	rd_buffer_get@result& (0+255),b
  3020  001600                     l5085:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;rd_buffer.c: 139: }
  3024                           ;rd_buffer.c: 140: return result;
  3025  001600  5174               	movf	rd_buffer_get@result& (0+255),w,b
  3026                           
  3027                           ; BSR set to: 0
  3028  001602  0012               	return	
  3029  001604                     __end_of_rd_buffer_get:
  3030                           	opt stack 0
  3031                           tosu	equ	0xFFF
  3032                           tosh	equ	0xFFE
  3033                           tosl	equ	0xFFD
  3034                           pclath	equ	0xFFA
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           prodh	equ	0xFF4
  3040                           prodl	equ	0xFF3
  3041                           intcon	equ	0xFF2
  3042                           indf0	equ	0xFEF
  3043                           postinc0	equ	0xFEE
  3044                           fsr0h	equ	0xFEA
  3045                           fsr0l	equ	0xFE9
  3046                           wreg	equ	0xFE8
  3047                           indf1	equ	0xFE7
  3048                           postinc1	equ	0xFE6
  3049                           postdec1	equ	0xFE5
  3050                           fsr1h	equ	0xFE2
  3051                           fsr1l	equ	0xFE1
  3052                           indf2	equ	0xFDF
  3053                           postinc2	equ	0xFDE
  3054                           postdec2	equ	0xFDD
  3055                           fsr2h	equ	0xFDA
  3056                           fsr2l	equ	0xFD9
  3057                           status	equ	0xFD8
  3058                           
  3059 ;; *************** function _rd_buffer_cnt *****************
  3060 ;; Defined at:
  3061 ;;		line 68 in file "src/modules/rd_buffer.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  3064 ;;		 -> g_tx_buffer(107), 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  sz              2   18[BANK0 ] int 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  2   12[BANK0 ] int 
  3069 ;; Registers used:
  3070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : F/0
  3073 ;;		On exit  : F/0
  3074 ;;		Unchanged: FFFFFFF0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3076 ;;      Params:         0       2       0       0       0       0       0
  3077 ;;      Locals:         0       2       0       0       0       0       0
  3078 ;;      Temps:          0       4       0       0       0       0       0
  3079 ;;      Totals:         0       8       0       0       0       0       0
  3080 ;;Total ram usage:        8 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    5
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_serialport_task
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text6
  3091  001CE2                     __ptext6:
  3092                           	opt stack 0
  3093  001CE2                     _rd_buffer_cnt:
  3094                           	opt stack 24
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;rd_buffer.c: 69: SIZE sz;
  3098                           ;rd_buffer.c: 70: sz = pbuffer->head.last - pbuffer->head.first;
  3099                           
  3100                           ; BSR set to: 0
  3101  001CE2  EE20 F002          	lfsr	2,2
  3102  001CE6  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  3103  001CE8  26D9               	addwf	fsr2l,f,c
  3104  001CEA  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  3105  001CEC  22DA               	addwfc	fsr2h,f,c
  3106  001CEE  CFDE F06E          	movff	postinc2,??_rd_buffer_cnt
  3107  001CF2  CFDD F06F          	movff	postdec2,??_rd_buffer_cnt+1
  3108  001CF6  C06C  FFD9         	movff	rd_buffer_cnt@pbuffer,fsr2l
  3109  001CFA  C06D  FFDA         	movff	rd_buffer_cnt@pbuffer+1,fsr2h
  3110  001CFE  CFDE F070          	movff	postinc2,??_rd_buffer_cnt+2
  3111  001D02  CFDD F071          	movff	postdec2,??_rd_buffer_cnt+3
  3112  001D06  516E               	movf	??_rd_buffer_cnt& (0+255),w,b
  3113  001D08  5D70               	subwf	(??_rd_buffer_cnt+2)& (0+255),w,b
  3114  001D0A  6F72               	movwf	rd_buffer_cnt@sz& (0+255),b
  3115  001D0C  516F               	movf	(??_rd_buffer_cnt+1)& (0+255),w,b
  3116  001D0E  5971               	subwfb	(??_rd_buffer_cnt+3)& (0+255),w,b
  3117  001D10  6F73               	movwf	(rd_buffer_cnt@sz+1)& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;rd_buffer.c: 71: if(sz < 0) {
  3121  001D12  AF73               	btfss	(rd_buffer_cnt@sz+1)& (0+255),7,b
  3122  001D14  D00A               	goto	l5095
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;rd_buffer.c: 72: sz += pbuffer->head.size;
  3126  001D16  EE20 F004          	lfsr	2,4
  3127  001D1A  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  3128  001D1C  26D9               	addwf	fsr2l,f,c
  3129  001D1E  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  3130  001D20  22DA               	addwfc	fsr2h,f,c
  3131  001D22  50DE               	movf	postinc2,w,c
  3132  001D24  2772               	addwf	rd_buffer_cnt@sz& (0+255),f,b
  3133  001D26  50DD               	movf	postdec2,w,c
  3134  001D28  2373               	addwfc	(rd_buffer_cnt@sz+1)& (0+255),f,b
  3135  001D2A                     l5095:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;rd_buffer.c: 73: }
  3139                           ;rd_buffer.c: 74: return sz;
  3140  001D2A  C072  F06C         	movff	rd_buffer_cnt@sz,?_rd_buffer_cnt
  3141  001D2E  C073  F06D         	movff	rd_buffer_cnt@sz+1,?_rd_buffer_cnt+1
  3142                           
  3143                           ; BSR set to: 0
  3144  001D32  0012               	return	
  3145  001D34                     __end_of_rd_buffer_cnt:
  3146                           	opt stack 0
  3147                           tosu	equ	0xFFF
  3148                           tosh	equ	0xFFE
  3149                           tosl	equ	0xFFD
  3150                           pclath	equ	0xFFA
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           prodh	equ	0xFF4
  3156                           prodl	equ	0xFF3
  3157                           intcon	equ	0xFF2
  3158                           indf0	equ	0xFEF
  3159                           postinc0	equ	0xFEE
  3160                           fsr0h	equ	0xFEA
  3161                           fsr0l	equ	0xFE9
  3162                           wreg	equ	0xFE8
  3163                           indf1	equ	0xFE7
  3164                           postinc1	equ	0xFE6
  3165                           postdec1	equ	0xFE5
  3166                           fsr1h	equ	0xFE2
  3167                           fsr1l	equ	0xFE1
  3168                           indf2	equ	0xFDF
  3169                           postinc2	equ	0xFDE
  3170                           postdec2	equ	0xFDD
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _syntax_string *****************
  3176 ;; Defined at:
  3177 ;;		line 117 in file "src/modules/syntax.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  pstr            2   83[BANK0 ] PTR const unsigned char 
  3180 ;;		 -> serialport_buffer(100), 
  3181 ;;  str_len         2   85[BANK0 ] int 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  pchain          2    2[BANK1 ] PTR unsigned char 
  3184 ;;		 -> this_buf(127), 
  3185 ;;  pos             1    1[BANK1 ] char 
  3186 ;;  chains          1    4[BANK1 ] char 
  3187 ;;  result          1    0[BANK1 ] char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      char 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : F/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: FFFFFFF0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3197 ;;      Params:         0       4       0       0       0       0       0
  3198 ;;      Locals:         0       0       5       0       0       0       0
  3199 ;;      Temps:          0       1       0       0       0       0       0
  3200 ;;      Totals:         0       5       5       0       0       0       0
  3201 ;;Total ram usage:       10 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:   10
  3204 ;; This function calls:
  3205 ;;		_string_utils_split
  3206 ;;		_this_parse_item
  3207 ;;		_on_parameter_found
  3208 ;;		_string_utils_strlen
  3209 ;; This function is called by:
  3210 ;;		_serialport_task
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text7
  3215  00101C                     __ptext7:
  3216                           	opt stack 0
  3217  00101C                     _syntax_string:
  3218                           	opt stack 19
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;syntax.c: 118: INT8 chains;
  3222                           ;syntax.c: 119: INT8 result = 0;
  3223                           
  3224                           ; BSR set to: 0
  3225  00101C  0101               	movlb	1	; () banked
  3226  00101E  6BE4               	clrf	syntax_string@result& (0+255),b
  3227                           
  3228                           ; BSR set to: 1
  3229                           ;syntax.c: 120: chains = (INT8) string_utils_split(this_buf, pstr, str_len, '\0');
  3230  001020  0E05               	movlw	high _this_buf
  3231  001022  0100               	movlb	0	; () banked
  3232  001024  6F6D               	movwf	(?_string_utils_split+1)& (0+255),b
  3233  001026  0E00               	movlw	low _this_buf
  3234  001028  6F6C               	movwf	?_string_utils_split& (0+255),b
  3235  00102A  C0B3  F06E         	movff	syntax_string@pstr,?_string_utils_split+2
  3236  00102E  C0B4  F06F         	movff	syntax_string@pstr+1,?_string_utils_split+3
  3237  001032  C0B5  F070         	movff	syntax_string@str_len,?_string_utils_split+4
  3238  001036  C0B6  F071         	movff	syntax_string@str_len+1,?_string_utils_split+5
  3239  00103A  0E00               	movlw	0
  3240  00103C  6B72               	clrf	(?_string_utils_split+6)& (0+255),b
  3241  00103E  EC33  F00C         	call	_string_utils_split	;wreg free
  3242  001042  516C               	movf	?_string_utils_split& (0+255),w,b
  3243  001044  0101               	movlb	1	; () banked
  3244  001046  6FE8               	movwf	syntax_string@chains& (0+255),b
  3245                           
  3246                           ; BSR set to: 1
  3247                           ;syntax.c: 121: command_id = -1;
  3248  001048  0100               	movlb	0	; () banked
  3249  00104A  69EF               	setf	_command_id& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;syntax.c: 122: parameter_id = -1;
  3253  00104C  69F0               	setf	_parameter_id& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;syntax.c: 123: parameter_value[0] = '\0';
  3257  00104E  0102               	movlb	2	; () banked
  3258  001050  6B00               	clrf	_parameter_value& (0+255),b
  3259                           
  3260                           ; BSR set to: 2
  3261                           ;syntax.c: 124: parameter_text[0] = '\0';
  3262  001052  0103               	movlb	3	; () banked
  3263  001054  6B00               	clrf	_parameter_text& (0+255),b
  3264                           
  3265                           ; BSR set to: 3
  3266                           ;syntax.c: 125: if (chains >= 1) {
  3267  001056  0101               	movlb	1	; () banked
  3268  001058  51E8               	movf	syntax_string@chains& (0+255),w,b
  3269  00105A  0A80               	xorlw	128
  3270  00105C  0F7F               	addlw	-129
  3271  00105E  E35F               	bnc	l7569
  3272                           
  3273                           ; BSR set to: 1
  3274                           ;syntax.c: 126: INT8 pos = 0;
  3275  001060  6BE5               	clrf	syntax_string@pos& (0+255),b
  3276                           
  3277                           ;syntax.c: 127: char *pchain;
  3278                           ;syntax.c: 128: result = chains;
  3279  001062  C1E8  F1E4         	movff	syntax_string@chains,syntax_string@result
  3280                           
  3281                           ;syntax.c: 129: while (chains--) {
  3282  001066  D057               	goto	l7567
  3283  001068                     l7549:
  3284                           
  3285                           ; BSR set to: 1
  3286                           ;syntax.c: 130: pchain = &this_buf[pos];
  3287  001068  0E00               	movlw	low _this_buf
  3288  00106A  0101               	movlb	1	; () banked
  3289  00106C  25E5               	addwf	syntax_string@pos& (0+255),w,b
  3290  00106E  6FE6               	movwf	syntax_string@pchain& (0+255),b
  3291  001070  6BE7               	clrf	(syntax_string@pchain+1)& (0+255),b
  3292  001072  0E05               	movlw	high _this_buf
  3293  001074  23E7               	addwfc	(syntax_string@pchain+1)& (0+255),f,b
  3294                           
  3295                           ; BSR set to: 1
  3296                           ;syntax.c: 131: if (pos == 0) {
  3297  001076  67E5               	tstfsz	syntax_string@pos& (0+255),b
  3298  001078  D019               	goto	l7559
  3299                           
  3300                           ; BSR set to: 1
  3301                           ;syntax.c: 133: if (!this_parse_item(pchain, &command_id)) {
  3302  00107A  C1E6  F0A3         	movff	syntax_string@pchain,?_this_parse_item
  3303  00107E  C1E7  F0A4         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3304  001082  0100               	movlb	0	; () banked
  3305  001084  0EEF               	movlw	low _command_id
  3306  001086  6FA5               	movwf	(?_this_parse_item+2)& (0+255),b
  3307  001088  EC29  F005         	call	_this_parse_item	;wreg free
  3308  00108C  0900               	iorlw	0
  3309  00108E  E103               	bnz	l7557
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;syntax.c: 134: result = 0;
  3313  001090  0101               	movlb	1	; () banked
  3314  001092  6BE4               	clrf	syntax_string@result& (0+255),b
  3315                           
  3316                           ;syntax.c: 135: break;
  3317  001094  D044               	goto	l7569
  3318  001096                     l7557:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;syntax.c: 136: }
  3322                           ;syntax.c: 137: on_parameter_found(PARSER_START, command_id, -1, (void*) (0), PARSER_TYP
      +                          E_NO_TYPE);
  3323  001096  C0EF  F083         	movff	_command_id,?_on_parameter_found
  3324  00109A  6984               	setf	(?_on_parameter_found+1)& (0+255),b
  3325  00109C  6B85               	clrf	(?_on_parameter_found+2)& (0+255),b
  3326  00109E  6B86               	clrf	(?_on_parameter_found+3)& (0+255),b
  3327  0010A0  6B87               	clrf	(?_on_parameter_found+4)& (0+255),b
  3328  0010A2  6B88               	clrf	(?_on_parameter_found+5)& (0+255),b
  3329  0010A4  0E01               	movlw	1
  3330  0010A6  ECDE  F00F         	call	_on_parameter_found
  3331                           
  3332                           ;syntax.c: 138: } else {
  3333  0010AA  D02B               	goto	l7565
  3334  0010AC                     l7559:
  3335                           
  3336                           ; BSR set to: 1
  3337                           ;syntax.c: 140: if (this_parse_item(pchain, &parameter_id) == TRUE) {
  3338  0010AC  C1E6  F0A3         	movff	syntax_string@pchain,?_this_parse_item
  3339  0010B0  C1E7  F0A4         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3340  0010B4  0100               	movlb	0	; () banked
  3341  0010B6  0EF0               	movlw	low _parameter_id
  3342  0010B8  6FA5               	movwf	(?_this_parse_item+2)& (0+255),b
  3343  0010BA  EC29  F005         	call	_this_parse_item	;wreg free
  3344  0010BE  6FB7               	movwf	??_syntax_string& (0+255),b
  3345  0010C0  05B7               	decf	??_syntax_string& (0+255),w,b
  3346  0010C2  E111               	bnz	l7563
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;syntax.c: 141: on_parameter_found(PARSER_PARAMETER, command_id, parameter_id, (void*) p
      +                          arameter_value, parameter_type);
  3350  0010C4  C0EF  F083         	movff	_command_id,?_on_parameter_found
  3351  0010C8  C0F0  F084         	movff	_parameter_id,?_on_parameter_found+1
  3352  0010CC  0E00               	movlw	low _parameter_value
  3353  0010CE  0100               	movlb	0	; () banked
  3354  0010D0  6F85               	movwf	(?_on_parameter_found+2)& (0+255),b
  3355  0010D2  0E02               	movlw	high _parameter_value
  3356  0010D4  6F86               	movwf	(?_on_parameter_found+3)& (0+255),b
  3357  0010D6  0E20               	movlw	32
  3358  0010D8  6F87               	movwf	(?_on_parameter_found+4)& (0+255),b
  3359  0010DA  C0CA  F088         	movff	_parameter_type,?_on_parameter_found+5
  3360  0010DE  0E00               	movlw	0
  3361  0010E0  ECDE  F00F         	call	_on_parameter_found
  3362                           
  3363                           ;syntax.c: 142: }
  3364  0010E4  D00E               	goto	l7565
  3365  0010E6                     l7563:
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;syntax.c: 143: else {
  3369                           ;syntax.c: 144: on_parameter_found(PARSER_PARAMETER, command_id, -1, (void*) parameter_t
      +                          ext, PARSER_TYPE_NO_TYPE);
  3370  0010E6  C0EF  F083         	movff	_command_id,?_on_parameter_found
  3371  0010EA  6984               	setf	(?_on_parameter_found+1)& (0+255),b
  3372  0010EC  0E00               	movlw	low _parameter_text
  3373  0010EE  0100               	movlb	0	; () banked
  3374  0010F0  6F85               	movwf	(?_on_parameter_found+2)& (0+255),b
  3375  0010F2  0E03               	movlw	high _parameter_text
  3376  0010F4  6F86               	movwf	(?_on_parameter_found+3)& (0+255),b
  3377  0010F6  0E20               	movlw	32
  3378  0010F8  6F87               	movwf	(?_on_parameter_found+4)& (0+255),b
  3379  0010FA  0E00               	movlw	0
  3380  0010FC  6B88               	clrf	(?_on_parameter_found+5)& (0+255),b
  3381  0010FE  ECDE  F00F         	call	_on_parameter_found
  3382  001102                     l7565:
  3383                           
  3384                           ;syntax.c: 145: }
  3385                           ;syntax.c: 146: }
  3386                           ;syntax.c: 148: pos += string_utils_strlen(pchain) + 1;
  3387  001102  C1E6  F06E         	movff	syntax_string@pchain,?_string_utils_strlen
  3388  001106  C1E7  F06F         	movff	syntax_string@pchain+1,?_string_utils_strlen+1
  3389  00110A  0100               	movlb	0	; () banked
  3390  00110C  ECBF  F00F         	call	_string_utils_strlen	;wreg free
  3391  001110  296E               	incf	?_string_utils_strlen& (0+255),w,b
  3392  001112  0101               	movlb	1	; () banked
  3393  001114  27E5               	addwf	syntax_string@pos& (0+255),f,b
  3394  001116                     l7567:
  3395                           
  3396                           ; BSR set to: 1
  3397  001116  07E8               	decf	syntax_string@chains& (0+255),f,b
  3398  001118  0101               	movlb	1	; () banked
  3399  00111A  29E8               	incf	syntax_string@chains& (0+255),w,b
  3400  00111C  E1A5               	bnz	l7549
  3401  00111E                     l7569:
  3402                           
  3403                           ; BSR set to: 1
  3404                           ;syntax.c: 149: }
  3405                           ;syntax.c: 150: }
  3406                           ;syntax.c: 151: if (result > 0) {
  3407  00111E  51E4               	movf	syntax_string@result& (0+255),w,b
  3408  001120  0A80               	xorlw	128
  3409  001122  0F7F               	addlw	-129
  3410  001124  E30B               	bnc	l7573
  3411                           
  3412                           ; BSR set to: 1
  3413                           ;syntax.c: 152: on_parameter_found(PARSER_STOP, command_id, -1, (void*) (0), PARSER_TYPE
      +                          _NO_TYPE);
  3414  001126  C0EF  F083         	movff	_command_id,?_on_parameter_found
  3415  00112A  0100               	movlb	0	; () banked
  3416  00112C  6984               	setf	(?_on_parameter_found+1)& (0+255),b
  3417  00112E  6B85               	clrf	(?_on_parameter_found+2)& (0+255),b
  3418  001130  6B86               	clrf	(?_on_parameter_found+3)& (0+255),b
  3419  001132  6B87               	clrf	(?_on_parameter_found+4)& (0+255),b
  3420  001134  6B88               	clrf	(?_on_parameter_found+5)& (0+255),b
  3421  001136  0E02               	movlw	2
  3422  001138  EFDE  F00F         	goto	_on_parameter_found
  3423  00113C                     l7573:
  3424                           
  3425                           ; BSR set to: 1
  3426                           ;syntax.c: 154: on_parameter_found(PARSER_ERROR, -1, -1, (void*) (0), PARSER_TYPE_NO_TYP
      +                          E);
  3427  00113C  0100               	movlb	0	; () banked
  3428  00113E  6983               	setf	?_on_parameter_found& (0+255),b
  3429  001140  6984               	setf	(?_on_parameter_found+1)& (0+255),b
  3430  001142  6B85               	clrf	(?_on_parameter_found+2)& (0+255),b
  3431  001144  6B86               	clrf	(?_on_parameter_found+3)& (0+255),b
  3432  001146  6B87               	clrf	(?_on_parameter_found+4)& (0+255),b
  3433  001148  6B88               	clrf	(?_on_parameter_found+5)& (0+255),b
  3434  00114A  0E03               	movlw	3
  3435  00114C  EFDE  F00F         	goto	_on_parameter_found
  3436  001150                     __end_of_syntax_string:
  3437                           	opt stack 0
  3438                           tosu	equ	0xFFF
  3439                           tosh	equ	0xFFE
  3440                           tosl	equ	0xFFD
  3441                           pclath	equ	0xFFA
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           intcon	equ	0xFF2
  3449                           indf0	equ	0xFEF
  3450                           postinc0	equ	0xFEE
  3451                           fsr0h	equ	0xFEA
  3452                           fsr0l	equ	0xFE9
  3453                           wreg	equ	0xFE8
  3454                           indf1	equ	0xFE7
  3455                           postinc1	equ	0xFE6
  3456                           postdec1	equ	0xFE5
  3457                           fsr1h	equ	0xFE2
  3458                           fsr1l	equ	0xFE1
  3459                           indf2	equ	0xFDF
  3460                           postinc2	equ	0xFDE
  3461                           postdec2	equ	0xFDD
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _string_utils_split *****************
  3467 ;; Defined at:
  3468 ;;		line 94 in file "src/modules/string_utils.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  pbuf            2   12[BANK0 ] PTR unsigned char 
  3471 ;;		 -> this_buf(127), 
  3472 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  3473 ;;		 -> serialport_buffer(100), 
  3474 ;;  len             2   16[BANK0 ] int 
  3475 ;;  delimeter       1   18[BANK0 ] unsigned char 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  symb            1   24[BANK0 ] unsigned char 
  3478 ;;  chains          2   21[BANK0 ] int 
  3479 ;;  i               2   19[BANK0 ] int 
  3480 ;;  prev            1   23[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  2   12[BANK0 ] int 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : F/0
  3487 ;;		On exit  : F/0
  3488 ;;		Unchanged: FFFFFFF0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3490 ;;      Params:         0       7       0       0       0       0       0
  3491 ;;      Locals:         0       6       0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0
  3493 ;;      Totals:         0      13       0       0       0       0       0
  3494 ;;Total ram usage:       13 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    5
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_syntax_string
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text8
  3505  001866                     __ptext8:
  3506                           	opt stack 0
  3507  001866                     _string_utils_split:
  3508                           	opt stack 23
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;string_utils.c: 95: INT16 i = 0;
  3512  001866  6B73               	clrf	string_utils_split@i& (0+255),b
  3513  001868  6B74               	clrf	(string_utils_split@i+1)& (0+255),b
  3514                           
  3515                           ;string_utils.c: 96: INT16 chains = 0;
  3516  00186A  6B75               	clrf	string_utils_split@chains& (0+255),b
  3517  00186C  6B76               	clrf	(string_utils_split@chains+1)& (0+255),b
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;string_utils.c: 97: char prev = ' ';
  3521  00186E  0E20               	movlw	32
  3522  001870  6F77               	movwf	string_utils_split@prev& (0+255),b
  3523  001872                     l7639:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;string_utils.c: 99: {
  3527                           ;string_utils.c: 100: char symb = pstr[i];
  3528  001872  5173               	movf	string_utils_split@i& (0+255),w,b
  3529  001874  256E               	addwf	string_utils_split@pstr& (0+255),w,b
  3530  001876  6ED9               	movwf	fsr2l,c
  3531  001878  5174               	movf	(string_utils_split@i+1)& (0+255),w,b
  3532  00187A  216F               	addwfc	(string_utils_split@pstr+1)& (0+255),w,b
  3533  00187C  6EDA               	movwf	fsr2h,c
  3534  00187E  50DF               	movf	indf2,w,c
  3535  001880  6F78               	movwf	string_utils_split@symb& (0+255),b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;string_utils.c: 101: if (symb == ' ' || len == 0)
  3539  001882  5178               	movf	string_utils_split@symb& (0+255),w,b
  3540  001884  0A20               	xorlw	32
  3541  001886  E003               	bz	l7645
  3542                           
  3543                           ; BSR set to: 0
  3544  001888  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3545  00188A  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3546  00188C  E10E               	bnz	l7653
  3547  00188E                     l7645:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;string_utils.c: 102: {
  3551                           ;string_utils.c: 103: if (prev != ' ')
  3552  00188E  5177               	movf	string_utils_split@prev& (0+255),w,b
  3553  001890  0A20               	xorlw	32
  3554  001892  E013               	bz	l7657
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;string_utils.c: 104: {
  3558                           ;string_utils.c: 105: *pbuf = delimeter;
  3559  001894  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3560  001898  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3561  00189C  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;string_utils.c: 106: pbuf++;
  3565  0018A0  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3566  0018A2  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;string_utils.c: 107: chains++;
  3570  0018A4  4B75               	infsnz	string_utils_split@chains& (0+255),f,b
  3571  0018A6  2B76               	incf	(string_utils_split@chains+1)& (0+255),f,b
  3572  0018A8  D008               	goto	l7657
  3573  0018AA                     l7653:
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;string_utils.c: 110: else
  3577                           ;string_utils.c: 111: {
  3578                           ;string_utils.c: 112: *pbuf++ = symb;
  3579  0018AA  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3580  0018AE  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3581  0018B2  C078  FFDF         	movff	string_utils_split@symb,indf2
  3582                           
  3583                           ; BSR set to: 0
  3584  0018B6  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3585  0018B8  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3586  0018BA                     l7657:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;string_utils.c: 113: }
  3590                           ;string_utils.c: 114: if (len == 0)
  3591  0018BA  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3592  0018BC  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3593  0018BE  E008               	bz	l7667
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;string_utils.c: 118: else
  3597                           ;string_utils.c: 119: {
  3598                           ;string_utils.c: 120: len--;
  3599  0018C0  0770               	decf	string_utils_split@len& (0+255),f,b
  3600  0018C2  A0D8               	btfss	status,0,c
  3601  0018C4  0771               	decf	(string_utils_split@len+1)& (0+255),f,b
  3602                           
  3603                           ;string_utils.c: 121: i++;
  3604  0018C6  4B73               	infsnz	string_utils_split@i& (0+255),f,b
  3605  0018C8  2B74               	incf	(string_utils_split@i+1)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;string_utils.c: 122: prev = symb;
  3609  0018CA  C078  F077         	movff	string_utils_split@symb,string_utils_split@prev
  3610  0018CE  D7D1               	goto	l7639
  3611  0018D0                     l7667:
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;string_utils.c: 123: }
  3615                           ;string_utils.c: 124: }
  3616                           ;string_utils.c: 125: *pbuf++ = delimeter;
  3617  0018D0  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3618  0018D4  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3619  0018D8  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3620                           
  3621                           ; BSR set to: 0
  3622  0018DC  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3623  0018DE  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;string_utils.c: 126: return chains;
  3627  0018E0  C075  F06C         	movff	string_utils_split@chains,?_string_utils_split
  3628  0018E4  C076  F06D         	movff	string_utils_split@chains+1,?_string_utils_split+1
  3629                           
  3630                           ; BSR set to: 0
  3631  0018E8  0012               	return	
  3632  0018EA                     __end_of_string_utils_split:
  3633                           	opt stack 0
  3634                           tosu	equ	0xFFF
  3635                           tosh	equ	0xFFE
  3636                           tosl	equ	0xFFD
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           indf0	equ	0xFEF
  3646                           postinc0	equ	0xFEE
  3647                           fsr0h	equ	0xFEA
  3648                           fsr0l	equ	0xFE9
  3649                           wreg	equ	0xFE8
  3650                           indf1	equ	0xFE7
  3651                           postinc1	equ	0xFE6
  3652                           postdec1	equ	0xFE5
  3653                           fsr1h	equ	0xFE2
  3654                           fsr1l	equ	0xFE1
  3655                           indf2	equ	0xFDF
  3656                           postinc2	equ	0xFDE
  3657                           postdec2	equ	0xFDD
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _this_parse_item *****************
  3663 ;; Defined at:
  3664 ;;		line 42 in file "src/modules/syntax.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  pstr            2   67[BANK0 ] PTR const unsigned char 
  3667 ;;		 -> this_buf(127), 
  3668 ;;  pitem           1   69[BANK0 ] PTR char 
  3669 ;;		 -> parameter_id(1), command_id(1), 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  pval            3   77[BANK0 ] PTR const unsigned char 
  3672 ;;		 -> this_buf(127), ROM(32767), 
  3673 ;;  var_len         2   81[BANK0 ] int 
  3674 ;;  str_len         2   75[BANK0 ] int 
  3675 ;;  pvar            2   73[BANK0 ] PTR const unsigned char 
  3676 ;;		 -> this_buf(127), 
  3677 ;;  i               1   80[BANK0 ] char 
  3678 ;;  result          1   72[BANK0 ] unsigned char 
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      unsigned char 
  3681 ;; Registers used:
  3682 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : F/0
  3685 ;;		On exit  : F/0
  3686 ;;		Unchanged: FFFFFFF0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3688 ;;      Params:         0       3       0       0       0       0       0
  3689 ;;      Locals:         0      11       0       0       0       0       0
  3690 ;;      Temps:          0       2       0       0       0       0       0
  3691 ;;      Totals:         0      16       0       0       0       0       0
  3692 ;;Total ram usage:       16 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    9
  3695 ;; This function calls:
  3696 ;;		_string_utils_strlen
  3697 ;;		_string_utils_strchr
  3698 ;;		_string_utils_copy
  3699 ;;		_string_utils_strncmp
  3700 ;;		_string_utils_atoi
  3701 ;;		_string_utils_atof
  3702 ;;		_string_utils_from_hex
  3703 ;; This function is called by:
  3704 ;;		_syntax_string
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text9
  3709  000A52                     __ptext9:
  3710                           	opt stack 0
  3711  000A52                     _this_parse_item:
  3712                           	opt stack 19
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;syntax.c: 43: CHAR result = FALSE;
  3716                           
  3717                           ; BSR set to: 0
  3718  000A52  6BA8               	clrf	this_parse_item@result& (0+255),b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;syntax.c: 44: if (pstr != (0)) {
  3722  000A54  51A4               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3723  000A56  11A3               	iorwf	this_parse_item@pstr& (0+255),w,b
  3724  000A58  E101 D0D5          	bz	l7927
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;syntax.c: 45: const char *pvar = pstr;
  3728  000A5C  C0A3  F0A9         	movff	this_parse_item@pstr,this_parse_item@pvar
  3729  000A60  C0A4  F0AA         	movff	this_parse_item@pstr+1,this_parse_item@pvar+1
  3730                           
  3731                           ;syntax.c: 46: const char *pval = (0);
  3732  000A64  6BAD               	clrf	this_parse_item@pval& (0+255),b
  3733  000A66  6BAE               	clrf	(this_parse_item@pval+1)& (0+255),b
  3734  000A68  6BAF               	clrf	(this_parse_item@pval+2)& (0+255),b
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;syntax.c: 49: SIZE str_len = string_utils_strlen(pstr);
  3738  000A6A  C0A3  F06E         	movff	this_parse_item@pstr,?_string_utils_strlen
  3739  000A6E  C0A4  F06F         	movff	this_parse_item@pstr+1,?_string_utils_strlen+1
  3740  000A72  ECBF  F00F         	call	_string_utils_strlen	;wreg free
  3741  000A76  C06E  F0AB         	movff	?_string_utils_strlen,this_parse_item@str_len
  3742  000A7A  C06F  F0AC         	movff	?_string_utils_strlen+1,this_parse_item@str_len+1
  3743                           
  3744                           ;syntax.c: 51: var_len = string_utils_strchr(pstr, '=');
  3745  000A7E  C0A3  F06C         	movff	this_parse_item@pstr,?_string_utils_strchr
  3746  000A82  C0A4  F06D         	movff	this_parse_item@pstr+1,?_string_utils_strchr+1
  3747  000A86  0E3D               	movlw	61
  3748  000A88  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3749  000A8A  EC9A  F00E         	call	_string_utils_strchr	;wreg free
  3750  000A8E  C06C  F0B1         	movff	?_string_utils_strchr,this_parse_item@var_len
  3751  000A92  C06D  F0B2         	movff	?_string_utils_strchr+1,this_parse_item@var_len+1
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;syntax.c: 53: if (var_len >= 0 && var_len < str_len) {
  3755  000A96  BFB2               	btfsc	(this_parse_item@var_len+1)& (0+255),7,b
  3756  000A98  D01B               	goto	l692
  3757                           
  3758                           ; BSR set to: 0
  3759  000A9A  51B2               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3760  000A9C  0A80               	xorlw	128
  3761  000A9E  6FA6               	movwf	??_this_parse_item& (0+255),b
  3762  000AA0  51AB               	movf	this_parse_item@str_len& (0+255),w,b
  3763  000AA2  5DB1               	subwf	this_parse_item@var_len& (0+255),w,b
  3764  000AA4  51AC               	movf	(this_parse_item@str_len+1)& (0+255),w,b
  3765  000AA6  0A80               	xorlw	128
  3766  000AA8  59A6               	subwfb	??_this_parse_item& (0+255),w,b
  3767  000AAA  E212               	bc	l692
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;syntax.c: 54: pval = &pstr[ var_len + 1 ];
  3771  000AAC  C0A3  F0A6         	movff	this_parse_item@pstr,??_this_parse_item
  3772  000AB0  C0A4  F0A7         	movff	this_parse_item@pstr+1,??_this_parse_item+1
  3773  000AB4  51B1               	movf	this_parse_item@var_len& (0+255),w,b
  3774  000AB6  27A6               	addwf	??_this_parse_item& (0+255),f,b
  3775  000AB8  51B2               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3776  000ABA  23A7               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3777  000ABC  2BA6               	incf	??_this_parse_item& (0+255),f,b
  3778  000ABE  0E00               	movlw	0
  3779  000AC0  23A7               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3780  000AC2  51A6               	movf	??_this_parse_item& (0+255),w,b
  3781  000AC4  6FAD               	movwf	this_parse_item@pval& (0+255),b
  3782  000AC6  51A7               	movf	(??_this_parse_item+1)& (0+255),w,b
  3783  000AC8  6FAE               	movwf	(this_parse_item@pval+1)& (0+255),b
  3784  000ACA  0E20               	movlw	32
  3785  000ACC  6FAF               	movwf	(this_parse_item@pval+2)& (0+255),b
  3786                           
  3787                           ;syntax.c: 55: } else {
  3788  000ACE  D004               	goto	l7889
  3789  000AD0                     l692:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;syntax.c: 57: var_len = str_len;
  3793  000AD0  C0AB  F0B1         	movff	this_parse_item@str_len,this_parse_item@var_len
  3794  000AD4  C0AC  F0B2         	movff	this_parse_item@str_len+1,this_parse_item@var_len+1
  3795  000AD8                     l7889:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;syntax.c: 58: }
  3799                           ;syntax.c: 60: string_utils_copy(parameter_text, pvar, var_len);
  3800  000AD8  0E03               	movlw	high _parameter_text
  3801  000ADA  0100               	movlb	0	; () banked
  3802  000ADC  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  3803  000ADE  0E00               	movlw	low _parameter_text
  3804  000AE0  6F6C               	movwf	?_string_utils_copy& (0+255),b
  3805  000AE2  C0A9  F06E         	movff	this_parse_item@pvar,?_string_utils_copy+2
  3806  000AE6  C0AA  F06F         	movff	this_parse_item@pvar+1,?_string_utils_copy+3
  3807  000AEA  C0B1  F070         	movff	this_parse_item@var_len,?_string_utils_copy+4
  3808  000AEE  C0B2  F071         	movff	this_parse_item@var_len+1,?_string_utils_copy+5
  3809  000AF2  ECC3  F00E         	call	_string_utils_copy	;wreg free
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;syntax.c: 61: parameter_text[var_len] = '\0';
  3813  000AF6  0E00               	movlw	low _parameter_text
  3814  000AF8  0100               	movlb	0	; () banked
  3815  000AFA  25B1               	addwf	this_parse_item@var_len& (0+255),w,b
  3816  000AFC  6ED9               	movwf	fsr2l,c
  3817  000AFE  0E03               	movlw	high _parameter_text
  3818  000B00  21B2               	addwfc	(this_parse_item@var_len+1)& (0+255),w,b
  3819  000B02  6EDA               	movwf	fsr2h,c
  3820  000B04  6ADF               	clrf	indf2,c
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;syntax.c: 62: for (i = 0; i < SYNTAX_COUNT; i++) {
  3824  000B06  6BB0               	clrf	this_parse_item@i& (0+255),b
  3825  000B08                     l7899:
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;syntax.c: 63: if (syntax_data[i].name_len == var_len
  3829                           ;syntax.c: 64: && string_utils_strncmp(syntax_data[i].name, pvar, var_len, FALSE)) {
  3830  000B08  51B0               	movf	this_parse_item@i& (0+255),w,b
  3831  000B0A  0D17               	mullw	23
  3832  000B0C  0E14               	movlw	20
  3833  000B0E  D87D               	call	PL22	;call to abstracted procedure
  3834  000B10  0008               	tblrd		*
  3835  000B12  50F5               	movf	tablat,w,c
  3836  000B14  6FA6               	movwf	??_this_parse_item& (0+255),b
  3837  000B16  6BA7               	clrf	(??_this_parse_item+1)& (0+255),b
  3838  000B18  BFA6               	btfsc	??_this_parse_item& (0+255),7,b
  3839  000B1A  07A7               	decf	(??_this_parse_item+1)& (0+255),f,b
  3840  000B1C  51B2               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3841  000B1E  19A7               	xorwf	(??_this_parse_item+1)& (0+255),w,b
  3842  000B20  E102               	bnz	u9515
  3843  000B22  51B1               	movf	this_parse_item@var_len& (0+255),w,b
  3844  000B24  19A6               	xorwf	??_this_parse_item& (0+255),w,b
  3845  000B26                     u9515:
  3846  000B26  E16A               	bnz	l7923
  3847                           
  3848                           ; BSR set to: 0
  3849  000B28  51B0               	movf	this_parse_item@i& (0+255),w,b
  3850  000B2A  0D17               	mullw	23
  3851  000B2C  0E76               	movlw	low syntax@syntax_data
  3852  000B2E  24F3               	addwf	prodl,w,c
  3853  000B30  6F6E               	movwf	?_string_utils_strncmp& (0+255),b
  3854  000B32  0E7D               	movlw	high syntax@syntax_data
  3855  000B34  20F4               	addwfc	prodh,w,c
  3856  000B36  6F6F               	movwf	(?_string_utils_strncmp+1)& (0+255),b
  3857  000B38  C0A9  F070         	movff	this_parse_item@pvar,?_string_utils_strncmp+2
  3858  000B3C  C0AA  F071         	movff	this_parse_item@pvar+1,?_string_utils_strncmp+3
  3859  000B40  C0B1  F072         	movff	this_parse_item@var_len,?_string_utils_strncmp+4
  3860  000B44  C0B2  F073         	movff	this_parse_item@var_len+1,?_string_utils_strncmp+5
  3861  000B48  0E00               	movlw	0
  3862  000B4A  6B74               	clrf	(?_string_utils_strncmp+6)& (0+255),b
  3863  000B4C  EC55  F00B         	call	_string_utils_strncmp	;wreg free
  3864  000B50  0900               	iorlw	0
  3865  000B52  E054               	bz	l7923
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;syntax.c: 65: if (pitem) *pitem = syntax_data[i].id;
  3869  000B54  51A5               	movf	this_parse_item@pitem& (0+255),w,b
  3870  000B56  E00A               	bz	l7907
  3871                           
  3872                           ; BSR set to: 0
  3873  000B58  51B0               	movf	this_parse_item@i& (0+255),w,b
  3874  000B5A  0D17               	mullw	23
  3875  000B5C  0E15               	movlw	21
  3876  000B5E  D855               	call	PL22	;call to abstracted procedure
  3877  000B60  51A5               	movf	this_parse_item@pitem& (0+255),w,b
  3878  000B62  6ED9               	movwf	fsr2l,c
  3879  000B64  6ADA               	clrf	fsr2h,c
  3880  000B66  0008               	tblrd		*
  3881  000B68  CFF5 FFDF          	movff	tablat,indf2
  3882  000B6C                     l7907:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;syntax.c: 66: if (pval)
  3886  000B6C  51AD               	movf	this_parse_item@pval& (0+255),w,b
  3887  000B6E  11AE               	iorwf	(this_parse_item@pval+1)& (0+255),w,b
  3888  000B70  11AF               	iorwf	(this_parse_item@pval+2)& (0+255),w,b
  3889  000B72  E040               	bz	l7921
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;syntax.c: 67: {
  3893                           ;syntax.c: 69: parameter_type = syntax_data[i].type;
  3894  000B74  51B0               	movf	this_parse_item@i& (0+255),w,b
  3895  000B76  0D17               	mullw	23
  3896  000B78  0E16               	movlw	22
  3897  000B7A  D847               	call	PL22	;call to abstracted procedure
  3898  000B7C  0008               	tblrd		*
  3899  000B7E  CFF5 F0CA          	movff	tablat,_parameter_type
  3900                           
  3901                           ;syntax.c: 70: switch (parameter_type) {
  3902  000B82  D02C               	goto	l7919
  3903  000B84                     l7911:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;syntax.c: 78: case PARSER_TYPE_INTEGER:
  3907                           ;syntax.c: 79: *((INT16*) parameter_value) = string_utils_atoi(pval);
  3908  000B84  C0AD  F072         	movff	this_parse_item@pval,?_string_utils_atoi
  3909  000B88  C0AE  F073         	movff	this_parse_item@pval+1,?_string_utils_atoi+1
  3910  000B8C  C0AF  F074         	movff	this_parse_item@pval+2,?_string_utils_atoi+2
  3911  000B90  EC2E  F009         	call	_string_utils_atoi	;wreg free
  3912  000B94  C072  F200         	movff	?_string_utils_atoi,_parameter_value
  3913  000B98  C073  F201         	movff	?_string_utils_atoi+1,_parameter_value+1
  3914                           
  3915                           ;syntax.c: 80: break;
  3916  000B9C  D02B               	goto	l7921
  3917  000B9E                     l7913:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;syntax.c: 84: {
  3921                           ;syntax.c: 85: *((double*) parameter_value) = (double) string_utils_atof((char*) pval);
  3922  000B9E  C0AD  F093         	movff	this_parse_item@pval,?_string_utils_atof
  3923  000BA2  C0AE  F094         	movff	this_parse_item@pval+1,?_string_utils_atof+1
  3924  000BA6  C0AF  F095         	movff	this_parse_item@pval+2,?_string_utils_atof+2
  3925  000BAA  EC05  F003         	call	_string_utils_atof	;wreg free
  3926  000BAE  C093  F200         	movff	?_string_utils_atof,_parameter_value
  3927  000BB2  C094  F201         	movff	?_string_utils_atof+1,_parameter_value+1
  3928  000BB6  C095  F202         	movff	?_string_utils_atof+2,_parameter_value+2
  3929                           
  3930                           ;syntax.c: 86: }
  3931                           ;syntax.c: 87: break;
  3932  000BBA  D01C               	goto	l7921
  3933  000BBC                     l7915:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;syntax.c: 90: {
  3937                           ;syntax.c: 91: string_utils_from_hex(parameter_value, parameter_value);
  3938  000BBC  0E02               	movlw	high _parameter_value
  3939  000BBE  0100               	movlb	0	; () banked
  3940  000BC0  6F73               	movwf	(?_string_utils_from_hex+1)& (0+255),b
  3941  000BC2  0E00               	movlw	low _parameter_value
  3942  000BC4  6F72               	movwf	?_string_utils_from_hex& (0+255),b
  3943  000BC6  0E02               	movlw	high _parameter_value
  3944  000BC8  6F75               	movwf	(?_string_utils_from_hex+3)& (0+255),b
  3945  000BCA  0E00               	movlw	low _parameter_value
  3946  000BCC  6F74               	movwf	(?_string_utils_from_hex+2)& (0+255),b
  3947  000BCE  ECA0  F00B         	call	_string_utils_from_hex	;wreg free
  3948                           
  3949                           ;syntax.c: 92: }
  3950                           ;syntax.c: 93: break;
  3951  000BD2  D010               	goto	l7921
  3952  000BD4                     l706:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;syntax.c: 96: *((INT16*) parameter_value) = 0u;
  3956  000BD4  0102               	movlb	2	; () banked
  3957  000BD6  6B00               	clrf	_parameter_value& (0+255),b
  3958  000BD8  6B01               	clrf	(_parameter_value+1)& (0+255),b
  3959                           
  3960                           ;syntax.c: 97: break;
  3961  000BDA  D00C               	goto	l7921
  3962  000BDC                     l7919:
  3963                           
  3964                           ; BSR set to: 0
  3965  000BDC  51CA               	movf	_parameter_type& (0+255),w,b
  3966                           
  3967                           ; Switch size 1, requested type "space"
  3968                           ; Number of cases is 5, Range of values is 1 to 6
  3969                           ; switch strategies available:
  3970                           ; Name         Instructions Cycles
  3971                           ; simple_byte           16     9 (average)
  3972                           ;	Chosen strategy is simple_byte
  3973  000BDE  0A01               	xorlw	1	; case 1
  3974  000BE0  E009               	bz	l7921
  3975  000BE2  0A03               	xorlw	3	; case 2
  3976  000BE4  E0EB               	bz	l7915
  3977  000BE6  0A01               	xorlw	1	; case 3
  3978  000BE8  E0CD               	bz	l7911
  3979  000BEA  0A06               	xorlw	6	; case 5
  3980  000BEC  E0CB               	bz	l7911
  3981  000BEE  0A03               	xorlw	3	; case 6
  3982  000BF0  E0D6               	bz	l7913
  3983  000BF2  D7F0               	goto	l706
  3984  000BF4                     l7921:
  3985                           
  3986                           ;syntax.c: 99: }
  3987                           ;syntax.c: 100: result = TRUE;
  3988  000BF4  0E01               	movlw	1
  3989  000BF6  0100               	movlb	0	; () banked
  3990  000BF8  6FA8               	movwf	this_parse_item@result& (0+255),b
  3991                           
  3992                           ;syntax.c: 101: break;
  3993  000BFA  D005               	goto	l7927
  3994  000BFC                     l7923:
  3995                           
  3996                           ; BSR set to: 0
  3997  000BFC  2BB0               	incf	this_parse_item@i& (0+255),f,b
  3998                           
  3999                           ; BSR set to: 0
  4000  000BFE  51B0               	movf	this_parse_item@i& (0+255),w,b
  4001  000C00  0A80               	xorlw	128
  4002  000C02  0F65               	addlw	-155
  4003  000C04  E381               	bnc	l7899
  4004  000C06                     l7927:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;syntax.c: 102: }
  4008                           ;syntax.c: 103: }
  4009                           ;syntax.c: 104: }
  4010                           ;syntax.c: 105: return result;
  4011  000C06  51A8               	movf	this_parse_item@result& (0+255),w,b
  4012                           
  4013                           ; BSR set to: 0
  4014  000C08  0012               	return	
  4015  000C0A                     __end_of_this_parse_item:
  4016                           	opt stack 0
  4017  000C0A                     PL22:
  4018                           	opt stack 19
  4019  000C0A  26F3               	addwf	prodl,f,c
  4020  000C0C  0E00               	movlw	0
  4021  000C0E  22F4               	addwfc	prodh,f,c
  4022  000C10  0E76               	movlw	low syntax@syntax_data
  4023  000C12  24F3               	addwf	prodl,w,c
  4024  000C14  6EF6               	movwf	tblptrl,c
  4025  000C16  0E7D               	movlw	high syntax@syntax_data
  4026  000C18  20F4               	addwfc	prodh,w,c
  4027  000C1A  6EF7               	movwf	tblptrh,c
  4028  000C1C  0012               	return	
  4029  000C1E                     __end_ofPL22:
  4030                           	opt stack 0
  4031                           tosu	equ	0xFFF
  4032                           tosh	equ	0xFFE
  4033                           tosl	equ	0xFFD
  4034                           pclath	equ	0xFFA
  4035                           tblptru	equ	0xFF8
  4036                           tblptrh	equ	0xFF7
  4037                           tblptrl	equ	0xFF6
  4038                           tablat	equ	0xFF5
  4039                           prodh	equ	0xFF4
  4040                           prodl	equ	0xFF3
  4041                           intcon	equ	0xFF2
  4042                           indf0	equ	0xFEF
  4043                           postinc0	equ	0xFEE
  4044                           fsr0h	equ	0xFEA
  4045                           fsr0l	equ	0xFE9
  4046                           wreg	equ	0xFE8
  4047                           indf1	equ	0xFE7
  4048                           postinc1	equ	0xFE6
  4049                           postdec1	equ	0xFE5
  4050                           fsr1h	equ	0xFE2
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _string_utils_copy *****************
  4060 ;; Defined at:
  4061 ;;		line 67 in file "src/modules/string_utils.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  pdst            2   12[BANK0 ] PTR unsigned char 
  4064 ;;		 -> parameter_text(127), 
  4065 ;;  psrc            2   14[BANK0 ] PTR const unsigned char 
  4066 ;;		 -> this_buf(127), 
  4067 ;;  maxlen          2   16[BANK0 ] int 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;  result          2   18[BANK0 ] int 
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  2   12[BANK0 ] int 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4074 ;; Tracked objects:
  4075 ;;		On entry : F/0
  4076 ;;		On exit  : F/0
  4077 ;;		Unchanged: FFFFFFF0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4079 ;;      Params:         0       6       0       0       0       0       0
  4080 ;;      Locals:         0       2       0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0
  4082 ;;      Totals:         0       8       0       0       0       0       0
  4083 ;;Total ram usage:        8 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		Nothing
  4088 ;; This function is called by:
  4089 ;;		_this_parse_item
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text10
  4094  001D86                     __ptext10:
  4095                           	opt stack 0
  4096  001D86                     _string_utils_copy:
  4097                           	opt stack 22
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;string_utils.c: 68: INT16 result = -1;
  4101                           
  4102                           ; BSR set to: 0
  4103  001D86  6972               	setf	string_utils_copy@result& (0+255),b
  4104  001D88  6973               	setf	(string_utils_copy@result+1)& (0+255),b
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;string_utils.c: 69: if (psrc != (0))
  4108  001D8A  516F               	movf	(string_utils_copy@psrc+1)& (0+255),w,b
  4109  001D8C  116E               	iorwf	string_utils_copy@psrc& (0+255),w,b
  4110  001D8E  B4D8               	btfsc	status,2,c
  4111  001D90  0012               	return	
  4112  001D92  D010               	goto	l7627
  4113  001D94                     l7619:
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;string_utils.c: 72: {
  4117                           ;string_utils.c: 73: result++;
  4118  001D94  4B72               	infsnz	string_utils_copy@result& (0+255),f,b
  4119  001D96  2B73               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;string_utils.c: 74: *pdst++ = *psrc++;
  4123  001D98  C06E  FFD9         	movff	string_utils_copy@psrc,fsr2l
  4124  001D9C  C06F  FFDA         	movff	string_utils_copy@psrc+1,fsr2h
  4125  001DA0  C06C  FFE1         	movff	string_utils_copy@pdst,fsr1l
  4126  001DA4  C06D  FFE2         	movff	string_utils_copy@pdst+1,fsr1h
  4127  001DA8  CFDF FFE7          	movff	indf2,indf1
  4128                           
  4129                           ; BSR set to: 0
  4130  001DAC  4B6E               	infsnz	string_utils_copy@psrc& (0+255),f,b
  4131  001DAE  2B6F               	incf	(string_utils_copy@psrc+1)& (0+255),f,b
  4132                           
  4133                           ; BSR set to: 0
  4134  001DB0  4B6C               	infsnz	string_utils_copy@pdst& (0+255),f,b
  4135  001DB2  2B6D               	incf	(string_utils_copy@pdst+1)& (0+255),f,b
  4136  001DB4                     l7627:
  4137                           
  4138                           ; BSR set to: 0
  4139  001DB4  C06E  FFD9         	movff	string_utils_copy@psrc,fsr2l
  4140  001DB8  C06F  FFDA         	movff	string_utils_copy@psrc+1,fsr2h
  4141  001DBC  50DF               	movf	indf2,w,c
  4142  001DBE  E008               	bz	l7631
  4143                           
  4144                           ; BSR set to: 0
  4145  001DC0  0770               	decf	string_utils_copy@maxlen& (0+255),f,b
  4146  001DC2  A0D8               	btfss	status,0,c
  4147  001DC4  0771               	decf	(string_utils_copy@maxlen+1)& (0+255),f,b
  4148  001DC6  0100               	movlb	0	; () banked
  4149  001DC8  2970               	incf	string_utils_copy@maxlen& (0+255),w,b
  4150  001DCA  B4D8               	btfsc	status,2,c
  4151  001DCC  2971               	incf	(string_utils_copy@maxlen+1)& (0+255),w,b
  4152  001DCE  E1E2               	bnz	l7619
  4153  001DD0                     l7631:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;string_utils.c: 75: }
  4157                           ;string_utils.c: 76: result++;
  4158  001DD0  4B72               	infsnz	string_utils_copy@result& (0+255),f,b
  4159  001DD2  2B73               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4160                           
  4161                           ; BSR set to: 0
  4162  001DD4  0012               	return	
  4163  001DD6                     __end_of_string_utils_copy:
  4164                           	opt stack 0
  4165                           tosu	equ	0xFFF
  4166                           tosh	equ	0xFFE
  4167                           tosl	equ	0xFFD
  4168                           pclath	equ	0xFFA
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           intcon	equ	0xFF2
  4176                           indf0	equ	0xFEF
  4177                           postinc0	equ	0xFEE
  4178                           fsr0h	equ	0xFEA
  4179                           fsr0l	equ	0xFE9
  4180                           wreg	equ	0xFE8
  4181                           indf1	equ	0xFE7
  4182                           postinc1	equ	0xFE6
  4183                           postdec1	equ	0xFE5
  4184                           fsr1h	equ	0xFE2
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           fsr2h	equ	0xFDA
  4190                           fsr2l	equ	0xFD9
  4191                           status	equ	0xFD8
  4192                           
  4193 ;; *************** function _string_utils_strchr *****************
  4194 ;; Defined at:
  4195 ;;		line 140 in file "src/modules/string_utils.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;  pbuf            2   12[BANK0 ] PTR const unsigned char 
  4198 ;;		 -> this_buf(127), 
  4199 ;;  delimeter       1   14[BANK0 ] unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  pos             2   17[BANK0 ] int 
  4202 ;;  result          2   15[BANK0 ] int 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  2   12[BANK0 ] int 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4207 ;; Tracked objects:
  4208 ;;		On entry : F/0
  4209 ;;		On exit  : F/0
  4210 ;;		Unchanged: FFFFFFF0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4212 ;;      Params:         0       3       0       0       0       0       0
  4213 ;;      Locals:         0       4       0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0
  4215 ;;      Totals:         0       7       0       0       0       0       0
  4216 ;;Total ram usage:        7 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; Hardware stack levels required when called:    5
  4219 ;; This function calls:
  4220 ;;		Nothing
  4221 ;; This function is called by:
  4222 ;;		_this_parse_item
  4223 ;; This function uses a non-reentrant model
  4224 ;;
  4225                           
  4226                           	psect	text11
  4227  001D34                     __ptext11:
  4228                           	opt stack 0
  4229  001D34                     _string_utils_strchr:
  4230                           	opt stack 22
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;string_utils.c: 141: INT16 result = -1;
  4234                           
  4235                           ; BSR set to: 0
  4236  001D34  696F               	setf	string_utils_strchr@result& (0+255),b
  4237  001D36  6970               	setf	(string_utils_strchr@result+1)& (0+255),b
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;string_utils.c: 142: if (pbuf != (0))
  4241  001D38  516D               	movf	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4242  001D3A  116C               	iorwf	string_utils_strchr@pbuf& (0+255),w,b
  4243  001D3C  E018               	bz	l493
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;string_utils.c: 143: {
  4247                           ;string_utils.c: 144: INT16 pos;
  4248                           ;string_utils.c: 145: for (pos = 0; (pos < (1000)) && pbuf[pos]; pos++)
  4249  001D3E  6B71               	clrf	string_utils_strchr@pos& (0+255),b
  4250  001D40  6B72               	clrf	(string_utils_strchr@pos+1)& (0+255),b
  4251  001D42  D00B               	goto	l7687
  4252  001D44                     l7681:
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;string_utils.c: 146: {
  4256                           ;string_utils.c: 147: if (pbuf[pos] == delimeter)
  4257  001D44  D819               	call	PL66	;call to abstracted procedure
  4258  001D46  516E               	movf	string_utils_strchr@delimeter& (0+255),w,b
  4259  001D48  62DF               	cpfseq	indf2,c
  4260  001D4A  D005               	goto	l7685
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;string_utils.c: 148: {
  4264                           ;string_utils.c: 149: result = pos;
  4265  001D4C  C071  F06F         	movff	string_utils_strchr@pos,string_utils_strchr@result
  4266  001D50  C072  F070         	movff	string_utils_strchr@pos+1,string_utils_strchr@result+1
  4267                           
  4268                           ;string_utils.c: 150: break;
  4269  001D54  D00C               	goto	l493
  4270  001D56                     l7685:
  4271                           
  4272                           ; BSR set to: 0
  4273  001D56  4B71               	infsnz	string_utils_strchr@pos& (0+255),f,b
  4274  001D58  2B72               	incf	(string_utils_strchr@pos+1)& (0+255),f,b
  4275  001D5A                     l7687:
  4276                           
  4277                           ; BSR set to: 0
  4278  001D5A  5172               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4279  001D5C  0A80               	xorlw	128
  4280  001D5E  0F7D               	addlw	-131
  4281  001D60  0EE8               	movlw	232
  4282  001D62  B4D8               	btfsc	status,2,c
  4283  001D64  5D71               	subwf	string_utils_strchr@pos& (0+255),w,b
  4284  001D66  E203               	bc	l493
  4285                           
  4286                           ; BSR set to: 0
  4287  001D68  D807               	call	PL66	;call to abstracted procedure
  4288  001D6A  50DF               	movf	indf2,w,c
  4289  001D6C  E1EB               	bnz	l7681
  4290  001D6E                     l493:
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;string_utils.c: 151: }
  4294                           ;string_utils.c: 152: }
  4295                           ;string_utils.c: 153: }
  4296                           ;string_utils.c: 154: return result;
  4297  001D6E  C06F  F06C         	movff	string_utils_strchr@result,?_string_utils_strchr
  4298  001D72  C070  F06D         	movff	string_utils_strchr@result+1,?_string_utils_strchr+1
  4299                           
  4300                           ; BSR set to: 0
  4301  001D76  0012               	return	
  4302  001D78                     __end_of_string_utils_strchr:
  4303                           	opt stack 0
  4304  001D78                     PL66:
  4305                           	opt stack 22
  4306  001D78  5171               	movf	string_utils_strchr@pos& (0+255),w,b
  4307  001D7A  256C               	addwf	string_utils_strchr@pbuf& (0+255),w,b
  4308  001D7C  6ED9               	movwf	fsr2l,c
  4309  001D7E  5172               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4310  001D80  216D               	addwfc	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4311  001D82  6EDA               	movwf	fsr2h,c
  4312  001D84  0012               	return	
  4313  001D86                     __end_ofPL66:
  4314                           	opt stack 0
  4315                           tosu	equ	0xFFF
  4316                           tosh	equ	0xFFE
  4317                           tosl	equ	0xFFD
  4318                           pclath	equ	0xFFA
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           indf0	equ	0xFEF
  4327                           postinc0	equ	0xFEE
  4328                           fsr0h	equ	0xFEA
  4329                           fsr0l	equ	0xFE9
  4330                           wreg	equ	0xFE8
  4331                           indf1	equ	0xFE7
  4332                           postinc1	equ	0xFE6
  4333                           postdec1	equ	0xFE5
  4334                           fsr1h	equ	0xFE2
  4335                           fsr1l	equ	0xFE1
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function _string_utils_strncmp *****************
  4344 ;; Defined at:
  4345 ;;		line 292 in file "src/modules/string_utils.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  pstr1           2   14[BANK0 ] PTR const unsigned char 
  4348 ;;		 -> syntax@syntax_data(621), 
  4349 ;;  pstr2           2   16[BANK0 ] PTR const unsigned char 
  4350 ;;		 -> this_buf(127), 
  4351 ;;  len             2   18[BANK0 ] int 
  4352 ;;  case_sensiti    1   20[BANK0 ] unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  symb2           1   27[BANK0 ] unsigned char 
  4355 ;;  symb1           1   26[BANK0 ] unsigned char 
  4356 ;;  pos             2   24[BANK0 ] int 
  4357 ;;  result          1   23[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      unsigned char 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : F/0
  4364 ;;		On exit  : F/0
  4365 ;;		Unchanged: FFFFFFF0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4367 ;;      Params:         0       7       0       0       0       0       0
  4368 ;;      Locals:         0       5       0       0       0       0       0
  4369 ;;      Temps:          0       2       0       0       0       0       0
  4370 ;;      Totals:         0      14       0       0       0       0       0
  4371 ;;Total ram usage:       14 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    6
  4374 ;; This function calls:
  4375 ;;		_string_utils_is_upper_case
  4376 ;; This function is called by:
  4377 ;;		_this_parse_item
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text12
  4382  0016AA                     __ptext12:
  4383                           	opt stack 0
  4384  0016AA                     _string_utils_strncmp:
  4385                           	opt stack 21
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;string_utils.c: 293: CHAR result = FALSE;
  4389                           
  4390                           ; BSR set to: 0
  4391  0016AA  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;string_utils.c: 294: if (pstr1 != (0) && pstr2 != (0) )
  4395  0016AC  516F               	movf	(string_utils_strncmp@pstr1+1)& (0+255),w,b
  4396  0016AE  116E               	iorwf	string_utils_strncmp@pstr1& (0+255),w,b
  4397  0016B0  E045               	bz	l7735
  4398                           
  4399                           ; BSR set to: 0
  4400  0016B2  5171               	movf	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  4401  0016B4  1170               	iorwf	string_utils_strncmp@pstr2& (0+255),w,b
  4402  0016B6  E042               	bz	l7735
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;string_utils.c: 295: {
  4406                           ;string_utils.c: 296: INT16 pos = 0;
  4407  0016B8  6B78               	clrf	string_utils_strncmp@pos& (0+255),b
  4408  0016BA  6B79               	clrf	(string_utils_strncmp@pos+1)& (0+255),b
  4409                           
  4410                           ;string_utils.c: 297: while ( len-- )
  4411  0016BC  D037               	goto	l7733
  4412  0016BE                     l7709:
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;string_utils.c: 298: {
  4416                           ;string_utils.c: 299: char symb1 = pstr1[pos];
  4417  0016BE  C06E  F075         	movff	string_utils_strncmp@pstr1,??_string_utils_strncmp
  4418  0016C2  C06F  F076         	movff	string_utils_strncmp@pstr1+1,??_string_utils_strncmp+1
  4419  0016C6  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  4420  0016C8  2775               	addwf	??_string_utils_strncmp& (0+255),f,b
  4421  0016CA  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  4422  0016CC  2376               	addwfc	(??_string_utils_strncmp+1)& (0+255),f,b
  4423  0016CE  C075  FFF6         	movff	??_string_utils_strncmp,tblptrl
  4424  0016D2  C076  FFF7         	movff	??_string_utils_strncmp+1,tblptrh
  4425  0016D6  0008               	tblrd		*
  4426  0016D8  CFF5 F07A          	movff	tablat,string_utils_strncmp@symb1
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;string_utils.c: 300: char symb2 = pstr2[pos];
  4430  0016DC  5178               	movf	string_utils_strncmp@pos& (0+255),w,b
  4431  0016DE  2570               	addwf	string_utils_strncmp@pstr2& (0+255),w,b
  4432  0016E0  6ED9               	movwf	fsr2l,c
  4433  0016E2  5179               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  4434  0016E4  2171               	addwfc	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  4435  0016E6  6EDA               	movwf	fsr2h,c
  4436  0016E8  50DF               	movf	indf2,w,c
  4437  0016EA  6F7B               	movwf	string_utils_strncmp@symb2& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;string_utils.c: 302: if ( !case_sensitive )
  4441  0016EC  6774               	tstfsz	string_utils_strncmp@case_sensitive& (0+255),b
  4442  0016EE  D00E               	goto	l7723
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;string_utils.c: 303: {
  4446                           ;string_utils.c: 304: if ( string_utils_is_upper_case(symb1) )
  4447  0016F0  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4448  0016F2  ECE5  F010         	call	_string_utils_is_upper_case
  4449  0016F6  0900               	iorlw	0
  4450  0016F8  E002               	bz	l7719
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;string_utils.c: 305: {
  4454                           ;string_utils.c: 306: symb1 = (symb1+('a' - 'A'));
  4455  0016FA  0E20               	movlw	32
  4456  0016FC  277A               	addwf	string_utils_strncmp@symb1& (0+255),f,b
  4457  0016FE                     l7719:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;string_utils.c: 307: }
  4461                           ;string_utils.c: 308: if ( string_utils_is_upper_case(symb2) )
  4462  0016FE  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4463  001700  ECE5  F010         	call	_string_utils_is_upper_case
  4464  001704  0900               	iorlw	0
  4465  001706  E002               	bz	l7723
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;string_utils.c: 309: {
  4469                           ;string_utils.c: 310: symb2 = (symb2+('a' - 'A'));
  4470  001708  0E20               	movlw	32
  4471  00170A  277B               	addwf	string_utils_strncmp@symb2& (0+255),f,b
  4472  00170C                     l7723:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;string_utils.c: 311: }
  4476                           ;string_utils.c: 312: }
  4477                           ;string_utils.c: 313: if (symb1 == symb2 || symb1 == '?' || symb2 == '?')
  4478  00170C  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4479  00170E  197B               	xorwf	string_utils_strncmp@symb2& (0+255),w,b
  4480  001710  E006               	bz	l7729
  4481                           
  4482                           ; BSR set to: 0
  4483  001712  517A               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4484  001714  0A3F               	xorlw	63
  4485  001716  E003               	bz	l7729
  4486                           
  4487                           ; BSR set to: 0
  4488  001718  517B               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4489  00171A  0A3F               	xorlw	63
  4490  00171C  E103               	bnz	l552
  4491  00171E                     l7729:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;string_utils.c: 314: {
  4495                           ;string_utils.c: 315: result = TRUE;
  4496  00171E  0E01               	movlw	1
  4497  001720  6F77               	movwf	string_utils_strncmp@result& (0+255),b
  4498                           
  4499                           ;string_utils.c: 316: }
  4500  001722  D002               	goto	l7731
  4501  001724                     l552:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;string_utils.c: 317: else
  4505                           ;string_utils.c: 318: {
  4506                           ;string_utils.c: 319: result = FALSE;
  4507  001724  6B77               	clrf	string_utils_strncmp@result& (0+255),b
  4508                           
  4509                           ;string_utils.c: 320: break;
  4510  001726  D00A               	goto	l7735
  4511  001728                     l7731:
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;string_utils.c: 321: }
  4515                           ;string_utils.c: 322: pos++;
  4516  001728  4B78               	infsnz	string_utils_strncmp@pos& (0+255),f,b
  4517  00172A  2B79               	incf	(string_utils_strncmp@pos+1)& (0+255),f,b
  4518  00172C                     l7733:
  4519                           
  4520                           ; BSR set to: 0
  4521  00172C  0772               	decf	string_utils_strncmp@len& (0+255),f,b
  4522  00172E  A0D8               	btfss	status,0,c
  4523  001730  0773               	decf	(string_utils_strncmp@len+1)& (0+255),f,b
  4524  001732  0100               	movlb	0	; () banked
  4525  001734  2972               	incf	string_utils_strncmp@len& (0+255),w,b
  4526  001736  B4D8               	btfsc	status,2,c
  4527  001738  2973               	incf	(string_utils_strncmp@len+1)& (0+255),w,b
  4528  00173A  E1C1               	bnz	l7709
  4529  00173C                     l7735:
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;string_utils.c: 323: }
  4533                           ;string_utils.c: 324: }
  4534                           ;string_utils.c: 325: return result;
  4535  00173C  5177               	movf	string_utils_strncmp@result& (0+255),w,b
  4536                           
  4537                           ; BSR set to: 0
  4538  00173E  0012               	return	
  4539  001740                     __end_of_string_utils_strncmp:
  4540                           	opt stack 0
  4541                           tosu	equ	0xFFF
  4542                           tosh	equ	0xFFE
  4543                           tosl	equ	0xFFD
  4544                           pclath	equ	0xFFA
  4545                           tblptru	equ	0xFF8
  4546                           tblptrh	equ	0xFF7
  4547                           tblptrl	equ	0xFF6
  4548                           tablat	equ	0xFF5
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           indf0	equ	0xFEF
  4553                           postinc0	equ	0xFEE
  4554                           fsr0h	equ	0xFEA
  4555                           fsr0l	equ	0xFE9
  4556                           wreg	equ	0xFE8
  4557                           indf1	equ	0xFE7
  4558                           postinc1	equ	0xFE6
  4559                           postdec1	equ	0xFE5
  4560                           fsr1h	equ	0xFE2
  4561                           fsr1l	equ	0xFE1
  4562                           indf2	equ	0xFDF
  4563                           postinc2	equ	0xFDE
  4564                           postdec2	equ	0xFDD
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function _string_utils_is_upper_case *****************
  4570 ;; Defined at:
  4571 ;;		line 167 in file "src/modules/string_utils.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  symb            1    wreg     unsigned char 
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  symb            1   13[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      unsigned char 
  4578 ;; Registers used:
  4579 ;;		wreg, status,2
  4580 ;; Tracked objects:
  4581 ;;		On entry : F/0
  4582 ;;		On exit  : F/0
  4583 ;;		Unchanged: FFFFFFF0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4585 ;;      Params:         0       0       0       0       0       0       0
  4586 ;;      Locals:         0       2       0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0
  4588 ;;      Totals:         0       2       0       0       0       0       0
  4589 ;;Total ram usage:        2 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    5
  4592 ;; This function calls:
  4593 ;;		Nothing
  4594 ;; This function is called by:
  4595 ;;		_string_utils_strncmp
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text13
  4600  0021CA                     __ptext13:
  4601                           	opt stack 0
  4602  0021CA                     _string_utils_is_upper_case:
  4603                           	opt stack 21
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;string_utils_is_upper_case@symb stored from wreg
  4607  0021CA  CFE8 F06D          	movff	wreg,string_utils_is_upper_case@symb
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;string_utils.c: 168: return (symb >= 'A') && (symb <= 'Z');
  4611  0021CE  6B6C               	clrf	_string_utils_is_upper_case$795& (0+255),b
  4612                           
  4613                           ; BSR set to: 0
  4614  0021D0  0E40               	movlw	64
  4615  0021D2  656D               	cpfsgt	string_utils_is_upper_case@symb& (0+255),b
  4616  0021D4  D005               	goto	l504
  4617                           
  4618                           ; BSR set to: 0
  4619  0021D6  0E5B               	movlw	91
  4620  0021D8  616D               	cpfslt	string_utils_is_upper_case@symb& (0+255),b
  4621  0021DA  D002               	goto	l504
  4622                           
  4623                           ; BSR set to: 0
  4624  0021DC  0E01               	movlw	1
  4625  0021DE  6F6C               	movwf	_string_utils_is_upper_case$795& (0+255),b
  4626  0021E0                     l504:
  4627                           
  4628                           ; BSR set to: 0
  4629  0021E0  516C               	movf	_string_utils_is_upper_case$795& (0+255),w,b
  4630                           
  4631                           ; BSR set to: 0
  4632  0021E2  0012               	return	
  4633  0021E4                     __end_of_string_utils_is_upper_case:
  4634                           	opt stack 0
  4635                           tosu	equ	0xFFF
  4636                           tosh	equ	0xFFE
  4637                           tosl	equ	0xFFD
  4638                           pclath	equ	0xFFA
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           indf0	equ	0xFEF
  4647                           postinc0	equ	0xFEE
  4648                           fsr0h	equ	0xFEA
  4649                           fsr0l	equ	0xFE9
  4650                           wreg	equ	0xFE8
  4651                           indf1	equ	0xFE7
  4652                           postinc1	equ	0xFE6
  4653                           postdec1	equ	0xFE5
  4654                           fsr1h	equ	0xFE2
  4655                           fsr1l	equ	0xFE1
  4656                           indf2	equ	0xFDF
  4657                           postinc2	equ	0xFDE
  4658                           postdec2	equ	0xFDD
  4659                           fsr2h	equ	0xFDA
  4660                           fsr2l	equ	0xFD9
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _string_utils_from_hex *****************
  4664 ;; Defined at:
  4665 ;;		line 400 in file "src/modules/string_utils.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  pdata           2   18[BANK0 ] PTR unsigned char 
  4668 ;;		 -> parameter_value(127), 
  4669 ;;  phex_str        2   20[BANK0 ] PTR const unsigned char 
  4670 ;;		 -> parameter_value(127), 
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;  i               2   29[BANK0 ] int 
  4673 ;;  j               2   27[BANK0 ] int 
  4674 ;;  len             2   25[BANK0 ] int 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;                  2   18[BANK0 ] int 
  4677 ;; Registers used:
  4678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4679 ;; Tracked objects:
  4680 ;;		On entry : F/0
  4681 ;;		On exit  : F/0
  4682 ;;		Unchanged: FFFFFFF0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4684 ;;      Params:         0       4       0       0       0       0       0
  4685 ;;      Locals:         0       6       0       0       0       0       0
  4686 ;;      Temps:          0       3       0       0       0       0       0
  4687 ;;      Totals:         0      13       0       0       0       0       0
  4688 ;;Total ram usage:       13 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    7
  4691 ;; This function calls:
  4692 ;;		_string_utils_strlen
  4693 ;;		_symb_from_hex_to_bin
  4694 ;; This function is called by:
  4695 ;;		_this_parse_item
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text14
  4700  001740                     __ptext14:
  4701                           	opt stack 0
  4702  001740                     _string_utils_from_hex:
  4703                           	opt stack 20
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;string_utils.c: 401: INT16 i = 0;
  4707                           
  4708                           ; BSR set to: 0
  4709  001740  6B7D               	clrf	string_utils_from_hex@i& (0+255),b
  4710  001742  6B7E               	clrf	(string_utils_from_hex@i+1)& (0+255),b
  4711                           
  4712                           ;string_utils.c: 402: INT16 j = 0;
  4713  001744  6B7B               	clrf	string_utils_from_hex@j& (0+255),b
  4714  001746  6B7C               	clrf	(string_utils_from_hex@j+1)& (0+255),b
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;string_utils.c: 403: INT16 len = string_utils_strlen(phex_str);
  4718  001748  C074  F06E         	movff	string_utils_from_hex@phex_str,?_string_utils_strlen
  4719  00174C  C075  F06F         	movff	string_utils_from_hex@phex_str+1,?_string_utils_strlen+1
  4720  001750  ECBF  F00F         	call	_string_utils_strlen	;wreg free
  4721  001754  C06E  F079         	movff	?_string_utils_strlen,string_utils_from_hex@len
  4722  001758  C06F  F07A         	movff	?_string_utils_strlen+1,string_utils_from_hex@len+1
  4723                           
  4724                           ;string_utils.c: 404: while (i < (len - 1))
  4725  00175C  D02A               	goto	l7781
  4726  00175E                     l7775:
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;string_utils.c: 405: {
  4730                           ;string_utils.c: 406: pdata[j] = symb_from_hex_to_bin(phex_str[i]) * 16
  4731                           ;string_utils.c: 407: + symb_from_hex_to_bin(phex_str[i + 1]);
  4732  00175E  517B               	movf	string_utils_from_hex@j& (0+255),w,b
  4733  001760  2572               	addwf	string_utils_from_hex@pdata& (0+255),w,b
  4734  001762  6ED9               	movwf	fsr2l,c
  4735  001764  517C               	movf	(string_utils_from_hex@j+1)& (0+255),w,b
  4736  001766  2173               	addwfc	(string_utils_from_hex@pdata+1)& (0+255),w,b
  4737  001768  6EDA               	movwf	fsr2h,c
  4738  00176A  C074  F076         	movff	string_utils_from_hex@phex_str,??_string_utils_from_hex
  4739  00176E  C075  F077         	movff	string_utils_from_hex@phex_str+1,??_string_utils_from_hex+1
  4740  001772  517D               	movf	string_utils_from_hex@i& (0+255),w,b
  4741  001774  2776               	addwf	??_string_utils_from_hex& (0+255),f,b
  4742  001776  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4743  001778  2377               	addwfc	(??_string_utils_from_hex+1)& (0+255),f,b
  4744  00177A  2976               	incf	??_string_utils_from_hex& (0+255),w,b
  4745  00177C  6EE1               	movwf	fsr1l,c
  4746  00177E  0E00               	movlw	0
  4747  001780  2177               	addwfc	(??_string_utils_from_hex+1)& (0+255),w,b
  4748  001782  6EE2               	movwf	fsr1h,c
  4749  001784  50E7               	movf	indf1,w,c
  4750  001786  EC6D  F00D         	call	_symb_from_hex_to_bin
  4751  00178A  6F78               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4752  00178C  517D               	movf	string_utils_from_hex@i& (0+255),w,b
  4753  00178E  2574               	addwf	string_utils_from_hex@phex_str& (0+255),w,b
  4754  001790  6EE1               	movwf	fsr1l,c
  4755  001792  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4756  001794  2175               	addwfc	(string_utils_from_hex@phex_str+1)& (0+255),w,b
  4757  001796  6EE2               	movwf	fsr1h,c
  4758  001798  50E7               	movf	indf1,w,c
  4759  00179A  EC6D  F00D         	call	_symb_from_hex_to_bin
  4760  00179E  0D10               	mullw	16
  4761  0017A0  50F3               	movf	prodl,w,c
  4762  0017A2  2578               	addwf	(??_string_utils_from_hex+2)& (0+255),w,b
  4763  0017A4  6EDF               	movwf	indf2,c
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;string_utils.c: 408: i += 2; j++;
  4767  0017A6  0E02               	movlw	2
  4768  0017A8  277D               	addwf	string_utils_from_hex@i& (0+255),f,b
  4769  0017AA  0E00               	movlw	0
  4770  0017AC  237E               	addwfc	(string_utils_from_hex@i+1)& (0+255),f,b
  4771                           
  4772                           ; BSR set to: 0
  4773  0017AE  4B7B               	infsnz	string_utils_from_hex@j& (0+255),f,b
  4774  0017B0  2B7C               	incf	(string_utils_from_hex@j+1)& (0+255),f,b
  4775  0017B2                     l7781:
  4776                           
  4777                           ; BSR set to: 0
  4778  0017B2  0EFF               	movlw	255
  4779  0017B4  2579               	addwf	string_utils_from_hex@len& (0+255),w,b
  4780  0017B6  6F76               	movwf	??_string_utils_from_hex& (0+255),b
  4781  0017B8  0EFF               	movlw	255
  4782  0017BA  217A               	addwfc	(string_utils_from_hex@len+1)& (0+255),w,b
  4783  0017BC  6F77               	movwf	(??_string_utils_from_hex+1)& (0+255),b
  4784  0017BE  517E               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4785  0017C0  0A80               	xorlw	128
  4786  0017C2  6F78               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4787  0017C4  5176               	movf	??_string_utils_from_hex& (0+255),w,b
  4788  0017C6  5D7D               	subwf	string_utils_from_hex@i& (0+255),w,b
  4789  0017C8  5177               	movf	(??_string_utils_from_hex+1)& (0+255),w,b
  4790  0017CA  0A80               	xorlw	128
  4791  0017CC  5978               	subwfb	(??_string_utils_from_hex+2)& (0+255),w,b
  4792  0017CE  B0D8               	btfsc	status,0,c
  4793  0017D0  0012               	return	
  4794  0017D2  D7C5               	goto	l7775
  4795  0017D4                     __end_of_string_utils_from_hex:
  4796                           	opt stack 0
  4797                           tosu	equ	0xFFF
  4798                           tosh	equ	0xFFE
  4799                           tosl	equ	0xFFD
  4800                           pclath	equ	0xFFA
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           prodh	equ	0xFF4
  4806                           prodl	equ	0xFF3
  4807                           intcon	equ	0xFF2
  4808                           indf0	equ	0xFEF
  4809                           postinc0	equ	0xFEE
  4810                           fsr0h	equ	0xFEA
  4811                           fsr0l	equ	0xFE9
  4812                           wreg	equ	0xFE8
  4813                           indf1	equ	0xFE7
  4814                           postinc1	equ	0xFE6
  4815                           postdec1	equ	0xFE5
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _string_utils_strlen *****************
  4826 ;; Defined at:
  4827 ;;		line 12 in file "src/modules/string_utils.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  4830 ;;		 -> this_buf(127), parameter_value(127), 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  i               2   16[BANK0 ] int 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  2   14[BANK0 ] int 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : F/0
  4840 ;;		Unchanged: FFFFFFF0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4842 ;;      Params:         0       2       0       0       0       0       0
  4843 ;;      Locals:         0       2       0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0
  4845 ;;      Totals:         0       4       0       0       0       0       0
  4846 ;;Total ram usage:        4 bytes
  4847 ;; Hardware stack levels used:    1
  4848 ;; Hardware stack levels required when called:    6
  4849 ;; This function calls:
  4850 ;;		_string_utils_is_symbol
  4851 ;; This function is called by:
  4852 ;;		_string_utils_from_hex
  4853 ;;		_this_parse_item
  4854 ;;		_syntax_string
  4855 ;; This function uses a non-reentrant model
  4856 ;;
  4857                           
  4858                           	psect	text15
  4859  001F7E                     __ptext15:
  4860                           	opt stack 0
  4861  001F7E                     _string_utils_strlen:
  4862                           	opt stack 22
  4863                           
  4864                           ;string_utils.c: 13: INT16 i = 0;
  4865                           
  4866                           ; BSR set to: 0
  4867  001F7E  0100               	movlb	0	; () banked
  4868  001F80  6B70               	clrf	string_utils_strlen@i& (0+255),b
  4869  001F82  6B71               	clrf	(string_utils_strlen@i+1)& (0+255),b
  4870                           
  4871                           ; BSR set to: 0
  4872                           ;string_utils.c: 14: if (pstr)
  4873  001F84  516F               	movf	(string_utils_strlen@pstr+1)& (0+255),w,b
  4874  001F86  116E               	iorwf	string_utils_strlen@pstr& (0+255),w,b
  4875  001F88  E014               	bz	l456
  4876  001F8A                     l7595:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;string_utils.c: 17: {
  4880                           ;string_utils.c: 18: if (! string_utils_is_symbol(pstr[i]))
  4881  001F8A  5170               	movf	string_utils_strlen@i& (0+255),w,b
  4882  001F8C  256E               	addwf	string_utils_strlen@pstr& (0+255),w,b
  4883  001F8E  6ED9               	movwf	fsr2l,c
  4884  001F90  5171               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4885  001F92  216F               	addwfc	(string_utils_strlen@pstr+1)& (0+255),w,b
  4886  001F94  6EDA               	movwf	fsr2h,c
  4887  001F96  50DF               	movf	indf2,w,c
  4888  001F98  ECF2  F010         	call	_string_utils_is_symbol
  4889  001F9C  0900               	iorlw	0
  4890  001F9E  E009               	bz	l456
  4891                           
  4892                           ; BSR set to: 0
  4893  001FA0  4B70               	infsnz	string_utils_strlen@i& (0+255),f,b
  4894  001FA2  2B71               	incf	(string_utils_strlen@i+1)& (0+255),f,b
  4895                           
  4896                           ; BSR set to: 0
  4897  001FA4  5171               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4898  001FA6  0A80               	xorlw	128
  4899  001FA8  0F7D               	addlw	-131
  4900  001FAA  0EE8               	movlw	232
  4901  001FAC  B4D8               	btfsc	status,2,c
  4902  001FAE  5D70               	subwf	string_utils_strlen@i& (0+255),w,b
  4903  001FB0  E3EC               	bnc	l7595
  4904  001FB2                     l456:
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;string_utils.c: 21: }
  4908                           ;string_utils.c: 22: }
  4909                           ;string_utils.c: 23: }
  4910                           ;string_utils.c: 24: return i;
  4911  001FB2  C070  F06E         	movff	string_utils_strlen@i,?_string_utils_strlen
  4912  001FB6  C071  F06F         	movff	string_utils_strlen@i+1,?_string_utils_strlen+1
  4913                           
  4914                           ; BSR set to: 0
  4915  001FBA  0012               	return	
  4916  001FBC                     __end_of_string_utils_strlen:
  4917                           	opt stack 0
  4918                           tosu	equ	0xFFF
  4919                           tosh	equ	0xFFE
  4920                           tosl	equ	0xFFD
  4921                           pclath	equ	0xFFA
  4922                           tblptru	equ	0xFF8
  4923                           tblptrh	equ	0xFF7
  4924                           tblptrl	equ	0xFF6
  4925                           tablat	equ	0xFF5
  4926                           prodh	equ	0xFF4
  4927                           prodl	equ	0xFF3
  4928                           intcon	equ	0xFF2
  4929                           indf0	equ	0xFEF
  4930                           postinc0	equ	0xFEE
  4931                           fsr0h	equ	0xFEA
  4932                           fsr0l	equ	0xFE9
  4933                           wreg	equ	0xFE8
  4934                           indf1	equ	0xFE7
  4935                           postinc1	equ	0xFE6
  4936                           postdec1	equ	0xFE5
  4937                           fsr1h	equ	0xFE2
  4938                           fsr1l	equ	0xFE1
  4939                           indf2	equ	0xFDF
  4940                           postinc2	equ	0xFDE
  4941                           postdec2	equ	0xFDD
  4942                           fsr2h	equ	0xFDA
  4943                           fsr2l	equ	0xFD9
  4944                           status	equ	0xFD8
  4945                           
  4946 ;; *************** function _string_utils_is_symbol *****************
  4947 ;; Defined at:
  4948 ;;		line 194 in file "src/modules/string_utils.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;  symb            1    wreg     unsigned char 
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;  symb            1   13[BANK0 ] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      unsigned char 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2
  4957 ;; Tracked objects:
  4958 ;;		On entry : F/0
  4959 ;;		On exit  : F/0
  4960 ;;		Unchanged: FFFFFFF0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4962 ;;      Params:         0       0       0       0       0       0       0
  4963 ;;      Locals:         0       2       0       0       0       0       0
  4964 ;;      Temps:          0       0       0       0       0       0       0
  4965 ;;      Totals:         0       2       0       0       0       0       0
  4966 ;;Total ram usage:        2 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    5
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_string_utils_strlen
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text16
  4977  0021E4                     __ptext16:
  4978                           	opt stack 0
  4979  0021E4                     _string_utils_is_symbol:
  4980                           	opt stack 22
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;string_utils_is_symbol@symb stored from wreg
  4984  0021E4  CFE8 F06D          	movff	wreg,string_utils_is_symbol@symb
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;string_utils.c: 195: return (symb >= ' ') && (symb <= '~');
  4988  0021E8  6B6C               	clrf	_string_utils_is_symbol$801& (0+255),b
  4989                           
  4990                           ; BSR set to: 0
  4991  0021EA  0E1F               	movlw	31
  4992  0021EC  656D               	cpfsgt	string_utils_is_symbol@symb& (0+255),b
  4993  0021EE  D005               	goto	l514
  4994                           
  4995                           ; BSR set to: 0
  4996  0021F0  0E7F               	movlw	127
  4997  0021F2  616D               	cpfslt	string_utils_is_symbol@symb& (0+255),b
  4998  0021F4  D002               	goto	l514
  4999                           
  5000                           ; BSR set to: 0
  5001  0021F6  0E01               	movlw	1
  5002  0021F8  6F6C               	movwf	_string_utils_is_symbol$801& (0+255),b
  5003  0021FA                     l514:
  5004                           
  5005                           ; BSR set to: 0
  5006  0021FA  516C               	movf	_string_utils_is_symbol$801& (0+255),w,b
  5007                           
  5008                           ; BSR set to: 0
  5009  0021FC  0012               	return	
  5010  0021FE                     __end_of_string_utils_is_symbol:
  5011                           	opt stack 0
  5012                           tosu	equ	0xFFF
  5013                           tosh	equ	0xFFE
  5014                           tosl	equ	0xFFD
  5015                           pclath	equ	0xFFA
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           prodh	equ	0xFF4
  5021                           prodl	equ	0xFF3
  5022                           intcon	equ	0xFF2
  5023                           indf0	equ	0xFEF
  5024                           postinc0	equ	0xFEE
  5025                           fsr0h	equ	0xFEA
  5026                           fsr0l	equ	0xFE9
  5027                           wreg	equ	0xFE8
  5028                           indf1	equ	0xFE7
  5029                           postinc1	equ	0xFE6
  5030                           postdec1	equ	0xFE5
  5031                           fsr1h	equ	0xFE2
  5032                           fsr1l	equ	0xFE1
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function _symb_from_hex_to_bin *****************
  5041 ;; Defined at:
  5042 ;;		line 334 in file "src/modules/string_utils.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  symb            1    wreg     unsigned char 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  symb            1   12[BANK0 ] unsigned char 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;                  1    wreg      unsigned char 
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0
  5051 ;; Tracked objects:
  5052 ;;		On entry : F/0
  5053 ;;		On exit  : F/0
  5054 ;;		Unchanged: FFFFFFF0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5056 ;;      Params:         0       0       0       0       0       0       0
  5057 ;;      Locals:         0       1       0       0       0       0       0
  5058 ;;      Temps:          0       0       0       0       0       0       0
  5059 ;;      Totals:         0       1       0       0       0       0       0
  5060 ;;Total ram usage:        1 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    5
  5063 ;; This function calls:
  5064 ;;		Nothing
  5065 ;; This function is called by:
  5066 ;;		_string_utils_from_hex
  5067 ;; This function uses a non-reentrant model
  5068 ;;
  5069                           
  5070                           	psect	text17
  5071  001ADA                     __ptext17:
  5072                           	opt stack 0
  5073  001ADA                     _symb_from_hex_to_bin:
  5074                           	opt stack 21
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;symb_from_hex_to_bin@symb stored from wreg
  5078  001ADA  CFE8 F06C          	movff	wreg,symb_from_hex_to_bin@symb
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;string_utils.c: 335: switch (symb)
  5082  001ADE  D009               	goto	l7765
  5083  001AE0                     l7751:
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;string_utils.c: 338: case '1':
  5087                           ;string_utils.c: 339: case '2':
  5088                           ;string_utils.c: 340: case '3':
  5089                           ;string_utils.c: 341: case '4':
  5090                           ;string_utils.c: 342: case '5':
  5091                           ;string_utils.c: 343: case '6':
  5092                           ;string_utils.c: 344: case '7':
  5093                           ;string_utils.c: 345: case '8':
  5094                           ;string_utils.c: 346: case '9':
  5095                           ;string_utils.c: 347: return (UINT8)(symb - '0');
  5096  001AE0  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5097  001AE2  0FD0               	addlw	208
  5098  001AE4  0012               	return	
  5099  001AE6                     l7755:
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;string_utils.c: 349: case 'b':
  5103                           ;string_utils.c: 350: case 'c':
  5104                           ;string_utils.c: 351: case 'd':
  5105                           ;string_utils.c: 352: case 'e':
  5106                           ;string_utils.c: 353: case 'f':
  5107                           ;string_utils.c: 354: return (UINT8)(symb - 'a') + 10;
  5108  001AE6  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5109  001AE8  0FA9               	addlw	169
  5110  001AEA  0012               	return	
  5111  001AEC                     l7759:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;string_utils.c: 356: case 'B':
  5115                           ;string_utils.c: 357: case 'C':
  5116                           ;string_utils.c: 358: case 'D':
  5117                           ;string_utils.c: 359: case 'E':
  5118                           ;string_utils.c: 360: case 'F':
  5119                           ;string_utils.c: 361: return (UINT8)(symb - 'A') + 10;
  5120  001AEC  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5121  001AEE  0FC9               	addlw	201
  5122  001AF0  0012               	return	
  5123  001AF2                     l7765:
  5124                           
  5125                           ; BSR set to: 0
  5126  001AF2  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5127                           
  5128                           ; Switch size 1, requested type "space"
  5129                           ; Number of cases is 22, Range of values is 48 to 102
  5130                           ; switch strategies available:
  5131                           ; Name         Instructions Cycles
  5132                           ; simple_byte           67    34 (average)
  5133                           ;	Chosen strategy is simple_byte
  5134  001AF4  0A30               	xorlw	48	; case 48
  5135  001AF6  E0F4               	bz	l7751
  5136  001AF8  0A01               	xorlw	1	; case 49
  5137  001AFA  E0F2               	bz	l7751
  5138  001AFC  0A03               	xorlw	3	; case 50
  5139  001AFE  E0F0               	bz	l7751
  5140  001B00  0A01               	xorlw	1	; case 51
  5141  001B02  E0EE               	bz	l7751
  5142  001B04  0A07               	xorlw	7	; case 52
  5143  001B06  E0EC               	bz	l7751
  5144  001B08  0A01               	xorlw	1	; case 53
  5145  001B0A  E0EA               	bz	l7751
  5146  001B0C  0A03               	xorlw	3	; case 54
  5147  001B0E  E0E8               	bz	l7751
  5148  001B10  0A01               	xorlw	1	; case 55
  5149  001B12  E0E6               	bz	l7751
  5150  001B14  0A0F               	xorlw	15	; case 56
  5151  001B16  E0E4               	bz	l7751
  5152  001B18  0A01               	xorlw	1	; case 57
  5153  001B1A  E0E2               	bz	l7751
  5154  001B1C  0A78               	xorlw	120	; case 65
  5155  001B1E  E0E6               	bz	l7759
  5156  001B20  0A03               	xorlw	3	; case 66
  5157  001B22  E0E4               	bz	l7759
  5158  001B24  0A01               	xorlw	1	; case 67
  5159  001B26  E0E2               	bz	l7759
  5160  001B28  0A07               	xorlw	7	; case 68
  5161  001B2A  E0E0               	bz	l7759
  5162  001B2C  0A01               	xorlw	1	; case 69
  5163  001B2E  E0DE               	bz	l7759
  5164  001B30  0A03               	xorlw	3	; case 70
  5165  001B32  E0DC               	bz	l7759
  5166  001B34  0A27               	xorlw	39	; case 97
  5167  001B36  E0D7               	bz	l7755
  5168  001B38  0A03               	xorlw	3	; case 98
  5169  001B3A  E0D5               	bz	l7755
  5170  001B3C  0A01               	xorlw	1	; case 99
  5171  001B3E  E0D3               	bz	l7755
  5172  001B40  0A07               	xorlw	7	; case 100
  5173  001B42  E0D1               	bz	l7755
  5174  001B44  0A01               	xorlw	1	; case 101
  5175  001B46  E0CF               	bz	l7755
  5176  001B48  0A03               	xorlw	3	; case 102
  5177  001B4A  E0CD               	bz	l7755
  5178                           
  5179                           ; BSR set to: 0
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;string_utils.c: 363: return 0;
  5183  001B4C  0C00               	retlw	0
  5184  001B4E                     __end_of_symb_from_hex_to_bin:
  5185                           	opt stack 0
  5186                           tosu	equ	0xFFF
  5187                           tosh	equ	0xFFE
  5188                           tosl	equ	0xFFD
  5189                           pclath	equ	0xFFA
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           intcon	equ	0xFF2
  5197                           indf0	equ	0xFEF
  5198                           postinc0	equ	0xFEE
  5199                           fsr0h	equ	0xFEA
  5200                           fsr0l	equ	0xFE9
  5201                           wreg	equ	0xFE8
  5202                           indf1	equ	0xFE7
  5203                           postinc1	equ	0xFE6
  5204                           postdec1	equ	0xFE5
  5205                           fsr1h	equ	0xFE2
  5206                           fsr1l	equ	0xFE1
  5207                           indf2	equ	0xFDF
  5208                           postinc2	equ	0xFDE
  5209                           postdec2	equ	0xFDD
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _string_utils_atoi *****************
  5215 ;; Defined at:
  5216 ;;		line 414 in file "src/modules/string_utils.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;  c               3   18[BANK0 ] PTR const unsigned char 
  5219 ;;		 -> STR_34(2), this_buf(127), ROM(32767), 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  value           2   26[BANK0 ] int 
  5222 ;;  sign            2   24[BANK0 ] int 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  2   18[BANK0 ] int 
  5225 ;; Registers used:
  5226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : F/0
  5229 ;;		On exit  : F/0
  5230 ;;		Unchanged: FFFFFFF0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5232 ;;      Params:         0       3       0       0       0       0       0
  5233 ;;      Locals:         0       4       0       0       0       0       0
  5234 ;;      Temps:          0       3       0       0       0       0       0
  5235 ;;      Totals:         0      10       0       0       0       0       0
  5236 ;;Total ram usage:       10 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    6
  5239 ;; This function calls:
  5240 ;;		___wmul
  5241 ;;		_string_utils_is_digit
  5242 ;; This function is called by:
  5243 ;;		_this_parse_item
  5244 ;;		_main
  5245 ;; This function uses a non-reentrant model
  5246 ;;
  5247                           
  5248                           	psect	text18
  5249  00125C                     __ptext18:
  5250                           	opt stack 0
  5251  00125C                     _string_utils_atoi:
  5252                           	opt stack 21
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;string_utils.c: 415: INT16 value = 0;
  5256                           
  5257                           ; BSR set to: 0
  5258  00125C  6B7A               	clrf	string_utils_atoi@value& (0+255),b
  5259  00125E  6B7B               	clrf	(string_utils_atoi@value+1)& (0+255),b
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;string_utils.c: 416: int sign = 1;
  5263  001260  6B79               	clrf	(string_utils_atoi@sign+1)& (0+255),b
  5264  001262  0E01               	movlw	1
  5265  001264  6F78               	movwf	string_utils_atoi@sign& (0+255),b
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;string_utils.c: 417: if( *c == '+' || *c == '-' )
  5269  001266  C072  FFF6         	movff	string_utils_atoi@c,tblptrl
  5270  00126A  C073  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5271  00126E  C074  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5272  001272  BAF8               	btfsc	tblptru,5,c
  5273  001274  D003               	bra	u9227
  5274  001276  0008               	tblrd		*
  5275  001278  50F5               	movf	tablat,w,c
  5276  00127A  D001               	bra	u9220
  5277  00127C                     u9227:
  5278  00127C  D86D               	call	PL10	;call to abstracted procedure
  5279  00127E                     u9220:
  5280  00127E  0A2B               	xorlw	43
  5281  001280  E00E               	bz	l7791
  5282  001282  C072  FFF6         	movff	string_utils_atoi@c,tblptrl
  5283  001286  C073  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5284  00128A  C074  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5285  00128E  BAF8               	btfsc	tblptru,5,c
  5286  001290  D003               	bra	u9247
  5287  001292  0008               	tblrd		*
  5288  001294  50F5               	movf	tablat,w,c
  5289  001296  D001               	bra	u9240
  5290  001298                     u9247:
  5291  001298  D85F               	call	PL10	;call to abstracted procedure
  5292  00129A                     u9240:
  5293  00129A  0A2D               	xorlw	45
  5294  00129C  E13D               	bnz	l624
  5295  00129E                     l7791:
  5296                           
  5297                           ;string_utils.c: 418: {
  5298                           ;string_utils.c: 419: if( *c == '-' ) sign = -1;
  5299  00129E  C072  FFF6         	movff	string_utils_atoi@c,tblptrl
  5300  0012A2  C073  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5301  0012A6  C074  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5302  0012AA  BAF8               	btfsc	tblptru,5,c
  5303  0012AC  D003               	bra	u9267
  5304  0012AE  0008               	tblrd		*
  5305  0012B0  50F5               	movf	tablat,w,c
  5306  0012B2  D001               	bra	u9260
  5307  0012B4                     u9267:
  5308  0012B4  D851               	call	PL10	;call to abstracted procedure
  5309  0012B6                     u9260:
  5310  0012B6  0A2D               	xorlw	45
  5311  0012B8  E103               	bnz	l7795
  5312  0012BA  0100               	movlb	0	; () banked
  5313  0012BC  6978               	setf	string_utils_atoi@sign& (0+255),b
  5314  0012BE  6979               	setf	(string_utils_atoi@sign+1)& (0+255),b
  5315  0012C0                     l7795:
  5316                           
  5317                           ;string_utils.c: 420: c++;
  5318  0012C0  0100               	movlb	0	; () banked
  5319  0012C2  2B72               	incf	string_utils_atoi@c& (0+255),f,b
  5320  0012C4  0E00               	movlw	0
  5321  0012C6  2373               	addwfc	(string_utils_atoi@c+1)& (0+255),f,b
  5322  0012C8  2374               	addwfc	(string_utils_atoi@c+2)& (0+255),f,b
  5323  0012CA  D026               	goto	l624
  5324  0012CC                     l7797:
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;string_utils.c: 423: {
  5328                           ;string_utils.c: 424: value *= 10;
  5329  0012CC  C07A  F06C         	movff	string_utils_atoi@value,?___wmul
  5330  0012D0  C07B  F06D         	movff	string_utils_atoi@value+1,?___wmul+1
  5331  0012D4  6B6F               	clrf	(?___wmul+3)& (0+255),b
  5332  0012D6  0E0A               	movlw	10
  5333  0012D8  6F6E               	movwf	(?___wmul+2)& (0+255),b
  5334  0012DA  EC6B  F010         	call	___wmul	;wreg free
  5335  0012DE  C06C  F07A         	movff	?___wmul,string_utils_atoi@value
  5336  0012E2  C06D  F07B         	movff	?___wmul+1,string_utils_atoi@value+1
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;string_utils.c: 425: value += (int) (*c-'0');
  5340  0012E6  C072  FFF6         	movff	string_utils_atoi@c,tblptrl
  5341  0012EA  C073  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5342  0012EE  C074  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5343  0012F2  BAF8               	btfsc	tblptru,5,c
  5344  0012F4  D003               	bra	u9287
  5345  0012F6  0008               	tblrd		*
  5346  0012F8  50F5               	movf	tablat,w,c
  5347  0012FA  D001               	bra	u9280
  5348  0012FC                     u9287:
  5349  0012FC  D82D               	call	PL10	;call to abstracted procedure
  5350  0012FE                     u9280:
  5351  0012FE  0100               	movlb	0	; () banked
  5352  001300  6F75               	movwf	??_string_utils_atoi& (0+255),b
  5353  001302  0ED0               	movlw	208
  5354  001304  2575               	addwf	??_string_utils_atoi& (0+255),w,b
  5355  001306  6F76               	movwf	(??_string_utils_atoi+1)& (0+255),b
  5356  001308  6B77               	clrf	(??_string_utils_atoi+2)& (0+255),b
  5357  00130A  0EFF               	movlw	255
  5358  00130C  2377               	addwfc	(??_string_utils_atoi+2)& (0+255),f,b
  5359  00130E  5176               	movf	(??_string_utils_atoi+1)& (0+255),w,b
  5360  001310  277A               	addwf	string_utils_atoi@value& (0+255),f,b
  5361  001312  5177               	movf	(??_string_utils_atoi+2)& (0+255),w,b
  5362  001314  237B               	addwfc	(string_utils_atoi@value+1)& (0+255),f,b
  5363  001316  D7D4               	goto	l7795
  5364  001318                     l624:
  5365  001318  0100               	movlb	0	; () banked
  5366  00131A  C072  FFF6         	movff	string_utils_atoi@c,tblptrl
  5367  00131E  C073  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5368  001322  C074  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5369  001326  BAF8               	btfsc	tblptru,5,c
  5370  001328  D003               	bra	u9297
  5371  00132A  0008               	tblrd		*
  5372  00132C  50F5               	movf	tablat,w,c
  5373  00132E  D001               	bra	u9290
  5374  001330                     u9297:
  5375  001330  D813               	call	PL10	;call to abstracted procedure
  5376  001332                     u9290:
  5377  001332  ECD7  F010         	call	_string_utils_is_digit
  5378  001336  0900               	iorlw	0
  5379  001338  E1C9               	bnz	l7797
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;string_utils.c: 427: }
  5383                           ;string_utils.c: 428: return (value * sign);
  5384  00133A  C07A  F06C         	movff	string_utils_atoi@value,?___wmul
  5385  00133E  C07B  F06D         	movff	string_utils_atoi@value+1,?___wmul+1
  5386  001342  C078  F06E         	movff	string_utils_atoi@sign,?___wmul+2
  5387  001346  C079  F06F         	movff	string_utils_atoi@sign+1,?___wmul+3
  5388  00134A  EC6B  F010         	call	___wmul	;wreg free
  5389  00134E  C06C  F072         	movff	?___wmul,?_string_utils_atoi
  5390  001352  C06D  F073         	movff	?___wmul+1,?_string_utils_atoi+1
  5391                           
  5392                           ; BSR set to: 0
  5393  001356  0012               	return	
  5394  001358                     __end_of_string_utils_atoi:
  5395                           	opt stack 0
  5396  001358                     PL10:
  5397                           	opt stack 19
  5398  001358  CFF6 FFE9          	movff	tblptrl,fsr0l
  5399  00135C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5400  001360  50EF               	movf	indf0,w,c
  5401  001362  0012               	return	
  5402  001364                     __end_ofPL10:
  5403                           	opt stack 0
  5404                           tosu	equ	0xFFF
  5405                           tosh	equ	0xFFE
  5406                           tosl	equ	0xFFD
  5407                           pclath	equ	0xFFA
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           indf0	equ	0xFEF
  5416                           postinc0	equ	0xFEE
  5417                           fsr0h	equ	0xFEA
  5418                           fsr0l	equ	0xFE9
  5419                           wreg	equ	0xFE8
  5420                           indf1	equ	0xFE7
  5421                           postinc1	equ	0xFE6
  5422                           postdec1	equ	0xFE5
  5423                           fsr1h	equ	0xFE2
  5424                           fsr1l	equ	0xFE1
  5425                           indf2	equ	0xFDF
  5426                           postinc2	equ	0xFDE
  5427                           postdec2	equ	0xFDD
  5428                           fsr2h	equ	0xFDA
  5429                           fsr2l	equ	0xFD9
  5430                           status	equ	0xFD8
  5431                           
  5432 ;; *************** function _string_utils_atof *****************
  5433 ;; Defined at:
  5434 ;;		line 432 in file "src/modules/string_utils.c"
  5435 ;; Parameters:    Size  Location     Type
  5436 ;;  s               3   51[BANK0 ] PTR const unsigned char 
  5437 ;;		 -> this_buf(127), ROM(32767), 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  i               2   58[BANK0 ] int 
  5440 ;;  sign            2   56[BANK0 ] int 
  5441 ;;  a               3   62[BANK0 ] float 
  5442 ;;  c               2   65[BANK0 ] int 
  5443 ;;  e               2   60[BANK0 ] int 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  3   51[BANK0 ] float 
  5446 ;; Registers used:
  5447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5448 ;; Tracked objects:
  5449 ;;		On entry : F/0
  5450 ;;		On exit  : F/0
  5451 ;;		Unchanged: FFFFFFF0/0
  5452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5453 ;;      Params:         0       3       0       0       0       0       0
  5454 ;;      Locals:         0      11       0       0       0       0       0
  5455 ;;      Temps:          0       2       0       0       0       0       0
  5456 ;;      Totals:         0      16       0       0       0       0       0
  5457 ;;Total ram usage:       16 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    8
  5460 ;; This function calls:
  5461 ;;		___ftmul
  5462 ;;		___lwtoft
  5463 ;;		___ftadd
  5464 ;;		_string_utils_is_digit
  5465 ;;		___wmul
  5466 ;;		___asftmul
  5467 ;; This function is called by:
  5468 ;;		_this_parse_item
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text19
  5473  00060A                     __ptext19:
  5474                           	opt stack 0
  5475  00060A                     _string_utils_atof:
  5476                           	opt stack 19
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;string_utils.c: 433: FLOAT a = 0.0;
  5480                           
  5481                           ; BSR set to: 0
  5482  00060A  6B9E               	clrf	string_utils_atof@a& (0+255),b
  5483  00060C  6B9F               	clrf	(string_utils_atof@a+1)& (0+255),b
  5484  00060E  6BA0               	clrf	(string_utils_atof@a+2)& (0+255),b
  5485                           
  5486                           ;string_utils.c: 434: int e = 0;
  5487  000610  6B9C               	clrf	string_utils_atof@e& (0+255),b
  5488  000612  6B9D               	clrf	(string_utils_atof@e+1)& (0+255),b
  5489                           
  5490                           ;string_utils.c: 435: int c;
  5491                           ;string_utils.c: 436: while ((c = *s++) != '\0' && string_utils_is_digit(c)) {
  5492  000614  D014               	goto	l7811
  5493  000616                     l7809:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;string_utils.c: 437: a = a*10.0 + (c - '0');
  5497  000616  D8F8               	call	PL34	;call to abstracted procedure
  5498  000618  EC31  F00A         	call	___ftmul	;wreg free
  5499  00061C  D8E0               	call	PL28	;call to abstracted procedure
  5500  00061E  EC96  F010         	call	___lwtoft	;wreg free
  5501  000622  C074  F088         	movff	?___lwtoft,?___ftadd+3
  5502  000626  C075  F089         	movff	?___lwtoft+1,?___ftadd+4
  5503  00062A  C076  F08A         	movff	?___lwtoft+2,?___ftadd+5
  5504  00062E  EC0F  F006         	call	___ftadd	;wreg free
  5505  000632  C085  F09E         	movff	?___ftadd,string_utils_atof@a
  5506  000636  C086  F09F         	movff	?___ftadd+1,string_utils_atof@a+1
  5507  00063A  C087  F0A0         	movff	?___ftadd+2,string_utils_atof@a+2
  5508  00063E                     l7811:
  5509                           
  5510                           ; BSR set to: 0
  5511  00063E  C093  FFF6         	movff	string_utils_atof@s,tblptrl
  5512  000642  D8F8               	call	PL54	;call to abstracted procedure
  5513  000644  BAF8               	btfsc	tblptru,5,c
  5514  000646  D003               	bra	u9317
  5515  000648  0008               	tblrd		*
  5516  00064A  50F5               	movf	tablat,w,c
  5517  00064C  D002               	bra	u9310
  5518  00064E                     u9317:
  5519  00064E  ECAC  F009         	call	PL10	;call to abstracted procedure
  5520  000652                     u9310:
  5521  000652  D8E6               	call	PL48	;call to abstracted procedure
  5522  000654  E005               	bz	l7815
  5523                           
  5524                           ; BSR set to: 0
  5525  000656  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5526  000658  ECD7  F010         	call	_string_utils_is_digit
  5527  00065C  0900               	iorlw	0
  5528  00065E  E1DB               	bnz	l7809
  5529  000660                     l7815:
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;string_utils.c: 438: }
  5533                           ;string_utils.c: 439: if (c == '.') {
  5534  000660  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5535  000662  0A2E               	xorlw	46
  5536  000664  11A2               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5537  000666  E018               	bz	l7823
  5538  000668  D028               	goto	l7827
  5539  00066A                     l7819:
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;string_utils.c: 441: a = a*10.0 + (c - '0');
  5543  00066A  D8CE               	call	PL34	;call to abstracted procedure
  5544  00066C  EC31  F00A         	call	___ftmul	;wreg free
  5545  000670  D8B6               	call	PL28	;call to abstracted procedure
  5546  000672  EC96  F010         	call	___lwtoft	;wreg free
  5547  000676  C074  F088         	movff	?___lwtoft,?___ftadd+3
  5548  00067A  C075  F089         	movff	?___lwtoft+1,?___ftadd+4
  5549  00067E  C076  F08A         	movff	?___lwtoft+2,?___ftadd+5
  5550  000682  EC0F  F006         	call	___ftadd	;wreg free
  5551  000686  C085  F09E         	movff	?___ftadd,string_utils_atof@a
  5552  00068A  C086  F09F         	movff	?___ftadd+1,string_utils_atof@a+1
  5553  00068E  C087  F0A0         	movff	?___ftadd+2,string_utils_atof@a+2
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;string_utils.c: 442: e = e-1;
  5557  000692  079C               	decf	string_utils_atof@e& (0+255),f,b
  5558  000694  A0D8               	btfss	status,0,c
  5559  000696  079D               	decf	(string_utils_atof@e+1)& (0+255),f,b
  5560  000698                     l7823:
  5561                           
  5562                           ; BSR set to: 0
  5563  000698  C093  FFF6         	movff	string_utils_atof@s,tblptrl
  5564  00069C  D8CB               	call	PL54	;call to abstracted procedure
  5565  00069E  BAF8               	btfsc	tblptru,5,c
  5566  0006A0  D003               	bra	u9357
  5567  0006A2  0008               	tblrd		*
  5568  0006A4  50F5               	movf	tablat,w,c
  5569  0006A6  D002               	bra	u9350
  5570  0006A8                     u9357:
  5571  0006A8  ECAC  F009         	call	PL10	;call to abstracted procedure
  5572  0006AC                     u9350:
  5573  0006AC  D8B9               	call	PL48	;call to abstracted procedure
  5574  0006AE  E005               	bz	l7827
  5575                           
  5576                           ; BSR set to: 0
  5577  0006B0  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5578  0006B2  ECD7  F010         	call	_string_utils_is_digit
  5579  0006B6  0900               	iorlw	0
  5580  0006B8  E1D8               	bnz	l7819
  5581  0006BA                     l7827:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;string_utils.c: 443: }
  5585                           ;string_utils.c: 444: }
  5586                           ;string_utils.c: 445: if (c == 'e' || c == 'E') {
  5587  0006BA  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5588  0006BC  0A65               	xorlw	101
  5589  0006BE  11A2               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5590  0006C0  E004               	bz	l7831
  5591                           
  5592                           ; BSR set to: 0
  5593  0006C2  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5594  0006C4  0A45               	xorlw	69
  5595  0006C6  11A2               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5596  0006C8  E16E               	bnz	l7867
  5597  0006CA                     l7831:
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;string_utils.c: 446: int sign = 1;
  5601  0006CA  6B99               	clrf	(string_utils_atof@sign+1)& (0+255),b
  5602  0006CC  0E01               	movlw	1
  5603  0006CE  6F98               	movwf	string_utils_atof@sign& (0+255),b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;string_utils.c: 447: int i = 0;
  5607  0006D0  6B9A               	clrf	string_utils_atof@i& (0+255),b
  5608  0006D2  6B9B               	clrf	(string_utils_atof@i+1)& (0+255),b
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;string_utils.c: 448: c = *s++;
  5612  0006D4  C093  FFF6         	movff	string_utils_atof@s,tblptrl
  5613  0006D8  C094  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5614  0006DC  C095  FFF8         	movff	string_utils_atof@s+2,tblptru
  5615  0006E0  BAF8               	btfsc	tblptru,5,c
  5616  0006E2  D003               	bra	u9407
  5617  0006E4  0008               	tblrd		*
  5618  0006E6  50F5               	movf	tablat,w,c
  5619  0006E8  D002               	bra	u9400
  5620  0006EA                     u9407:
  5621  0006EA  ECAC  F009         	call	PL10	;call to abstracted procedure
  5622  0006EE                     u9400:
  5623                           
  5624                           ; BSR set to: 0
  5625  0006EE  D884               	call	PL30	;call to abstracted procedure
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;string_utils.c: 449: if (c == '+')
  5629  0006F0  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5630  0006F2  0A2B               	xorlw	43
  5631  0006F4  11A2               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5632  0006F6  E10F               	bnz	l7845
  5633  0006F8                     l7841:
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;string_utils.c: 450: c = *s++;
  5637  0006F8  C093  FFF6         	movff	string_utils_atof@s,tblptrl
  5638  0006FC  C094  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5639  000700  C095  FFF8         	movff	string_utils_atof@s+2,tblptru
  5640  000704  BAF8               	btfsc	tblptru,5,c
  5641  000706  D003               	bra	u9427
  5642  000708  0008               	tblrd		*
  5643  00070A  50F5               	movf	tablat,w,c
  5644  00070C  D002               	bra	u9420
  5645  00070E                     u9427:
  5646  00070E  ECAC  F009         	call	PL10	;call to abstracted procedure
  5647  000712                     u9420:
  5648                           
  5649                           ; BSR set to: 0
  5650  000712  D872               	call	PL30	;call to abstracted procedure
  5651  000714  D029               	goto	l7859
  5652  000716                     l7845:
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;string_utils.c: 451: else if (c == '-') {
  5656  000716  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5657  000718  0A2D               	xorlw	45
  5658  00071A  11A2               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5659  00071C  E125               	bnz	l7859
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;string_utils.c: 452: c = *s++;
  5663  00071E  C093  FFF6         	movff	string_utils_atof@s,tblptrl
  5664  000722  C094  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5665  000726  C095  FFF8         	movff	string_utils_atof@s+2,tblptru
  5666  00072A  BAF8               	btfsc	tblptru,5,c
  5667  00072C  D003               	bra	u9447
  5668  00072E  0008               	tblrd		*
  5669  000730  50F5               	movf	tablat,w,c
  5670  000732  D002               	bra	u9440
  5671  000734                     u9447:
  5672  000734  ECAC  F009         	call	PL10	;call to abstracted procedure
  5673  000738                     u9440:
  5674                           
  5675                           ; BSR set to: 0
  5676  000738  D85F               	call	PL30	;call to abstracted procedure
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;string_utils.c: 453: sign = -1;
  5680  00073A  6998               	setf	string_utils_atof@sign& (0+255),b
  5681  00073C  6999               	setf	(string_utils_atof@sign+1)& (0+255),b
  5682  00073E  D014               	goto	l7859
  5683  000740                     l7853:
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;string_utils.c: 456: i = i*10 + (c - '0');
  5687  000740  C09A  F06C         	movff	string_utils_atof@i,?___wmul
  5688  000744  C09B  F06D         	movff	string_utils_atof@i+1,?___wmul+1
  5689  000748  6B6F               	clrf	(?___wmul+3)& (0+255),b
  5690  00074A  0E0A               	movlw	10
  5691  00074C  6F6E               	movwf	(?___wmul+2)& (0+255),b
  5692  00074E  EC6B  F010         	call	___wmul	;wreg free
  5693  000752  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5694  000754  276C               	addwf	?___wmul& (0+255),f,b
  5695  000756  51A2               	movf	(string_utils_atof@c+1)& (0+255),w,b
  5696  000758  236D               	addwfc	(?___wmul+1)& (0+255),f,b
  5697  00075A  0ED0               	movlw	208
  5698  00075C  246C               	addwf	?___wmul,w,c
  5699  00075E  6F9A               	movwf	string_utils_atof@i& (0+255),b
  5700  000760  0EFF               	movlw	255
  5701  000762  206D               	addwfc	?___wmul+1,w,c
  5702  000764  6F9B               	movwf	(string_utils_atof@i+1)& (0+255),b
  5703  000766  D7C8               	goto	l7841
  5704  000768                     l7859:
  5705                           
  5706                           ; BSR set to: 0
  5707  000768  51A1               	movf	string_utils_atof@c& (0+255),w,b
  5708  00076A  ECD7  F010         	call	_string_utils_is_digit
  5709  00076E  0900               	iorlw	0
  5710  000770  E1E7               	bnz	l7853
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;string_utils.c: 458: }
  5714                           ;string_utils.c: 459: e += i*sign;
  5715  000772  C09A  F06C         	movff	string_utils_atof@i,?___wmul
  5716  000776  C09B  F06D         	movff	string_utils_atof@i+1,?___wmul+1
  5717  00077A  C098  F06E         	movff	string_utils_atof@sign,?___wmul+2
  5718  00077E  C099  F06F         	movff	string_utils_atof@sign+1,?___wmul+3
  5719  000782  EC6B  F010         	call	___wmul	;wreg free
  5720  000786  516C               	movf	?___wmul& (0+255),w,b
  5721  000788  279C               	addwf	string_utils_atof@e& (0+255),f,b
  5722  00078A  516D               	movf	(?___wmul+1)& (0+255),w,b
  5723  00078C  239D               	addwfc	(string_utils_atof@e+1)& (0+255),f,b
  5724  00078E  D00B               	goto	l7867
  5725  000790                     l7863:
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;string_utils.c: 462: a *= 10.0;
  5729  000790  6B85               	clrf	?___asftmul& (0+255),b
  5730  000792  0E20               	movlw	32
  5731  000794  6F86               	movwf	(?___asftmul+1)& (0+255),b
  5732  000796  0E41               	movlw	65
  5733  000798  6F87               	movwf	(?___asftmul+2)& (0+255),b
  5734  00079A  0E9E               	movlw	string_utils_atof@a& (0+255)
  5735  00079C  EC1C  F010         	call	___asftmul
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;string_utils.c: 463: e--;
  5739  0007A0  079C               	decf	string_utils_atof@e& (0+255),f,b
  5740  0007A2  A0D8               	btfss	status,0,c
  5741  0007A4  079D               	decf	(string_utils_atof@e+1)& (0+255),f,b
  5742  0007A6                     l7867:
  5743                           
  5744                           ; BSR set to: 0
  5745  0007A6  519D               	movf	(string_utils_atof@e+1)& (0+255),w,b
  5746  0007A8  0A80               	xorlw	128
  5747  0007AA  0F80               	addlw	-128
  5748  0007AC  0E01               	movlw	1
  5749  0007AE  B4D8               	btfsc	status,2,c
  5750  0007B0  5D9C               	subwf	string_utils_atof@e& (0+255),w,b
  5751  0007B2  E30C               	bnc	l7873
  5752  0007B4  D7ED               	goto	l7863
  5753  0007B6                     l7869:
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;string_utils.c: 466: a *= 0.1;
  5757  0007B6  0ECD               	movlw	205
  5758  0007B8  6F85               	movwf	?___asftmul& (0+255),b
  5759  0007BA  0ECC               	movlw	204
  5760  0007BC  6F86               	movwf	(?___asftmul+1)& (0+255),b
  5761  0007BE  0E3D               	movlw	61
  5762  0007C0  6F87               	movwf	(?___asftmul+2)& (0+255),b
  5763  0007C2  0E9E               	movlw	string_utils_atof@a& (0+255)
  5764  0007C4  EC1C  F010         	call	___asftmul
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;string_utils.c: 467: e++;
  5768  0007C8  4B9C               	infsnz	string_utils_atof@e& (0+255),f,b
  5769  0007CA  2B9D               	incf	(string_utils_atof@e+1)& (0+255),f,b
  5770  0007CC                     l7873:
  5771                           
  5772                           ; BSR set to: 0
  5773  0007CC  BF9D               	btfsc	(string_utils_atof@e+1)& (0+255),7,b
  5774  0007CE  D7F3               	goto	l7869
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;string_utils.c: 468: }
  5778                           ;string_utils.c: 469: return a;
  5779  0007D0  C09E  F093         	movff	string_utils_atof@a,?_string_utils_atof
  5780  0007D4  C09F  F094         	movff	string_utils_atof@a+1,?_string_utils_atof+1
  5781  0007D8  C0A0  F095         	movff	string_utils_atof@a+2,?_string_utils_atof+2
  5782                           
  5783                           ; BSR set to: 0
  5784  0007DC  0012               	return	
  5785  0007DE                     __end_of_string_utils_atof:
  5786                           	opt stack 0
  5787  0007DE                     PL28:
  5788                           	opt stack 19
  5789  0007DE  C074  F085         	movff	?___ftmul,?___ftadd
  5790  0007E2  C075  F086         	movff	?___ftmul+1,?___ftadd+1
  5791  0007E6  C076  F087         	movff	?___ftmul+2,?___ftadd+2
  5792  0007EA  0ED0               	movlw	208
  5793  0007EC  25A1               	addwf	string_utils_atof@c& (0+255),w,b
  5794  0007EE  6F74               	movwf	?___lwtoft& (0+255),b
  5795  0007F0  0EFF               	movlw	255
  5796  0007F2  21A2               	addwfc	(string_utils_atof@c+1)& (0+255),w,b
  5797  0007F4  6F75               	movwf	(?___lwtoft+1)& (0+255),b
  5798  0007F6  0012               	return	
  5799  0007F8                     __end_ofPL28:
  5800                           	opt stack 0
  5801  0007F8                     PL30:
  5802                           	opt stack 19
  5803  0007F8  0100               	movlb	0	; () banked
  5804  0007FA  6FA1               	movwf	string_utils_atof@c& (0+255),b
  5805  0007FC  6BA2               	clrf	(string_utils_atof@c+1)& (0+255),b
  5806  0007FE  2B93               	incf	string_utils_atof@s& (0+255),f,b
  5807  000800  0E00               	movlw	0
  5808  000802  2394               	addwfc	(string_utils_atof@s+1)& (0+255),f,b
  5809  000804  2395               	addwfc	(string_utils_atof@s+2)& (0+255),f,b
  5810  000806  0C00               	retlw	0
  5811  000808                     __end_ofPL30:
  5812                           	opt stack 0
  5813  000808                     PL34:
  5814                           	opt stack 19
  5815  000808  6B77               	clrf	(?___ftmul+3)& (0+255),b
  5816  00080A  0E20               	movlw	32
  5817  00080C  6F78               	movwf	(?___ftmul+4)& (0+255),b
  5818  00080E  0E41               	movlw	65
  5819  000810  6F79               	movwf	(?___ftmul+5)& (0+255),b
  5820  000812  C09E  F074         	movff	string_utils_atof@a,?___ftmul
  5821  000816  C09F  F075         	movff	string_utils_atof@a+1,?___ftmul+1
  5822  00081A  C0A0  F076         	movff	string_utils_atof@a+2,?___ftmul+2
  5823  00081E  0C41               	retlw	65
  5824  000820                     __end_ofPL34:
  5825                           	opt stack 0
  5826  000820                     PL48:
  5827                           	opt stack 19
  5828  000820  0100               	movlb	0	; () banked
  5829  000822  6FA1               	movwf	string_utils_atof@c& (0+255),b
  5830  000824  6BA2               	clrf	(string_utils_atof@c+1)& (0+255),b
  5831  000826  C0A1  F096         	movff	string_utils_atof@c,??_string_utils_atof
  5832  00082A  C0A2  F097         	movff	string_utils_atof@c+1,??_string_utils_atof+1
  5833  00082E  5197               	movf	(??_string_utils_atof+1)& (0+255),w,b
  5834  000830  1196               	iorwf	??_string_utils_atof& (0+255),w,b
  5835  000832  0012               	return	
  5836  000834                     __end_ofPL48:
  5837                           	opt stack 0
  5838  000834                     PL54:
  5839                           	opt stack 19
  5840  000834  C094  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5841  000838  C095  FFF8         	movff	string_utils_atof@s+2,tblptru
  5842  00083C  2B93               	incf	string_utils_atof@s& (0+255),f,b
  5843  00083E  0E00               	movlw	0
  5844  000840  2394               	addwfc	(string_utils_atof@s+1)& (0+255),f,b
  5845  000842  2395               	addwfc	(string_utils_atof@s+2)& (0+255),f,b
  5846  000844  0C00               	retlw	0
  5847  000846                     __end_ofPL54:
  5848                           	opt stack 0
  5849                           tosu	equ	0xFFF
  5850                           tosh	equ	0xFFE
  5851                           tosl	equ	0xFFD
  5852                           pclath	equ	0xFFA
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           prodh	equ	0xFF4
  5858                           prodl	equ	0xFF3
  5859                           intcon	equ	0xFF2
  5860                           indf0	equ	0xFEF
  5861                           postinc0	equ	0xFEE
  5862                           fsr0h	equ	0xFEA
  5863                           fsr0l	equ	0xFE9
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           postinc1	equ	0xFE6
  5867                           postdec1	equ	0xFE5
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _string_utils_is_digit *****************
  5878 ;; Defined at:
  5879 ;;		line 329 in file "src/modules/string_utils.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  symb            1    wreg     unsigned char 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  symb            1   13[BANK0 ] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      unsigned char 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : F/0
  5891 ;;		Unchanged: FFFFFFF0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5893 ;;      Params:         0       0       0       0       0       0       0
  5894 ;;      Locals:         0       2       0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0
  5896 ;;      Totals:         0       2       0       0       0       0       0
  5897 ;;Total ram usage:        2 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    5
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_string_utils_atoi
  5904 ;;		_string_utils_atof
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text20
  5909  0021AE                     __ptext20:
  5910                           	opt stack 0
  5911  0021AE                     _string_utils_is_digit:
  5912                           	opt stack 21
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;string_utils_is_digit@symb stored from wreg
  5916  0021AE  CFE8 F06D          	movff	wreg,string_utils_is_digit@symb
  5917                           
  5918                           ;string_utils.c: 330: return (symb >= '0' && symb <= '9');
  5919  0021B2  0100               	movlb	0	; () banked
  5920  0021B4  6B6C               	clrf	_string_utils_is_digit$831& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923  0021B6  0E2F               	movlw	47
  5924  0021B8  656D               	cpfsgt	string_utils_is_digit@symb& (0+255),b
  5925  0021BA  D005               	goto	l561
  5926                           
  5927                           ; BSR set to: 0
  5928  0021BC  0E3A               	movlw	58
  5929  0021BE  616D               	cpfslt	string_utils_is_digit@symb& (0+255),b
  5930  0021C0  D002               	goto	l561
  5931                           
  5932                           ; BSR set to: 0
  5933  0021C2  0E01               	movlw	1
  5934  0021C4  6F6C               	movwf	_string_utils_is_digit$831& (0+255),b
  5935  0021C6                     l561:
  5936                           
  5937                           ; BSR set to: 0
  5938  0021C6  516C               	movf	_string_utils_is_digit$831& (0+255),w,b
  5939                           
  5940                           ; BSR set to: 0
  5941  0021C8  0012               	return	
  5942  0021CA                     __end_of_string_utils_is_digit:
  5943                           	opt stack 0
  5944                           tosu	equ	0xFFF
  5945                           tosh	equ	0xFFE
  5946                           tosl	equ	0xFFD
  5947                           pclath	equ	0xFFA
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           indf0	equ	0xFEF
  5956                           postinc0	equ	0xFEE
  5957                           fsr0h	equ	0xFEA
  5958                           fsr0l	equ	0xFE9
  5959                           wreg	equ	0xFE8
  5960                           indf1	equ	0xFE7
  5961                           postinc1	equ	0xFE6
  5962                           postdec1	equ	0xFE5
  5963                           fsr1h	equ	0xFE2
  5964                           fsr1l	equ	0xFE1
  5965                           indf2	equ	0xFDF
  5966                           postinc2	equ	0xFDE
  5967                           postdec2	equ	0xFDD
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function _on_parameter_found *****************
  5973 ;; Defined at:
  5974 ;;		line 14 in file "src/modules/on_parameter_found.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  operation       1    wreg     enum E4401
  5977 ;;  cmd_id          1   35[BANK0 ] char 
  5978 ;;  p_id            1   36[BANK0 ] char 
  5979 ;;  p               3   37[BANK0 ] PTR const void 
  5980 ;;		 -> parameter_value(127), parameter_text(127), ROM(32767), 
  5981 ;;  type            1   40[BANK0 ] enum E4392
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  operation       1   41[BANK0 ] enum E4401
  5984 ;;  ok              1    0        unsigned char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;		None               void
  5987 ;; Registers used:
  5988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5989 ;; Tracked objects:
  5990 ;;		On entry : F/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: FFFFFFF0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5994 ;;      Params:         0       6       0       0       0       0       0
  5995 ;;      Locals:         0       1       0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0
  5997 ;;      Totals:         0       7       0       0       0       0       0
  5998 ;;Total ram usage:        7 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    8
  6001 ;; This function calls:
  6002 ;;		_set_parameter
  6003 ;;		_get_parameter
  6004 ;;		_serialport_write
  6005 ;; This function is called by:
  6006 ;;		_syntax_string
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text21
  6011  001FBC                     __ptext21:
  6012                           	opt stack 0
  6013  001FBC                     _on_parameter_found:
  6014                           	opt stack 20
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;on_parameter_found@operation stored from wreg
  6018  001FBC  CFE8 F089          	movff	wreg,on_parameter_found@operation
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;on_parameter_found.c: 15: CHAR ok;
  6022                           ;on_parameter_found.c: 16: if (operation == PARSER_PARAMETER) {
  6023  001FC0  6789               	tstfsz	on_parameter_found@operation& (0+255),b
  6024  001FC2  D00D               	goto	l7943
  6025  001FC4  D006               	goto	l7941
  6026  001FC6                     l7935:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;on_parameter_found.c: 19: ok = set_parameter(p_id);
  6030  001FC6  5184               	movf	on_parameter_found@p_id& (0+255),w,b
  6031  001FC8  EF02  F00B         	goto	_set_parameter
  6032  001FCC                     l7937:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;on_parameter_found.c: 23: ok = get_parameter(p_id);
  6036  001FCC  5184               	movf	on_parameter_found@p_id& (0+255),w,b
  6037  001FCE  EF75  F00C         	goto	_get_parameter
  6038  001FD2                     l7941:
  6039                           
  6040                           ; BSR set to: 0
  6041  001FD2  5183               	movf	on_parameter_found@cmd_id& (0+255),w,b
  6042                           
  6043                           ; Switch size 1, requested type "space"
  6044                           ; Number of cases is 2, Range of values is 0 to 1
  6045                           ; switch strategies available:
  6046                           ; Name         Instructions Cycles
  6047                           ; simple_byte            7     4 (average)
  6048                           ;	Chosen strategy is simple_byte
  6049  001FD4  E0F8               	bz	l7935
  6050  001FD6  0A01               	xorlw	1	; case 1
  6051  001FD8  A4D8               	btfss	status,2,c
  6052  001FDA  0012               	return	
  6053  001FDC  D7F7               	goto	l7937
  6054  001FDE                     l7943:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;on_parameter_found.c: 31: else if (operation == PARSER_STOP) {
  6058  001FDE  5189               	movf	on_parameter_found@operation& (0+255),w,b
  6059  001FE0  0A02               	xorlw	2
  6060  001FE2  B4D8               	btfsc	status,2,c
  6061  001FE4  0012               	return	
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;on_parameter_found.c: 37: else if (operation == PARSER_ERROR) {
  6065  001FE6  5189               	movf	on_parameter_found@operation& (0+255),w,b
  6066  001FE8  0A03               	xorlw	3
  6067  001FEA  A4D8               	btfss	status,2,c
  6068  001FEC  0012               	return	
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;on_parameter_found.c: 38: serialport_write("err\n");
  6072  001FEE  0E7F               	movlw	high STR_28
  6073  001FF0  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  6074  001FF2  0EEF               	movlw	low STR_28
  6075  001FF4  6F7D               	movwf	?_serialport_write& (0+255),b
  6076  001FF6  EFF9  F00E         	goto	l7583	;wreg free
  6077  001FFA                     __end_of_on_parameter_found:
  6078                           	opt stack 0
  6079                           tosu	equ	0xFFF
  6080                           tosh	equ	0xFFE
  6081                           tosl	equ	0xFFD
  6082                           pclath	equ	0xFFA
  6083                           tblptru	equ	0xFF8
  6084                           tblptrh	equ	0xFF7
  6085                           tblptrl	equ	0xFF6
  6086                           tablat	equ	0xFF5
  6087                           prodh	equ	0xFF4
  6088                           prodl	equ	0xFF3
  6089                           intcon	equ	0xFF2
  6090                           indf0	equ	0xFEF
  6091                           postinc0	equ	0xFEE
  6092                           fsr0h	equ	0xFEA
  6093                           fsr0l	equ	0xFE9
  6094                           wreg	equ	0xFE8
  6095                           indf1	equ	0xFE7
  6096                           postinc1	equ	0xFE6
  6097                           postdec1	equ	0xFE5
  6098                           fsr1h	equ	0xFE2
  6099                           fsr1l	equ	0xFE1
  6100                           indf2	equ	0xFDF
  6101                           postinc2	equ	0xFDE
  6102                           postdec2	equ	0xFDD
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107 ;; *************** function _cla_add_value *****************
  6108 ;; Defined at:
  6109 ;;		line 33 in file "src/modules/classic_detector.c"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;  d               1    wreg     PTR volatile struct .
  6112 ;;		 -> cla_detector(21), 
  6113 ;;  val             2   12[BANK0 ] int 
  6114 ;;  zero            2   14[BANK0 ] int 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  d               1   24[BANK0 ] PTR volatile struct .
  6117 ;;		 -> cla_detector(21), 
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      unsigned char 
  6120 ;; Registers used:
  6121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6122 ;; Tracked objects:
  6123 ;;		On entry : F/0
  6124 ;;		On exit  : F/0
  6125 ;;		Unchanged: FFFFFFF0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6127 ;;      Params:         0       4       0       0       0       0       0
  6128 ;;      Locals:         0       5       0       0       0       0       0
  6129 ;;      Temps:          0       4       0       0       0       0       0
  6130 ;;      Totals:         0      13       0       0       0       0       0
  6131 ;;Total ram usage:       13 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    5
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_detection_task
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text22
  6142  000846                     __ptext22:
  6143                           	opt stack 0
  6144  000846                     _cla_add_value:
  6145                           	opt stack 24
  6146                           
  6147                           ;cla_add_value@d stored from wreg
  6148  000846  CFE8 F078          	movff	wreg,cla_add_value@d
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;classic_detector.c: 34: d->cur_v = ((val- zero)<0?(-(val- zero)):(val- zero));
  6152  00084A  516E               	movf	cla_add_value@zero& (0+255),w,b
  6153  00084C  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  6154  00084E  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6155  000850  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  6156  000852  0B80               	andlw	128
  6157  000854  E107               	bnz	l5583
  6158                           
  6159                           ; BSR set to: 0
  6160  000856  516E               	movf	cla_add_value@zero& (0+255),w,b
  6161  000858  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  6162  00085A  6F74               	movwf	_cla_add_value$1012& (0+255),b
  6163  00085C  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6164  00085E  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  6165  000860  6F75               	movwf	(_cla_add_value$1012+1)& (0+255),b
  6166  000862  D010               	goto	l5585
  6167  000864                     l5583:
  6168                           
  6169                           ; BSR set to: 0
  6170  000864  C06C  F070         	movff	cla_add_value@val,??_cla_add_value
  6171  000868  C06D  F071         	movff	cla_add_value@val+1,??_cla_add_value+1
  6172  00086C  516E               	movf	cla_add_value@zero& (0+255),w,b
  6173  00086E  5F70               	subwf	??_cla_add_value& (0+255),f,b
  6174  000870  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6175  000872  5B71               	subwfb	(??_cla_add_value+1)& (0+255),f,b
  6176  000874  1F70               	comf	??_cla_add_value& (0+255),f,b
  6177  000876  1F71               	comf	(??_cla_add_value+1)& (0+255),f,b
  6178  000878  4B70               	infsnz	??_cla_add_value& (0+255),f,b
  6179  00087A  2B71               	incf	(??_cla_add_value+1)& (0+255),f,b
  6180  00087C  C070  F074         	movff	??_cla_add_value,_cla_add_value$1012
  6181  000880  C071  F075         	movff	??_cla_add_value+1,_cla_add_value$1012+1
  6182  000884                     l5585:
  6183                           
  6184                           ; BSR set to: 0
  6185  000884  5178               	movf	cla_add_value@d& (0+255),w,b
  6186  000886  6ED9               	movwf	fsr2l,c
  6187  000888  6ADA               	clrf	fsr2h,c
  6188  00088A  C074  FFDE         	movff	_cla_add_value$1012,postinc2
  6189  00088E  C075  FFDD         	movff	_cla_add_value$1012+1,postdec2
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;classic_detector.c: 35: d->over_trig_value = (d->cur_v > d->config.sig_trig) ? (d->cur_
      +                          v - d->config.sig_trig):0;
  6193  000892  5178               	movf	cla_add_value@d& (0+255),w,b
  6194  000894  6ED9               	movwf	fsr2l,c
  6195  000896  6ADA               	clrf	fsr2h,c
  6196  000898  5178               	movf	cla_add_value@d& (0+255),w,b
  6197  00089A  6EE1               	movwf	fsr1l,c
  6198  00089C  6AE2               	clrf	fsr1h,c
  6199  00089E  0E13               	movlw	19
  6200  0008A0  D8A8               	call	PL14	;call to abstracted procedure
  6201  0008A2  E102               	bnz	u5725
  6202  0008A4  50DF               	movf	indf2,w,c
  6203  0008A6  5CE7               	subwf	indf1,w,c
  6204  0008A8                     u5725:
  6205  0008A8  E303               	bnc	l5591
  6206                           
  6207                           ; BSR set to: 0
  6208  0008AA  6B76               	clrf	_cla_add_value$1013& (0+255),b	;volatile
  6209  0008AC  6B77               	clrf	(_cla_add_value$1013+1)& (0+255),b	;volatile
  6210  0008AE  D017               	goto	l749
  6211  0008B0                     l5591:
  6212                           
  6213                           ; BSR set to: 0
  6214  0008B0  5178               	movf	cla_add_value@d& (0+255),w,b
  6215  0008B2  6ED9               	movwf	fsr2l,c
  6216  0008B4  6ADA               	clrf	fsr2h,c
  6217  0008B6  0E13               	movlw	19
  6218  0008B8  26D9               	addwf	fsr2l,f,c
  6219  0008BA  6ADA               	clrf	fsr2h,c
  6220  0008BC  CFDE F070          	movff	postinc2,??_cla_add_value
  6221  0008C0  CFDD F071          	movff	postdec2,??_cla_add_value+1
  6222  0008C4  5178               	movf	cla_add_value@d& (0+255),w,b
  6223  0008C6  6ED9               	movwf	fsr2l,c
  6224  0008C8  6ADA               	clrf	fsr2h,c
  6225  0008CA  CFDE F072          	movff	postinc2,??_cla_add_value+2
  6226  0008CE  CFDD F073          	movff	postdec2,??_cla_add_value+3
  6227  0008D2  5170               	movf	??_cla_add_value& (0+255),w,b
  6228  0008D4  5D72               	subwf	(??_cla_add_value+2)& (0+255),w,b
  6229  0008D6  6F76               	movwf	_cla_add_value$1013& (0+255),b	;volatile
  6230  0008D8  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  6231  0008DA  5973               	subwfb	(??_cla_add_value+3)& (0+255),w,b
  6232  0008DC  6F77               	movwf	(_cla_add_value$1013+1)& (0+255),b	;volatile
  6233  0008DE                     l749:
  6234                           
  6235                           ; BSR set to: 0
  6236  0008DE  D8B2               	call	PL42	;call to abstracted procedure
  6237  0008E0  C076  FFDE         	movff	_cla_add_value$1013,postinc2	;volatile
  6238  0008E4  C077  FFDD         	movff	_cla_add_value$1013+1,postdec2	;volatile
  6239                           
  6240                           ;classic_detector.c: 36: if (d->status.over_trig)
  6241  0008E8  D88F               	call	PL16	;call to abstracted procedure
  6242  0008EA  50DF               	movf	indf2,w,c
  6243  0008EC  6F70               	movwf	??_cla_add_value& (0+255),b
  6244  0008EE  A570               	btfss	??_cla_add_value& (0+255),2,b
  6245  0008F0  D059               	goto	l5613
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;classic_detector.c: 37: {
  6249                           ;classic_detector.c: 38: d->sig_count++;
  6250  0008F2  5178               	movf	cla_add_value@d& (0+255),w,b
  6251  0008F4  6ED9               	movwf	fsr2l,c
  6252  0008F6  6ADA               	clrf	fsr2h,c
  6253  0008F8  0E08               	movlw	8
  6254  0008FA  26D9               	addwf	fsr2l,f,c
  6255  0008FC  6ADA               	clrf	fsr2h,c
  6256  0008FE  2ADE               	incf	postinc2,f,c
  6257  000900  0E00               	movlw	0
  6258  000902  22DD               	addwfc	postdec2,f,c
  6259                           
  6260                           ;classic_detector.c: 39: d->sig_sum += d->over_trig_value;
  6261  000904  D89F               	call	PL42	;call to abstracted procedure
  6262  000906  CFDE F070          	movff	postinc2,??_cla_add_value
  6263  00090A  CFDD F071          	movff	postdec2,??_cla_add_value+1
  6264  00090E  D883               	call	PL18	;call to abstracted procedure
  6265  000910  5170               	movf	??_cla_add_value& (0+255),w,b
  6266  000912  26DE               	addwf	postinc2,f,c
  6267  000914  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  6268  000916  22DD               	addwfc	postdec2,f,c
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;classic_detector.c: 40: if (d->sig_sum > d->config.sig_sum_trig && d->status.alarm == F
      +                          ALSE)
  6272  000918  D87E               	call	PL18	;call to abstracted procedure
  6273  00091A  5178               	movf	cla_add_value@d& (0+255),w,b
  6274  00091C  6EE1               	movwf	fsr1l,c
  6275  00091E  6AE2               	clrf	fsr1h,c
  6276  000920  0E11               	movlw	17
  6277  000922  D867               	call	PL14	;call to abstracted procedure
  6278  000924  E102               	bnz	u5745
  6279  000926  50DF               	movf	indf2,w,c
  6280  000928  5CE7               	subwf	indf1,w,c
  6281  00092A                     u5745:
  6282  00092A  E22C               	bc	l5609
  6283                           
  6284                           ; BSR set to: 0
  6285  00092C  D86D               	call	PL16	;call to abstracted procedure
  6286  00092E  50DF               	movf	indf2,w,c
  6287  000930  6F70               	movwf	??_cla_add_value& (0+255),b
  6288  000932  B170               	btfsc	??_cla_add_value& (0+255),0,b
  6289  000934  D027               	goto	l5609
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;classic_detector.c: 41: {
  6293                           ;classic_detector.c: 42: d->status.over_trig = FALSE;
  6294  000936  5178               	movf	cla_add_value@d& (0+255),w,b
  6295  000938  6ED9               	movwf	fsr2l,c
  6296  00093A  6ADA               	clrf	fsr2h,c
  6297  00093C  0E0E               	movlw	14
  6298  00093E  26D9               	addwf	fsr2l,f,c
  6299  000940  6ADA               	clrf	fsr2h,c
  6300  000942  0EFB               	movlw	-5
  6301  000944  16DF               	andwf	223,f,c
  6302                           
  6303                           ;classic_detector.c: 43: d->status.alarm=TRUE;
  6304  000946  D860               	call	PL16	;call to abstracted procedure
  6305  000948  0E01               	movlw	1
  6306  00094A  12DF               	iorwf	223,f,c
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;classic_detector.c: 44: d->last_sig_count = d->sig_count;
  6310  00094C  5178               	movf	cla_add_value@d& (0+255),w,b
  6311  00094E  6ED9               	movwf	fsr2l,c
  6312  000950  D871               	call	PL24	;call to abstracted procedure
  6313  000952  0E0C               	movlw	12
  6314  000954  26E1               	addwf	fsr1l,f,c
  6315  000956  6AE2               	clrf	fsr1h,c
  6316  000958  CFDE FFE6          	movff	postinc2,postinc1
  6317  00095C  CFDD FFE5          	movff	postdec2,postdec1
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;classic_detector.c: 45: d->last_sig_sum = d->sig_sum;
  6321  000960  D85A               	call	PL18	;call to abstracted procedure
  6322  000962  5178               	movf	cla_add_value@d& (0+255),w,b
  6323  000964  6EE1               	movwf	fsr1l,c
  6324  000966  6AE2               	clrf	fsr1h,c
  6325  000968  0E0A               	movlw	10
  6326  00096A  26E1               	addwf	fsr1l,f,c
  6327  00096C  6AE2               	clrf	fsr1h,c
  6328  00096E  CFDE FFE6          	movff	postinc2,postinc1
  6329  000972  CFDD FFE5          	movff	postdec2,postdec1
  6330                           
  6331                           ;classic_detector.c: 46: d->sig_count = 0;
  6332  000976  5178               	movf	cla_add_value@d& (0+255),w,b
  6333  000978  D855               	call	PL20	;call to abstracted procedure
  6334                           
  6335                           ;classic_detector.c: 47: d->sig_sum = 0;
  6336  00097A  D84D               	call	PL18	;call to abstracted procedure
  6337  00097C  0E00               	movlw	0
  6338  00097E  6EDE               	movwf	postinc2,c
  6339  000980  6EDD               	movwf	postdec2,c
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;classic_detector.c: 48: return TRUE;
  6343  000982  0C01               	retlw	1
  6344  000984                     l5609:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;classic_detector.c: 49: }
  6348                           ;classic_detector.c: 51: if (d->sig_count > d->config.sig_max_count)
  6349  000984  5178               	movf	cla_add_value@d& (0+255),w,b
  6350  000986  6ED9               	movwf	fsr2l,c
  6351  000988  D855               	call	PL24	;call to abstracted procedure
  6352  00098A  0E0F               	movlw	15
  6353  00098C  D832               	call	PL14	;call to abstracted procedure
  6354  00098E  E102               	bnz	u5765
  6355  000990  50DF               	movf	indf2,w,c
  6356  000992  5CE7               	subwf	indf1,w,c
  6357  000994                     u5765:
  6358  000994  E22D               	bc	l5617
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;classic_detector.c: 52: {
  6362                           ;classic_detector.c: 53: d->status.over_trig = FALSE;
  6363  000996  D838               	call	PL16	;call to abstracted procedure
  6364  000998  0EFB               	movlw	-5
  6365  00099A  16DF               	andwf	223,f,c
  6366                           
  6367                           ;classic_detector.c: 54: d->status.alarm = FALSE;
  6368  00099C  D835               	call	PL16	;call to abstracted procedure
  6369  00099E  0EFE               	movlw	-2
  6370  0009A0  16DF               	andwf	223,f,c
  6371  0009A2  0C00               	retlw	0
  6372  0009A4                     l5613:
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;classic_detector.c: 59: else if (d->over_trig_value > d->config.sig_trig)
  6376  0009A4  D84F               	call	PL42	;call to abstracted procedure
  6377  0009A6  5178               	movf	cla_add_value@d& (0+255),w,b
  6378  0009A8  6EE1               	movwf	fsr1l,c
  6379  0009AA  6AE2               	clrf	fsr1h,c
  6380  0009AC  0E13               	movlw	19
  6381  0009AE  D821               	call	PL14	;call to abstracted procedure
  6382  0009B0  E102               	bnz	u5775
  6383  0009B2  50DF               	movf	indf2,w,c
  6384  0009B4  5CE7               	subwf	indf1,w,c
  6385  0009B6                     u5775:
  6386  0009B6  E21C               	bc	l5617
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;classic_detector.c: 60: {
  6390                           ;classic_detector.c: 61: d->status.over_trig = TRUE;
  6391  0009B8  D827               	call	PL16	;call to abstracted procedure
  6392  0009BA  0E04               	movlw	4
  6393  0009BC  12DF               	iorwf	223,f,c
  6394                           
  6395                           ;classic_detector.c: 62: d->status.alarm = FALSE;
  6396  0009BE  D824               	call	PL16	;call to abstracted procedure
  6397  0009C0  0EFE               	movlw	-2
  6398  0009C2  16DF               	andwf	223,f,c
  6399                           
  6400                           ;classic_detector.c: 63: d->last_sig_count = 0;
  6401  0009C4  5178               	movf	cla_add_value@d& (0+255),w,b
  6402  0009C6  6ED9               	movwf	fsr2l,c
  6403  0009C8  6ADA               	clrf	fsr2h,c
  6404  0009CA  0E0C               	movlw	12
  6405  0009CC  26D9               	addwf	fsr2l,f,c
  6406  0009CE  6ADA               	clrf	fsr2h,c
  6407  0009D0  6ADE               	clrf	postinc2,c
  6408  0009D2  6ADD               	clrf	postdec2,c
  6409                           
  6410                           ;classic_detector.c: 64: d->last_sig_sum = 0;
  6411  0009D4  5178               	movf	cla_add_value@d& (0+255),w,b
  6412  0009D6  6ED9               	movwf	fsr2l,c
  6413  0009D8  6ADA               	clrf	fsr2h,c
  6414  0009DA  0E0A               	movlw	10
  6415  0009DC  26D9               	addwf	fsr2l,f,c
  6416  0009DE  6ADA               	clrf	fsr2h,c
  6417  0009E0  6ADE               	clrf	postinc2,c
  6418  0009E2  6ADD               	clrf	postdec2,c
  6419                           
  6420                           ;classic_detector.c: 65: d->sig_count = 0;
  6421  0009E4  5178               	movf	cla_add_value@d& (0+255),w,b
  6422  0009E6  D81E               	call	PL20	;call to abstracted procedure
  6423                           
  6424                           ;classic_detector.c: 66: d->sig_sum = 0;
  6425  0009E8  D816               	call	PL18	;call to abstracted procedure
  6426  0009EA  0E00               	movlw	0
  6427  0009EC  6EDE               	movwf	postinc2,c
  6428  0009EE  6EDD               	movwf	postdec2,c
  6429  0009F0                     l5617:
  6430                           
  6431                           ; BSR set to: 0
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;classic_detector.c: 67: }
  6435                           ;classic_detector.c: 68: return FALSE;
  6436  0009F0  0C00               	retlw	0
  6437  0009F2                     __end_of_cla_add_value:
  6438                           	opt stack 0
  6439  0009F2                     PL14:
  6440                           	opt stack 24
  6441  0009F2  26E1               	addwf	fsr1l,f,c
  6442  0009F4  6AE2               	clrf	fsr1h,c
  6443  0009F6  52E6               	movf	postinc1,f,c
  6444  0009F8  52DE               	movf	postinc2,f,c
  6445  0009FA  50E5               	movf	postdec1,w,c
  6446  0009FC  0A80               	xorlw	128
  6447  0009FE  6F70               	movwf	??_cla_add_value& (0+255),b
  6448  000A00  50DD               	movf	postdec2,w,c
  6449  000A02  0A80               	xorlw	128
  6450  000A04  5D70               	subwf	??_cla_add_value& (0+255),w,b
  6451  000A06  0012               	return	
  6452  000A08                     __end_ofPL14:
  6453                           	opt stack 0
  6454  000A08                     PL16:
  6455                           	opt stack 24
  6456  000A08  5178               	movf	cla_add_value@d& (0+255),w,b
  6457  000A0A  6ED9               	movwf	fsr2l,c
  6458  000A0C  6ADA               	clrf	fsr2h,c
  6459  000A0E  0E0E               	movlw	14
  6460  000A10  26D9               	addwf	fsr2l,f,c
  6461  000A12  6ADA               	clrf	fsr2h,c
  6462  000A14  0012               	return	
  6463  000A16                     __end_ofPL16:
  6464                           	opt stack 0
  6465  000A16                     PL18:
  6466                           	opt stack 24
  6467  000A16  5178               	movf	cla_add_value@d& (0+255),w,b
  6468  000A18  6ED9               	movwf	fsr2l,c
  6469  000A1A  6ADA               	clrf	fsr2h,c
  6470  000A1C  0E06               	movlw	6
  6471  000A1E  26D9               	addwf	fsr2l,f,c
  6472  000A20  6ADA               	clrf	fsr2h,c
  6473  000A22  0012               	return	
  6474  000A24                     __end_ofPL18:
  6475                           	opt stack 0
  6476  000A24                     PL20:
  6477                           	opt stack 24
  6478  000A24  6ED9               	movwf	fsr2l,c
  6479  000A26  6ADA               	clrf	fsr2h,c
  6480  000A28  0E08               	movlw	8
  6481  000A2A  26D9               	addwf	fsr2l,f,c
  6482  000A2C  6ADA               	clrf	fsr2h,c
  6483  000A2E  6ADE               	clrf	postinc2,c
  6484  000A30  6ADD               	clrf	postdec2,c
  6485  000A32  0012               	return	
  6486  000A34                     __end_ofPL20:
  6487                           	opt stack 0
  6488  000A34                     PL24:
  6489                           	opt stack 24
  6490  000A34  6ADA               	clrf	fsr2h,c
  6491  000A36  0E08               	movlw	8
  6492  000A38  26D9               	addwf	fsr2l,f,c
  6493  000A3A  6ADA               	clrf	fsr2h,c
  6494  000A3C  5178               	movf	cla_add_value@d& (0+255),w,b
  6495  000A3E  6EE1               	movwf	fsr1l,c
  6496  000A40  6AE2               	clrf	fsr1h,c
  6497  000A42  0012               	return	
  6498  000A44                     __end_ofPL24:
  6499                           	opt stack 0
  6500  000A44                     PL42:
  6501                           	opt stack 24
  6502  000A44  5178               	movf	cla_add_value@d& (0+255),w,b
  6503  000A46  6ED9               	movwf	fsr2l,c
  6504  000A48  6ADA               	clrf	fsr2h,c
  6505  000A4A  0E04               	movlw	4
  6506  000A4C  26D9               	addwf	fsr2l,f,c
  6507  000A4E  6ADA               	clrf	fsr2h,c
  6508  000A50  0012               	return	
  6509  000A52                     __end_ofPL42:
  6510                           	opt stack 0
  6511                           tosu	equ	0xFFF
  6512                           tosh	equ	0xFFE
  6513                           tosl	equ	0xFFD
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           indf0	equ	0xFEF
  6523                           postinc0	equ	0xFEE
  6524                           fsr0h	equ	0xFEA
  6525                           fsr0l	equ	0xFE9
  6526                           wreg	equ	0xFE8
  6527                           indf1	equ	0xFE7
  6528                           postinc1	equ	0xFE6
  6529                           postdec1	equ	0xFE5
  6530                           fsr1h	equ	0xFE2
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function _pd_add_value *****************
  6540 ;; Defined at:
  6541 ;;		line 33 in file "src/modules/peak_detector.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;  d               2   20[BANK0 ] PTR volatile struct .
  6544 ;;		 -> pd_detector(101), 
  6545 ;;  val             2   22[BANK0 ] int 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  tmp             2   40[BANK0 ] int 
  6548 ;;  i               1   42[BANK0 ] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  1    wreg      unsigned char 
  6551 ;; Registers used:
  6552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : F/0
  6555 ;;		On exit  : F/0
  6556 ;;		Unchanged: FFFFFFF0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6558 ;;      Params:         0       4       0       0       0       0       0
  6559 ;;      Locals:         0      13       0       0       0       0       0
  6560 ;;      Temps:          0       6       0       0       0       0       0
  6561 ;;      Totals:         0      23       0       0       0       0       0
  6562 ;;Total ram usage:       23 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    6
  6565 ;; This function calls:
  6566 ;;		___lbmod
  6567 ;;		___awdiv
  6568 ;;		___wmul
  6569 ;;		___awmod
  6570 ;; This function is called by:
  6571 ;;		_detection_task
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text23
  6576  0000F4                     __ptext23:
  6577                           	opt stack 0
  6578  0000F4                     _pd_add_value:
  6579                           	opt stack 23
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;peak_detector.c: 34: IDX8 i;
  6583                           ;peak_detector.c: 35: INT16 tmp;
  6584                           ;peak_detector.c: 37: d->last_v_idx %= d->config.lval_cnt;
  6585                           
  6586                           ; BSR set to: 0
  6587  0000F4  EE20 F028          	lfsr	2,40
  6588  0000F8  5174               	movf	pd_add_value@d& (0+255),w,b
  6589  0000FA  26D9               	addwf	fsr2l,f,c
  6590  0000FC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6591  0000FE  22DA               	addwfc	fsr2h,f,c
  6592  000100  EE10 F063          	lfsr	1,99
  6593  000104  5174               	movf	pd_add_value@d& (0+255),w,b
  6594  000106  26E1               	addwf	fsr1l,f,c
  6595  000108  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6596  00010A  22E2               	addwfc	fsr1h,f,c
  6597  00010C  50E7               	movf	indf1,w,c
  6598  00010E  6F6C               	movwf	?___lbmod& (0+255),b
  6599  000110  EE10 F028          	lfsr	1,40
  6600  000114  5174               	movf	pd_add_value@d& (0+255),w,b
  6601  000116  26E1               	addwf	fsr1l,f,c
  6602  000118  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6603  00011A  22E2               	addwfc	fsr1h,f,c
  6604  00011C  50E7               	movf	indf1,w,c
  6605  00011E  EC81  F010         	call	___lbmod
  6606  000122  6EDF               	movwf	indf2,c
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;peak_detector.c: 38: d->last_v_buf[d->last_v_idx] = (INT16) val;
  6610  000124  EE20 F028          	lfsr	2,40
  6611  000128  5174               	movf	pd_add_value@d& (0+255),w,b
  6612  00012A  26D9               	addwf	fsr2l,f,c
  6613  00012C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6614  00012E  22DA               	addwfc	fsr2h,f,c
  6615  000130  50DF               	movf	indf2,w,c
  6616  000132  DA52               	call	PL62	;call to abstracted procedure
  6617  000134  C076  FFDE         	movff	pd_add_value@val,postinc2
  6618  000138  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;peak_detector.c: 39: d->last_v_idx++;
  6622  00013C  EE20 F028          	lfsr	2,40
  6623  000140  5174               	movf	pd_add_value@d& (0+255),w,b
  6624  000142  26D9               	addwf	fsr2l,f,c
  6625  000144  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6626  000146  22DA               	addwfc	fsr2h,f,c
  6627  000148  2ADF               	incf	indf2,f,c
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;peak_detector.c: 40: d->last_v = d->cur_v;
  6631  00014A  EE20 F058          	lfsr	2,88
  6632  00014E  5174               	movf	pd_add_value@d& (0+255),w,b
  6633  000150  26D9               	addwf	fsr2l,f,c
  6634  000152  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6635  000154  22DA               	addwfc	fsr2h,f,c
  6636  000156  EE10 F029          	lfsr	1,41
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;peak_detector.c: 41: d->cur_v = d->next_v;
  6640  00015A  D9ED               	call	PL26	;call to abstracted procedure
  6641  00015C  EE10 F058          	lfsr	1,88
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;peak_detector.c: 42: d->next_v = val;
  6645  000160  D9EA               	call	PL26	;call to abstracted procedure
  6646  000162  C076  FFDE         	movff	pd_add_value@val,postinc2
  6647  000166  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;peak_detector.c: 44: tmp = 0;
  6651  00016A  6B88               	clrf	pd_add_value@tmp& (0+255),b
  6652  00016C  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;peak_detector.c: 45: for (i = 0; i < d->config.lval_cnt; i++) {
  6656  00016E  6B8A               	clrf	pd_add_value@i& (0+255),b
  6657  000170  D003               	goto	l7977
  6658  000172                     l7973:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;peak_detector.c: 46: tmp += d->last_v_buf[i];
  6662  000172  518A               	movf	pd_add_value@i& (0+255),w,b
  6663  000174  DA31               	call	PL62	;call to abstracted procedure
  6664                           
  6665                           ; BSR set to: 0
  6666  000176  DA3F               	call	PL76	;call to abstracted procedure
  6667  000178                     l7977:
  6668                           
  6669                           ; BSR set to: 0
  6670  000178  D9ED               	call	PL32	;call to abstracted procedure
  6671  00017A  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6672  00017C  E3FA               	bnc	l7973
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;peak_detector.c: 47: }
  6676                           ;peak_detector.c: 48: d->avlv = tmp/d->config.lval_cnt;
  6677  00017E  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  6678  000182  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  6679  000186  D9E6               	call	PL32	;call to abstracted procedure
  6680  000188  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  6681  00018A  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  6682  00018C  EC31  F00D         	call	___awdiv	;wreg free
  6683  000190  EE20 F056          	lfsr	2,86
  6684  000194  D9FD               	call	PL44	;call to abstracted procedure
  6685                           
  6686                           ;peak_detector.c: 50: d->wval = d->cur_v * d->cur_v - d->avlv * d->next_v;
  6687  000196  EE20 F058          	lfsr	2,88
  6688  00019A  5174               	movf	pd_add_value@d& (0+255),w,b
  6689  00019C  26D9               	addwf	fsr2l,f,c
  6690  00019E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6691  0001A0  22DA               	addwfc	fsr2h,f,c
  6692  0001A2  CFDE F06C          	movff	postinc2,?___wmul
  6693  0001A6  CFDD F06D          	movff	postdec2,?___wmul+1
  6694  0001AA  EE20 F058          	lfsr	2,88
  6695  0001AE  5174               	movf	pd_add_value@d& (0+255),w,b
  6696  0001B0  26D9               	addwf	fsr2l,f,c
  6697  0001B2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6698  0001B4  22DA               	addwfc	fsr2h,f,c
  6699  0001B6  CFDE F06E          	movff	postinc2,?___wmul+2
  6700  0001BA  CFDD F06F          	movff	postdec2,?___wmul+3
  6701  0001BE  EC6B  F010         	call	___wmul	;wreg free
  6702  0001C2  C06C  F078         	movff	?___wmul,??_pd_add_value
  6703  0001C6  C06D  F079         	movff	?___wmul+1,??_pd_add_value+1
  6704  0001CA  EE20 F056          	lfsr	2,86
  6705  0001CE  5174               	movf	pd_add_value@d& (0+255),w,b
  6706  0001D0  26D9               	addwf	fsr2l,f,c
  6707  0001D2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6708  0001D4  22DA               	addwfc	fsr2h,f,c
  6709  0001D6  CFDE F06C          	movff	postinc2,?___wmul
  6710  0001DA  CFDD F06D          	movff	postdec2,?___wmul+1
  6711  0001DE  EE20 F05A          	lfsr	2,90
  6712  0001E2  5174               	movf	pd_add_value@d& (0+255),w,b
  6713  0001E4  26D9               	addwf	fsr2l,f,c
  6714  0001E6  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6715  0001E8  22DA               	addwfc	fsr2h,f,c
  6716  0001EA  CFDE F06E          	movff	postinc2,?___wmul+2
  6717  0001EE  CFDD F06F          	movff	postdec2,?___wmul+3
  6718  0001F2  EC6B  F010         	call	___wmul	;wreg free
  6719  0001F6  516C               	movf	?___wmul& (0+255),w,b
  6720  0001F8  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6721  0001FA  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6722  0001FC  516D               	movf	(?___wmul+1)& (0+255),w,b
  6723  0001FE  5979               	subwfb	(??_pd_add_value+1)& (0+255),w,b
  6724  000200  6F7B               	movwf	(??_pd_add_value+3)& (0+255),b
  6725  000202  EE20 F05C          	lfsr	2,92
  6726  000206  5174               	movf	pd_add_value@d& (0+255),w,b
  6727  000208  26D9               	addwf	fsr2l,f,c
  6728  00020A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6729  00020C  22DA               	addwfc	fsr2h,f,c
  6730  00020E  C07A  FFDE         	movff	??_pd_add_value+2,postinc2
  6731  000212  C07B  FFDD         	movff	??_pd_add_value+3,postdec2
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;peak_detector.c: 52: if ((((d->wval)<0?(-(d->wval)):(d->wval))) > d->config.wtrigger) {
  6735  000216  D976               	call	PL8	;call to abstracted procedure
  6736  000218  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6737  00021A  D00B               	goto	l7985
  6738                           
  6739                           ; BSR set to: 0
  6740  00021C  EE20 F05C          	lfsr	2,92
  6741  000220  5174               	movf	pd_add_value@d& (0+255),w,b
  6742  000222  26D9               	addwf	fsr2l,f,c
  6743  000224  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6744  000226  22DA               	addwfc	fsr2h,f,c
  6745  000228  CFDE F07E          	movff	postinc2,_pd_add_value$1126	;volatile
  6746  00022C  CFDD F07F          	movff	postdec2,_pd_add_value$1126+1	;volatile
  6747  000230  D00B               	goto	l785
  6748  000232                     l7985:
  6749                           
  6750                           ; BSR set to: 0
  6751  000232  EE20 F05C          	lfsr	2,92
  6752  000236  5174               	movf	pd_add_value@d& (0+255),w,b
  6753  000238  26D9               	addwf	fsr2l,f,c
  6754  00023A  D95B               	call	PL6	;call to abstracted procedure
  6755  00023C  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6756  00023E  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6757  000240  C078  F07E         	movff	??_pd_add_value,_pd_add_value$1126	;volatile
  6758  000244  C079  F07F         	movff	??_pd_add_value+1,_pd_add_value$1126+1	;volatile
  6759  000248                     l785:
  6760                           
  6761                           ; BSR set to: 0
  6762  000248  EE20 F05F          	lfsr	2,95
  6763  00024C  5174               	movf	pd_add_value@d& (0+255),w,b
  6764  00024E  26D9               	addwf	fsr2l,f,c
  6765  000250  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6766  000252  22DA               	addwfc	fsr2h,f,c
  6767  000254  CFDE F078          	movff	postinc2,??_pd_add_value
  6768  000258  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6769  00025C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6770  00025E  0A80               	xorlw	128
  6771  000260  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6772  000262  517E               	movf	_pd_add_value$1126& (0+255),w,b	;volatile
  6773  000264  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6774  000266  517F               	movf	(_pd_add_value$1126+1)& (0+255),w,b	;volatile
  6775  000268  0A80               	xorlw	128
  6776  00026A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6777  00026C  E216               	bc	l7997
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;peak_detector.c: 53: if (!d->status.alarm && !d->status.firststart) {
  6781  00026E  D9A3               	call	PL56	;call to abstracted procedure
  6782  000270  B178               	btfsc	??_pd_add_value& (0+255),0,b
  6783  000272  D013               	goto	l7997
  6784                           
  6785                           ; BSR set to: 0
  6786  000274  EE20 F05E          	lfsr	2,94
  6787  000278  5174               	movf	pd_add_value@d& (0+255),w,b
  6788  00027A  26D9               	addwf	fsr2l,f,c
  6789  00027C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6790  00027E  22DA               	addwfc	fsr2h,f,c
  6791  000280  50DF               	movf	indf2,w,c
  6792  000282  6F78               	movwf	??_pd_add_value& (0+255),b
  6793  000284  B578               	btfsc	??_pd_add_value& (0+255),2,b
  6794  000286  D009               	goto	l7997
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;peak_detector.c: 54: d->status.alarm = 1;
  6798  000288  EE20 F05E          	lfsr	2,94
  6799  00028C  5174               	movf	pd_add_value@d& (0+255),w,b
  6800  00028E  26D9               	addwf	fsr2l,f,c
  6801  000290  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6802  000292  22DA               	addwfc	fsr2h,f,c
  6803  000294  0E01               	movlw	1
  6804  000296  12DF               	iorwf	223,f,c
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;peak_detector.c: 55: return TRUE;
  6808  000298  0C01               	retlw	1
  6809  00029A                     l7997:
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;peak_detector.c: 56: }
  6813                           ;peak_detector.c: 57: }
  6814                           ;peak_detector.c: 58: if (d->status.alarm && (((d->wval)<0?(-(d->wval)):(d->wval))) < (1
      +                          000)
  6815                           ;peak_detector.c: 59: && ((d->cur_v - d->ref_v)<0?(-(d->cur_v - d->ref_v)):(d->cur_v - d
      +                          ->ref_v)) < d->config.tolerance
  6816                           ;peak_detector.c: 60: && ((d->next_v - d->ref_v)<0?(-(d->next_v - d->ref_v)):(d->next_v 
      +                          - d->ref_v)) < d->config.tolerance) {
  6817  00029A  D98D               	call	PL56	;call to abstracted procedure
  6818  00029C  A178               	btfss	??_pd_add_value& (0+255),0,b
  6819  00029E  D09B               	goto	l788
  6820                           
  6821                           ; BSR set to: 0
  6822  0002A0  EE20 F05C          	lfsr	2,92
  6823  0002A4  5174               	movf	pd_add_value@d& (0+255),w,b
  6824  0002A6  26D9               	addwf	fsr2l,f,c
  6825  0002A8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6826  0002AA  22DA               	addwfc	fsr2h,f,c
  6827  0002AC  CFDE F078          	movff	postinc2,??_pd_add_value
  6828  0002B0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6829  0002B4  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6830  0002B6  D00B               	goto	l8003
  6831                           
  6832                           ; BSR set to: 0
  6833  0002B8  EE20 F05C          	lfsr	2,92
  6834  0002BC  5174               	movf	pd_add_value@d& (0+255),w,b
  6835  0002BE  26D9               	addwf	fsr2l,f,c
  6836  0002C0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6837  0002C2  22DA               	addwfc	fsr2h,f,c
  6838  0002C4  CFDE F080          	movff	postinc2,_pd_add_value$1127	;volatile
  6839  0002C8  CFDD F081          	movff	postdec2,_pd_add_value$1127+1	;volatile
  6840  0002CC  D00B               	goto	l8005
  6841  0002CE                     l8003:
  6842                           
  6843                           ; BSR set to: 0
  6844  0002CE  EE20 F05C          	lfsr	2,92
  6845  0002D2  5174               	movf	pd_add_value@d& (0+255),w,b
  6846  0002D4  26D9               	addwf	fsr2l,f,c
  6847  0002D6  D90D               	call	PL6	;call to abstracted procedure
  6848  0002D8  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6849  0002DA  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6850  0002DC  C078  F080         	movff	??_pd_add_value,_pd_add_value$1127	;volatile
  6851  0002E0  C079  F081         	movff	??_pd_add_value+1,_pd_add_value$1127+1	;volatile
  6852  0002E4                     l8005:
  6853                           
  6854                           ; BSR set to: 0
  6855  0002E4  5181               	movf	(_pd_add_value$1127+1)& (0+255),w,b	;volatile
  6856  0002E6  0A80               	xorlw	128
  6857  0002E8  0F7D               	addlw	-131
  6858  0002EA  0EE8               	movlw	232
  6859  0002EC  B4D8               	btfsc	status,2,c
  6860  0002EE  5D80               	subwf	_pd_add_value$1127& (0+255),w,b	;volatile
  6861  0002F0  E272               	bc	l788
  6862                           
  6863                           ; BSR set to: 0
  6864  0002F2  EE20 F054          	lfsr	2,84
  6865  0002F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6866  0002F8  D8DE               	call	PL2	;call to abstracted procedure
  6867  0002FA  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6868  0002FC  D982               	call	PL88	;call to abstracted procedure
  6869  0002FE  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6870  000300  D009               	goto	l8011
  6871                           
  6872                           ; BSR set to: 0
  6873  000302  EE20 F054          	lfsr	2,84
  6874  000306  5174               	movf	pd_add_value@d& (0+255),w,b
  6875  000308  D8D6               	call	PL2	;call to abstracted procedure
  6876  00030A  6F82               	movwf	_pd_add_value$1128& (0+255),b	;volatile
  6877  00030C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6878  00030E  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6879  000310  6F83               	movwf	(_pd_add_value$1128+1)& (0+255),b	;volatile
  6880  000312  D00B               	goto	l796
  6881  000314                     l8011:
  6882                           
  6883                           ; BSR set to: 0
  6884  000314  EE20 F054          	lfsr	2,84
  6885  000318  5174               	movf	pd_add_value@d& (0+255),w,b
  6886  00031A  D8CD               	call	PL2	;call to abstracted procedure
  6887  00031C  D965               	call	PL72	;call to abstracted procedure
  6888  00031E  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6889  000320  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6890  000322  C07C  F082         	movff	??_pd_add_value+4,_pd_add_value$1128	;volatile
  6891  000326  C07D  F083         	movff	??_pd_add_value+5,_pd_add_value$1128+1	;volatile
  6892  00032A                     l796:
  6893                           
  6894                           ; BSR set to: 0
  6895  00032A  D91C               	call	PL36	;call to abstracted procedure
  6896  00032C  5183               	movf	(_pd_add_value$1128+1)& (0+255),w,b	;volatile
  6897  00032E  0A80               	xorlw	128
  6898  000330  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6899  000332  5178               	movf	??_pd_add_value& (0+255),w,b
  6900  000334  5D82               	subwf	_pd_add_value$1128& (0+255),w,b	;volatile
  6901  000336  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6902  000338  0A80               	xorlw	128
  6903  00033A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6904  00033C  E24C               	bc	l788
  6905                           
  6906                           ; BSR set to: 0
  6907  00033E  D8ED               	call	PL12	;call to abstracted procedure
  6908  000340  D8CE               	call	PL4	;call to abstracted procedure
  6909  000342  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6910  000344  D95E               	call	PL88	;call to abstracted procedure
  6911  000346  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6912  000348  D013               	goto	l8017
  6913                           
  6914                           ; BSR set to: 0
  6915  00034A  EE20 F054          	lfsr	2,84
  6916  00034E  5174               	movf	pd_add_value@d& (0+255),w,b
  6917  000350  26D9               	addwf	fsr2l,f,c
  6918  000352  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6919  000354  22DA               	addwfc	fsr2h,f,c
  6920  000356  CFDE F078          	movff	postinc2,??_pd_add_value
  6921  00035A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6922  00035E  EE20 F05A          	lfsr	2,90
  6923  000362  5174               	movf	pd_add_value@d& (0+255),w,b
  6924  000364  D8BC               	call	PL4	;call to abstracted procedure
  6925  000366  6F84               	movwf	_pd_add_value$1129& (0+255),b	;volatile
  6926  000368  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6927  00036A  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6928  00036C  6F85               	movwf	(_pd_add_value$1129+1)& (0+255),b	;volatile
  6929  00036E  D009               	goto	l800
  6930  000370                     l8017:
  6931                           
  6932                           ; BSR set to: 0
  6933  000370  D8D4               	call	PL12	;call to abstracted procedure
  6934  000372  D8B5               	call	PL4	;call to abstracted procedure
  6935  000374  D939               	call	PL72	;call to abstracted procedure
  6936  000376  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6937  000378  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6938  00037A  C07C  F084         	movff	??_pd_add_value+4,_pd_add_value$1129	;volatile
  6939  00037E  C07D  F085         	movff	??_pd_add_value+5,_pd_add_value$1129+1	;volatile
  6940  000382                     l800:
  6941                           
  6942                           ; BSR set to: 0
  6943  000382  D8F0               	call	PL36	;call to abstracted procedure
  6944  000384  5185               	movf	(_pd_add_value$1129+1)& (0+255),w,b	;volatile
  6945  000386  0A80               	xorlw	128
  6946  000388  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6947  00038A  5178               	movf	??_pd_add_value& (0+255),w,b
  6948  00038C  5D84               	subwf	_pd_add_value$1129& (0+255),w,b	;volatile
  6949  00038E  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6950  000390  0A80               	xorlw	128
  6951  000392  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6952  000394  E220               	bc	l788
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;peak_detector.c: 62: for (i = 0; i < d->config.lval_cnt; i++) {
  6956  000396  6B8A               	clrf	pd_add_value@i& (0+255),b
  6957  000398  D013               	goto	l8025
  6958  00039A                     l8021:
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;peak_detector.c: 63: d->last_v_buf[i] = d->cur_v;
  6962  00039A  EE20 F058          	lfsr	2,88
  6963  00039E  5174               	movf	pd_add_value@d& (0+255),w,b
  6964  0003A0  26D9               	addwf	fsr2l,f,c
  6965  0003A2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6966  0003A4  22DA               	addwfc	fsr2h,f,c
  6967  0003A6  518A               	movf	pd_add_value@i& (0+255),w,b
  6968  0003A8  0D02               	mullw	2
  6969  0003AA  50F3               	movf	prodl,w,c
  6970  0003AC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6971  0003AE  6EE1               	movwf	fsr1l,c
  6972  0003B0  50F4               	movf	prodh,w,c
  6973  0003B2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6974  0003B4  6EE2               	movwf	fsr1h,c
  6975  0003B6  CFDE FFE6          	movff	postinc2,postinc1
  6976  0003BA  CFDD FFE5          	movff	postdec2,postdec1
  6977                           
  6978                           ; BSR set to: 0
  6979  0003BE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6980  0003C0                     l8025:
  6981                           
  6982                           ; BSR set to: 0
  6983  0003C0  D8C9               	call	PL32	;call to abstracted procedure
  6984  0003C2  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6985  0003C4  E3EA               	bnc	l8021
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;peak_detector.c: 64: }
  6989                           ;peak_detector.c: 65: d->status.alarm = FALSE;
  6990  0003C6  EE20 F05E          	lfsr	2,94
  6991  0003CA  5174               	movf	pd_add_value@d& (0+255),w,b
  6992  0003CC  26D9               	addwf	fsr2l,f,c
  6993  0003CE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6994  0003D0  22DA               	addwfc	fsr2h,f,c
  6995  0003D2  0EFE               	movlw	-2
  6996  0003D4  16DF               	andwf	223,f,c
  6997  0003D6                     l788:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;peak_detector.c: 66: }
  7001                           ;peak_detector.c: 69: if (((d->wval)<0?(-(d->wval)):(d->wval)) < (10)) {
  7002  0003D6  D896               	call	PL8	;call to abstracted procedure
  7003  0003D8  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  7004  0003DA  D00B               	goto	l8031
  7005                           
  7006                           ; BSR set to: 0
  7007  0003DC  EE20 F05C          	lfsr	2,92
  7008  0003E0  5174               	movf	pd_add_value@d& (0+255),w,b
  7009  0003E2  26D9               	addwf	fsr2l,f,c
  7010  0003E4  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7011  0003E6  22DA               	addwfc	fsr2h,f,c
  7012  0003E8  CFDE F086          	movff	postinc2,_pd_add_value$1130	;volatile
  7013  0003EC  CFDD F087          	movff	postdec2,_pd_add_value$1130+1	;volatile
  7014  0003F0  D00B               	goto	l8033
  7015  0003F2                     l8031:
  7016                           
  7017                           ; BSR set to: 0
  7018  0003F2  EE20 F05C          	lfsr	2,92
  7019  0003F6  5174               	movf	pd_add_value@d& (0+255),w,b
  7020  0003F8  26D9               	addwf	fsr2l,f,c
  7021  0003FA  D87B               	call	PL6	;call to abstracted procedure
  7022  0003FC  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  7023  0003FE  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  7024  000400  C078  F086         	movff	??_pd_add_value,_pd_add_value$1130	;volatile
  7025  000404  C079  F087         	movff	??_pd_add_value+1,_pd_add_value$1130+1	;volatile
  7026  000408                     l8033:
  7027                           
  7028                           ; BSR set to: 0
  7029  000408  5187               	movf	(_pd_add_value$1130+1)& (0+255),w,b	;volatile
  7030  00040A  0A80               	xorlw	128
  7031  00040C  0F80               	addlw	-128
  7032  00040E  0E0A               	movlw	10
  7033  000410  B4D8               	btfsc	status,2,c
  7034  000412  5D86               	subwf	_pd_add_value$1130& (0+255),w,b	;volatile
  7035  000414  E24F               	bc	l8055
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;peak_detector.c: 70: if (d->ref_v_idx == 9) {
  7039  000416  EE20 F053          	lfsr	2,83
  7040  00041A  5174               	movf	pd_add_value@d& (0+255),w,b
  7041  00041C  26D9               	addwf	fsr2l,f,c
  7042  00041E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7043  000420  22DA               	addwfc	fsr2h,f,c
  7044  000422  0E09               	movlw	9
  7045  000424  62DF               	cpfseq	indf2,c
  7046  000426  D008               	goto	l8039
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;peak_detector.c: 71: d->status.firststart = FALSE;
  7050  000428  EE20 F05E          	lfsr	2,94
  7051  00042C  5174               	movf	pd_add_value@d& (0+255),w,b
  7052  00042E  26D9               	addwf	fsr2l,f,c
  7053  000430  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7054  000432  22DA               	addwfc	fsr2h,f,c
  7055  000434  0EFB               	movlw	-5
  7056  000436  16DF               	andwf	223,f,c
  7057  000438                     l8039:
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;peak_detector.c: 72: }
  7061                           ;peak_detector.c: 75: d->ref_v_buf[d->ref_v_idx] = d->cur_v;
  7062  000438  EE20 F058          	lfsr	2,88
  7063  00043C  5174               	movf	pd_add_value@d& (0+255),w,b
  7064  00043E  D89D               	call	PL40	;call to abstracted procedure
  7065  000440  D8B0               	call	PL46	;call to abstracted procedure
  7066  000442  6EE1               	movwf	fsr1l,c
  7067  000444  0E00               	movlw	0
  7068  000446  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  7069  000448  6EE2               	movwf	fsr1h,c
  7070  00044A  CFDE FFE6          	movff	postinc2,postinc1
  7071  00044E  CFDD FFE5          	movff	postdec2,postdec1
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;peak_detector.c: 76: d->ref_v_idx = (d->ref_v_idx + 1) % d->config.rval_cnt;
  7075  000452  EE20 F053          	lfsr	2,83
  7076  000456  5174               	movf	pd_add_value@d& (0+255),w,b
  7077  000458  D890               	call	PL40	;call to abstracted procedure
  7078  00045A  6F78               	movwf	??_pd_add_value& (0+255),b
  7079  00045C  2978               	incf	??_pd_add_value& (0+255),w,b
  7080  00045E  6F6C               	movwf	?___awmod& (0+255),b
  7081  000460  6B6D               	clrf	(?___awmod+1)& (0+255),b
  7082  000462  0E00               	movlw	0
  7083  000464  236D               	addwfc	(?___awmod+1)& (0+255),f,b
  7084  000466  EE10 F064          	lfsr	1,100
  7085  00046A  5174               	movf	pd_add_value@d& (0+255),w,b
  7086  00046C  26E1               	addwf	fsr1l,f,c
  7087  00046E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7088  000470  22E2               	addwfc	fsr1h,f,c
  7089  000472  50E7               	movf	indf1,w,c
  7090  000474  6F6E               	movwf	(?___awmod+2)& (0+255),b
  7091  000476  6B6F               	clrf	(?___awmod+3)& (0+255),b
  7092  000478  ECE0  F00D         	call	___awmod	;wreg free
  7093  00047C  516C               	movf	?___awmod& (0+255),w,b
  7094  00047E  6EDF               	movwf	indf2,c
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;peak_detector.c: 79: tmp = 0;
  7098  000480  6B88               	clrf	pd_add_value@tmp& (0+255),b
  7099  000482  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;peak_detector.c: 80: for (i = 0; i < d->config.rval_cnt; i++) {
  7103  000484  6B8A               	clrf	pd_add_value@i& (0+255),b
  7104  000486  D007               	goto	l8051
  7105  000488                     l8047:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;peak_detector.c: 81: tmp += d->ref_v_buf[i];
  7109  000488  518A               	movf	pd_add_value@i& (0+255),w,b
  7110  00048A  D88B               	call	PL46	;call to abstracted procedure
  7111  00048C  6ED9               	movwf	fsr2l,c
  7112  00048E  0E00               	movlw	0
  7113  000490  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  7114  000492  6EDA               	movwf	fsr2h,c
  7115                           
  7116                           ; BSR set to: 0
  7117  000494  D8B0               	call	PL76	;call to abstracted procedure
  7118  000496                     l8051:
  7119                           
  7120                           ; BSR set to: 0
  7121  000496  D898               	call	PL60	;call to abstracted procedure
  7122  000498  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  7123  00049A  E3F6               	bnc	l8047
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;peak_detector.c: 82: }
  7127                           ;peak_detector.c: 84: d->ref_v = tmp/d->config.rval_cnt;
  7128  00049C  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  7129  0004A0  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  7130  0004A4  D891               	call	PL60	;call to abstracted procedure
  7131  0004A6  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  7132  0004A8  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  7133  0004AA  EC31  F00D         	call	___awdiv	;wreg free
  7134  0004AE  EE20 F054          	lfsr	2,84
  7135  0004B2  D86E               	call	PL44	;call to abstracted procedure
  7136  0004B4                     l8055:
  7137                           
  7138                           ; BSR set to: 0
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;peak_detector.c: 85: }
  7142                           ;peak_detector.c: 87: return FALSE;
  7143  0004B4  0C00               	retlw	0
  7144  0004B6                     __end_of_pd_add_value:
  7145                           	opt stack 0
  7146  0004B6                     PL2:
  7147                           	opt stack 23
  7148  0004B6  26D9               	addwf	fsr2l,f,c
  7149  0004B8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7150  0004BA  22DA               	addwfc	fsr2h,f,c
  7151  0004BC  CFDE F078          	movff	postinc2,??_pd_add_value
  7152  0004C0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  7153  0004C4  EE20 F058          	lfsr	2,88
  7154  0004C8  5174               	movf	pd_add_value@d& (0+255),w,b
  7155  0004CA  26D9               	addwf	fsr2l,f,c
  7156  0004CC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7157  0004CE  22DA               	addwfc	fsr2h,f,c
  7158  0004D0  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  7159  0004D4  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  7160  0004D8  5178               	movf	??_pd_add_value& (0+255),w,b
  7161  0004DA  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  7162  0004DC  0012               	return	
  7163  0004DE                     __end_ofPL2:
  7164                           	opt stack 0
  7165  0004DE                     PL4:
  7166                           	opt stack 23
  7167  0004DE  26D9               	addwf	fsr2l,f,c
  7168  0004E0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7169  0004E2  22DA               	addwfc	fsr2h,f,c
  7170  0004E4  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  7171  0004E8  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  7172  0004EC  5178               	movf	??_pd_add_value& (0+255),w,b
  7173  0004EE  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  7174  0004F0  0012               	return	
  7175  0004F2                     __end_ofPL4:
  7176                           	opt stack 0
  7177  0004F2                     PL6:
  7178                           	opt stack 23
  7179  0004F2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7180  0004F4  22DA               	addwfc	fsr2h,f,c
  7181  0004F6  CFDE F078          	movff	postinc2,??_pd_add_value
  7182  0004FA  CFDD F079          	movff	postdec2,??_pd_add_value+1
  7183  0004FE  1F78               	comf	??_pd_add_value& (0+255),f,b
  7184  000500  1F79               	comf	(??_pd_add_value+1)& (0+255),f,b
  7185  000502  0012               	return	
  7186  000504                     __end_ofPL6:
  7187                           	opt stack 0
  7188  000504                     PL8:
  7189                           	opt stack 23
  7190  000504  EE20 F05C          	lfsr	2,92
  7191  000508  5174               	movf	pd_add_value@d& (0+255),w,b
  7192  00050A  26D9               	addwf	fsr2l,f,c
  7193  00050C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7194  00050E  22DA               	addwfc	fsr2h,f,c
  7195  000510  CFDE F078          	movff	postinc2,??_pd_add_value
  7196  000514  CFDD F079          	movff	postdec2,??_pd_add_value+1
  7197  000518  0012               	return	
  7198  00051A                     __end_ofPL8:
  7199                           	opt stack 0
  7200  00051A                     PL12:
  7201                           	opt stack 23
  7202  00051A  EE20 F054          	lfsr	2,84
  7203  00051E  5174               	movf	pd_add_value@d& (0+255),w,b
  7204  000520  26D9               	addwf	fsr2l,f,c
  7205  000522  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7206  000524  22DA               	addwfc	fsr2h,f,c
  7207  000526  CFDE F078          	movff	postinc2,??_pd_add_value
  7208  00052A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  7209  00052E  EE20 F05A          	lfsr	2,90
  7210  000532  5174               	movf	pd_add_value@d& (0+255),w,b
  7211  000534  0012               	return	
  7212  000536                     __end_ofPL12:
  7213                           	opt stack 0
  7214  000536                     PL26:
  7215                           	opt stack 23
  7216  000536  5174               	movf	pd_add_value@d& (0+255),w,b
  7217  000538  26E1               	addwf	fsr1l,f,c
  7218  00053A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7219  00053C  22E2               	addwfc	fsr1h,f,c
  7220  00053E  CFDE FFE6          	movff	postinc2,postinc1
  7221  000542  CFDD FFE5          	movff	postdec2,postdec1
  7222  000546  EE20 F05A          	lfsr	2,90
  7223  00054A  5174               	movf	pd_add_value@d& (0+255),w,b
  7224  00054C  26D9               	addwf	fsr2l,f,c
  7225  00054E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7226  000550  22DA               	addwfc	fsr2h,f,c
  7227  000552  0012               	return	
  7228  000554                     __end_ofPL26:
  7229                           	opt stack 0
  7230  000554                     PL32:
  7231                           	opt stack 23
  7232  000554  EE20 F063          	lfsr	2,99
  7233  000558  5174               	movf	pd_add_value@d& (0+255),w,b
  7234  00055A  26D9               	addwf	fsr2l,f,c
  7235  00055C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7236  00055E  22DA               	addwfc	fsr2h,f,c
  7237  000560  50DF               	movf	indf2,w,c
  7238  000562  0012               	return	
  7239  000564                     __end_ofPL32:
  7240                           	opt stack 0
  7241  000564                     PL36:
  7242                           	opt stack 23
  7243  000564  EE20 F061          	lfsr	2,97
  7244  000568  5174               	movf	pd_add_value@d& (0+255),w,b
  7245  00056A  26D9               	addwf	fsr2l,f,c
  7246  00056C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7247  00056E  22DA               	addwfc	fsr2h,f,c
  7248  000570  CFDE F078          	movff	postinc2,??_pd_add_value
  7249  000574  CFDD F079          	movff	postdec2,??_pd_add_value+1
  7250  000578  0012               	return	
  7251  00057A                     __end_ofPL36:
  7252                           	opt stack 0
  7253  00057A                     PL40:
  7254                           	opt stack 23
  7255  00057A  26D9               	addwf	fsr2l,f,c
  7256  00057C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7257  00057E  22DA               	addwfc	fsr2h,f,c
  7258  000580  EE10 F053          	lfsr	1,83
  7259  000584  5174               	movf	pd_add_value@d& (0+255),w,b
  7260  000586  26E1               	addwf	fsr1l,f,c
  7261  000588  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7262  00058A  22E2               	addwfc	fsr1h,f,c
  7263  00058C  50E7               	movf	indf1,w,c
  7264  00058E  0012               	return	
  7265  000590                     __end_ofPL40:
  7266                           	opt stack 0
  7267  000590                     PL44:
  7268                           	opt stack 23
  7269  000590  5174               	movf	pd_add_value@d& (0+255),w,b
  7270  000592  26D9               	addwf	fsr2l,f,c
  7271  000594  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7272  000596  22DA               	addwfc	fsr2h,f,c
  7273  000598  C06C  FFDE         	movff	?___awdiv,postinc2
  7274  00059C  C06D  FFDD         	movff	?___awdiv+1,postdec2
  7275  0005A0  0012               	return	
  7276  0005A2                     __end_ofPL44:
  7277                           	opt stack 0
  7278  0005A2                     PL46:
  7279                           	opt stack 23
  7280  0005A2  0D02               	mullw	2
  7281  0005A4  50F3               	movf	prodl,w,c
  7282  0005A6  2574               	addwf	pd_add_value@d& (0+255),w,b
  7283  0005A8  6F78               	movwf	??_pd_add_value& (0+255),b
  7284  0005AA  50F4               	movf	prodh,w,c
  7285  0005AC  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  7286  0005AE  6F79               	movwf	(??_pd_add_value+1)& (0+255),b
  7287  0005B0  0E2B               	movlw	43
  7288  0005B2  2578               	addwf	??_pd_add_value& (0+255),w,b
  7289  0005B4  0012               	return	
  7290  0005B6                     __end_ofPL46:
  7291                           	opt stack 0
  7292  0005B6                     PL56:
  7293                           	opt stack 23
  7294  0005B6  EE20 F05E          	lfsr	2,94
  7295  0005BA  5174               	movf	pd_add_value@d& (0+255),w,b
  7296  0005BC  26D9               	addwf	fsr2l,f,c
  7297  0005BE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7298  0005C0  22DA               	addwfc	fsr2h,f,c
  7299  0005C2  50DF               	movf	indf2,w,c
  7300  0005C4  6F78               	movwf	??_pd_add_value& (0+255),b
  7301  0005C6  0012               	return	
  7302  0005C8                     __end_ofPL56:
  7303                           	opt stack 0
  7304  0005C8                     PL60:
  7305                           	opt stack 23
  7306  0005C8  EE20 F064          	lfsr	2,100
  7307  0005CC  5174               	movf	pd_add_value@d& (0+255),w,b
  7308  0005CE  26D9               	addwf	fsr2l,f,c
  7309  0005D0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  7310  0005D2  22DA               	addwfc	fsr2h,f,c
  7311  0005D4  50DF               	movf	indf2,w,c
  7312  0005D6  0012               	return	
  7313  0005D8                     __end_ofPL60:
  7314                           	opt stack 0
  7315  0005D8                     PL62:
  7316                           	opt stack 23
  7317  0005D8  0D02               	mullw	2
  7318  0005DA  50F3               	movf	prodl,w,c
  7319  0005DC  2574               	addwf	pd_add_value@d& (0+255),w,b
  7320  0005DE  6ED9               	movwf	fsr2l,c
  7321  0005E0  50F4               	movf	prodh,w,c
  7322  0005E2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  7323  0005E4  6EDA               	movwf	fsr2h,c
  7324  0005E6  0012               	return	
  7325  0005E8                     __end_ofPL62:
  7326                           	opt stack 0
  7327  0005E8                     PL72:
  7328                           	opt stack 23
  7329  0005E8  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  7330  0005EA  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  7331  0005EC  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7332  0005EE  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  7333  0005F0  1F7C               	comf	(??_pd_add_value+4)& (0+255),f,b
  7334  0005F2  1F7D               	comf	(??_pd_add_value+5)& (0+255),f,b
  7335  0005F4  0012               	return	
  7336  0005F6                     __end_ofPL72:
  7337                           	opt stack 0
  7338  0005F6                     PL76:
  7339                           	opt stack 23
  7340  0005F6  50DE               	movf	postinc2,w,c
  7341  0005F8  2788               	addwf	pd_add_value@tmp& (0+255),f,b
  7342  0005FA  50DD               	movf	postdec2,w,c
  7343  0005FC  2389               	addwfc	(pd_add_value@tmp+1)& (0+255),f,b
  7344  0005FE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  7345  000600  0012               	return	
  7346  000602                     __end_ofPL76:
  7347                           	opt stack 0
  7348  000602                     PL88:
  7349                           	opt stack 23
  7350  000602  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  7351  000604  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7352  000606  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  7353  000608  0012               	return	
  7354  00060A                     __end_ofPL88:
  7355                           	opt stack 0
  7356                           tosu	equ	0xFFF
  7357                           tosh	equ	0xFFE
  7358                           tosl	equ	0xFFD
  7359                           pclath	equ	0xFFA
  7360                           tblptru	equ	0xFF8
  7361                           tblptrh	equ	0xFF7
  7362                           tblptrl	equ	0xFF6
  7363                           tablat	equ	0xFF5
  7364                           prodh	equ	0xFF4
  7365                           prodl	equ	0xFF3
  7366                           intcon	equ	0xFF2
  7367                           indf0	equ	0xFEF
  7368                           postinc0	equ	0xFEE
  7369                           fsr0h	equ	0xFEA
  7370                           fsr0l	equ	0xFE9
  7371                           wreg	equ	0xFE8
  7372                           indf1	equ	0xFE7
  7373                           postinc1	equ	0xFE6
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           indf2	equ	0xFDF
  7378                           postinc2	equ	0xFDE
  7379                           postdec2	equ	0xFDD
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function _set_parameter *****************
  7385 ;; Defined at:
  7386 ;;		line 43 in file "src/modules/on_parameter_found.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  p_id            1    wreg     char 
  7389 ;; Auto vars:     Size  Location     Type
  7390 ;;  p_id            1   31[BANK0 ] char 
  7391 ;;  u16_value       2   32[BANK0 ] int 
  7392 ;;  ok              1   34[BANK0 ] unsigned char 
  7393 ;;  b_value         1    0        unsigned char 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      unsigned char 
  7396 ;; Registers used:
  7397 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : F/0
  7400 ;;		On exit  : F/0
  7401 ;;		Unchanged: FFFFFFF0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7403 ;;      Params:         0       0       0       0       0       0       0
  7404 ;;      Locals:         0       4       0       0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0
  7406 ;;      Totals:         0       4       0       0       0       0       0
  7407 ;;Total ram usage:        4 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    7
  7410 ;; This function calls:
  7411 ;;		_syntax_as_integer
  7412 ;;		_syntax_get_text
  7413 ;;		_serialport_write
  7414 ;; This function is called by:
  7415 ;;		_on_parameter_found
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text24
  7420  001604                     __ptext24:
  7421                           	opt stack 0
  7422  001604                     _set_parameter:
  7423                           	opt stack 20
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;set_parameter@p_id stored from wreg
  7427  001604  CFE8 F07F          	movff	wreg,set_parameter@p_id
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;on_parameter_found.c: 44: INT16 u16_value;
  7431                           ;on_parameter_found.c: 45: CHAR b_value;
  7432                           ;on_parameter_found.c: 46: CHAR ok = FALSE;
  7433  001608  6B82               	clrf	set_parameter@ok& (0+255),b
  7434                           
  7435                           ;on_parameter_found.c: 47: switch (p_id )
  7436  00160A  D013               	goto	l8091
  7437  00160C                     l8081:
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;on_parameter_found.c: 54: u16_value = syntax_as_integer();
  7441  00160C  EC43  F011         	call	_syntax_as_integer	;wreg free
  7442  001610  C06C  F080         	movff	?_syntax_as_integer,set_parameter@u16_value
  7443  001614  C06D  F081         	movff	?_syntax_as_integer+1,set_parameter@u16_value+1
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;on_parameter_found.c: 55: if(u16_value<16)
  7447  001618  5181               	movf	(set_parameter@u16_value+1)& (0+255),w,b
  7448  00161A  0A80               	xorlw	128
  7449  00161C  0F80               	addlw	-128
  7450  00161E  0E10               	movlw	16
  7451  001620  B4D8               	btfsc	status,2,c
  7452  001622  5D80               	subwf	set_parameter@u16_value& (0+255),w,b
  7453  001624  E226               	bc	l8093
  7454                           
  7455                           ; BSR set to: 0
  7456                           ;on_parameter_found.c: 56: {
  7457                           ;on_parameter_found.c: 57: LATD = u16_value&0x0f;
  7458  001626  5180               	movf	set_parameter@u16_value& (0+255),w,b
  7459  001628  0B0F               	andlw	15
  7460  00162A  6E8C               	movwf	3980,c	;volatile
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;on_parameter_found.c: 58: ok = TRUE;
  7464  00162C  0E01               	movlw	1
  7465  00162E  6F82               	movwf	set_parameter@ok& (0+255),b
  7466  001630  D020               	goto	l8093
  7467  001632                     l8091:
  7468                           
  7469                           ; BSR set to: 0
  7470  001632  517F               	movf	set_parameter@p_id& (0+255),w,b
  7471                           
  7472                           ; Switch size 1, requested type "space"
  7473                           ; Number of cases is 16, Range of values is 4 to 26
  7474                           ; switch strategies available:
  7475                           ; Name         Instructions Cycles
  7476                           ; simple_byte           49    25 (average)
  7477                           ;	Chosen strategy is simple_byte
  7478  001634  0A04               	xorlw	4	; case 4
  7479  001636  E01D               	bz	l8093
  7480  001638  0A03               	xorlw	3	; case 7
  7481  00163A  E0E8               	bz	l8081
  7482  00163C  0A0A               	xorlw	10	; case 13
  7483  00163E  E019               	bz	l8093
  7484  001640  0A03               	xorlw	3	; case 14
  7485  001642  E017               	bz	l8093
  7486  001644  0A01               	xorlw	1	; case 15
  7487  001646  E015               	bz	l8093
  7488  001648  0A1F               	xorlw	31	; case 16
  7489  00164A  E013               	bz	l8093
  7490  00164C  0A01               	xorlw	1	; case 17
  7491  00164E  E011               	bz	l8093
  7492  001650  0A03               	xorlw	3	; case 18
  7493  001652  E00F               	bz	l8093
  7494  001654  0A01               	xorlw	1	; case 19
  7495  001656  E00D               	bz	l8093
  7496  001658  0A07               	xorlw	7	; case 20
  7497  00165A  E00B               	bz	l8093
  7498  00165C  0A01               	xorlw	1	; case 21
  7499  00165E  E009               	bz	l8093
  7500  001660  0A03               	xorlw	3	; case 22
  7501  001662  E007               	bz	l8093
  7502  001664  0A01               	xorlw	1	; case 23
  7503  001666  E005               	bz	l8093
  7504  001668  0A0F               	xorlw	15	; case 24
  7505  00166A  A4D8               	btfss	status,2,c
  7506  00166C  0A01               	xorlw	1	; case 25
  7507  00166E  A4D8               	btfss	status,2,c
  7508  001670  0A03               	xorlw	3	; case 26
  7509  001672                     l8093:
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;on_parameter_found.c: 107: serialport_write( syntax_get_text() );
  7513  001672  EC3D  F011         	call	_syntax_get_text	;wreg free
  7514  001676  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  7515  00167A  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  7516  00167E  0100               	movlb	0	; () banked
  7517  001680  ECEB  F00E         	call	_serialport_write	;wreg free
  7518                           
  7519                           ;on_parameter_found.c: 108: if( ok )
  7520  001684  0100               	movlb	0	; () banked
  7521  001686  5182               	movf	set_parameter@ok& (0+255),w,b
  7522  001688  E007               	bz	l8099
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;on_parameter_found.c: 109: {
  7526                           ;on_parameter_found.c: 110: serialport_write(":ok ");
  7527  00168A  0E7F               	movlw	high STR_29
  7528  00168C  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7529  00168E  0EF4               	movlw	low STR_29
  7530  001690  6F7D               	movwf	?_serialport_write& (0+255),b
  7531  001692  ECEB  F00E         	call	_serialport_write	;wreg free
  7532                           
  7533                           ;on_parameter_found.c: 111: }
  7534  001696  D006               	goto	l8101
  7535  001698                     l8099:
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;on_parameter_found.c: 112: else
  7539                           ;on_parameter_found.c: 113: {
  7540                           ;on_parameter_found.c: 114: serialport_write(":err ");
  7541  001698  0E7F               	movlw	high STR_30
  7542  00169A  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7543  00169C  0EE9               	movlw	low STR_30
  7544  00169E  6F7D               	movwf	?_serialport_write& (0+255),b
  7545  0016A0  ECEB  F00E         	call	_serialport_write	;wreg free
  7546  0016A4                     l8101:
  7547                           
  7548                           ;on_parameter_found.c: 115: }
  7549                           ;on_parameter_found.c: 116: return ok;
  7550  0016A4  0100               	movlb	0	; () banked
  7551  0016A6  5182               	movf	set_parameter@ok& (0+255),w,b
  7552                           
  7553                           ; BSR set to: 0
  7554  0016A8  0012               	return	
  7555  0016AA                     __end_of_set_parameter:
  7556                           	opt stack 0
  7557                           tosu	equ	0xFFF
  7558                           tosh	equ	0xFFE
  7559                           tosl	equ	0xFFD
  7560                           pclath	equ	0xFFA
  7561                           tblptru	equ	0xFF8
  7562                           tblptrh	equ	0xFF7
  7563                           tblptrl	equ	0xFF6
  7564                           tablat	equ	0xFF5
  7565                           prodh	equ	0xFF4
  7566                           prodl	equ	0xFF3
  7567                           intcon	equ	0xFF2
  7568                           indf0	equ	0xFEF
  7569                           postinc0	equ	0xFEE
  7570                           fsr0h	equ	0xFEA
  7571                           fsr0l	equ	0xFE9
  7572                           wreg	equ	0xFE8
  7573                           indf1	equ	0xFE7
  7574                           postinc1	equ	0xFE6
  7575                           postdec1	equ	0xFE5
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _syntax_as_integer *****************
  7586 ;; Defined at:
  7587 ;;		line 174 in file "src/modules/syntax.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;		None
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  2   12[BANK0 ] int 
  7594 ;; Registers used:
  7595 ;;		None
  7596 ;; Tracked objects:
  7597 ;;		On entry : F/0
  7598 ;;		On exit  : F/0
  7599 ;;		Unchanged: FFFFFFF0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7601 ;;      Params:         0       2       0       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0
  7603 ;;      Temps:          0       0       0       0       0       0       0
  7604 ;;      Totals:         0       2       0       0       0       0       0
  7605 ;;Total ram usage:        2 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    5
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_set_parameter
  7612 ;; This function uses a non-reentrant model
  7613 ;;
  7614                           
  7615                           	psect	text25
  7616  002286                     __ptext25:
  7617                           	opt stack 0
  7618  002286                     _syntax_as_integer:
  7619                           	opt stack 21
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;syntax.c: 175: return *((INT16*) parameter_value);
  7623                           
  7624                           ; BSR set to: 0
  7625  002286  C200  F06C         	movff	_parameter_value,?_syntax_as_integer
  7626  00228A  C201  F06D         	movff	_parameter_value+1,?_syntax_as_integer+1
  7627                           
  7628                           ; BSR set to: 0
  7629  00228E  0012               	return	
  7630  002290                     __end_of_syntax_as_integer:
  7631                           	opt stack 0
  7632                           tosu	equ	0xFFF
  7633                           tosh	equ	0xFFE
  7634                           tosl	equ	0xFFD
  7635                           pclath	equ	0xFFA
  7636                           tblptru	equ	0xFF8
  7637                           tblptrh	equ	0xFF7
  7638                           tblptrl	equ	0xFF6
  7639                           tablat	equ	0xFF5
  7640                           prodh	equ	0xFF4
  7641                           prodl	equ	0xFF3
  7642                           intcon	equ	0xFF2
  7643                           indf0	equ	0xFEF
  7644                           postinc0	equ	0xFEE
  7645                           fsr0h	equ	0xFEA
  7646                           fsr0l	equ	0xFE9
  7647                           wreg	equ	0xFE8
  7648                           indf1	equ	0xFE7
  7649                           postinc1	equ	0xFE6
  7650                           postdec1	equ	0xFE5
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           fsr2h	equ	0xFDA
  7657                           fsr2l	equ	0xFD9
  7658                           status	equ	0xFD8
  7659                           
  7660 ;; *************** function _get_parameter *****************
  7661 ;; Defined at:
  7662 ;;		line 119 in file "src/modules/on_parameter_found.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;  p_id            1    wreg     char 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  p_id            1   31[BANK0 ] char 
  7667 ;;  ok              1    0        unsigned char 
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      unsigned char 
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : F/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: FFFFFFF0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7677 ;;      Params:         0       0       0       0       0       0       0
  7678 ;;      Locals:         0       2       0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0
  7680 ;;      Totals:         0       2       0       0       0       0       0
  7681 ;;Total ram usage:        2 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    7
  7684 ;; This function calls:
  7685 ;;		_syntax_get_text
  7686 ;;		_serialport_write
  7687 ;; This function is called by:
  7688 ;;		_on_parameter_found
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           	psect	text26
  7693  0018EA                     __ptext26:
  7694                           	opt stack 0
  7695  0018EA                     _get_parameter:
  7696                           	opt stack 20
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;get_parameter@p_id stored from wreg
  7700  0018EA  CFE8 F07F          	movff	wreg,get_parameter@p_id
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;on_parameter_found.c: 122: serialport_write( syntax_get_text() );
  7704                           
  7705                           ; BSR set to: 0
  7706  0018EE  EC3D  F011         	call	_syntax_get_text	;wreg free
  7707  0018F2  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  7708  0018F6  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  7709  0018FA  0100               	movlb	0	; () banked
  7710  0018FC  ECEB  F00E         	call	_serialport_write	;wreg free
  7711                           
  7712                           ;on_parameter_found.c: 124: switch (p_id ) {
  7713  001900  0100               	movlb	0	; () banked
  7714  001902  517F               	movf	get_parameter@p_id& (0+255),w,b
  7715                           
  7716                           ; Switch size 1, requested type "space"
  7717                           ; Number of cases is 23, Range of values is 4 to 26
  7718                           ; switch strategies available:
  7719                           ; Name         Instructions Cycles
  7720                           ; simple_byte           70    36 (average)
  7721                           ;	Chosen strategy is simple_byte
  7722  001904  0A04               	xorlw	4	; case 4
  7723  001906  E02B               	bz	l938
  7724  001908  0A01               	xorlw	1	; case 5
  7725  00190A  E029               	bz	l938
  7726  00190C  0A03               	xorlw	3	; case 6
  7727  00190E  E027               	bz	l938
  7728  001910  0A01               	xorlw	1	; case 7
  7729  001912  E025               	bz	l938
  7730  001914  0A0F               	xorlw	15	; case 8
  7731  001916  E023               	bz	l938
  7732  001918  0A01               	xorlw	1	; case 9
  7733  00191A  E021               	bz	l938
  7734  00191C  0A03               	xorlw	3	; case 10
  7735  00191E  E01F               	bz	l938
  7736  001920  0A01               	xorlw	1	; case 11
  7737  001922  E01D               	bz	l938
  7738  001924  0A07               	xorlw	7	; case 12
  7739  001926  E01B               	bz	l938
  7740  001928  0A01               	xorlw	1	; case 13
  7741  00192A  E019               	bz	l938
  7742  00192C  0A03               	xorlw	3	; case 14
  7743  00192E  E017               	bz	l938
  7744  001930  0A01               	xorlw	1	; case 15
  7745  001932  E015               	bz	l938
  7746  001934  0A1F               	xorlw	31	; case 16
  7747  001936  E013               	bz	l938
  7748  001938  0A01               	xorlw	1	; case 17
  7749  00193A  E011               	bz	l938
  7750  00193C  0A03               	xorlw	3	; case 18
  7751  00193E  E00F               	bz	l938
  7752  001940  0A01               	xorlw	1	; case 19
  7753  001942  E00D               	bz	l938
  7754  001944  0A07               	xorlw	7	; case 20
  7755  001946  E00B               	bz	l938
  7756  001948  0A01               	xorlw	1	; case 21
  7757  00194A  E009               	bz	l938
  7758  00194C  0A03               	xorlw	3	; case 22
  7759  00194E  E007               	bz	l938
  7760  001950  0A01               	xorlw	1	; case 23
  7761  001952  E005               	bz	l938
  7762  001954  0A0F               	xorlw	15	; case 24
  7763  001956  A4D8               	btfss	status,2,c
  7764  001958  0A01               	xorlw	1	; case 25
  7765  00195A  A4D8               	btfss	status,2,c
  7766  00195C  0A03               	xorlw	3	; case 26
  7767  00195E                     l938:
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;on_parameter_found.c: 176: {
  7771                           ;on_parameter_found.c: 177: serialport_write( ":err " );
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;on_parameter_found.c: 175: if(!ok)
  7775  00195E  0E7F               	movlw	high STR_30
  7776  001960  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7777  001962  0EE9               	movlw	low STR_30
  7778  001964  6F7D               	movwf	?_serialport_write& (0+255),b
  7779  001966  ECEB  F00E         	call	_serialport_write	;wreg free
  7780                           
  7781                           ;on_parameter_found.c: 178: }
  7782                           ;on_parameter_found.c: 179: return ok;
  7783  00196A  0C00               	retlw	0
  7784  00196C                     __end_of_get_parameter:
  7785                           	opt stack 0
  7786                           tosu	equ	0xFFF
  7787                           tosh	equ	0xFFE
  7788                           tosl	equ	0xFFD
  7789                           pclath	equ	0xFFA
  7790                           tblptru	equ	0xFF8
  7791                           tblptrh	equ	0xFF7
  7792                           tblptrl	equ	0xFF6
  7793                           tablat	equ	0xFF5
  7794                           prodh	equ	0xFF4
  7795                           prodl	equ	0xFF3
  7796                           intcon	equ	0xFF2
  7797                           indf0	equ	0xFEF
  7798                           postinc0	equ	0xFEE
  7799                           fsr0h	equ	0xFEA
  7800                           fsr0l	equ	0xFE9
  7801                           wreg	equ	0xFE8
  7802                           indf1	equ	0xFE7
  7803                           postinc1	equ	0xFE6
  7804                           postdec1	equ	0xFE5
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           fsr2h	equ	0xFDA
  7811                           fsr2l	equ	0xFD9
  7812                           status	equ	0xFD8
  7813                           
  7814 ;; *************** function _serialport_write *****************
  7815 ;; Defined at:
  7816 ;;		line 52 in file "src/modules/serialport.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  pstr            2   29[BANK0 ] PTR const unsigned char 
  7819 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
  7820 ;;		 -> parameter_text(127), 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;		None
  7823 ;; Return value:  Size  Location     Type
  7824 ;;		None               void
  7825 ;; Registers used:
  7826 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7827 ;; Tracked objects:
  7828 ;;		On entry : C/0
  7829 ;;		On exit  : 0/0
  7830 ;;		Unchanged: FFFFFFF0/0
  7831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7832 ;;      Params:         0       2       0       0       0       0       0
  7833 ;;      Locals:         0       0       0       0       0       0       0
  7834 ;;      Temps:          0       0       0       0       0       0       0
  7835 ;;      Totals:         0       2       0       0       0       0       0
  7836 ;;Total ram usage:        2 bytes
  7837 ;; Hardware stack levels used:    1
  7838 ;; Hardware stack levels required when called:    6
  7839 ;; This function calls:
  7840 ;;		_rd_buffer_put
  7841 ;; This function is called by:
  7842 ;;		_on_parameter_found
  7843 ;;		_set_parameter
  7844 ;;		_get_parameter
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           	psect	text27
  7849  001DD6                     __ptext27:
  7850                           	opt stack 0
  7851  001DD6                     _serialport_write:
  7852                           	opt stack 21
  7853                           
  7854                           ;serialport.c: 53: while (pstr && *pstr)
  7855  001DD6  D00D               	goto	l7583
  7856  001DD8                     l7579:
  7857                           
  7858                           ;serialport.c: 54: {
  7859                           ;serialport.c: 55: rd_buffer_put(&g_tx_buffer, (UINT8*)pstr);
  7860  001DD8  0E01               	movlw	high _g_tx_buffer
  7861  001DDA  0100               	movlb	0	; () banked
  7862  001DDC  6F6D               	movwf	(?_rd_buffer_put+1)& (0+255),b
  7863  001DDE  0E00               	movlw	low _g_tx_buffer
  7864  001DE0  6F6C               	movwf	?_rd_buffer_put& (0+255),b
  7865  001DE2  C07D  F06E         	movff	serialport_write@pstr,?_rd_buffer_put+2
  7866  001DE6  C07E  F06F         	movff	serialport_write@pstr+1,?_rd_buffer_put+3
  7867  001DEA  ECC9  F006         	call	_rd_buffer_put	;wreg free
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;serialport.c: 56: pstr++;
  7871  001DEE  4B7D               	infsnz	serialport_write@pstr& (0+255),f,b
  7872  001DF0  2B7E               	incf	(serialport_write@pstr+1)& (0+255),f,b
  7873  001DF2                     l7583:
  7874  001DF2  0100               	movlb	0	; () banked
  7875  001DF4  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7876  001DF6  117D               	iorwf	serialport_write@pstr& (0+255),w,b
  7877  001DF8  B4D8               	btfsc	status,2,c
  7878  001DFA  0012               	return	
  7879                           
  7880                           ; BSR set to: 0
  7881  001DFC  517D               	movf	serialport_write@pstr& (0+255),w,b
  7882  001DFE  6EF6               	movwf	tblptrl,c
  7883  001E00  6EE9               	movwf	fsr0l,c
  7884  001E02  0E05               	movlw	(high __ramtop+-1)
  7885  001E04  6EEA               	movwf	fsr0h,c
  7886  001E06  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7887  001E08  64EA               	cpfsgt	fsr0h,c
  7888  001E0A  D003               	bra	u8907
  7889  001E0C  6EEA               	movwf	fsr0h,c
  7890  001E0E  50EF               	movf	indf0,w,c
  7891  001E10  D003               	bra	u8900
  7892  001E12                     u8907:
  7893  001E12  6EF7               	movwf	tblptrh,c
  7894  001E14  0008               	tblrd		*
  7895  001E16  50F5               	movf	tablat,w,c
  7896  001E18                     u8900:
  7897  001E18  0900               	iorlw	0
  7898  001E1A  B4D8               	btfsc	status,2,c
  7899  001E1C  0012               	return	
  7900  001E1E  D7DC               	goto	l7579
  7901  001E20                     __end_of_serialport_write:
  7902                           	opt stack 0
  7903                           tosu	equ	0xFFF
  7904                           tosh	equ	0xFFE
  7905                           tosl	equ	0xFFD
  7906                           pclath	equ	0xFFA
  7907                           tblptru	equ	0xFF8
  7908                           tblptrh	equ	0xFF7
  7909                           tblptrl	equ	0xFF6
  7910                           tablat	equ	0xFF5
  7911                           prodh	equ	0xFF4
  7912                           prodl	equ	0xFF3
  7913                           intcon	equ	0xFF2
  7914                           indf0	equ	0xFEF
  7915                           postinc0	equ	0xFEE
  7916                           fsr0h	equ	0xFEA
  7917                           fsr0l	equ	0xFE9
  7918                           wreg	equ	0xFE8
  7919                           indf1	equ	0xFE7
  7920                           postinc1	equ	0xFE6
  7921                           postdec1	equ	0xFE5
  7922                           fsr1h	equ	0xFE2
  7923                           fsr1l	equ	0xFE1
  7924                           indf2	equ	0xFDF
  7925                           postinc2	equ	0xFDE
  7926                           postdec2	equ	0xFDD
  7927                           fsr2h	equ	0xFDA
  7928                           fsr2l	equ	0xFD9
  7929                           status	equ	0xFD8
  7930                           
  7931 ;; *************** function _rd_buffer_put *****************
  7932 ;; Defined at:
  7933 ;;		line 153 in file "src/modules/rd_buffer.c"
  7934 ;; Parameters:    Size  Location     Type
  7935 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  7936 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7937 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  7938 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
  7939 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  ind             2   27[BANK0 ] int 
  7942 ;;  mes_rec         2   22[BANK0 ] PTR volatile unsigned ch
  7943 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7944 ;;  sz              2   25[BANK0 ] int 
  7945 ;;  result          1    0        unsigned char 
  7946 ;; Return value:  Size  Location     Type
  7947 ;;                  1    wreg      unsigned char 
  7948 ;; Registers used:
  7949 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7950 ;; Tracked objects:
  7951 ;;		On entry : F/0
  7952 ;;		On exit  : F/0
  7953 ;;		Unchanged: FFFFFFF0/0
  7954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7955 ;;      Params:         0       4       0       0       0       0       0
  7956 ;;      Locals:         0       8       0       0       0       0       0
  7957 ;;      Temps:          0       5       0       0       0       0       0
  7958 ;;      Totals:         0      17       0       0       0       0       0
  7959 ;;Total ram usage:       17 bytes
  7960 ;; Hardware stack levels used:    1
  7961 ;; Hardware stack levels required when called:    5
  7962 ;; This function calls:
  7963 ;;		Nothing
  7964 ;; This function is called by:
  7965 ;;		_serialport_write
  7966 ;; This function uses a non-reentrant model
  7967 ;;
  7968                           
  7969                           	psect	text28
  7970  000D92                     __ptext28:
  7971                           	opt stack 0
  7972  000D92                     _rd_buffer_put:
  7973                           	opt stack 21
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;rd_buffer.c: 155: SIZE sz ;
  7977                           ;rd_buffer.c: 156: sz = pbuffer->head.last - pbuffer->head.first;
  7978                           
  7979                           ; BSR set to: 0
  7980  000D92  EE20 F002          	lfsr	2,2
  7981  000D96  D891               	call	PL58	;call to abstracted procedure
  7982  000D98  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7983  000D9C  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7984  000DA0  CFDE F072          	movff	postinc2,??_rd_buffer_put+2
  7985  000DA4  CFDD F073          	movff	postdec2,??_rd_buffer_put+3
  7986  000DA8  5170               	movf	??_rd_buffer_put& (0+255),w,b
  7987  000DAA  5D72               	subwf	(??_rd_buffer_put+2)& (0+255),w,b
  7988  000DAC  6F79               	movwf	rd_buffer_put@sz& (0+255),b
  7989  000DAE  5171               	movf	(??_rd_buffer_put+1)& (0+255),w,b
  7990  000DB0  5973               	subwfb	(??_rd_buffer_put+3)& (0+255),w,b
  7991  000DB2  6F7A               	movwf	(rd_buffer_put@sz+1)& (0+255),b
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;rd_buffer.c: 157: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
  7995  000DB4  0E01               	movlw	1
  7996  000DB6  6F78               	movwf	_rd_buffer_put$482& (0+255),b
  7997                           
  7998                           ; BSR set to: 0
  7999  000DB8  D889               	call	PL70	;call to abstracted procedure
  8000  000DBA  64EA               	cpfsgt	fsr0h,c
  8001  000DBC  D003               	bra	u8737
  8002  000DBE  6EEA               	movwf	fsr0h,c
  8003  000DC0  50EF               	movf	indf0,w,c
  8004  000DC2  D003               	bra	u8730
  8005  000DC4                     u8737:
  8006  000DC4  6EF7               	movwf	tblptrh,c
  8007  000DC6  0008               	tblrd		*
  8008  000DC8  50F5               	movf	tablat,w,c
  8009  000DCA                     u8730:
  8010  000DCA  0A0A               	xorlw	10
  8011  000DCC  E00E               	bz	l7497
  8012  000DCE  0100               	movlb	0	; () banked
  8013  000DD0  D87D               	call	PL70	;call to abstracted procedure
  8014  000DD2  64EA               	cpfsgt	fsr0h,c
  8015  000DD4  D003               	bra	u8757
  8016  000DD6  6EEA               	movwf	fsr0h,c
  8017  000DD8  50EF               	movf	indf0,w,c
  8018  000DDA  D003               	bra	u8750
  8019  000DDC                     u8757:
  8020  000DDC  6EF7               	movwf	tblptrh,c
  8021  000DDE  0008               	tblrd		*
  8022  000DE0  50F5               	movf	tablat,w,c
  8023  000DE2                     u8750:
  8024  000DE2  0A0D               	xorlw	13
  8025  000DE4  E002               	bz	l7497
  8026  000DE6  0100               	movlb	0	; () banked
  8027  000DE8  6B78               	clrf	_rd_buffer_put$482& (0+255),b
  8028  000DEA                     l7497:
  8029  000DEA  0100               	movlb	0	; () banked
  8030  000DEC  5178               	movf	_rd_buffer_put$482& (0+255),w,b
  8031  000DEE  13CC               	iorwf	_this_contains_crlf& (0+255),f,b
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;rd_buffer.c: 159: if(sz < 0 ) {
  8035  000DF0  AF7A               	btfss	(rd_buffer_put@sz+1)& (0+255),7,b
  8036  000DF2  D00A               	goto	l288
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;rd_buffer.c: 160: sz += pbuffer->head.size;
  8040  000DF4  EE20 F004          	lfsr	2,4
  8041  000DF8  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8042  000DFA  26D9               	addwf	fsr2l,f,c
  8043  000DFC  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8044  000DFE  22DA               	addwfc	fsr2h,f,c
  8045  000E00  50DE               	movf	postinc2,w,c
  8046  000E02  2779               	addwf	rd_buffer_put@sz& (0+255),f,b
  8047  000E04  50DD               	movf	postdec2,w,c
  8048  000E06  237A               	addwfc	(rd_buffer_put@sz+1)& (0+255),f,b
  8049  000E08                     l288:
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;rd_buffer.c: 161: }
  8053                           ;rd_buffer.c: 162: if(sz < (pbuffer->head.size - 1))
  8054  000E08  EE20 F004          	lfsr	2,4
  8055  000E0C  D856               	call	PL58	;call to abstracted procedure
  8056  000E0E  0EFF               	movlw	255
  8057  000E10  2570               	addwf	??_rd_buffer_put& (0+255),w,b
  8058  000E12  6F72               	movwf	(??_rd_buffer_put+2)& (0+255),b
  8059  000E14  0EFF               	movlw	255
  8060  000E16  2171               	addwfc	(??_rd_buffer_put+1)& (0+255),w,b
  8061  000E18  6F73               	movwf	(??_rd_buffer_put+3)& (0+255),b
  8062  000E1A  517A               	movf	(rd_buffer_put@sz+1)& (0+255),w,b
  8063  000E1C  0A80               	xorlw	128
  8064  000E1E  6F74               	movwf	(??_rd_buffer_put+4)& (0+255),b
  8065  000E20  5172               	movf	(??_rd_buffer_put+2)& (0+255),w,b
  8066  000E22  5D79               	subwf	rd_buffer_put@sz& (0+255),w,b
  8067  000E24  5173               	movf	(??_rd_buffer_put+3)& (0+255),w,b
  8068  000E26  0A80               	xorlw	128
  8069  000E28  5974               	subwfb	(??_rd_buffer_put+4)& (0+255),w,b
  8070  000E2A  B0D8               	btfsc	status,0,c
  8071  000E2C  0012               	return	
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;rd_buffer.c: 163: {
  8075                           ;rd_buffer.c: 164: INT ind = pbuffer->head.last;
  8076  000E2E  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  8077  000E32  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  8078  000E36  CFDE F07B          	movff	postinc2,rd_buffer_put@ind
  8079  000E3A  CFDD F07C          	movff	postdec2,rd_buffer_put@ind+1
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;rd_buffer.c: 165: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
  8083  000E3E  C06C  F070         	movff	rd_buffer_put@pbuffer,??_rd_buffer_put
  8084  000E42  C06D  F071         	movff	rd_buffer_put@pbuffer+1,??_rd_buffer_put+1
  8085  000E46  517B               	movf	rd_buffer_put@ind& (0+255),w,b
  8086  000E48  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  8087  000E4A  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  8088  000E4C  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  8089  000E4E  0E06               	movlw	6
  8090  000E50  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  8091  000E52  0E00               	movlw	0
  8092  000E54  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  8093  000E56  C070  F076         	movff	??_rd_buffer_put,rd_buffer_put@mes_rec
  8094  000E5A  C071  F077         	movff	??_rd_buffer_put+1,rd_buffer_put@mes_rec+1
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;rd_buffer.c: 166: (*mes_rec) = (*prec);
  8098  000E5E  C06E  FFF6         	movff	rd_buffer_put@prec,tblptrl
  8099  000E62  C06F  FFF7         	movff	rd_buffer_put@prec+1,tblptrh
  8100  000E66  6AF8               	clrf	tblptru,c
  8101  000E68  C076  FFD9         	movff	rd_buffer_put@mes_rec,fsr2l
  8102  000E6C  C077  FFDA         	movff	rd_buffer_put@mes_rec+1,fsr2h
  8103  000E70  0E05               	movlw	(high __ramtop+-1)
  8104  000E72  64F7               	cpfsgt	tblptrh,c
  8105  000E74  D003               	bra	u8797
  8106  000E76  0008               	tblrd		*
  8107  000E78  50F5               	movf	tablat,w,c
  8108  000E7A  D002               	bra	u8790
  8109  000E7C                     u8797:
  8110  000E7C  ECAC  F009         	call	PL10	;call to abstracted procedure
  8111  000E80                     u8790:
  8112  000E80  6EDF               	movwf	indf2,c
  8113                           
  8114                           ;rd_buffer.c: 167: ind++;
  8115  000E82  0100               	movlb	0	; () banked
  8116  000E84  4B7B               	infsnz	rd_buffer_put@ind& (0+255),f,b
  8117  000E86  2B7C               	incf	(rd_buffer_put@ind+1)& (0+255),f,b
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;rd_buffer.c: 169: if(ind == pbuffer->head.size ) {
  8121  000E88  EE20 F004          	lfsr	2,4
  8122  000E8C  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8123  000E8E  26D9               	addwf	fsr2l,f,c
  8124  000E90  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8125  000E92  22DA               	addwfc	fsr2h,f,c
  8126  000E94  52DE               	movf	postinc2,f,c
  8127  000E96  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  8128  000E98  18DD               	xorwf	postdec2,w,c
  8129  000E9A  C07B  FFE8         	movff	rd_buffer_put@ind,wreg
  8130  000E9E  B4D8               	btfsc	status,2,c
  8131  000EA0  18DF               	xorwf	indf2,w,c
  8132  000EA2  E102               	bnz	l7515
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;rd_buffer.c: 170: ind = 0;
  8136  000EA4  6B7B               	clrf	rd_buffer_put@ind& (0+255),b
  8137  000EA6  6B7C               	clrf	(rd_buffer_put@ind+1)& (0+255),b
  8138  000EA8                     l7515:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;rd_buffer.c: 171: }
  8142                           ;rd_buffer.c: 172: pbuffer->head.last = ind;
  8143  000EA8  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  8144  000EAC  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  8145  000EB0  C07B  FFDE         	movff	rd_buffer_put@ind,postinc2
  8146  000EB4  C07C  FFDD         	movff	rd_buffer_put@ind+1,postdec2
  8147                           
  8148                           ; BSR set to: 0
  8149                           
  8150                           ; BSR set to: 0
  8151  000EB8  0012               	return	
  8152  000EBA                     __end_of_rd_buffer_put:
  8153                           	opt stack 0
  8154  000EBA                     PL58:
  8155                           	opt stack 21
  8156  000EBA  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8157  000EBC  26D9               	addwf	fsr2l,f,c
  8158  000EBE  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8159  000EC0  22DA               	addwfc	fsr2h,f,c
  8160  000EC2  CFDE F070          	movff	postinc2,??_rd_buffer_put
  8161  000EC6  CFDD F071          	movff	postdec2,??_rd_buffer_put+1
  8162  000ECA  0012               	return	
  8163  000ECC                     __end_ofPL58:
  8164                           	opt stack 0
  8165  000ECC                     PL70:
  8166                           	opt stack 21
  8167  000ECC  516E               	movf	rd_buffer_put@prec& (0+255),w,b
  8168  000ECE  6EF6               	movwf	tblptrl,c
  8169  000ED0  6EE9               	movwf	fsr0l,c
  8170  000ED2  0E05               	movlw	(high __ramtop+-1)
  8171  000ED4  6EEA               	movwf	fsr0h,c
  8172  000ED6  516F               	movf	(rd_buffer_put@prec+1)& (0+255),w,b
  8173  000ED8  0012               	return	
  8174  000EDA                     __end_ofPL70:
  8175                           	opt stack 0
  8176                           tosu	equ	0xFFF
  8177                           tosh	equ	0xFFE
  8178                           tosl	equ	0xFFD
  8179                           pclath	equ	0xFFA
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           intcon	equ	0xFF2
  8187                           indf0	equ	0xFEF
  8188                           postinc0	equ	0xFEE
  8189                           fsr0h	equ	0xFEA
  8190                           fsr0l	equ	0xFE9
  8191                           wreg	equ	0xFE8
  8192                           indf1	equ	0xFE7
  8193                           postinc1	equ	0xFE6
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           fsr2h	equ	0xFDA
  8201                           fsr2l	equ	0xFD9
  8202                           status	equ	0xFD8
  8203                           
  8204 ;; *************** function _syntax_get_text *****************
  8205 ;; Defined at:
  8206 ;;		line 169 in file "src/modules/syntax.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;		None
  8209 ;; Auto vars:     Size  Location     Type
  8210 ;;		None
  8211 ;; Return value:  Size  Location     Type
  8212 ;;                  2    wreg      PTR const unsigned char 
  8213 ;; Registers used:
  8214 ;;		wreg, status,2
  8215 ;; Tracked objects:
  8216 ;;		On entry : F/0
  8217 ;;		On exit  : F/3
  8218 ;;		Unchanged: FFFFFFF0/0
  8219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8220 ;;      Params:         0       0       0       0       0       0       0
  8221 ;;      Locals:         0       0       0       0       0       0       0
  8222 ;;      Temps:          0       0       0       0       0       0       0
  8223 ;;      Totals:         0       0       0       0       0       0       0
  8224 ;;Total ram usage:        0 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    5
  8227 ;; This function calls:
  8228 ;;		Nothing
  8229 ;; This function is called by:
  8230 ;;		_set_parameter
  8231 ;;		_get_parameter
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text29
  8236  00227A                     __ptext29:
  8237                           	opt stack 0
  8238  00227A                     _syntax_get_text:
  8239                           	opt stack 21
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;syntax.c: 170: return parameter_text;
  8243                           
  8244                           ; BSR set to: 0
  8245  00227A  0103               	movlb	3	; () banked
  8246  00227C  0E03               	movlw	high _parameter_text
  8247  00227E  6E02               	movwf	?_syntax_get_text+1,c
  8248  002280  0E00               	movlw	low _parameter_text
  8249  002282  6E01               	movwf	?_syntax_get_text,c
  8250                           
  8251                           ; BSR set to: 3
  8252  002284  0012               	return	
  8253  002286                     __end_of_syntax_get_text:
  8254                           	opt stack 0
  8255                           tosu	equ	0xFFF
  8256                           tosh	equ	0xFFE
  8257                           tosl	equ	0xFFD
  8258                           pclath	equ	0xFFA
  8259                           tblptru	equ	0xFF8
  8260                           tblptrh	equ	0xFF7
  8261                           tblptrl	equ	0xFF6
  8262                           tablat	equ	0xFF5
  8263                           prodh	equ	0xFF4
  8264                           prodl	equ	0xFF3
  8265                           intcon	equ	0xFF2
  8266                           indf0	equ	0xFEF
  8267                           postinc0	equ	0xFEE
  8268                           fsr0h	equ	0xFEA
  8269                           fsr0l	equ	0xFE9
  8270                           wreg	equ	0xFE8
  8271                           indf1	equ	0xFE7
  8272                           postinc1	equ	0xFE6
  8273                           postdec1	equ	0xFE5
  8274                           fsr1h	equ	0xFE2
  8275                           fsr1l	equ	0xFE1
  8276                           indf2	equ	0xFDF
  8277                           postinc2	equ	0xFDE
  8278                           postdec2	equ	0xFDD
  8279                           fsr2h	equ	0xFDA
  8280                           fsr2l	equ	0xFD9
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function _startup *****************
  8284 ;; Defined at:
  8285 ;;		line 16 in file "src/startup/startup.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;		None
  8288 ;; Auto vars:     Size  Location     Type
  8289 ;;  result          1   19[BANK0 ] enum E3389
  8290 ;; Return value:  Size  Location     Type
  8291 ;;                  1    wreg      enum E3389
  8292 ;; Registers used:
  8293 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8294 ;; Tracked objects:
  8295 ;;		On entry : 0/0
  8296 ;;		On exit  : F/0
  8297 ;;		Unchanged: FFFFFFF0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8299 ;;      Params:         0       0       0       0       0       0       0
  8300 ;;      Locals:         0       1       0       0       0       0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0
  8302 ;;      Totals:         0       1       0       0       0       0       0
  8303 ;;Total ram usage:        1 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    8
  8306 ;; This function calls:
  8307 ;;		_gpio_init
  8308 ;;		_sysclk_init
  8309 ;;		_adc_init
  8310 ;;		_uart_init
  8311 ;;		_uart_puts
  8312 ;;		_serialport_startup
  8313 ;; This function is called by:
  8314 ;;		_main
  8315 ;; This function uses a non-reentrant model
  8316 ;;
  8317                           
  8318                           	psect	text30
  8319  001EB2                     __ptext30:
  8320                           	opt stack 0
  8321  001EB2                     _startup:
  8322                           	opt stack 22
  8323                           
  8324                           ;startup.c: 17: ResultSuccess_t result = RESULT_FAIL;
  8325                           
  8326                           ; BSR set to: 3
  8327  001EB2  0100               	movlb	0	; () banked
  8328  001EB4  6B73               	clrf	startup@result& (0+255),b
  8329                           
  8330                           ; BSR set to: 0
  8331                           ;startup.c: 18: gpio_init();
  8332  001EB6  EC1B  F011         	call	_gpio_init	;wreg free
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;startup.c: 19: sysclk_init();
  8336  001EBA  EC50  F011         	call	_sysclk_init	;wreg free
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;startup.c: 20: adc_init();
  8340  001EBE  ECFF  F010         	call	_adc_init	;wreg free
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;startup.c: 21: uart_init();
  8344  001EC2  ECA8  F010         	call	_uart_init	;wreg free
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;startup.c: 22: events[(5)] = (PEVENT)serialport_task;
  8348  001EC6  0E19               	movlw	high _serialport_task
  8349  001EC8  6FC3               	movwf	(_events+11)& (0+255),b	;volatile
  8350  001ECA  0EE8               	movlw	low _serialport_task
  8351  001ECC  6FC2               	movwf	(_events+10)& (0+255),b	;volatile
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;startup.c: 23: events[(2)] = (PEVENT)detection_task;
  8355  001ECE  0E19               	movlw	high _detection_task
  8356  001ED0  6FBD               	movwf	(_events+5)& (0+255),b	;volatile
  8357  001ED2  0E6C               	movlw	low _detection_task
  8358  001ED4  6FBC               	movwf	(_events+4)& (0+255),b	;volatile
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;startup.c: 25: uart_puts("hello",100);
  8362  001ED6  0E7F               	movlw	high STR_32
  8363  001ED8  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  8364  001EDA  0EE3               	movlw	low STR_32
  8365  001EDC  6F6D               	movwf	?_uart_puts& (0+255),b
  8366  001EDE  6B70               	clrf	(?_uart_puts+3)& (0+255),b
  8367  001EE0  0E64               	movlw	100
  8368  001EE2  6F6F               	movwf	(?_uart_puts+2)& (0+255),b
  8369  001EE4  EC43  F00E         	call	_uart_puts	;wreg free
  8370                           
  8371                           ;startup.c: 27: if(!serialport_startup()) break;
  8372  001EE8  EC3A  F010         	call	_serialport_startup	;wreg free
  8373  001EEC  0900               	iorlw	0
  8374  001EEE  E002               	bz	l999
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;startup.c: 31: result = RESULT_SUCCESS;
  8378  001EF0  0E01               	movlw	1
  8379  001EF2  6F73               	movwf	startup@result& (0+255),b
  8380  001EF4                     l999:
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;startup.c: 32: }while(0);
  8384                           ;startup.c: 33: return result;
  8385  001EF4  5173               	movf	startup@result& (0+255),w,b
  8386                           
  8387                           ; BSR set to: 0
  8388  001EF6  0012               	return	
  8389  001EF8                     __end_of_startup:
  8390                           	opt stack 0
  8391                           tosu	equ	0xFFF
  8392                           tosh	equ	0xFFE
  8393                           tosl	equ	0xFFD
  8394                           pclath	equ	0xFFA
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           intcon	equ	0xFF2
  8402                           indf0	equ	0xFEF
  8403                           postinc0	equ	0xFEE
  8404                           fsr0h	equ	0xFEA
  8405                           fsr0l	equ	0xFE9
  8406                           wreg	equ	0xFE8
  8407                           indf1	equ	0xFE7
  8408                           postinc1	equ	0xFE6
  8409                           postdec1	equ	0xFE5
  8410                           fsr1h	equ	0xFE2
  8411                           fsr1l	equ	0xFE1
  8412                           indf2	equ	0xFDF
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function _sysclk_init *****************
  8420 ;; Defined at:
  8421 ;;		line 7 in file "src/drivers/sysclk.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;		None
  8426 ;; Return value:  Size  Location     Type
  8427 ;;		None               void
  8428 ;; Registers used:
  8429 ;;		wreg, status,2, status,0, cstack
  8430 ;; Tracked objects:
  8431 ;;		On entry : F/0
  8432 ;;		On exit  : F/0
  8433 ;;		Unchanged: FFFFFFF0/0
  8434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8435 ;;      Params:         0       0       0       0       0       0       0
  8436 ;;      Locals:         0       0       0       0       0       0       0
  8437 ;;      Temps:          0       0       0       0       0       0       0
  8438 ;;      Totals:         0       0       0       0       0       0       0
  8439 ;;Total ram usage:        0 bytes
  8440 ;; Hardware stack levels used:    1
  8441 ;; Hardware stack levels required when called:    6
  8442 ;; This function calls:
  8443 ;;		_sysclk_setup_intosc
  8444 ;; This function is called by:
  8445 ;;		_startup
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           	psect	text31
  8450  0022A0                     __ptext31:
  8451                           	opt stack 0
  8452  0022A0                     _sysclk_init:
  8453                           	opt stack 23
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;sysclk.c: 8: sysclk_setup_intosc(INTOSC_4MHZ);
  8457                           
  8458                           ; BSR set to: 0
  8459  0022A0  0E05               	movlw	5
  8460  0022A2  EF2D  F011         	goto	_sysclk_setup_intosc
  8461  0022A6                     __end_of_sysclk_init:
  8462                           	opt stack 0
  8463                           tosu	equ	0xFFF
  8464                           tosh	equ	0xFFE
  8465                           tosl	equ	0xFFD
  8466                           pclath	equ	0xFFA
  8467                           tblptru	equ	0xFF8
  8468                           tblptrh	equ	0xFF7
  8469                           tblptrl	equ	0xFF6
  8470                           tablat	equ	0xFF5
  8471                           prodh	equ	0xFF4
  8472                           prodl	equ	0xFF3
  8473                           intcon	equ	0xFF2
  8474                           indf0	equ	0xFEF
  8475                           postinc0	equ	0xFEE
  8476                           fsr0h	equ	0xFEA
  8477                           fsr0l	equ	0xFE9
  8478                           wreg	equ	0xFE8
  8479                           indf1	equ	0xFE7
  8480                           postinc1	equ	0xFE6
  8481                           postdec1	equ	0xFE5
  8482                           fsr1h	equ	0xFE2
  8483                           fsr1l	equ	0xFE1
  8484                           indf2	equ	0xFDF
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _sysclk_setup_intosc *****************
  8492 ;; Defined at:
  8493 ;;		line 12 in file "src/drivers/sysclk.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  frequency       1    wreg     enum E1
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  frequency       1   12[BANK0 ] enum E1
  8498 ;; Return value:  Size  Location     Type
  8499 ;;		None               void
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : F/0
  8504 ;;		On exit  : F/0
  8505 ;;		Unchanged: FFFFFFF0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8507 ;;      Params:         0       0       0       0       0       0       0
  8508 ;;      Locals:         0       1       0       0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0
  8510 ;;      Totals:         0       1       0       0       0       0       0
  8511 ;;Total ram usage:        1 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    5
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_sysclk_init
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           	psect	text32
  8522  00225A                     __ptext32:
  8523                           	opt stack 0
  8524  00225A                     _sysclk_setup_intosc:
  8525                           	opt stack 23
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;sysclk_setup_intosc@frequency stored from wreg
  8529  00225A  CFE8 F06C          	movff	wreg,sysclk_setup_intosc@frequency
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;sysclk.c: 13: OSCCON &= ~(0x07<<4);
  8533  00225E  0E8F               	movlw	143
  8534  002260  16D3               	andwf	4051,f,c	;volatile
  8535                           
  8536                           ;sysclk.c: 14: OSCCON |= frequency<<4;
  8537  002262  396C               	swapf	sysclk_setup_intosc@frequency& (0+255),w,b
  8538  002264  0BF0               	andlw	240
  8539  002266  12D3               	iorwf	4051,f,c	;volatile
  8540                           
  8541                           ; BSR set to: 0
  8542  002268  0012               	return	
  8543  00226A                     __end_of_sysclk_setup_intosc:
  8544                           	opt stack 0
  8545                           tosu	equ	0xFFF
  8546                           tosh	equ	0xFFE
  8547                           tosl	equ	0xFFD
  8548                           pclath	equ	0xFFA
  8549                           tblptru	equ	0xFF8
  8550                           tblptrh	equ	0xFF7
  8551                           tblptrl	equ	0xFF6
  8552                           tablat	equ	0xFF5
  8553                           prodh	equ	0xFF4
  8554                           prodl	equ	0xFF3
  8555                           intcon	equ	0xFF2
  8556                           indf0	equ	0xFEF
  8557                           postinc0	equ	0xFEE
  8558                           fsr0h	equ	0xFEA
  8559                           fsr0l	equ	0xFE9
  8560                           wreg	equ	0xFE8
  8561                           indf1	equ	0xFE7
  8562                           postinc1	equ	0xFE6
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           fsr2h	equ	0xFDA
  8570                           fsr2l	equ	0xFD9
  8571                           status	equ	0xFD8
  8572                           
  8573 ;; *************** function _uart_init *****************
  8574 ;; Defined at:
  8575 ;;		line 5 in file "src/drivers/uart.c"
  8576 ;; Parameters:    Size  Location     Type
  8577 ;;		None
  8578 ;; Auto vars:     Size  Location     Type
  8579 ;;		None
  8580 ;; Return value:  Size  Location     Type
  8581 ;;		None               void
  8582 ;; Registers used:
  8583 ;;		wreg, status,2, cstack
  8584 ;; Tracked objects:
  8585 ;;		On entry : F/0
  8586 ;;		On exit  : F/0
  8587 ;;		Unchanged: FFFFFFF0/0
  8588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8589 ;;      Params:         0       0       0       0       0       0       0
  8590 ;;      Locals:         0       0       0       0       0       0       0
  8591 ;;      Temps:          0       0       0       0       0       0       0
  8592 ;;      Totals:         0       0       0       0       0       0       0
  8593 ;;Total ram usage:        0 bytes
  8594 ;; Hardware stack levels used:    1
  8595 ;; Hardware stack levels required when called:    6
  8596 ;; This function calls:
  8597 ;;		_uart_set_baudrate
  8598 ;; This function is called by:
  8599 ;;		_startup
  8600 ;; This function uses a non-reentrant model
  8601 ;;
  8602                           
  8603                           	psect	text33
  8604  002150                     __ptext33:
  8605                           	opt stack 0
  8606  002150                     _uart_init:
  8607                           	opt stack 23
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;uart.c: 6: TXSTA = 0b00100110;
  8611                           
  8612                           ; BSR set to: 0
  8613  002150  0E26               	movlw	38
  8614  002152  6EAC               	movwf	4012,c	;volatile
  8615                           
  8616                           ;uart.c: 7: RCSTA = 0b10010000;
  8617  002154  0E90               	movlw	144
  8618  002156  6EAB               	movwf	4011,c	;volatile
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;uart.c: 8: BAUDCTL = 0b00000000;
  8622  002158  6AB8               	clrf	4024,c	;volatile
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;uart.c: 9: BAUDCON = 0b00000000;
  8626  00215A  6AB8               	clrf	4024,c	;volatile
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;uart.c: 10: uart_set_baudrate(19200);
  8630  00215C  6B6C               	clrf	?_uart_set_baudrate& (0+255),b
  8631  00215E  0E4B               	movlw	75
  8632  002160  6F6D               	movwf	(?_uart_set_baudrate+1)& (0+255),b
  8633  002162  0E00               	movlw	0
  8634  002164  6B6E               	clrf	(?_uart_set_baudrate+2)& (0+255),b
  8635  002166  EC53  F011         	call	_uart_set_baudrate	;wreg free
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;uart.c: 12: PIE1bits.RCIE=1;
  8639  00216A  8A9D               	bsf	3997,5,c	;volatile
  8640                           
  8641                           ; BSR set to: 0
  8642                           ;uart.c: 13: PIR1bits.RCIF=1;
  8643  00216C  8A9E               	bsf	3998,5,c	;volatile
  8644                           
  8645                           ; BSR set to: 0
  8646  00216E  0012               	return	
  8647  002170                     __end_of_uart_init:
  8648                           	opt stack 0
  8649                           tosu	equ	0xFFF
  8650                           tosh	equ	0xFFE
  8651                           tosl	equ	0xFFD
  8652                           pclath	equ	0xFFA
  8653                           tblptru	equ	0xFF8
  8654                           tblptrh	equ	0xFF7
  8655                           tblptrl	equ	0xFF6
  8656                           tablat	equ	0xFF5
  8657                           prodh	equ	0xFF4
  8658                           prodl	equ	0xFF3
  8659                           intcon	equ	0xFF2
  8660                           indf0	equ	0xFEF
  8661                           postinc0	equ	0xFEE
  8662                           fsr0h	equ	0xFEA
  8663                           fsr0l	equ	0xFE9
  8664                           wreg	equ	0xFE8
  8665                           indf1	equ	0xFE7
  8666                           postinc1	equ	0xFE6
  8667                           postdec1	equ	0xFE5
  8668                           fsr1h	equ	0xFE2
  8669                           fsr1l	equ	0xFE1
  8670                           indf2	equ	0xFDF
  8671                           postinc2	equ	0xFDE
  8672                           postdec2	equ	0xFDD
  8673                           fsr2h	equ	0xFDA
  8674                           fsr2l	equ	0xFD9
  8675                           status	equ	0xFD8
  8676                           
  8677 ;; *************** function _uart_set_baudrate *****************
  8678 ;; Defined at:
  8679 ;;		line 17 in file "src/drivers/uart.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  baudrate        3   12[BANK0 ] unsigned um
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;		None
  8684 ;; Return value:  Size  Location     Type
  8685 ;;		None               void
  8686 ;; Registers used:
  8687 ;;		wreg, status,2
  8688 ;; Tracked objects:
  8689 ;;		On entry : F/0
  8690 ;;		On exit  : F/0
  8691 ;;		Unchanged: FFFFFFF0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8693 ;;      Params:         0       3       0       0       0       0       0
  8694 ;;      Locals:         0       0       0       0       0       0       0
  8695 ;;      Temps:          0       0       0       0       0       0       0
  8696 ;;      Totals:         0       3       0       0       0       0       0
  8697 ;;Total ram usage:        3 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    5
  8700 ;; This function calls:
  8701 ;;		Nothing
  8702 ;; This function is called by:
  8703 ;;		_uart_init
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           	psect	text34
  8708  0022A6                     __ptext34:
  8709                           	opt stack 0
  8710  0022A6                     _uart_set_baudrate:
  8711                           	opt stack 23
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;uart.c: 19: SPBRG = 12;
  8715                           
  8716                           ; BSR set to: 0
  8717  0022A6  0E0C               	movlw	12
  8718  0022A8  6EAF               	movwf	4015,c	;volatile
  8719                           
  8720                           ; BSR set to: 0
  8721  0022AA  0C0C               	retlw	12
  8722  0022AC                     __end_of_uart_set_baudrate:
  8723                           	opt stack 0
  8724                           tosu	equ	0xFFF
  8725                           tosh	equ	0xFFE
  8726                           tosl	equ	0xFFD
  8727                           pclath	equ	0xFFA
  8728                           tblptru	equ	0xFF8
  8729                           tblptrh	equ	0xFF7
  8730                           tblptrl	equ	0xFF6
  8731                           tablat	equ	0xFF5
  8732                           prodh	equ	0xFF4
  8733                           prodl	equ	0xFF3
  8734                           intcon	equ	0xFF2
  8735                           indf0	equ	0xFEF
  8736                           postinc0	equ	0xFEE
  8737                           fsr0h	equ	0xFEA
  8738                           fsr0l	equ	0xFE9
  8739                           wreg	equ	0xFE8
  8740                           indf1	equ	0xFE7
  8741                           postinc1	equ	0xFE6
  8742                           postdec1	equ	0xFE5
  8743                           fsr1h	equ	0xFE2
  8744                           fsr1l	equ	0xFE1
  8745                           indf2	equ	0xFDF
  8746                           postinc2	equ	0xFDE
  8747                           postdec2	equ	0xFDD
  8748                           fsr2h	equ	0xFDA
  8749                           fsr2l	equ	0xFD9
  8750                           status	equ	0xFD8
  8751                           
  8752 ;; *************** function _uart_puts *****************
  8753 ;; Defined at:
  8754 ;;		line 31 in file "src/drivers/uart.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  pstr            2   13[BANK0 ] PTR const unsigned char 
  8757 ;;		 -> tmp(10), STR_32(6), 
  8758 ;;  size            2   15[BANK0 ] int 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;		None
  8761 ;; Return value:  Size  Location     Type
  8762 ;;		None               void
  8763 ;; Registers used:
  8764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8765 ;; Tracked objects:
  8766 ;;		On entry : F/0
  8767 ;;		On exit  : 0/0
  8768 ;;		Unchanged: FFFFFFF0/0
  8769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8770 ;;      Params:         0       4       0       0       0       0       0
  8771 ;;      Locals:         0       0       0       0       0       0       0
  8772 ;;      Temps:          0       0       0       0       0       0       0
  8773 ;;      Totals:         0       4       0       0       0       0       0
  8774 ;;Total ram usage:        4 bytes
  8775 ;; Hardware stack levels used:    1
  8776 ;; Hardware stack levels required when called:    7
  8777 ;; This function calls:
  8778 ;;		_uart_putc
  8779 ;; This function is called by:
  8780 ;;		_startup
  8781 ;;		_main
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text35
  8786  001C86                     __ptext35:
  8787                           	opt stack 0
  8788  001C86                     _uart_puts:
  8789                           	opt stack 23
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;uart.c: 32: while(size-- && *pstr)
  8793                           
  8794                           ; BSR set to: 0
  8795  001C86  D010               	goto	l4969
  8796  001C88                     l4965:
  8797                           
  8798                           ;uart.c: 33: {
  8799                           ;uart.c: 34: uart_putc(*pstr);
  8800  001C88  0100               	movlb	0	; () banked
  8801  001C8A  516D               	movf	uart_puts@pstr& (0+255),w,b
  8802  001C8C  D824               	call	PL80	;call to abstracted procedure
  8803  001C8E  64EA               	cpfsgt	fsr0h,c
  8804  001C90  D003               	bra	u4677
  8805  001C92  6EEA               	movwf	fsr0h,c
  8806  001C94  50EF               	movf	indf0,w,c
  8807  001C96  D003               	bra	u4670
  8808  001C98                     u4677:
  8809  001C98  6EF7               	movwf	tblptrh,c
  8810  001C9A  0008               	tblrd		*
  8811  001C9C  50F5               	movf	tablat,w,c
  8812  001C9E                     u4670:
  8813  001C9E  EC12  F011         	call	_uart_putc
  8814                           
  8815                           ;uart.c: 35: pstr++;
  8816  001CA2  0100               	movlb	0	; () banked
  8817  001CA4  4B6D               	infsnz	uart_puts@pstr& (0+255),f,b
  8818  001CA6  2B6E               	incf	(uart_puts@pstr+1)& (0+255),f,b
  8819  001CA8                     l4969:
  8820                           
  8821                           ; BSR set to: 0
  8822  001CA8  076F               	decf	uart_puts@size& (0+255),f,b
  8823  001CAA  A0D8               	btfss	status,0,c
  8824  001CAC  0770               	decf	(uart_puts@size+1)& (0+255),f,b
  8825  001CAE  0100               	movlb	0	; () banked
  8826  001CB0  296F               	incf	uart_puts@size& (0+255),w,b
  8827  001CB2  B4D8               	btfsc	status,2,c
  8828  001CB4  2970               	incf	(uart_puts@size+1)& (0+255),w,b
  8829  001CB6  B4D8               	btfsc	status,2,c
  8830  001CB8  0012               	return	
  8831                           
  8832                           ; BSR set to: 0
  8833  001CBA  516D               	movf	uart_puts@pstr& (0+255),w,b
  8834  001CBC  D80C               	call	PL80	;call to abstracted procedure
  8835  001CBE  64EA               	cpfsgt	fsr0h,c
  8836  001CC0  D003               	bra	u4697
  8837  001CC2  6EEA               	movwf	fsr0h,c
  8838  001CC4  50EF               	movf	indf0,w,c
  8839  001CC6  D003               	bra	u4690
  8840  001CC8                     u4697:
  8841  001CC8  6EF7               	movwf	tblptrh,c
  8842  001CCA  0008               	tblrd		*
  8843  001CCC  50F5               	movf	tablat,w,c
  8844  001CCE                     u4690:
  8845  001CCE  0900               	iorlw	0
  8846  001CD0  B4D8               	btfsc	status,2,c
  8847  001CD2  0012               	return	
  8848  001CD4  D7D9               	goto	l4965
  8849  001CD6                     __end_of_uart_puts:
  8850                           	opt stack 0
  8851  001CD6                     PL80:
  8852                           	opt stack 23
  8853  001CD6  6EF6               	movwf	tblptrl,c
  8854  001CD8  6EE9               	movwf	fsr0l,c
  8855  001CDA  0E05               	movlw	(high __ramtop+-1)
  8856  001CDC  6EEA               	movwf	fsr0h,c
  8857  001CDE  516E               	movf	(uart_puts@pstr+1)& (0+255),w,b
  8858  001CE0  0012               	return	
  8859  001CE2                     __end_ofPL80:
  8860                           	opt stack 0
  8861                           tosu	equ	0xFFF
  8862                           tosh	equ	0xFFE
  8863                           tosl	equ	0xFFD
  8864                           pclath	equ	0xFFA
  8865                           tblptru	equ	0xFF8
  8866                           tblptrh	equ	0xFF7
  8867                           tblptrl	equ	0xFF6
  8868                           tablat	equ	0xFF5
  8869                           prodh	equ	0xFF4
  8870                           prodl	equ	0xFF3
  8871                           intcon	equ	0xFF2
  8872                           indf0	equ	0xFEF
  8873                           postinc0	equ	0xFEE
  8874                           fsr0h	equ	0xFEA
  8875                           fsr0l	equ	0xFE9
  8876                           wreg	equ	0xFE8
  8877                           indf1	equ	0xFE7
  8878                           postinc1	equ	0xFE6
  8879                           postdec1	equ	0xFE5
  8880                           fsr1h	equ	0xFE2
  8881                           fsr1l	equ	0xFE1
  8882                           indf2	equ	0xFDF
  8883                           postinc2	equ	0xFDE
  8884                           postdec2	equ	0xFDD
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _uart_putc *****************
  8890 ;; Defined at:
  8891 ;;		line 40 in file "src/drivers/uart.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  byte            1    wreg     unsigned char 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  byte            1   12[BANK0 ] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;		None               void
  8898 ;; Registers used:
  8899 ;;		wreg, status,2, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/1
  8902 ;;		On exit  : 0/1
  8903 ;;		Unchanged: FFFFFFFF/0
  8904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8905 ;;      Params:         0       0       0       0       0       0       0
  8906 ;;      Locals:         0       1       0       0       0       0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0
  8908 ;;      Totals:         0       1       0       0       0       0       0
  8909 ;;Total ram usage:        1 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    6
  8912 ;; This function calls:
  8913 ;;		_uart_byte_sent
  8914 ;; This function is called by:
  8915 ;;		_uart_puts
  8916 ;;		_serialport_task
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           	psect	text36
  8921  002224                     __ptext36:
  8922                           	opt stack 0
  8923  002224                     _uart_putc:
  8924                           	opt stack 23
  8925                           
  8926                           ;uart_putc@byte stored from wreg
  8927  002224  CFE8 F06C          	movff	wreg,uart_putc@byte
  8928  002228                     l4975:
  8929  002228  EC48  F011         	call	_uart_byte_sent	;wreg free
  8930  00222C  0900               	iorlw	0
  8931  00222E  E0FC               	bz	l4975
  8932                           
  8933                           ;uart.c: 42: TXREG = byte;
  8934  002230  C06C  FFAD         	movff	uart_putc@byte,4013	;volatile
  8935  002234  0012               	return	
  8936  002236                     __end_of_uart_putc:
  8937                           	opt stack 0
  8938                           tosu	equ	0xFFF
  8939                           tosh	equ	0xFFE
  8940                           tosl	equ	0xFFD
  8941                           pclath	equ	0xFFA
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           indf0	equ	0xFEF
  8950                           postinc0	equ	0xFEE
  8951                           fsr0h	equ	0xFEA
  8952                           fsr0l	equ	0xFE9
  8953                           wreg	equ	0xFE8
  8954                           indf1	equ	0xFE7
  8955                           postinc1	equ	0xFE6
  8956                           postdec1	equ	0xFE5
  8957                           fsr1h	equ	0xFE2
  8958                           fsr1l	equ	0xFE1
  8959                           indf2	equ	0xFDF
  8960                           postinc2	equ	0xFDE
  8961                           postdec2	equ	0xFDD
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _uart_byte_sent *****************
  8967 ;; Defined at:
  8968 ;;		line 46 in file "src/drivers/uart.c"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;		None
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;		None
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      unsigned char 
  8975 ;; Registers used:
  8976 ;;		wreg
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/1
  8979 ;;		On exit  : 0/1
  8980 ;;		Unchanged: FFFFFFFF/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8982 ;;      Params:         0       0       0       0       0       0       0
  8983 ;;      Locals:         0       0       0       0       0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0
  8985 ;;      Totals:         0       0       0       0       0       0       0
  8986 ;;Total ram usage:        0 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:    5
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_uart_putc
  8993 ;; This function uses a non-reentrant model
  8994 ;;
  8995                           
  8996                           	psect	text37
  8997  002290                     __ptext37:
  8998                           	opt stack 0
  8999  002290                     _uart_byte_sent:
  9000                           	opt stack 23
  9001                           
  9002                           ;uart.c: 47: return TXIF;
  9003  002290  0E00               	movlw	0
  9004  002292  B89E               	btfsc	3998,4,c	;volatile
  9005  002294  0E01               	movlw	1
  9006  002296  0012               	return	
  9007  002298                     __end_of_uart_byte_sent:
  9008                           	opt stack 0
  9009                           tosu	equ	0xFFF
  9010                           tosh	equ	0xFFE
  9011                           tosl	equ	0xFFD
  9012                           pclath	equ	0xFFA
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           intcon	equ	0xFF2
  9020                           indf0	equ	0xFEF
  9021                           postinc0	equ	0xFEE
  9022                           fsr0h	equ	0xFEA
  9023                           fsr0l	equ	0xFE9
  9024                           wreg	equ	0xFE8
  9025                           indf1	equ	0xFE7
  9026                           postinc1	equ	0xFE6
  9027                           postdec1	equ	0xFE5
  9028                           fsr1h	equ	0xFE2
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           postdec2	equ	0xFDD
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _adc_init *****************
  9038 ;; Defined at:
  9039 ;;		line 5 in file "src/drivers/adc.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;		None
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;		None
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, status,2
  9048 ;; Tracked objects:
  9049 ;;		On entry : F/0
  9050 ;;		On exit  : F/0
  9051 ;;		Unchanged: FFFFFFF0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9053 ;;      Params:         0       0       0       0       0       0       0
  9054 ;;      Locals:         0       0       0       0       0       0       0
  9055 ;;      Temps:          0       0       0       0       0       0       0
  9056 ;;      Totals:         0       0       0       0       0       0       0
  9057 ;;Total ram usage:        0 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    5
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_startup
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text38
  9068  0021FE                     __ptext38:
  9069                           	opt stack 0
  9070  0021FE                     _adc_init:
  9071                           	opt stack 24
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;adc.c: 6: ADCON0 = 0b00000001;
  9075  0021FE  0E01               	movlw	1
  9076  002200  6EC2               	movwf	4034,c	;volatile
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;adc.c: 7: ADCON1 = 0b00000000;
  9080  002202  6AC1               	clrf	4033,c	;volatile
  9081                           
  9082                           ;adc.c: 8: ADCON2 = 0b00010110;
  9083  002204  0E16               	movlw	22
  9084  002206  6EC0               	movwf	4032,c	;volatile
  9085                           
  9086                           ;adc.c: 9: ANSEL = 0b01100011;
  9087  002208  0E63               	movlw	99
  9088  00220A  6E7E               	movwf	3966,c	;volatile
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;adc.c: 10: ANSELH = 0;
  9092  00220C  6A7F               	clrf	3967,c	;volatile
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;adc.c: 11: PIE1bits.ADIE = 1;
  9096  00220E  8C9D               	bsf	3997,6,c	;volatile
  9097                           
  9098                           ; BSR set to: 0
  9099  002210  0012               	return	
  9100  002212                     __end_of_adc_init:
  9101                           	opt stack 0
  9102                           tosu	equ	0xFFF
  9103                           tosh	equ	0xFFE
  9104                           tosl	equ	0xFFD
  9105                           pclath	equ	0xFFA
  9106                           tblptru	equ	0xFF8
  9107                           tblptrh	equ	0xFF7
  9108                           tblptrl	equ	0xFF6
  9109                           tablat	equ	0xFF5
  9110                           prodh	equ	0xFF4
  9111                           prodl	equ	0xFF3
  9112                           intcon	equ	0xFF2
  9113                           indf0	equ	0xFEF
  9114                           postinc0	equ	0xFEE
  9115                           fsr0h	equ	0xFEA
  9116                           fsr0l	equ	0xFE9
  9117                           wreg	equ	0xFE8
  9118                           indf1	equ	0xFE7
  9119                           postinc1	equ	0xFE6
  9120                           postdec1	equ	0xFE5
  9121                           fsr1h	equ	0xFE2
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function _gpio_init *****************
  9131 ;; Defined at:
  9132 ;;		line 4 in file "src/drivers/gpio.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;		None
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;		None
  9137 ;; Return value:  Size  Location     Type
  9138 ;;		None               void
  9139 ;; Registers used:
  9140 ;;		wreg, status,2
  9141 ;; Tracked objects:
  9142 ;;		On entry : F/0
  9143 ;;		On exit  : F/0
  9144 ;;		Unchanged: FFFFFFF0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9146 ;;      Params:         0       0       0       0       0       0       0
  9147 ;;      Locals:         0       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0
  9149 ;;      Totals:         0       0       0       0       0       0       0
  9150 ;;Total ram usage:        0 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    5
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_startup
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           	psect	text39
  9161  002236                     __ptext39:
  9162                           	opt stack 0
  9163  002236                     _gpio_init:
  9164                           	opt stack 24
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;gpio.c: 7: TRISA=0xff;
  9168                           
  9169                           ; BSR set to: 0
  9170  002236  6892               	setf	3986,c	;volatile
  9171                           
  9172                           ;gpio.c: 8: TRISB=0xff;
  9173  002238  6893               	setf	3987,c	;volatile
  9174                           
  9175                           ;gpio.c: 9: ANSELH=0;
  9176  00223A  6A7F               	clrf	3967,c	;volatile
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;gpio.c: 10: TRISC=0xc1;
  9180  00223C  0EC1               	movlw	193
  9181  00223E  6E94               	movwf	3988,c	;volatile
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;gpio.c: 11: TRISD=0x00;
  9185  002240  6A95               	clrf	3989,c	;volatile
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;gpio.c: 12: LATC=0;
  9189  002242  6A8B               	clrf	3979,c	;volatile
  9190                           
  9191                           ; BSR set to: 0
  9192                           ;gpio.c: 13: LATD=0;
  9193  002244  6A8C               	clrf	3980,c	;volatile
  9194                           
  9195                           ; BSR set to: 0
  9196  002246  0012               	return	
  9197  002248                     __end_of_gpio_init:
  9198                           	opt stack 0
  9199                           tosu	equ	0xFFF
  9200                           tosh	equ	0xFFE
  9201                           tosl	equ	0xFFD
  9202                           pclath	equ	0xFFA
  9203                           tblptru	equ	0xFF8
  9204                           tblptrh	equ	0xFF7
  9205                           tblptrl	equ	0xFF6
  9206                           tablat	equ	0xFF5
  9207                           prodh	equ	0xFF4
  9208                           prodl	equ	0xFF3
  9209                           intcon	equ	0xFF2
  9210                           indf0	equ	0xFEF
  9211                           postinc0	equ	0xFEE
  9212                           fsr0h	equ	0xFEA
  9213                           fsr0l	equ	0xFE9
  9214                           wreg	equ	0xFE8
  9215                           indf1	equ	0xFE7
  9216                           postinc1	equ	0xFE6
  9217                           postdec1	equ	0xFE5
  9218                           fsr1h	equ	0xFE2
  9219                           fsr1l	equ	0xFE1
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function _serialport_startup *****************
  9228 ;; Defined at:
  9229 ;;		line 16 in file "src/modules/serialport.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  result          1   18[BANK0 ] enum E3389
  9234 ;; Return value:  Size  Location     Type
  9235 ;;                  1    wreg      enum E3389
  9236 ;; Registers used:
  9237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : F/0
  9241 ;;		Unchanged: FFFFFFF0/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9243 ;;      Params:         0       0       0       0       0       0       0
  9244 ;;      Locals:         0       1       0       0       0       0       0
  9245 ;;      Temps:          0       1       0       0       0       0       0
  9246 ;;      Totals:         0       2       0       0       0       0       0
  9247 ;;Total ram usage:        2 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    6
  9250 ;; This function calls:
  9251 ;;		_rd_buffer_init
  9252 ;; This function is called by:
  9253 ;;		_startup
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           	psect	text40
  9258  002074                     __ptext40:
  9259                           	opt stack 0
  9260  002074                     _serialport_startup:
  9261                           	opt stack 23
  9262                           
  9263                           ;serialport.c: 18: result = (ResultSuccess_t) rd_buffer_init(&g_rx_buffer, ((100)))
  9264                           ;serialport.c: 19: | (ResultSuccess_t) rd_buffer_init(&g_tx_buffer, ((100)));
  9265                           
  9266                           ; BSR set to: 0
  9267  002074  0E01               	movlw	high _g_tx_buffer
  9268  002076  0100               	movlb	0	; () banked
  9269  002078  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  9270  00207A  0E00               	movlw	low _g_tx_buffer
  9271  00207C  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  9272  00207E  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  9273  002080  0E64               	movlw	100
  9274  002082  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  9275  002084  EC9F  F00F         	call	_rd_buffer_init	;wreg free
  9276  002088  6F71               	movwf	??_serialport_startup& (0+255),b
  9277  00208A  0E02               	movlw	high _g_rx_buffer
  9278  00208C  0100               	movlb	0	; () banked
  9279  00208E  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  9280  002090  0E7F               	movlw	low _g_rx_buffer
  9281  002092  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  9282  002094  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  9283  002096  0E64               	movlw	100
  9284  002098  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  9285  00209A  EC9F  F00F         	call	_rd_buffer_init	;wreg free
  9286  00209E  1171               	iorwf	??_serialport_startup& (0+255),w,b
  9287  0020A0  6F72               	movwf	serialport_startup@result& (0+255),b
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;serialport.c: 20: return result;
  9291  0020A2  5172               	movf	serialport_startup@result& (0+255),w,b
  9292                           
  9293                           ; BSR set to: 0
  9294  0020A4  0012               	return	
  9295  0020A6                     __end_of_serialport_startup:
  9296                           	opt stack 0
  9297                           tosu	equ	0xFFF
  9298                           tosh	equ	0xFFE
  9299                           tosl	equ	0xFFD
  9300                           pclath	equ	0xFFA
  9301                           tblptru	equ	0xFF8
  9302                           tblptrh	equ	0xFF7
  9303                           tblptrl	equ	0xFF6
  9304                           tablat	equ	0xFF5
  9305                           prodh	equ	0xFF4
  9306                           prodl	equ	0xFF3
  9307                           intcon	equ	0xFF2
  9308                           indf0	equ	0xFEF
  9309                           postinc0	equ	0xFEE
  9310                           fsr0h	equ	0xFEA
  9311                           fsr0l	equ	0xFE9
  9312                           wreg	equ	0xFE8
  9313                           indf1	equ	0xFE7
  9314                           postinc1	equ	0xFE6
  9315                           postdec1	equ	0xFE5
  9316                           fsr1h	equ	0xFE2
  9317                           fsr1l	equ	0xFE1
  9318                           indf2	equ	0xFDF
  9319                           postinc2	equ	0xFDE
  9320                           postdec2	equ	0xFDD
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325 ;; *************** function _rd_buffer_init *****************
  9326 ;; Defined at:
  9327 ;;		line 16 in file "src/modules/rd_buffer.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  9330 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  9331 ;;  size            2   14[BANK0 ] int 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  result          1   16[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  1    wreg      unsigned char 
  9336 ;; Registers used:
  9337 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9338 ;; Tracked objects:
  9339 ;;		On entry : F/0
  9340 ;;		On exit  : F/0
  9341 ;;		Unchanged: FFFFFFF0/0
  9342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9343 ;;      Params:         0       4       0       0       0       0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0
  9345 ;;      Temps:          0       0       0       0       0       0       0
  9346 ;;      Totals:         0       5       0       0       0       0       0
  9347 ;;Total ram usage:        5 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    5
  9350 ;; This function calls:
  9351 ;;		Nothing
  9352 ;; This function is called by:
  9353 ;;		_serialport_startup
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text41
  9358  001F3E                     __ptext41:
  9359                           	opt stack 0
  9360  001F3E                     _rd_buffer_init:
  9361                           	opt stack 23
  9362                           
  9363                           ; BSR set to: 0
  9364                           ;rd_buffer.c: 17: CHAR result = FALSE;
  9365                           
  9366                           ; BSR set to: 0
  9367  001F3E  6B70               	clrf	rd_buffer_init@result& (0+255),b
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;rd_buffer.c: 18: if(pbuffer != (0) ){
  9371  001F40  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9372  001F42  116C               	iorwf	rd_buffer_init@pbuffer& (0+255),w,b
  9373  001F44  E01A               	bz	l5033
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;rd_buffer.c: 19: pbuffer->head.first = 0;
  9377  001F46  EE20 F002          	lfsr	2,2
  9378  001F4A  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9379  001F4C  26D9               	addwf	fsr2l,f,c
  9380  001F4E  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9381  001F50  22DA               	addwfc	fsr2h,f,c
  9382  001F52  6ADE               	clrf	postinc2,c
  9383  001F54  6ADD               	clrf	postdec2,c
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;rd_buffer.c: 20: pbuffer->head.last = 0;
  9387  001F56  C06C  FFD9         	movff	rd_buffer_init@pbuffer,fsr2l
  9388  001F5A  C06D  FFDA         	movff	rd_buffer_init@pbuffer+1,fsr2h
  9389  001F5E  6ADE               	clrf	postinc2,c
  9390  001F60  6ADD               	clrf	postdec2,c
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;rd_buffer.c: 22: pbuffer->head.size = size;
  9394  001F62  EE20 F004          	lfsr	2,4
  9395  001F66  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9396  001F68  26D9               	addwf	fsr2l,f,c
  9397  001F6A  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9398  001F6C  22DA               	addwfc	fsr2h,f,c
  9399  001F6E  C06E  FFDE         	movff	rd_buffer_init@size,postinc2
  9400  001F72  C06F  FFDD         	movff	rd_buffer_init@size+1,postdec2
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;rd_buffer.c: 23: result = TRUE;
  9404  001F76  0E01               	movlw	1
  9405  001F78  6F70               	movwf	rd_buffer_init@result& (0+255),b
  9406  001F7A                     l5033:
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;rd_buffer.c: 24: }
  9410                           ;rd_buffer.c: 25: return result;
  9411  001F7A  5170               	movf	rd_buffer_init@result& (0+255),w,b
  9412                           
  9413                           ; BSR set to: 0
  9414  001F7C  0012               	return	
  9415  001F7E                     __end_of_rd_buffer_init:
  9416                           	opt stack 0
  9417                           tosu	equ	0xFFF
  9418                           tosh	equ	0xFFE
  9419                           tosl	equ	0xFFD
  9420                           pclath	equ	0xFFA
  9421                           tblptru	equ	0xFF8
  9422                           tblptrh	equ	0xFF7
  9423                           tblptrl	equ	0xFF6
  9424                           tablat	equ	0xFF5
  9425                           prodh	equ	0xFF4
  9426                           prodl	equ	0xFF3
  9427                           intcon	equ	0xFF2
  9428                           indf0	equ	0xFEF
  9429                           postinc0	equ	0xFEE
  9430                           fsr0h	equ	0xFEA
  9431                           fsr0l	equ	0xFE9
  9432                           wreg	equ	0xFE8
  9433                           indf1	equ	0xFE7
  9434                           postinc1	equ	0xFE6
  9435                           postdec1	equ	0xFE5
  9436                           fsr1h	equ	0xFE2
  9437                           fsr1l	equ	0xFE1
  9438                           indf2	equ	0xFDF
  9439                           postinc2	equ	0xFDE
  9440                           postdec2	equ	0xFDD
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _sprintf *****************
  9446 ;; Defined at:
  9447 ;;		line 493 in file "C:\Program Files\Microchip\xc8\v1.12\sources\doprnt.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  sp              1    wreg     PTR unsigned char 
  9450 ;;		 -> tmp(10), 
  9451 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  9452 ;;		 -> STR_33(4), 
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  sp              1   42[BANK0 ] PTR unsigned char 
  9455 ;;		 -> tmp(10), 
  9456 ;;  _val            5   37[BANK0 ] struct .
  9457 ;;  c               1   43[BANK0 ] char 
  9458 ;;  prec            1   36[BANK0 ] char 
  9459 ;;  flag            1   35[BANK0 ] unsigned char 
  9460 ;;  ap              1   34[BANK0 ] PTR void [1]
  9461 ;;		 -> ?_sprintf(2), 
  9462 ;; Return value:  Size  Location     Type
  9463 ;;                  2   28[BANK0 ] int 
  9464 ;; Registers used:
  9465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : F/0
  9468 ;;		On exit  : F/0
  9469 ;;		Unchanged: FFFFFFF0/0
  9470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9471 ;;      Params:         0       4       0       0       0       0       0
  9472 ;;      Locals:         0      10       0       0       0       0       0
  9473 ;;      Temps:          0       2       0       0       0       0       0
  9474 ;;      Totals:         0      16       0       0       0       0       0
  9475 ;;Total ram usage:       16 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    6
  9478 ;; This function calls:
  9479 ;;		___lwdiv
  9480 ;;		___lwmod
  9481 ;; This function is called by:
  9482 ;;		_main
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           	psect	text42
  9487  001150                     __ptext42:
  9488                           	opt stack 0
  9489  001150                     _sprintf:
  9490                           	opt stack 24
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;sprintf@sp stored from wreg
  9494  001150  CFE8 F08A          	movff	wreg,sprintf@sp
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;doprnt.c: 494: va_list ap;
  9498                           ;doprnt.c: 499: signed char c;
  9499                           ;doprnt.c: 506: signed char prec;
  9500                           ;doprnt.c: 508: unsigned char flag;
  9501                           ;doprnt.c: 527: union {
  9502                           ;doprnt.c: 528: unsigned int _val;
  9503                           ;doprnt.c: 529: struct {
  9504                           ;doprnt.c: 530: const char * _cp;
  9505                           ;doprnt.c: 531: unsigned _len;
  9506                           ;doprnt.c: 532: } _str;
  9507                           ;doprnt.c: 533: } _val;
  9508                           ;doprnt.c: 542: *ap = __va_start();
  9509  001154  0E7E               	movlw	low (?_sprintf+2)
  9510  001156  6F82               	movwf	sprintf@ap& (0+255),b
  9511                           
  9512                           ;doprnt.c: 545: while(c = *f++) {
  9513  001158  D064               	goto	l5927
  9514  00115A                     l5877:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;doprnt.c: 547: if(c != '%')
  9518  00115A  518B               	movf	sprintf@c& (0+255),w,b
  9519  00115C  0A25               	xorlw	37
  9520  00115E  E007               	bz	l1091
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;doprnt.c: 549: {
  9524                           ;doprnt.c: 550: ((*sp++ = (c)));
  9525  001160  518A               	movf	sprintf@sp& (0+255),w,b
  9526  001162  6ED9               	movwf	fsr2l,c
  9527  001164  6ADA               	clrf	fsr2h,c
  9528  001166  C08B  FFDF         	movff	sprintf@c,indf2
  9529                           
  9530                           ; BSR set to: 0
  9531  00116A  2B8A               	incf	sprintf@sp& (0+255),f,b
  9532                           
  9533                           ;doprnt.c: 551: continue;
  9534  00116C  D05A               	goto	l5927
  9535  00116E                     l1091:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;doprnt.c: 552: }
  9539                           ;doprnt.c: 557: flag = 0;
  9540  00116E  6B83               	clrf	sprintf@flag& (0+255),b
  9541                           
  9542                           ; BSR set to: 0
  9543                           
  9544                           ;doprnt.c: 644: switch(c = *f++) {
  9545  001170  D861               	call	PL38	;call to abstracted procedure
  9546  001172  518B               	movf	sprintf@c& (0+255),w,b
  9547                           
  9548                           ; Switch size 1, requested type "space"
  9549                           ; Number of cases is 3, Range of values is 0 to 105
  9550                           ; switch strategies available:
  9551                           ; Name         Instructions Cycles
  9552                           ; simple_byte           10     6 (average)
  9553                           ;	Chosen strategy is simple_byte
  9554  001174  E059               	bz	l5929
  9555  001176  0A64               	xorlw	100	; case 100
  9556  001178  A4D8               	btfss	status,2,c
  9557  00117A  0A0D               	xorlw	13	; case 105
  9558  00117C  E152               	bnz	l5927
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;doprnt.c: 1260: {
  9562                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9563  00117E  5182               	movf	sprintf@ap& (0+255),w,b
  9564  001180  6ED9               	movwf	fsr2l,c
  9565  001182  6ADA               	clrf	fsr2h,c
  9566  001184  CFDE F085          	movff	postinc2,sprintf@_val
  9567  001188  CFDD F086          	movff	postdec2,sprintf@_val+1
  9568                           
  9569                           ; BSR set to: 0
  9570  00118C  0E02               	movlw	2
  9571  00118E  2782               	addwf	sprintf@ap& (0+255),f,b
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  9575  001190  AF86               	btfss	(sprintf@_val+1)& (0+255),7,b
  9576  001192  D006               	goto	l5897
  9577                           
  9578                           ; BSR set to: 0
  9579                           ;doprnt.c: 1269: flag |= 0x03;
  9580  001194  0E03               	movlw	3
  9581  001196  1383               	iorwf	sprintf@flag& (0+255),f,b
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;doprnt.c: 1270: _val._val = -_val._val;
  9585  001198  6D85               	negf	sprintf@_val& (0+255),b
  9586  00119A  1F86               	comf	(sprintf@_val+1)& (0+255),f,b
  9587  00119C  B0D8               	btfsc	status,0,c
  9588  00119E  2B86               	incf	(sprintf@_val+1)& (0+255),f,b
  9589  0011A0                     l5897:
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;doprnt.c: 1271: }
  9593                           ;doprnt.c: 1273: }
  9594                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9595  0011A0  0E01               	movlw	1
  9596  0011A2  6F8B               	movwf	sprintf@c& (0+255),b
  9597  0011A4                     l5903:
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  9601  0011A4  518B               	movf	sprintf@c& (0+255),w,b
  9602  0011A6  D851               	call	PL50	;call to abstracted procedure
  9603  0011A8  CFF5 F080          	movff	tablat,??_sprintf
  9604  0011AC  0009               	tblrd		*+
  9605  0011AE  CFF5 F081          	movff	tablat,??_sprintf+1
  9606  0011B2  5180               	movf	??_sprintf& (0+255),w,b
  9607  0011B4  5D85               	subwf	sprintf@_val& (0+255),w,b
  9608  0011B6  5181               	movf	(??_sprintf+1)& (0+255),w,b
  9609  0011B8  5986               	subwfb	(sprintf@_val+1)& (0+255),w,b
  9610  0011BA  E304               	bnc	l5911
  9611                           
  9612                           ; BSR set to: 0
  9613  0011BC  2B8B               	incf	sprintf@c& (0+255),f,b
  9614                           
  9615                           ; BSR set to: 0
  9616  0011BE  518B               	movf	sprintf@c& (0+255),w,b
  9617  0011C0  0A05               	xorlw	5
  9618  0011C2  E1F0               	bnz	l5903
  9619  0011C4                     l5911:
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;doprnt.c: 1429: {
  9623                           ;doprnt.c: 1445: if(flag & 0x03)
  9624  0011C4  5183               	movf	sprintf@flag& (0+255),w,b
  9625  0011C6  0B03               	andlw	3
  9626  0011C8  E006               	bz	l5917
  9627                           
  9628                           ; BSR set to: 0
  9629                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  9630  0011CA  518A               	movf	sprintf@sp& (0+255),w,b
  9631  0011CC  6ED9               	movwf	fsr2l,c
  9632  0011CE  6ADA               	clrf	fsr2h,c
  9633  0011D0  0E2D               	movlw	45
  9634  0011D2  6EDF               	movwf	indf2,c
  9635                           
  9636                           ; BSR set to: 0
  9637  0011D4  2B8A               	incf	sprintf@sp& (0+255),f,b
  9638  0011D6                     l5917:
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;doprnt.c: 1476: }
  9642                           ;doprnt.c: 1479: prec = c;
  9643  0011D6  C08B  F084         	movff	sprintf@c,sprintf@prec
  9644                           
  9645                           ;doprnt.c: 1481: while(prec--) {
  9646  0011DA  D01F               	goto	l5925
  9647  0011DC                     l5919:
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;doprnt.c: 1485: {
  9651                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  9652  0011DC  5184               	movf	sprintf@prec& (0+255),w,b
  9653  0011DE  D835               	call	PL50	;call to abstracted procedure
  9654  0011E0  CFF5 F06E          	movff	tablat,?___lwdiv+2
  9655  0011E4  000A               	tblrd		*-
  9656  0011E6  CFF5 F06F          	movff	tablat,?___lwdiv+3
  9657  0011EA  C085  F06C         	movff	sprintf@_val,?___lwdiv
  9658  0011EE  C086  F06D         	movff	sprintf@_val+1,?___lwdiv+1
  9659  0011F2  EC10  F00F         	call	___lwdiv	;wreg free
  9660  0011F6  C06C  F073         	movff	?___lwdiv,?___lwmod
  9661  0011FA  C06D  F074         	movff	?___lwdiv+1,?___lwmod+1
  9662  0011FE  6B76               	clrf	(?___lwmod+3)& (0+255),b
  9663  001200  0E0A               	movlw	10
  9664  001202  6F75               	movwf	(?___lwmod+2)& (0+255),b
  9665  001204  ECFD  F00F         	call	___lwmod	;wreg free
  9666  001208  5173               	movf	?___lwmod& (0+255),w,b
  9667  00120A  0F30               	addlw	48
  9668  00120C  6F8B               	movwf	sprintf@c& (0+255),b
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;doprnt.c: 1530: }
  9672                           ;doprnt.c: 1531: ((*sp++ = (c)));
  9673  00120E  518A               	movf	sprintf@sp& (0+255),w,b
  9674  001210  6ED9               	movwf	fsr2l,c
  9675  001212  6ADA               	clrf	fsr2h,c
  9676  001214  C08B  FFDF         	movff	sprintf@c,indf2
  9677                           
  9678                           ; BSR set to: 0
  9679  001218  2B8A               	incf	sprintf@sp& (0+255),f,b
  9680  00121A                     l5925:
  9681                           
  9682                           ; BSR set to: 0
  9683  00121A  0784               	decf	sprintf@prec& (0+255),f,b
  9684  00121C  0100               	movlb	0	; () banked
  9685  00121E  2984               	incf	sprintf@prec& (0+255),w,b
  9686  001220  E1DD               	bnz	l5919
  9687  001222                     l5927:
  9688                           
  9689                           ; BSR set to: 0
  9690  001222  D808               	call	PL38	;call to abstracted procedure
  9691  001224  678B               	tstfsz	sprintf@c& (0+255),b
  9692  001226  D799               	goto	l5877
  9693  001228                     l5929:
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;doprnt.c: 1545: *sp = 0;
  9697  001228  518A               	movf	sprintf@sp& (0+255),w,b
  9698  00122A  6ED9               	movwf	fsr2l,c
  9699  00122C  6ADA               	clrf	fsr2h,c
  9700  00122E  0E00               	movlw	0
  9701  001230  6EDF               	movwf	indf2,c
  9702                           
  9703                           ; BSR set to: 0
  9704  001232  0C00               	retlw	0
  9705  001234                     __end_of_sprintf:
  9706                           	opt stack 0
  9707  001234                     PL38:
  9708                           	opt stack 24
  9709  001234  C07C  FFF6         	movff	sprintf@f,tblptrl
  9710  001238  C07D  FFF7         	movff	sprintf@f+1,tblptrh
  9711  00123C  4B7C               	infsnz	sprintf@f& (0+255),f,b
  9712  00123E  2B7D               	incf	(sprintf@f+1)& (0+255),f,b
  9713  001240  0008               	tblrd		*
  9714  001242  CFF5 F08B          	movff	tablat,sprintf@c
  9715  001246  0100               	movlb	0	; () banked
  9716  001248  0012               	return	
  9717  00124A                     __end_ofPL38:
  9718                           	opt stack 0
  9719  00124A                     PL50:
  9720                           	opt stack 24
  9721  00124A  0D02               	mullw	2
  9722  00124C  0E6C               	movlw	low _dpowers
  9723  00124E  24F3               	addwf	prodl,w,c
  9724  001250  6EF6               	movwf	tblptrl,c
  9725  001252  0E7D               	movlw	high _dpowers
  9726  001254  20F4               	addwfc	prodh,w,c
  9727  001256  6EF7               	movwf	tblptrh,c
  9728  001258  0009               	tblrd		*+
  9729  00125A  0012               	return	
  9730  00125C                     __end_ofPL50:
  9731                           	opt stack 0
  9732                           tosu	equ	0xFFF
  9733                           tosh	equ	0xFFE
  9734                           tosl	equ	0xFFD
  9735                           pclath	equ	0xFFA
  9736                           tblptru	equ	0xFF8
  9737                           tblptrh	equ	0xFF7
  9738                           tblptrl	equ	0xFF6
  9739                           tablat	equ	0xFF5
  9740                           prodh	equ	0xFF4
  9741                           prodl	equ	0xFF3
  9742                           intcon	equ	0xFF2
  9743                           indf0	equ	0xFEF
  9744                           postinc0	equ	0xFEE
  9745                           fsr0h	equ	0xFEA
  9746                           fsr0l	equ	0xFE9
  9747                           wreg	equ	0xFE8
  9748                           indf1	equ	0xFE7
  9749                           postinc1	equ	0xFE6
  9750                           postdec1	equ	0xFE5
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           indf2	equ	0xFDF
  9754                           postinc2	equ	0xFDE
  9755                           postdec2	equ	0xFDD
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function ___awdiv *****************
  9761 ;; Defined at:
  9762 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awdiv.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  dividend        2   12[BANK0 ] int 
  9765 ;;  divisor         2   14[BANK0 ] int 
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;  quotient        2   18[BANK0 ] int 
  9768 ;;  sign            1   17[BANK0 ] unsigned char 
  9769 ;;  counter         1   16[BANK0 ] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  2   12[BANK0 ] int 
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0
  9774 ;; Tracked objects:
  9775 ;;		On entry : F/0
  9776 ;;		On exit  : F/0
  9777 ;;		Unchanged: FFFFFFF0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9779 ;;      Params:         0       4       0       0       0       0       0
  9780 ;;      Locals:         0       4       0       0       0       0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0
  9782 ;;      Totals:         0       8       0       0       0       0       0
  9783 ;;Total ram usage:        8 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    5
  9786 ;; This function calls:
  9787 ;;		Nothing
  9788 ;; This function is called by:
  9789 ;;		_pd_add_value
  9790 ;; This function uses a non-reentrant model
  9791 ;;
  9792                           
  9793                           	psect	text43
  9794  001A62                     __ptext43:
  9795                           	opt stack 0
  9796  001A62                     ___awdiv:
  9797                           	opt stack 23
  9798                           
  9799                           ; BSR set to: 0
  9800                           
  9801                           ; BSR set to: 0
  9802  001A62  6B71               	clrf	___awdiv@sign& (0+255),b
  9803  001A64  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9804  001A66  D006               	goto	l5971
  9805                           
  9806                           ; BSR set to: 0
  9807  001A68  6D6E               	negf	___awdiv@divisor& (0+255),b
  9808  001A6A  1F6F               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9809  001A6C  B0D8               	btfsc	status,0,c
  9810  001A6E  2B6F               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9811                           
  9812                           ; BSR set to: 0
  9813  001A70  0E01               	movlw	1
  9814  001A72  6F71               	movwf	___awdiv@sign& (0+255),b
  9815  001A74                     l5971:
  9816                           
  9817                           ; BSR set to: 0
  9818  001A74  AF6D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9819  001A76  D006               	goto	l5977
  9820                           
  9821                           ; BSR set to: 0
  9822  001A78  6D6C               	negf	___awdiv@dividend& (0+255),b
  9823  001A7A  1F6D               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9824  001A7C  B0D8               	btfsc	status,0,c
  9825  001A7E  2B6D               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9826                           
  9827                           ; BSR set to: 0
  9828  001A80  0E01               	movlw	1
  9829  001A82  1B71               	xorwf	___awdiv@sign& (0+255),f,b
  9830  001A84                     l5977:
  9831                           
  9832                           ; BSR set to: 0
  9833  001A84  6B72               	clrf	___awdiv@quotient& (0+255),b
  9834  001A86  6B73               	clrf	(___awdiv@quotient+1)& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837  001A88  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9838  001A8A  116E               	iorwf	___awdiv@divisor& (0+255),w,b
  9839  001A8C  E01B               	bz	l5999
  9840                           
  9841                           ; BSR set to: 0
  9842  001A8E  0E01               	movlw	1
  9843  001A90  6F70               	movwf	___awdiv@counter& (0+255),b
  9844  001A92  D004               	goto	l5985
  9845  001A94                     l5983:
  9846                           
  9847                           ; BSR set to: 0
  9848  001A94  90D8               	bcf	status,0,c
  9849  001A96  376E               	rlcf	___awdiv@divisor& (0+255),f,b
  9850  001A98  376F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9851  001A9A  2B70               	incf	___awdiv@counter& (0+255),f,b
  9852  001A9C                     l5985:
  9853                           
  9854                           ; BSR set to: 0
  9855  001A9C  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9856  001A9E  D7FA               	goto	l5983
  9857  001AA0                     l5987:
  9858                           
  9859                           ; BSR set to: 0
  9860  001AA0  90D8               	bcf	status,0,c
  9861  001AA2  3772               	rlcf	___awdiv@quotient& (0+255),f,b
  9862  001AA4  3773               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9863                           
  9864                           ; BSR set to: 0
  9865  001AA6  516E               	movf	___awdiv@divisor& (0+255),w,b
  9866  001AA8  5D6C               	subwf	___awdiv@dividend& (0+255),w,b
  9867  001AAA  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9868  001AAC  596D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9869  001AAE  E305               	bnc	l5995
  9870                           
  9871                           ; BSR set to: 0
  9872  001AB0  516E               	movf	___awdiv@divisor& (0+255),w,b
  9873  001AB2  5F6C               	subwf	___awdiv@dividend& (0+255),f,b
  9874  001AB4  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9875  001AB6  5B6D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9876                           
  9877                           ; BSR set to: 0
  9878  001AB8  8172               	bsf	___awdiv@quotient& (0+255),0,b
  9879  001ABA                     l5995:
  9880                           
  9881                           ; BSR set to: 0
  9882  001ABA  90D8               	bcf	status,0,c
  9883  001ABC  336F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9884  001ABE  336E               	rrcf	___awdiv@divisor& (0+255),f,b
  9885                           
  9886                           ; BSR set to: 0
  9887  001AC0  2F70               	decfsz	___awdiv@counter& (0+255),f,b
  9888  001AC2  D7EE               	goto	l5987
  9889  001AC4                     l5999:
  9890                           
  9891                           ; BSR set to: 0
  9892  001AC4  5171               	movf	___awdiv@sign& (0+255),w,b
  9893  001AC6  E004               	bz	l6003
  9894                           
  9895                           ; BSR set to: 0
  9896  001AC8  6D72               	negf	___awdiv@quotient& (0+255),b
  9897  001ACA  1F73               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9898  001ACC  B0D8               	btfsc	status,0,c
  9899  001ACE  2B73               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9900  001AD0                     l6003:
  9901                           
  9902                           ; BSR set to: 0
  9903  001AD0  C072  F06C         	movff	___awdiv@quotient,?___awdiv
  9904  001AD4  C073  F06D         	movff	___awdiv@quotient+1,?___awdiv+1
  9905                           
  9906                           ; BSR set to: 0
  9907  001AD8  0012               	return	
  9908  001ADA                     __end_of___awdiv:
  9909                           	opt stack 0
  9910                           tosu	equ	0xFFF
  9911                           tosh	equ	0xFFE
  9912                           tosl	equ	0xFFD
  9913                           pclath	equ	0xFFA
  9914                           tblptru	equ	0xFF8
  9915                           tblptrh	equ	0xFF7
  9916                           tblptrl	equ	0xFF6
  9917                           tablat	equ	0xFF5
  9918                           prodh	equ	0xFF4
  9919                           prodl	equ	0xFF3
  9920                           intcon	equ	0xFF2
  9921                           indf0	equ	0xFEF
  9922                           postinc0	equ	0xFEE
  9923                           fsr0h	equ	0xFEA
  9924                           fsr0l	equ	0xFE9
  9925                           wreg	equ	0xFE8
  9926                           indf1	equ	0xFE7
  9927                           postinc1	equ	0xFE6
  9928                           postdec1	equ	0xFE5
  9929                           fsr1h	equ	0xFE2
  9930                           fsr1l	equ	0xFE1
  9931                           indf2	equ	0xFDF
  9932                           postinc2	equ	0xFDE
  9933                           postdec2	equ	0xFDD
  9934                           fsr2h	equ	0xFDA
  9935                           fsr2l	equ	0xFD9
  9936                           status	equ	0xFD8
  9937                           
  9938 ;; *************** function ___awmod *****************
  9939 ;; Defined at:
  9940 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awmod.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;  dividend        2   12[BANK0 ] int 
  9943 ;;  divisor         2   14[BANK0 ] int 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  sign            1   17[BANK0 ] unsigned char 
  9946 ;;  counter         1   16[BANK0 ] unsigned char 
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  2   12[BANK0 ] int 
  9949 ;; Registers used:
  9950 ;;		wreg, status,2, status,0
  9951 ;; Tracked objects:
  9952 ;;		On entry : F/0
  9953 ;;		On exit  : F/0
  9954 ;;		Unchanged: FFFFFFF0/0
  9955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9956 ;;      Params:         0       4       0       0       0       0       0
  9957 ;;      Locals:         0       2       0       0       0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0
  9959 ;;      Totals:         0       6       0       0       0       0       0
  9960 ;;Total ram usage:        6 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:    5
  9963 ;; This function calls:
  9964 ;;		Nothing
  9965 ;; This function is called by:
  9966 ;;		_pd_add_value
  9967 ;; This function uses a non-reentrant model
  9968 ;;
  9969                           
  9970                           	psect	text44
  9971  001BC0                     __ptext44:
  9972                           	opt stack 0
  9973  001BC0                     ___awmod:
  9974                           	opt stack 23
  9975                           
  9976                           ; BSR set to: 0
  9977                           
  9978                           ; BSR set to: 0
  9979  001BC0  6B71               	clrf	___awmod@sign& (0+255),b
  9980  001BC2  AF6D               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9981  001BC4  D006               	goto	l6013
  9982                           
  9983                           ; BSR set to: 0
  9984  001BC6  6D6C               	negf	___awmod@dividend& (0+255),b
  9985  001BC8  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  9986  001BCA  B0D8               	btfsc	status,0,c
  9987  001BCC  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  9988                           
  9989                           ; BSR set to: 0
  9990  001BCE  0E01               	movlw	1
  9991  001BD0  6F71               	movwf	___awmod@sign& (0+255),b
  9992  001BD2                     l6013:
  9993                           
  9994                           ; BSR set to: 0
  9995  001BD2  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9996  001BD4  D004               	goto	l6017
  9997                           
  9998                           ; BSR set to: 0
  9999  001BD6  6D6E               	negf	___awmod@divisor& (0+255),b
 10000  001BD8  1F6F               	comf	(___awmod@divisor+1)& (0+255),f,b
 10001  001BDA  B0D8               	btfsc	status,0,c
 10002  001BDC  2B6F               	incf	(___awmod@divisor+1)& (0+255),f,b
 10003  001BDE                     l6017:
 10004                           
 10005                           ; BSR set to: 0
 10006  001BDE  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
 10007  001BE0  116E               	iorwf	___awmod@divisor& (0+255),w,b
 10008  001BE2  E017               	bz	l6033
 10009                           
 10010                           ; BSR set to: 0
 10011  001BE4  0E01               	movlw	1
 10012  001BE6  6F70               	movwf	___awmod@counter& (0+255),b
 10013  001BE8  D004               	goto	l6023
 10014  001BEA                     l6021:
 10015                           
 10016                           ; BSR set to: 0
 10017  001BEA  90D8               	bcf	status,0,c
 10018  001BEC  376E               	rlcf	___awmod@divisor& (0+255),f,b
 10019  001BEE  376F               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10020  001BF0  2B70               	incf	___awmod@counter& (0+255),f,b
 10021  001BF2                     l6023:
 10022                           
 10023                           ; BSR set to: 0
 10024  001BF2  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10025  001BF4  D7FA               	goto	l6021
 10026  001BF6                     l6025:
 10027                           
 10028                           ; BSR set to: 0
 10029  001BF6  516E               	movf	___awmod@divisor& (0+255),w,b
 10030  001BF8  5D6C               	subwf	___awmod@dividend& (0+255),w,b
 10031  001BFA  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
 10032  001BFC  596D               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10033  001BFE  E304               	bnc	l6029
 10034                           
 10035                           ; BSR set to: 0
 10036  001C00  516E               	movf	___awmod@divisor& (0+255),w,b
 10037  001C02  5F6C               	subwf	___awmod@dividend& (0+255),f,b
 10038  001C04  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
 10039  001C06  5B6D               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10040  001C08                     l6029:
 10041                           
 10042                           ; BSR set to: 0
 10043  001C08  90D8               	bcf	status,0,c
 10044  001C0A  336F               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10045  001C0C  336E               	rrcf	___awmod@divisor& (0+255),f,b
 10046                           
 10047                           ; BSR set to: 0
 10048  001C0E  2F70               	decfsz	___awmod@counter& (0+255),f,b
 10049  001C10  D7F2               	goto	l6025
 10050  001C12                     l6033:
 10051                           
 10052                           ; BSR set to: 0
 10053  001C12  5171               	movf	___awmod@sign& (0+255),w,b
 10054  001C14  E004               	bz	l6037
 10055                           
 10056                           ; BSR set to: 0
 10057  001C16  6D6C               	negf	___awmod@dividend& (0+255),b
 10058  001C18  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
 10059  001C1A  B0D8               	btfsc	status,0,c
 10060  001C1C  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
 10061  001C1E                     l6037:
 10062                           
 10063                           ; BSR set to: 0
 10064  001C1E  C06C  F06C         	movff	___awmod@dividend,?___awmod
 10065  001C22  C06D  F06D         	movff	___awmod@dividend+1,?___awmod+1
 10066                           
 10067                           ; BSR set to: 0
 10068  001C26  0012               	return	
 10069  001C28                     __end_of___awmod:
 10070                           	opt stack 0
 10071                           tosu	equ	0xFFF
 10072                           tosh	equ	0xFFE
 10073                           tosl	equ	0xFFD
 10074                           pclath	equ	0xFFA
 10075                           tblptru	equ	0xFF8
 10076                           tblptrh	equ	0xFF7
 10077                           tblptrl	equ	0xFF6
 10078                           tablat	equ	0xFF5
 10079                           prodh	equ	0xFF4
 10080                           prodl	equ	0xFF3
 10081                           intcon	equ	0xFF2
 10082                           indf0	equ	0xFEF
 10083                           postinc0	equ	0xFEE
 10084                           fsr0h	equ	0xFEA
 10085                           fsr0l	equ	0xFE9
 10086                           wreg	equ	0xFE8
 10087                           indf1	equ	0xFE7
 10088                           postinc1	equ	0xFE6
 10089                           postdec1	equ	0xFE5
 10090                           fsr1h	equ	0xFE2
 10091                           fsr1l	equ	0xFE1
 10092                           indf2	equ	0xFDF
 10093                           postinc2	equ	0xFDE
 10094                           postdec2	equ	0xFDD
 10095                           fsr2h	equ	0xFDA
 10096                           fsr2l	equ	0xFD9
 10097                           status	equ	0xFD8
 10098                           
 10099 ;; *************** function ___ftadd *****************
 10100 ;; Defined at:
 10101 ;;		line 87 in file "C:\Program Files\Microchip\xc8\v1.12\sources\ftadd.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;  f1              3   37[BANK0 ] float 
 10104 ;;  f2              3   40[BANK0 ] float 
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  exp1            1   50[BANK0 ] unsigned char 
 10107 ;;  exp2            1   49[BANK0 ] unsigned char 
 10108 ;;  sign            1   48[BANK0 ] unsigned char 
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  3   37[BANK0 ] float 
 10111 ;; Registers used:
 10112 ;;		wreg, status,2, status,0, cstack
 10113 ;; Tracked objects:
 10114 ;;		On entry : F/0
 10115 ;;		On exit  : F/0
 10116 ;;		Unchanged: FFFFFFF0/0
 10117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10118 ;;      Params:         0       6       0       0       0       0       0
 10119 ;;      Locals:         0       3       0       0       0       0       0
 10120 ;;      Temps:          0       5       0       0       0       0       0
 10121 ;;      Totals:         0      14       0       0       0       0       0
 10122 ;;Total ram usage:       14 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; Hardware stack levels required when called:    6
 10125 ;; This function calls:
 10126 ;;		___ftpack
 10127 ;; This function is called by:
 10128 ;;		_string_utils_atof
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           	psect	text45
 10133  000C1E                     __ptext45:
 10134                           	opt stack 0
 10135  000C1E                     ___ftadd:
 10136                           	opt stack 20
 10137                           
 10138                           ; BSR set to: 0
 10139                           
 10140                           ; BSR set to: 0
 10141  000C1E  0E0F               	movlw	15
 10142  000C20  6F8B               	movwf	??___ftadd& (0+255),b
 10143  000C22  C085  F08C         	movff	___ftadd@f1,??___ftadd+1
 10144  000C26  C086  F08D         	movff	___ftadd@f1+1,??___ftadd+2
 10145  000C2A  C087  F08E         	movff	___ftadd@f1+2,??___ftadd+3
 10146  000C2E  298B               	incf	??___ftadd& (0+255),w,b
 10147  000C30  6F8F               	movwf	(??___ftadd+4)& (0+255),b
 10148  000C32  D001               	goto	u9970
 10149  000C34                     u9975:
 10150  000C34  D8A9               	call	PL84	;call to abstracted procedure
 10151  000C36                     u9970:
 10152  000C36  2F8F               	decfsz	(??___ftadd+4)& (0+255),f,b
 10153  000C38  D7FD               	goto	u9975
 10154  000C3A  518C               	movf	(??___ftadd+1)& (0+255),w,b
 10155  000C3C  6F92               	movwf	___ftadd@exp1& (0+255),b
 10156  000C3E  0E0F               	movlw	15
 10157  000C40  6F8B               	movwf	??___ftadd& (0+255),b
 10158  000C42  C088  F08C         	movff	___ftadd@f2,??___ftadd+1
 10159  000C46  C089  F08D         	movff	___ftadd@f2+1,??___ftadd+2
 10160  000C4A  C08A  F08E         	movff	___ftadd@f2+2,??___ftadd+3
 10161  000C4E  298B               	incf	??___ftadd& (0+255),w,b
 10162  000C50  6F8F               	movwf	(??___ftadd+4)& (0+255),b
 10163  000C52  D001               	goto	u9980
 10164  000C54                     u9985:
 10165  000C54  D899               	call	PL84	;call to abstracted procedure
 10166  000C56                     u9980:
 10167  000C56  2F8F               	decfsz	(??___ftadd+4)& (0+255),f,b
 10168  000C58  D7FD               	goto	u9985
 10169  000C5A  518C               	movf	(??___ftadd+1)& (0+255),w,b
 10170  000C5C  6F91               	movwf	___ftadd@exp2& (0+255),b
 10171                           
 10172                           ; BSR set to: 0
 10173  000C5E  5192               	movf	___ftadd@exp1& (0+255),w,b
 10174  000C60  E009               	bz	l1394
 10175                           
 10176                           ; BSR set to: 0
 10177  000C62  5191               	movf	___ftadd@exp2& (0+255),w,b
 10178  000C64  6192               	cpfslt	___ftadd@exp1& (0+255),b
 10179  000C66  D00D               	goto	l8231
 10180                           
 10181                           ; BSR set to: 0
 10182  000C68  5192               	movf	___ftadd@exp1& (0+255),w,b
 10183  000C6A  5D91               	subwf	___ftadd@exp2& (0+255),w,b
 10184  000C6C  6F8B               	movwf	??___ftadd& (0+255),b
 10185  000C6E  0E19               	movlw	25
 10186  000C70  5D8B               	subwf	??___ftadd& (0+255),w,b
 10187  000C72  E307               	bnc	l8231
 10188  000C74                     l1394:
 10189                           
 10190                           ; BSR set to: 0
 10191  000C74  C088  F085         	movff	___ftadd@f2,?___ftadd
 10192  000C78  C089  F086         	movff	___ftadd@f2+1,?___ftadd+1
 10193  000C7C  C08A  F087         	movff	___ftadd@f2+2,?___ftadd+2
 10194  000C80  0012               	return	
 10195  000C82                     l8231:
 10196                           
 10197                           ; BSR set to: 0
 10198  000C82  5191               	movf	___ftadd@exp2& (0+255),w,b
 10199  000C84  E009               	bz	l1398
 10200                           
 10201                           ; BSR set to: 0
 10202  000C86  5192               	movf	___ftadd@exp1& (0+255),w,b
 10203  000C88  6191               	cpfslt	___ftadd@exp2& (0+255),b
 10204  000C8A  D00D               	goto	l8237
 10205                           
 10206                           ; BSR set to: 0
 10207  000C8C  5191               	movf	___ftadd@exp2& (0+255),w,b
 10208  000C8E  5D92               	subwf	___ftadd@exp1& (0+255),w,b
 10209  000C90  6F8B               	movwf	??___ftadd& (0+255),b
 10210  000C92  0E19               	movlw	25
 10211  000C94  5D8B               	subwf	??___ftadd& (0+255),w,b
 10212  000C96  E307               	bnc	l8237
 10213  000C98                     l1398:
 10214                           
 10215                           ; BSR set to: 0
 10216  000C98  C085  F085         	movff	___ftadd@f1,?___ftadd
 10217  000C9C  C086  F086         	movff	___ftadd@f1+1,?___ftadd+1
 10218  000CA0  C087  F087         	movff	___ftadd@f1+2,?___ftadd+2
 10219  000CA4  0012               	return	
 10220  000CA6                     l8237:
 10221                           
 10222                           ; BSR set to: 0
 10223  000CA6  0E06               	movlw	6
 10224  000CA8  6F90               	movwf	___ftadd@sign& (0+255),b
 10225                           
 10226                           ; BSR set to: 0
 10227  000CAA  BF87               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10228                           
 10229                           ; BSR set to: 0
 10230  000CAC  8F90               	bsf	___ftadd@sign& (0+255),7,b
 10231                           
 10232                           ; BSR set to: 0
 10233  000CAE  BF8A               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10234                           
 10235                           ; BSR set to: 0
 10236  000CB0  8D90               	bsf	___ftadd@sign& (0+255),6,b
 10237                           
 10238                           ; BSR set to: 0
 10239  000CB2  8F86               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10240                           
 10241                           ; BSR set to: 0
 10242  000CB4  6B87               	clrf	(___ftadd@f1+2)& (0+255),b
 10243  000CB6  8F89               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10244                           
 10245                           ; BSR set to: 0
 10246  000CB8  6B8A               	clrf	(___ftadd@f2+2)& (0+255),b
 10247                           
 10248                           ; BSR set to: 0
 10249  000CBA  5191               	movf	___ftadd@exp2& (0+255),w,b
 10250  000CBC  6192               	cpfslt	___ftadd@exp1& (0+255),b
 10251  000CBE  D017               	goto	l8263
 10252  000CC0                     l8253:
 10253                           
 10254                           ; BSR set to: 0
 10255  000CC0  90D8               	bcf	status,0,c
 10256  000CC2  3788               	rlcf	___ftadd@f2& (0+255),f,b
 10257  000CC4  3789               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10258  000CC6  378A               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10259  000CC8  0791               	decf	___ftadd@exp2& (0+255),f,b
 10260                           
 10261                           ; BSR set to: 0
 10262  000CCA  5191               	movf	___ftadd@exp2& (0+255),w,b
 10263  000CCC  1992               	xorwf	___ftadd@exp1& (0+255),w,b
 10264  000CCE  E00B               	bz	l8261
 10265                           
 10266                           ; BSR set to: 0
 10267  000CD0  0790               	decf	___ftadd@sign& (0+255),f,b
 10268  000CD2  0100               	movlb	0	; () banked
 10269  000CD4  5190               	movf	___ftadd@sign& (0+255),w,b
 10270  000CD6  0B07               	andlw	7
 10271  000CD8  E006               	bz	l8261
 10272  000CDA  D7F2               	goto	l8253
 10273  000CDC                     l8259:
 10274                           
 10275                           ; BSR set to: 0
 10276  000CDC  90D8               	bcf	status,0,c
 10277  000CDE  3387               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10278  000CE0  3386               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10279  000CE2  3385               	rrcf	___ftadd@f1& (0+255),f,b
 10280  000CE4  2B92               	incf	___ftadd@exp1& (0+255),f,b
 10281  000CE6                     l8261:
 10282                           
 10283                           ; BSR set to: 0
 10284  000CE6  5191               	movf	___ftadd@exp2& (0+255),w,b
 10285  000CE8  6392               	cpfseq	___ftadd@exp1& (0+255),b
 10286  000CEA  D7F8               	goto	l8259
 10287  000CEC  D019               	goto	l1409
 10288  000CEE                     l8263:
 10289                           
 10290                           ; BSR set to: 0
 10291  000CEE  5192               	movf	___ftadd@exp1& (0+255),w,b
 10292  000CF0  6191               	cpfslt	___ftadd@exp2& (0+255),b
 10293  000CF2  D016               	goto	l1409
 10294  000CF4                     l8265:
 10295                           
 10296                           ; BSR set to: 0
 10297  000CF4  90D8               	bcf	status,0,c
 10298  000CF6  3785               	rlcf	___ftadd@f1& (0+255),f,b
 10299  000CF8  3786               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10300  000CFA  3787               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10301  000CFC  0792               	decf	___ftadd@exp1& (0+255),f,b
 10302                           
 10303                           ; BSR set to: 0
 10304  000CFE  5191               	movf	___ftadd@exp2& (0+255),w,b
 10305  000D00  1992               	xorwf	___ftadd@exp1& (0+255),w,b
 10306  000D02  E00B               	bz	l8273
 10307                           
 10308                           ; BSR set to: 0
 10309  000D04  0790               	decf	___ftadd@sign& (0+255),f,b
 10310  000D06  0100               	movlb	0	; () banked
 10311  000D08  5190               	movf	___ftadd@sign& (0+255),w,b
 10312  000D0A  0B07               	andlw	7
 10313  000D0C  E006               	bz	l8273
 10314  000D0E  D7F2               	goto	l8265
 10315  000D10                     l8271:
 10316                           
 10317                           ; BSR set to: 0
 10318  000D10  90D8               	bcf	status,0,c
 10319  000D12  338A               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10320  000D14  3389               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10321  000D16  3388               	rrcf	___ftadd@f2& (0+255),f,b
 10322  000D18  2B91               	incf	___ftadd@exp2& (0+255),f,b
 10323  000D1A                     l8273:
 10324                           
 10325                           ; BSR set to: 0
 10326  000D1A  5191               	movf	___ftadd@exp2& (0+255),w,b
 10327  000D1C  6392               	cpfseq	___ftadd@exp1& (0+255),b
 10328  000D1E  D7F8               	goto	l8271
 10329  000D20                     l1409:
 10330                           
 10331                           ; BSR set to: 0
 10332  000D20  AF90               	btfss	___ftadd@sign& (0+255),7,b
 10333  000D22  D007               	goto	l1418
 10334                           
 10335                           ; BSR set to: 0
 10336  000D24  1F85               	comf	___ftadd@f1& (0+255),f,b
 10337  000D26  1F86               	comf	(___ftadd@f1+1)& (0+255),f,b
 10338  000D28  1F87               	comf	(___ftadd@f1+2)& (0+255),f,b
 10339  000D2A  2B85               	incf	___ftadd@f1& (0+255),f,b
 10340  000D2C  0E00               	movlw	0
 10341  000D2E  2386               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10342  000D30  2387               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10343  000D32                     l1418:
 10344                           
 10345                           ; BSR set to: 0
 10346  000D32  AD90               	btfss	___ftadd@sign& (0+255),6,b
 10347  000D34  D002               	goto	l1419
 10348                           
 10349                           ; BSR set to: 0
 10350  000D36  1F88               	comf	___ftadd@f2& (0+255),f,b
 10351  000D38  D820               	call	PL68	;call to abstracted procedure
 10352  000D3A                     l1419:
 10353                           
 10354                           ; BSR set to: 0
 10355  000D3A  6B90               	clrf	___ftadd@sign& (0+255),b
 10356  000D3C  5185               	movf	___ftadd@f1& (0+255),w,b
 10357  000D3E  2788               	addwf	___ftadd@f2& (0+255),f,b
 10358  000D40  5186               	movf	(___ftadd@f1+1)& (0+255),w,b
 10359  000D42  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10360  000D44  5187               	movf	(___ftadd@f1+2)& (0+255),w,b
 10361  000D46  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10362  000D48  AF8A               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10363  000D4A  D004               	goto	l8283
 10364                           
 10365                           ; BSR set to: 0
 10366  000D4C  1F88               	comf	___ftadd@f2& (0+255),f,b
 10367  000D4E  D815               	call	PL68	;call to abstracted procedure
 10368                           
 10369                           ; BSR set to: 0
 10370  000D50  0E01               	movlw	1
 10371  000D52  6F90               	movwf	___ftadd@sign& (0+255),b
 10372  000D54                     l8283:
 10373                           
 10374                           ; BSR set to: 0
 10375  000D54  C088  F06C         	movff	___ftadd@f2,?___ftpack
 10376  000D58  C089  F06D         	movff	___ftadd@f2+1,?___ftpack+1
 10377  000D5C  C08A  F06E         	movff	___ftadd@f2+2,?___ftpack+2
 10378  000D60  C092  F06F         	movff	___ftadd@exp1,?___ftpack+3
 10379  000D64  C090  F070         	movff	___ftadd@sign,?___ftpack+4
 10380  000D68  ECEA  F00B         	call	___ftpack	;wreg free
 10381  000D6C  C06C  F085         	movff	?___ftpack,?___ftadd
 10382  000D70  C06D  F086         	movff	?___ftpack+1,?___ftadd+1
 10383  000D74  C06E  F087         	movff	?___ftpack+2,?___ftadd+2
 10384                           
 10385                           ; BSR set to: 0
 10386  000D78  0012               	return	
 10387  000D7A                     __end_of___ftadd:
 10388                           	opt stack 0
 10389  000D7A                     PL68:
 10390                           	opt stack 20
 10391  000D7A  1F89               	comf	(___ftadd@f2+1)& (0+255),f,b
 10392  000D7C  1F8A               	comf	(___ftadd@f2+2)& (0+255),f,b
 10393  000D7E  2B88               	incf	___ftadd@f2& (0+255),f,b
 10394  000D80  0E00               	movlw	0
 10395  000D82  2389               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10396  000D84  238A               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10397  000D86  0C00               	retlw	0
 10398  000D88                     __end_ofPL68:
 10399                           	opt stack 0
 10400  000D88                     PL84:
 10401                           	opt stack 20
 10402  000D88  90D8               	bcf	status,0,c
 10403  000D8A  338E               	rrcf	(??___ftadd+3)& (0+255),f,b
 10404  000D8C  338D               	rrcf	(??___ftadd+2)& (0+255),f,b
 10405  000D8E  338C               	rrcf	(??___ftadd+1)& (0+255),f,b
 10406  000D90  0012               	return	
 10407  000D92                     __end_ofPL84:
 10408                           	opt stack 0
 10409                           tosu	equ	0xFFF
 10410                           tosh	equ	0xFFE
 10411                           tosl	equ	0xFFD
 10412                           pclath	equ	0xFFA
 10413                           tblptru	equ	0xFF8
 10414                           tblptrh	equ	0xFF7
 10415                           tblptrl	equ	0xFF6
 10416                           tablat	equ	0xFF5
 10417                           prodh	equ	0xFF4
 10418                           prodl	equ	0xFF3
 10419                           intcon	equ	0xFF2
 10420                           indf0	equ	0xFEF
 10421                           postinc0	equ	0xFEE
 10422                           fsr0h	equ	0xFEA
 10423                           fsr0l	equ	0xFE9
 10424                           wreg	equ	0xFE8
 10425                           indf1	equ	0xFE7
 10426                           postinc1	equ	0xFE6
 10427                           postdec1	equ	0xFE5
 10428                           fsr1h	equ	0xFE2
 10429                           fsr1l	equ	0xFE1
 10430                           indf2	equ	0xFDF
 10431                           postinc2	equ	0xFDE
 10432                           postdec2	equ	0xFDD
 10433                           fsr2h	equ	0xFDA
 10434                           fsr2l	equ	0xFD9
 10435                           status	equ	0xFD8
 10436                           
 10437 ;; *************** function ___lbmod *****************
 10438 ;; Defined at:
 10439 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lbmod.c"
 10440 ;; Parameters:    Size  Location     Type
 10441 ;;  dividend        1    wreg     unsigned char 
 10442 ;;  divisor         1   12[BANK0 ] unsigned char 
 10443 ;; Auto vars:     Size  Location     Type
 10444 ;;  dividend        1   13[BANK0 ] unsigned char 
 10445 ;;  rem             1   15[BANK0 ] unsigned char 
 10446 ;;  counter         1   14[BANK0 ] unsigned char 
 10447 ;; Return value:  Size  Location     Type
 10448 ;;                  1    wreg      unsigned char 
 10449 ;; Registers used:
 10450 ;;		wreg, status,2, status,0
 10451 ;; Tracked objects:
 10452 ;;		On entry : F/0
 10453 ;;		On exit  : F/0
 10454 ;;		Unchanged: FFFFFFF0/0
 10455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10456 ;;      Params:         0       1       0       0       0       0       0
 10457 ;;      Locals:         0       3       0       0       0       0       0
 10458 ;;      Temps:          0       0       0       0       0       0       0
 10459 ;;      Totals:         0       4       0       0       0       0       0
 10460 ;;Total ram usage:        4 bytes
 10461 ;; Hardware stack levels used:    1
 10462 ;; Hardware stack levels required when called:    5
 10463 ;; This function calls:
 10464 ;;		Nothing
 10465 ;; This function is called by:
 10466 ;;		_pd_add_value
 10467 ;; This function uses a non-reentrant model
 10468 ;;
 10469                           
 10470                           	psect	text46
 10471  002102                     __ptext46:
 10472                           	opt stack 0
 10473  002102                     ___lbmod:
 10474                           	opt stack 23
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;___lbmod@dividend stored from wreg
 10478  002102  CFE8 F06D          	movff	wreg,___lbmod@dividend
 10479                           
 10480                           ; BSR set to: 0
 10481  002106  0E08               	movlw	8
 10482  002108  6F6E               	movwf	___lbmod@counter& (0+255),b
 10483                           
 10484                           ; BSR set to: 0
 10485  00210A  6B6F               	clrf	___lbmod@rem& (0+255),b
 10486  00210C                     l6153:
 10487                           
 10488                           ; BSR set to: 0
 10489  00210C  90D8               	bcf	status,0,c
 10490  00210E  0100               	movlb	0	; () banked
 10491  002110  356D               	rlcf	___lbmod@dividend& (0+255),w,b
 10492  002112  356F               	rlcf	___lbmod@rem& (0+255),w,b
 10493  002114  6F6F               	movwf	___lbmod@rem& (0+255),b
 10494                           
 10495                           ; BSR set to: 0
 10496  002116  90D8               	bcf	status,0,c
 10497  002118  376D               	rlcf	___lbmod@dividend& (0+255),f,b
 10498                           
 10499                           ; BSR set to: 0
 10500  00211A  516C               	movf	___lbmod@divisor& (0+255),w,b
 10501  00211C  5D6F               	subwf	___lbmod@rem& (0+255),w,b
 10502  00211E  E302               	bnc	l6161
 10503                           
 10504                           ; BSR set to: 0
 10505  002120  516C               	movf	___lbmod@divisor& (0+255),w,b
 10506  002122  5F6F               	subwf	___lbmod@rem& (0+255),f,b
 10507  002124                     l6161:
 10508                           
 10509                           ; BSR set to: 0
 10510  002124  2F6E               	decfsz	___lbmod@counter& (0+255),f,b
 10511  002126  D7F2               	goto	l6153
 10512                           
 10513                           ; BSR set to: 0
 10514  002128  516F               	movf	___lbmod@rem& (0+255),w,b
 10515                           
 10516                           ; BSR set to: 0
 10517  00212A  0012               	return	
 10518  00212C                     __end_of___lbmod:
 10519                           	opt stack 0
 10520                           tosu	equ	0xFFF
 10521                           tosh	equ	0xFFE
 10522                           tosl	equ	0xFFD
 10523                           pclath	equ	0xFFA
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           indf0	equ	0xFEF
 10532                           postinc0	equ	0xFEE
 10533                           fsr0h	equ	0xFEA
 10534                           fsr0l	equ	0xFE9
 10535                           wreg	equ	0xFE8
 10536                           indf1	equ	0xFE7
 10537                           postinc1	equ	0xFE6
 10538                           postdec1	equ	0xFE5
 10539                           fsr1h	equ	0xFE2
 10540                           fsr1l	equ	0xFE1
 10541                           indf2	equ	0xFDF
 10542                           postinc2	equ	0xFDE
 10543                           postdec2	equ	0xFDD
 10544                           fsr2h	equ	0xFDA
 10545                           fsr2l	equ	0xFD9
 10546                           status	equ	0xFD8
 10547                           
 10548 ;; *************** function ___lwdiv *****************
 10549 ;; Defined at:
 10550 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwdiv.c"
 10551 ;; Parameters:    Size  Location     Type
 10552 ;;  dividend        2   12[BANK0 ] unsigned int 
 10553 ;;  divisor         2   14[BANK0 ] unsigned int 
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;  quotient        2   17[BANK0 ] unsigned int 
 10556 ;;  counter         1   16[BANK0 ] unsigned char 
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  2   12[BANK0 ] unsigned int 
 10559 ;; Registers used:
 10560 ;;		wreg, status,2, status,0
 10561 ;; Tracked objects:
 10562 ;;		On entry : F/0
 10563 ;;		On exit  : F/0
 10564 ;;		Unchanged: FFFFFFF0/0
 10565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10566 ;;      Params:         0       4       0       0       0       0       0
 10567 ;;      Locals:         0       3       0       0       0       0       0
 10568 ;;      Temps:          0       0       0       0       0       0       0
 10569 ;;      Totals:         0       7       0       0       0       0       0
 10570 ;;Total ram usage:        7 bytes
 10571 ;; Hardware stack levels used:    1
 10572 ;; Hardware stack levels required when called:    5
 10573 ;; This function calls:
 10574 ;;		Nothing
 10575 ;; This function is called by:
 10576 ;;		_sprintf
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           	psect	text47
 10581  001E20                     __ptext47:
 10582                           	opt stack 0
 10583  001E20                     ___lwdiv:
 10584                           	opt stack 24
 10585                           
 10586                           ; BSR set to: 0
 10587                           
 10588                           ; BSR set to: 0
 10589  001E20  6B71               	clrf	___lwdiv@quotient& (0+255),b
 10590  001E22  6B72               	clrf	(___lwdiv@quotient+1)& (0+255),b
 10591                           
 10592                           ; BSR set to: 0
 10593  001E24  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10594  001E26  116E               	iorwf	___lwdiv@divisor& (0+255),w,b
 10595  001E28  E01B               	bz	l1569
 10596                           
 10597                           ; BSR set to: 0
 10598  001E2A  0E01               	movlw	1
 10599  001E2C  6F70               	movwf	___lwdiv@counter& (0+255),b
 10600  001E2E  D004               	goto	l6175
 10601  001E30                     l6173:
 10602                           
 10603                           ; BSR set to: 0
 10604  001E30  90D8               	bcf	status,0,c
 10605  001E32  376E               	rlcf	___lwdiv@divisor& (0+255),f,b
 10606  001E34  376F               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10607  001E36  2B70               	incf	___lwdiv@counter& (0+255),f,b
 10608  001E38                     l6175:
 10609                           
 10610                           ; BSR set to: 0
 10611  001E38  AF6F               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10612  001E3A  D7FA               	goto	l6173
 10613  001E3C                     l6177:
 10614                           
 10615                           ; BSR set to: 0
 10616  001E3C  90D8               	bcf	status,0,c
 10617  001E3E  3771               	rlcf	___lwdiv@quotient& (0+255),f,b
 10618  001E40  3772               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10619                           
 10620                           ; BSR set to: 0
 10621  001E42  516E               	movf	___lwdiv@divisor& (0+255),w,b
 10622  001E44  5D6C               	subwf	___lwdiv@dividend& (0+255),w,b
 10623  001E46  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10624  001E48  596D               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10625  001E4A  E305               	bnc	l6185
 10626                           
 10627                           ; BSR set to: 0
 10628  001E4C  516E               	movf	___lwdiv@divisor& (0+255),w,b
 10629  001E4E  5F6C               	subwf	___lwdiv@dividend& (0+255),f,b
 10630  001E50  516F               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10631  001E52  5B6D               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10632                           
 10633                           ; BSR set to: 0
 10634  001E54  8171               	bsf	___lwdiv@quotient& (0+255),0,b
 10635  001E56                     l6185:
 10636                           
 10637                           ; BSR set to: 0
 10638  001E56  90D8               	bcf	status,0,c
 10639  001E58  336F               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10640  001E5A  336E               	rrcf	___lwdiv@divisor& (0+255),f,b
 10641                           
 10642                           ; BSR set to: 0
 10643  001E5C  2F70               	decfsz	___lwdiv@counter& (0+255),f,b
 10644  001E5E  D7EE               	goto	l6177
 10645  001E60                     l1569:
 10646                           
 10647                           ; BSR set to: 0
 10648  001E60  C071  F06C         	movff	___lwdiv@quotient,?___lwdiv
 10649  001E64  C072  F06D         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10650                           
 10651                           ; BSR set to: 0
 10652  001E68  0012               	return	
 10653  001E6A                     __end_of___lwdiv:
 10654                           	opt stack 0
 10655                           tosu	equ	0xFFF
 10656                           tosh	equ	0xFFE
 10657                           tosl	equ	0xFFD
 10658                           pclath	equ	0xFFA
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           indf0	equ	0xFEF
 10667                           postinc0	equ	0xFEE
 10668                           fsr0h	equ	0xFEA
 10669                           fsr0l	equ	0xFE9
 10670                           wreg	equ	0xFE8
 10671                           indf1	equ	0xFE7
 10672                           postinc1	equ	0xFE6
 10673                           postdec1	equ	0xFE5
 10674                           fsr1h	equ	0xFE2
 10675                           fsr1l	equ	0xFE1
 10676                           indf2	equ	0xFDF
 10677                           postinc2	equ	0xFDE
 10678                           postdec2	equ	0xFDD
 10679                           fsr2h	equ	0xFDA
 10680                           fsr2l	equ	0xFD9
 10681                           status	equ	0xFD8
 10682                           
 10683 ;; *************** function ___lwmod *****************
 10684 ;; Defined at:
 10685 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwmod.c"
 10686 ;; Parameters:    Size  Location     Type
 10687 ;;  dividend        2   19[BANK0 ] unsigned int 
 10688 ;;  divisor         2   21[BANK0 ] unsigned int 
 10689 ;; Auto vars:     Size  Location     Type
 10690 ;;  counter         1   23[BANK0 ] unsigned char 
 10691 ;; Return value:  Size  Location     Type
 10692 ;;                  2   19[BANK0 ] unsigned int 
 10693 ;; Registers used:
 10694 ;;		wreg, status,2, status,0
 10695 ;; Tracked objects:
 10696 ;;		On entry : F/0
 10697 ;;		On exit  : F/0
 10698 ;;		Unchanged: FFFFFFF0/0
 10699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10700 ;;      Params:         0       4       0       0       0       0       0
 10701 ;;      Locals:         0       1       0       0       0       0       0
 10702 ;;      Temps:          0       0       0       0       0       0       0
 10703 ;;      Totals:         0       5       0       0       0       0       0
 10704 ;;Total ram usage:        5 bytes
 10705 ;; Hardware stack levels used:    1
 10706 ;; Hardware stack levels required when called:    5
 10707 ;; This function calls:
 10708 ;;		Nothing
 10709 ;; This function is called by:
 10710 ;;		_sprintf
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           	psect	text48
 10715  001FFA                     __ptext48:
 10716                           	opt stack 0
 10717  001FFA                     ___lwmod:
 10718                           	opt stack 24
 10719                           
 10720                           ; BSR set to: 0
 10721                           
 10722                           ; BSR set to: 0
 10723  001FFA  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10724  001FFC  1175               	iorwf	___lwmod@divisor& (0+255),w,b
 10725  001FFE  E017               	bz	l1579
 10726                           
 10727                           ; BSR set to: 0
 10728  002000  0E01               	movlw	1
 10729  002002  6F77               	movwf	___lwmod@counter& (0+255),b
 10730  002004  D004               	goto	l6195
 10731  002006                     l6193:
 10732                           
 10733                           ; BSR set to: 0
 10734  002006  90D8               	bcf	status,0,c
 10735  002008  3775               	rlcf	___lwmod@divisor& (0+255),f,b
 10736  00200A  3776               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10737  00200C  2B77               	incf	___lwmod@counter& (0+255),f,b
 10738  00200E                     l6195:
 10739                           
 10740                           ; BSR set to: 0
 10741  00200E  AF76               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10742  002010  D7FA               	goto	l6193
 10743  002012                     l6197:
 10744                           
 10745                           ; BSR set to: 0
 10746  002012  5175               	movf	___lwmod@divisor& (0+255),w,b
 10747  002014  5D73               	subwf	___lwmod@dividend& (0+255),w,b
 10748  002016  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10749  002018  5974               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10750  00201A  E304               	bnc	l6201
 10751                           
 10752                           ; BSR set to: 0
 10753  00201C  5175               	movf	___lwmod@divisor& (0+255),w,b
 10754  00201E  5F73               	subwf	___lwmod@dividend& (0+255),f,b
 10755  002020  5176               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10756  002022  5B74               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10757  002024                     l6201:
 10758                           
 10759                           ; BSR set to: 0
 10760  002024  90D8               	bcf	status,0,c
 10761  002026  3376               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10762  002028  3375               	rrcf	___lwmod@divisor& (0+255),f,b
 10763                           
 10764                           ; BSR set to: 0
 10765  00202A  2F77               	decfsz	___lwmod@counter& (0+255),f,b
 10766  00202C  D7F2               	goto	l6197
 10767  00202E                     l1579:
 10768                           
 10769                           ; BSR set to: 0
 10770  00202E  C073  F073         	movff	___lwmod@dividend,?___lwmod
 10771  002032  C074  F074         	movff	___lwmod@dividend+1,?___lwmod+1
 10772                           
 10773                           ; BSR set to: 0
 10774  002036  0012               	return	
 10775  002038                     __end_of___lwmod:
 10776                           	opt stack 0
 10777                           tosu	equ	0xFFF
 10778                           tosh	equ	0xFFE
 10779                           tosl	equ	0xFFD
 10780                           pclath	equ	0xFFA
 10781                           tblptru	equ	0xFF8
 10782                           tblptrh	equ	0xFF7
 10783                           tblptrl	equ	0xFF6
 10784                           tablat	equ	0xFF5
 10785                           prodh	equ	0xFF4
 10786                           prodl	equ	0xFF3
 10787                           intcon	equ	0xFF2
 10788                           indf0	equ	0xFEF
 10789                           postinc0	equ	0xFEE
 10790                           fsr0h	equ	0xFEA
 10791                           fsr0l	equ	0xFE9
 10792                           wreg	equ	0xFE8
 10793                           indf1	equ	0xFE7
 10794                           postinc1	equ	0xFE6
 10795                           postdec1	equ	0xFE5
 10796                           fsr1h	equ	0xFE2
 10797                           fsr1l	equ	0xFE1
 10798                           indf2	equ	0xFDF
 10799                           postinc2	equ	0xFDE
 10800                           postdec2	equ	0xFDD
 10801                           fsr2h	equ	0xFDA
 10802                           fsr2l	equ	0xFD9
 10803                           status	equ	0xFD8
 10804                           
 10805 ;; *************** function ___lwtoft *****************
 10806 ;; Defined at:
 10807 ;;		line 29 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwtoft.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;  c               2   20[BANK0 ] unsigned int 
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;		None
 10812 ;; Return value:  Size  Location     Type
 10813 ;;                  3   20[BANK0 ] float 
 10814 ;; Registers used:
 10815 ;;		wreg, status,2, status,0, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : F/0
 10818 ;;		On exit  : F/0
 10819 ;;		Unchanged: FFFFFFF0/0
 10820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10821 ;;      Params:         0       3       0       0       0       0       0
 10822 ;;      Locals:         0       0       0       0       0       0       0
 10823 ;;      Temps:          0       0       0       0       0       0       0
 10824 ;;      Totals:         0       3       0       0       0       0       0
 10825 ;;Total ram usage:        3 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    6
 10828 ;; This function calls:
 10829 ;;		___ftpack
 10830 ;; This function is called by:
 10831 ;;		_string_utils_atof
 10832 ;; This function uses a non-reentrant model
 10833 ;;
 10834                           
 10835                           	psect	text49
 10836  00212C                     __ptext49:
 10837                           	opt stack 0
 10838  00212C                     ___lwtoft:
 10839                           	opt stack 20
 10840                           
 10841                           ; BSR set to: 0
 10842                           
 10843                           ; BSR set to: 0
 10844  00212C  C074  F06C         	movff	___lwtoft@c,?___ftpack
 10845  002130  C075  F06D         	movff	___lwtoft@c+1,?___ftpack+1
 10846  002134  6B6E               	clrf	(?___ftpack+2)& (0+255),b
 10847  002136  0E8E               	movlw	142
 10848  002138  6F6F               	movwf	(?___ftpack+3)& (0+255),b
 10849  00213A  0E00               	movlw	0
 10850  00213C  6B70               	clrf	(?___ftpack+4)& (0+255),b
 10851  00213E  ECEA  F00B         	call	___ftpack	;wreg free
 10852  002142  C06C  F074         	movff	?___ftpack,?___lwtoft
 10853  002146  C06D  F075         	movff	?___ftpack+1,?___lwtoft+1
 10854  00214A  C06E  F076         	movff	?___ftpack+2,?___lwtoft+2
 10855                           
 10856                           ; BSR set to: 0
 10857  00214E  0012               	return	
 10858  002150                     __end_of___lwtoft:
 10859                           	opt stack 0
 10860                           tosu	equ	0xFFF
 10861                           tosh	equ	0xFFE
 10862                           tosl	equ	0xFFD
 10863                           pclath	equ	0xFFA
 10864                           tblptru	equ	0xFF8
 10865                           tblptrh	equ	0xFF7
 10866                           tblptrl	equ	0xFF6
 10867                           tablat	equ	0xFF5
 10868                           prodh	equ	0xFF4
 10869                           prodl	equ	0xFF3
 10870                           intcon	equ	0xFF2
 10871                           indf0	equ	0xFEF
 10872                           postinc0	equ	0xFEE
 10873                           fsr0h	equ	0xFEA
 10874                           fsr0l	equ	0xFE9
 10875                           wreg	equ	0xFE8
 10876                           indf1	equ	0xFE7
 10877                           postinc1	equ	0xFE6
 10878                           postdec1	equ	0xFE5
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           fsr2h	equ	0xFDA
 10885                           fsr2l	equ	0xFD9
 10886                           status	equ	0xFD8
 10887                           
 10888 ;; *************** function ___wmul *****************
 10889 ;; Defined at:
 10890 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.12\sources\wmul.c"
 10891 ;; Parameters:    Size  Location     Type
 10892 ;;  multiplier      2   12[BANK0 ] unsigned int 
 10893 ;;  multiplicand    2   14[BANK0 ] unsigned int 
 10894 ;; Auto vars:     Size  Location     Type
 10895 ;;  product         2   16[BANK0 ] unsigned int 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  2   12[BANK0 ] unsigned int 
 10898 ;; Registers used:
 10899 ;;		wreg, status,2, status,0
 10900 ;; Tracked objects:
 10901 ;;		On entry : F/0
 10902 ;;		On exit  : F/0
 10903 ;;		Unchanged: FFFFFFF0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10905 ;;      Params:         0       4       0       0       0       0       0
 10906 ;;      Locals:         0       2       0       0       0       0       0
 10907 ;;      Temps:          0       0       0       0       0       0       0
 10908 ;;      Totals:         0       6       0       0       0       0       0
 10909 ;;Total ram usage:        6 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:    5
 10912 ;; This function calls:
 10913 ;;		Nothing
 10914 ;; This function is called by:
 10915 ;;		_string_utils_atoi
 10916 ;;		_string_utils_atof
 10917 ;;		_pd_add_value
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text50
 10922  0020D6                     __ptext50:
 10923                           	opt stack 0
 10924  0020D6                     ___wmul:
 10925                           	opt stack 21
 10926                           
 10927                           ; BSR set to: 0
 10928                           
 10929                           ; BSR set to: 0
 10930  0020D6  6B70               	clrf	___wmul@product& (0+255),b
 10931  0020D8  6B71               	clrf	(___wmul@product+1)& (0+255),b
 10932  0020DA                     l1605:
 10933                           
 10934                           ; BSR set to: 0
 10935  0020DA  A16C               	btfss	___wmul@multiplier& (0+255),0,b
 10936  0020DC  D004               	goto	l8339
 10937                           
 10938                           ; BSR set to: 0
 10939  0020DE  516E               	movf	___wmul@multiplicand& (0+255),w,b
 10940  0020E0  2770               	addwf	___wmul@product& (0+255),f,b
 10941  0020E2  516F               	movf	(___wmul@multiplicand+1)& (0+255),w,b
 10942  0020E4  2371               	addwfc	(___wmul@product+1)& (0+255),f,b
 10943  0020E6                     l8339:
 10944                           
 10945                           ; BSR set to: 0
 10946  0020E6  90D8               	bcf	status,0,c
 10947  0020E8  376E               	rlcf	___wmul@multiplicand& (0+255),f,b
 10948  0020EA  376F               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
 10949                           
 10950                           ; BSR set to: 0
 10951  0020EC  90D8               	bcf	status,0,c
 10952  0020EE  336D               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
 10953  0020F0  336C               	rrcf	___wmul@multiplier& (0+255),f,b
 10954  0020F2  516D               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10955  0020F4  116C               	iorwf	___wmul@multiplier& (0+255),w,b
 10956  0020F6  E1F1               	bnz	l1605
 10957                           
 10958                           ; BSR set to: 0
 10959  0020F8  C070  F06C         	movff	___wmul@product,?___wmul
 10960  0020FC  C071  F06D         	movff	___wmul@product+1,?___wmul+1
 10961                           
 10962                           ; BSR set to: 0
 10963  002100  0012               	return	
 10964  002102                     __end_of___wmul:
 10965                           	opt stack 0
 10966                           tosu	equ	0xFFF
 10967                           tosh	equ	0xFFE
 10968                           tosl	equ	0xFFD
 10969                           pclath	equ	0xFFA
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           indf0	equ	0xFEF
 10978                           postinc0	equ	0xFEE
 10979                           fsr0h	equ	0xFEA
 10980                           fsr0l	equ	0xFE9
 10981                           wreg	equ	0xFE8
 10982                           indf1	equ	0xFE7
 10983                           postinc1	equ	0xFE6
 10984                           postdec1	equ	0xFE5
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           fsr2h	equ	0xFDA
 10991                           fsr2l	equ	0xFD9
 10992                           status	equ	0xFD8
 10993                           
 10994 ;; *************** function ___asftmul *****************
 10995 ;; Defined at:
 10996 ;;		line 5 in file "../common/asftmul.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  f1p             1    wreg     PTR float 
 10999 ;;		 -> string_utils_atof@a(3), 
 11000 ;;  f2              3   37[BANK0 ] float 
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;  f1p             1   40[BANK0 ] PTR float 
 11003 ;;		 -> string_utils_atof@a(3), 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  3   37[BANK0 ] float 
 11006 ;; Registers used:
 11007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : F/0
 11010 ;;		On exit  : F/0
 11011 ;;		Unchanged: FFFFFFF0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11013 ;;      Params:         0       3       0       0       0       0       0
 11014 ;;      Locals:         0       1       0       0       0       0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0
 11016 ;;      Totals:         0       4       0       0       0       0       0
 11017 ;;Total ram usage:        4 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    7
 11020 ;; This function calls:
 11021 ;;		___ftmul
 11022 ;; This function is called by:
 11023 ;;		_string_utils_atof
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text51
 11028  002038                     __ptext51:
 11029                           	opt stack 0
 11030  002038                     ___asftmul:
 11031                           	opt stack 19
 11032                           
 11033                           ; BSR set to: 0
 11034                           ;___asftmul@f1p stored from wreg
 11035  002038  CFE8 F088          	movff	wreg,___asftmul@f1p
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;	Return value of ___asftmul is never used
 11039  00203C  5188               	movf	___asftmul@f1p& (0+255),w,b
 11040  00203E  6ED9               	movwf	fsr2l,c
 11041  002040  6ADA               	clrf	fsr2h,c
 11042  002042  CFDE F074          	movff	postinc2,?___ftmul
 11043  002046  CFDE F075          	movff	postinc2,?___ftmul+1
 11044  00204A  CFDD F076          	movff	postdec2,?___ftmul+2
 11045  00204E  C085  F077         	movff	___asftmul@f2,?___ftmul+3
 11046  002052  C086  F078         	movff	___asftmul@f2+1,?___ftmul+4
 11047  002056  C087  F079         	movff	___asftmul@f2+2,?___ftmul+5
 11048  00205A  EC31  F00A         	call	___ftmul	;wreg free
 11049  00205E  5188               	movf	___asftmul@f1p& (0+255),w,b
 11050  002060  6ED9               	movwf	fsr2l,c
 11051  002062  6ADA               	clrf	fsr2h,c
 11052  002064  C074  FFDE         	movff	?___ftmul,postinc2
 11053  002068  C075  FFDE         	movff	?___ftmul+1,postinc2
 11054  00206C  C076  FFDD         	movff	?___ftmul+2,postdec2
 11055  002070  52DD               	movf	postdec2,f,c
 11056                           
 11057                           ; BSR set to: 0
 11058  002072  0012               	return	
 11059  002074                     __end_of___asftmul:
 11060                           	opt stack 0
 11061                           tosu	equ	0xFFF
 11062                           tosh	equ	0xFFE
 11063                           tosl	equ	0xFFD
 11064                           pclath	equ	0xFFA
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           indf0	equ	0xFEF
 11073                           postinc0	equ	0xFEE
 11074                           fsr0h	equ	0xFEA
 11075                           fsr0l	equ	0xFE9
 11076                           wreg	equ	0xFE8
 11077                           indf1	equ	0xFE7
 11078                           postinc1	equ	0xFE6
 11079                           postdec1	equ	0xFE5
 11080                           fsr1h	equ	0xFE2
 11081                           fsr1l	equ	0xFE1
 11082                           indf2	equ	0xFDF
 11083                           postinc2	equ	0xFDE
 11084                           postdec2	equ	0xFDD
 11085                           fsr2h	equ	0xFDA
 11086                           fsr2l	equ	0xFD9
 11087                           status	equ	0xFD8
 11088                           
 11089 ;; *************** function ___ftpack *****************
 11090 ;; Defined at:
 11091 ;;		line 63 in file "C:\Program Files\Microchip\xc8\v1.12\sources\float.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  arg             3   12[BANK0 ] unsigned um
 11094 ;;  exp             1   15[BANK0 ] unsigned char 
 11095 ;;  sign            1   16[BANK0 ] unsigned char 
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;		None
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  3   12[BANK0 ] float 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0
 11102 ;; Tracked objects:
 11103 ;;		On entry : F/0
 11104 ;;		On exit  : F/0
 11105 ;;		Unchanged: FFFFFFF0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11107 ;;      Params:         0       5       0       0       0       0       0
 11108 ;;      Locals:         0       0       0       0       0       0       0
 11109 ;;      Temps:          0       3       0       0       0       0       0
 11110 ;;      Totals:         0       8       0       0       0       0       0
 11111 ;;Total ram usage:        8 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    5
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		___ftadd
 11118 ;;		___ftmul
 11119 ;;		___lwtoft
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	text52
 11124  0017D4                     __ptext52:
 11125                           	opt stack 0
 11126  0017D4                     ___ftpack:
 11127                           	opt stack 19
 11128                           
 11129                           ; BSR set to: 0
 11130                           
 11131                           ; BSR set to: 0
 11132  0017D4  516F               	movf	___ftpack@exp& (0+255),w,b
 11133  0017D6  E004               	bz	l1356
 11134                           
 11135                           ; BSR set to: 0
 11136  0017D8  516C               	movf	___ftpack@arg& (0+255),w,b
 11137  0017DA  116D               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11138  0017DC  116E               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11139  0017DE  E106               	bnz	l8197
 11140  0017E0                     l1356:
 11141                           
 11142                           ; BSR set to: 0
 11143  0017E0  6B6C               	clrf	?___ftpack& (0+255),b
 11144  0017E2  6B6D               	clrf	(?___ftpack+1)& (0+255),b
 11145  0017E4  6B6E               	clrf	(?___ftpack+2)& (0+255),b
 11146  0017E6  0012               	return	
 11147  0017E8                     l8195:
 11148                           
 11149                           ; BSR set to: 0
 11150  0017E8  2B6F               	incf	___ftpack@exp& (0+255),f,b
 11151  0017EA  D838               	call	PL86	;call to abstracted procedure
 11152  0017EC                     l8197:
 11153                           
 11154                           ; BSR set to: 0
 11155  0017EC  6B71               	clrf	??___ftpack& (0+255),b
 11156  0017EE  6B72               	clrf	(??___ftpack+1)& (0+255),b
 11157  0017F0  0EFE               	movlw	254
 11158  0017F2  156E               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11159  0017F4  6F73               	movwf	(??___ftpack+2)& (0+255),b
 11160  0017F6  5171               	movf	??___ftpack& (0+255),w,b
 11161  0017F8  1172               	iorwf	(??___ftpack+1)& (0+255),w,b
 11162  0017FA  1173               	iorwf	(??___ftpack+2)& (0+255),w,b
 11163  0017FC  E007               	bz	l8203
 11164  0017FE  D7F4               	goto	l8195
 11165  001800                     l8199:
 11166                           
 11167                           ; BSR set to: 0
 11168  001800  2B6F               	incf	___ftpack@exp& (0+255),f,b
 11169                           
 11170                           ; BSR set to: 0
 11171  001802  2B6C               	incf	___ftpack@arg& (0+255),f,b
 11172  001804  0E00               	movlw	0
 11173  001806  236D               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11174  001808  236E               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11175  00180A  D828               	call	PL86	;call to abstracted procedure
 11176  00180C                     l8203:
 11177                           
 11178                           ; BSR set to: 0
 11179  00180C  6B71               	clrf	??___ftpack& (0+255),b
 11180  00180E  6B72               	clrf	(??___ftpack+1)& (0+255),b
 11181  001810  516E               	movf	(___ftpack@arg+2)& (0+255),w,b
 11182  001812  6F73               	movwf	(??___ftpack+2)& (0+255),b
 11183  001814  5171               	movf	??___ftpack& (0+255),w,b
 11184  001816  1172               	iorwf	(??___ftpack+1)& (0+255),w,b
 11185  001818  1173               	iorwf	(??___ftpack+2)& (0+255),w,b
 11186  00181A  E006               	bz	l8207
 11187  00181C  D7F1               	goto	l8199
 11188  00181E                     l8205:
 11189                           
 11190                           ; BSR set to: 0
 11191  00181E  076F               	decf	___ftpack@exp& (0+255),f,b
 11192  001820  90D8               	bcf	status,0,c
 11193  001822  376C               	rlcf	___ftpack@arg& (0+255),f,b
 11194  001824  376D               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11195  001826  376E               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11196  001828                     l8207:
 11197                           
 11198                           ; BSR set to: 0
 11199  001828  AF6D               	btfss	(___ftpack@arg+1)& (0+255),7,b
 11200  00182A  D7F9               	goto	l8205
 11201                           
 11202                           ; BSR set to: 0
 11203  00182C  A16F               	btfss	___ftpack@exp& (0+255),0,b
 11204                           
 11205                           ; BSR set to: 0
 11206  00182E  9F6D               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11207                           
 11208                           ; BSR set to: 0
 11209  001830  90D8               	bcf	status,0,c
 11210  001832  336F               	rrcf	___ftpack@exp& (0+255),f,b
 11211                           
 11212                           ; BSR set to: 0
 11213  001834  516F               	movf	___ftpack@exp& (0+255),w,b
 11214  001836  6F73               	movwf	(??___ftpack+2)& (0+255),b
 11215  001838  6B72               	clrf	(??___ftpack+1)& (0+255),b
 11216  00183A  6B71               	clrf	??___ftpack& (0+255),b
 11217  00183C  5171               	movf	??___ftpack& (0+255),w,b
 11218  00183E  136C               	iorwf	___ftpack@arg& (0+255),f,b
 11219  001840  5172               	movf	(??___ftpack+1)& (0+255),w,b
 11220  001842  136D               	iorwf	(___ftpack@arg+1)& (0+255),f,b
 11221  001844  5173               	movf	(??___ftpack+2)& (0+255),w,b
 11222  001846  136E               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11223                           
 11224                           ; BSR set to: 0
 11225  001848  5170               	movf	___ftpack@sign& (0+255),w,b
 11226  00184A  A4D8               	btfss	status,2,c
 11227                           
 11228                           ; BSR set to: 0
 11229  00184C  8F6E               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11230                           
 11231                           ; BSR set to: 0
 11232  00184E  C06C  F06C         	movff	___ftpack@arg,?___ftpack
 11233  001852  C06D  F06D         	movff	___ftpack@arg+1,?___ftpack+1
 11234  001856  C06E  F06E         	movff	___ftpack@arg+2,?___ftpack+2
 11235                           
 11236                           ; BSR set to: 0
 11237  00185A  0012               	return	
 11238  00185C                     __end_of___ftpack:
 11239                           	opt stack 0
 11240  00185C                     PL86:
 11241                           	opt stack 19
 11242  00185C  90D8               	bcf	status,0,c
 11243  00185E  336E               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11244  001860  336D               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11245  001862  336C               	rrcf	___ftpack@arg& (0+255),f,b
 11246  001864  0012               	return	
 11247  001866                     __end_ofPL86:
 11248                           	opt stack 0
 11249                           tosu	equ	0xFFF
 11250                           tosh	equ	0xFFE
 11251                           tosl	equ	0xFFD
 11252                           pclath	equ	0xFFA
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           indf0	equ	0xFEF
 11261                           postinc0	equ	0xFEE
 11262                           fsr0h	equ	0xFEA
 11263                           fsr0l	equ	0xFE9
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postinc1	equ	0xFE6
 11267                           postdec1	equ	0xFE5
 11268                           fsr1h	equ	0xFE2
 11269                           fsr1l	equ	0xFE1
 11270                           indf2	equ	0xFDF
 11271                           postinc2	equ	0xFDE
 11272                           postdec2	equ	0xFDD
 11273                           fsr2h	equ	0xFDA
 11274                           fsr2l	equ	0xFD9
 11275                           status	equ	0xFD8
 11276                           
 11277 ;; *************** function ___ftmul *****************
 11278 ;; Defined at:
 11279 ;;		line 52 in file "C:\Program Files\Microchip\xc8\v1.12\sources\ftmul.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  f1              3   20[BANK0 ] float 
 11282 ;;  f2              3   23[BANK0 ] float 
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
 11285 ;;  sign            1   36[BANK0 ] unsigned char 
 11286 ;;  cntr            1   35[BANK0 ] unsigned char 
 11287 ;;  exp             1   31[BANK0 ] unsigned char 
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  3   20[BANK0 ] float 
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : F/0
 11294 ;;		On exit  : F/0
 11295 ;;		Unchanged: FFFFFFF0/0
 11296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11297 ;;      Params:         0       6       0       0       0       0       0
 11298 ;;      Locals:         0       6       0       0       0       0       0
 11299 ;;      Temps:          0       5       0       0       0       0       0
 11300 ;;      Totals:         0      17       0       0       0       0       0
 11301 ;;Total ram usage:       17 bytes
 11302 ;; Hardware stack levels used:    1
 11303 ;; Hardware stack levels required when called:    6
 11304 ;; This function calls:
 11305 ;;		___ftpack
 11306 ;; This function is called by:
 11307 ;;		_string_utils_atof
 11308 ;;		___asftmul
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text53
 11313  001462                     __ptext53:
 11314                           	opt stack 0
 11315  001462                     ___ftmul:
 11316                           	opt stack 19
 11317                           
 11318                           ; BSR set to: 0
 11319                           
 11320                           ; BSR set to: 0
 11321  001462  0E0F               	movlw	15
 11322  001464  6F7A               	movwf	??___ftmul& (0+255),b
 11323  001466  C074  F07B         	movff	___ftmul@f1,??___ftmul+1
 11324  00146A  C075  F07C         	movff	___ftmul@f1+1,??___ftmul+2
 11325  00146E  C076  F07D         	movff	___ftmul@f1+2,??___ftmul+3
 11326  001472  297A               	incf	??___ftmul& (0+255),w,b
 11327  001474  6F7E               	movwf	(??___ftmul+4)& (0+255),b
 11328  001476  D001               	goto	u10180
 11329  001478                     u10185:
 11330  001478  D86C               	call	PL82	;call to abstracted procedure
 11331  00147A                     u10180:
 11332  00147A  2F7E               	decfsz	(??___ftmul+4)& (0+255),f,b
 11333  00147C  D7FD               	goto	u10185
 11334  00147E  517B               	movf	(??___ftmul+1)& (0+255),w,b
 11335  001480  6F7F               	movwf	___ftmul@exp& (0+255),b
 11336  001482  0100               	movlb	0	; () banked
 11337  001484  677F               	tstfsz	___ftmul@exp& (0+255),b
 11338  001486  D004               	goto	l8291
 11339                           
 11340                           ; BSR set to: 0
 11341  001488  6B74               	clrf	?___ftmul& (0+255),b
 11342  00148A  6B75               	clrf	(?___ftmul+1)& (0+255),b
 11343  00148C  6B76               	clrf	(?___ftmul+2)& (0+255),b
 11344  00148E  0012               	return	
 11345  001490                     l8291:
 11346                           
 11347                           ; BSR set to: 0
 11348  001490  0E0F               	movlw	15
 11349  001492  6F7A               	movwf	??___ftmul& (0+255),b
 11350  001494  C077  F07B         	movff	___ftmul@f2,??___ftmul+1
 11351  001498  C078  F07C         	movff	___ftmul@f2+1,??___ftmul+2
 11352  00149C  C079  F07D         	movff	___ftmul@f2+2,??___ftmul+3
 11353  0014A0  297A               	incf	??___ftmul& (0+255),w,b
 11354  0014A2  6F7E               	movwf	(??___ftmul+4)& (0+255),b
 11355  0014A4  D001               	goto	u10200
 11356  0014A6                     u10205:
 11357  0014A6  D855               	call	PL82	;call to abstracted procedure
 11358  0014A8                     u10200:
 11359  0014A8  2F7E               	decfsz	(??___ftmul+4)& (0+255),f,b
 11360  0014AA  D7FD               	goto	u10205
 11361  0014AC  517B               	movf	(??___ftmul+1)& (0+255),w,b
 11362  0014AE  6F84               	movwf	___ftmul@sign& (0+255),b
 11363  0014B0  0100               	movlb	0	; () banked
 11364  0014B2  6784               	tstfsz	___ftmul@sign& (0+255),b
 11365  0014B4  D004               	goto	l8295
 11366                           
 11367                           ; BSR set to: 0
 11368  0014B6  6B74               	clrf	?___ftmul& (0+255),b
 11369  0014B8  6B75               	clrf	(?___ftmul+1)& (0+255),b
 11370  0014BA  6B76               	clrf	(?___ftmul+2)& (0+255),b
 11371  0014BC  0012               	return	
 11372  0014BE                     l8295:
 11373                           
 11374                           ; BSR set to: 0
 11375  0014BE  5184               	movf	___ftmul@sign& (0+255),w,b
 11376  0014C0  0F7B               	addlw	123
 11377  0014C2  277F               	addwf	___ftmul@exp& (0+255),f,b
 11378                           
 11379                           ; BSR set to: 0
 11380  0014C4  C076  F084         	movff	___ftmul@f1+2,___ftmul@sign
 11381  0014C8  0100               	movlb	0	; () banked
 11382  0014CA  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 11383  0014CC  1B84               	xorwf	___ftmul@sign& (0+255),f,b
 11384  0014CE  0E80               	movlw	128
 11385  0014D0  1784               	andwf	___ftmul@sign& (0+255),f,b
 11386                           
 11387                           ; BSR set to: 0
 11388  0014D2  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11389                           
 11390                           ; BSR set to: 0
 11391  0014D4  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11392                           
 11393                           ; BSR set to: 0
 11394  0014D6  0E00               	movlw	0
 11395  0014D8  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11396                           
 11397                           ; BSR set to: 0
 11398  0014DA  6B80               	clrf	___ftmul@f3_as_product& (0+255),b
 11399  0014DC  6B81               	clrf	(___ftmul@f3_as_product+1)& (0+255),b
 11400  0014DE  6B82               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 11401                           
 11402                           ; BSR set to: 0
 11403  0014E0  0E07               	movlw	7
 11404  0014E2  6F83               	movwf	___ftmul@cntr& (0+255),b
 11405  0014E4                     l8309:
 11406                           
 11407                           ; BSR set to: 0
 11408  0014E4  A174               	btfss	___ftmul@f1& (0+255),0,b
 11409  0014E6  D002               	goto	l8313
 11410                           
 11411                           ; BSR set to: 0
 11412  0014E8  5177               	movf	___ftmul@f2& (0+255),w,b
 11413  0014EA  D82D               	call	PL78	;call to abstracted procedure
 11414  0014EC                     l8313:
 11415                           
 11416                           ; BSR set to: 0
 11417  0014EC  90D8               	bcf	status,0,c
 11418  0014EE  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11419  0014F0  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11420  0014F2  3374               	rrcf	___ftmul@f1& (0+255),f,b
 11421  0014F4  90D8               	bcf	status,0,c
 11422  0014F6  3777               	rlcf	___ftmul@f2& (0+255),f,b
 11423  0014F8  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11424  0014FA  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11425                           
 11426                           ; BSR set to: 0
 11427  0014FC  2F83               	decfsz	___ftmul@cntr& (0+255),f,b
 11428  0014FE  D7F2               	goto	l8309
 11429                           
 11430                           ; BSR set to: 0
 11431  001500  0E09               	movlw	9
 11432  001502  6F83               	movwf	___ftmul@cntr& (0+255),b
 11433  001504                     l8319:
 11434                           
 11435                           ; BSR set to: 0
 11436  001504  A174               	btfss	___ftmul@f1& (0+255),0,b
 11437  001506  D002               	goto	l8323
 11438                           
 11439                           ; BSR set to: 0
 11440  001508  5177               	movf	___ftmul@f2& (0+255),w,b
 11441  00150A  D81D               	call	PL78	;call to abstracted procedure
 11442  00150C                     l8323:
 11443                           
 11444                           ; BSR set to: 0
 11445  00150C  90D8               	bcf	status,0,c
 11446  00150E  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11447  001510  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11448  001512  3374               	rrcf	___ftmul@f1& (0+255),f,b
 11449  001514  90D8               	bcf	status,0,c
 11450  001516  3382               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11451  001518  3381               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11452  00151A  3380               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11453                           
 11454                           ; BSR set to: 0
 11455  00151C  2F83               	decfsz	___ftmul@cntr& (0+255),f,b
 11456  00151E  D7F2               	goto	l8319
 11457                           
 11458                           ; BSR set to: 0
 11459  001520  C080  F06C         	movff	___ftmul@f3_as_product,?___ftpack
 11460  001524  C081  F06D         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 11461  001528  C082  F06E         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 11462  00152C  C07F  F06F         	movff	___ftmul@exp,?___ftpack+3
 11463  001530  C084  F070         	movff	___ftmul@sign,?___ftpack+4
 11464  001534  ECEA  F00B         	call	___ftpack	;wreg free
 11465  001538  C06C  F074         	movff	?___ftpack,?___ftmul
 11466  00153C  C06D  F075         	movff	?___ftpack+1,?___ftmul+1
 11467  001540  C06E  F076         	movff	?___ftpack+2,?___ftmul+2
 11468                           
 11469                           ; BSR set to: 0
 11470  001544  0012               	return	
 11471  001546                     __end_of___ftmul:
 11472                           	opt stack 0
 11473  001546                     PL78:
 11474                           	opt stack 19
 11475  001546  2780               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11476  001548  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
 11477  00154A  2381               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11478  00154C  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
 11479  00154E  2382               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11480  001550  0012               	return	
 11481  001552                     __end_ofPL78:
 11482                           	opt stack 0
 11483  001552                     PL82:
 11484                           	opt stack 19
 11485  001552  90D8               	bcf	status,0,c
 11486  001554  337D               	rrcf	(??___ftmul+3)& (0+255),f,b
 11487  001556  337C               	rrcf	(??___ftmul+2)& (0+255),f,b
 11488  001558  337B               	rrcf	(??___ftmul+1)& (0+255),f,b
 11489  00155A  0012               	return	
 11490  00155C                     __end_ofPL82:
 11491                           	opt stack 0
 11492                           tosu	equ	0xFFF
 11493                           tosh	equ	0xFFE
 11494                           tosl	equ	0xFFD
 11495                           pclath	equ	0xFFA
 11496                           tblptru	equ	0xFF8
 11497                           tblptrh	equ	0xFF7
 11498                           tblptrl	equ	0xFF6
 11499                           tablat	equ	0xFF5
 11500                           prodh	equ	0xFF4
 11501                           prodl	equ	0xFF3
 11502                           intcon	equ	0xFF2
 11503                           indf0	equ	0xFEF
 11504                           postinc0	equ	0xFEE
 11505                           fsr0h	equ	0xFEA
 11506                           fsr0l	equ	0xFE9
 11507                           wreg	equ	0xFE8
 11508                           indf1	equ	0xFE7
 11509                           postinc1	equ	0xFE6
 11510                           postdec1	equ	0xFE5
 11511                           fsr1h	equ	0xFE2
 11512                           fsr1l	equ	0xFE1
 11513                           indf2	equ	0xFDF
 11514                           postinc2	equ	0xFDE
 11515                           postdec2	equ	0xFDD
 11516                           fsr2h	equ	0xFDA
 11517                           fsr2l	equ	0xFD9
 11518                           status	equ	0xFD8
 11519                           
 11520 ;; *************** function _isr_high *****************
 11521 ;; Defined at:
 11522 ;;		line 16 in file "src/interrupts.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;		None
 11525 ;; Auto vars:     Size  Location     Type
 11526 ;;		None
 11527 ;; Return value:  Size  Location     Type
 11528 ;;		None               void
 11529 ;; Registers used:
 11530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11531 ;; Tracked objects:
 11532 ;;		On entry : 0/0
 11533 ;;		On exit  : 0/0
 11534 ;;		Unchanged: 0/0
 11535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11536 ;;      Params:         0       0       0       0       0       0       0
 11537 ;;      Locals:         0       0       0       0       0       0       0
 11538 ;;      Temps:          8       0       0       0       0       0       0
 11539 ;;      Totals:         8       0       0       0       0       0       0
 11540 ;;Total ram usage:        8 bytes
 11541 ;; Hardware stack levels used:    1
 11542 ;; Hardware stack levels required when called:    4
 11543 ;; This function calls:
 11544 ;;		_delay_interrupt_service
 11545 ;;		_serialport_service
 11546 ;;		_detection_obtain_analog_service
 11547 ;; This function is called by:
 11548 ;;		Interrupt level 2
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552 ;; *************** function interrupts@isr_high *****************
 11553 ;; Defined at:
 11554 ;;		line 16 in file "src/interrupts.c"
 11555 ;; Parameters:    Size  Location     Type
 11556 ;;		None
 11557 ;; Auto vars:     Size  Location     Type
 11558 ;;		None
 11559 ;; Return value:  Size  Location     Type
 11560 ;;		None               void
 11561 ;; Registers used:
 11562 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11563 ;; Tracked objects:
 11564 ;;		On entry : 0/0
 11565 ;;		On exit  : 0/0
 11566 ;;		Unchanged: 0/0
 11567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11568 ;;      Params:         0       0       0       0       0       0       0
 11569 ;;      Locals:         0       0       0       0       0       0       0
 11570 ;;      Temps:          0       8       0       0       0       0       0
 11571 ;;      Totals:         0       8       0       0       0       0       0
 11572 ;;Total ram usage:        8 bytes
 11573 ;; Hardware stack levels used:    1
 11574 ;; Hardware stack levels required when called:    4
 11575 ;; This function calls:
 11576 ;;		_delay_interrupt_service
 11577 ;;		_serialport_service
 11578 ;;		_detection_obtain_analog_service
 11579 ;; This function is called by:
 11580 ;;		Interrupt level 2
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           	psect	intcode
 11585  000008                     __pintcode:
 11586                           	opt stack 0
 11587  000008                     _isr_high:
 11588                           	opt stack 19
 11589                           
 11590                           ; BSR set to: 0
 11591  000008  CFE9 F012          	movff	fsr0l,??_isr_high
 11592  00000C  CFEA F013          	movff	fsr0h,??_isr_high+1
 11593  000010  CFD9 F014          	movff	fsr2l,??_isr_high+2
 11594  000014  CFDA F015          	movff	fsr2h,??_isr_high+3
 11595  000018  CFF6 F016          	movff	tblptrl,??_isr_high+4
 11596  00001C  CFF7 F017          	movff	tblptrh,??_isr_high+5
 11597  000020  CFF8 F018          	movff	tblptru,??_isr_high+6
 11598  000024  CFF5 F019          	movff	tablat,??_isr_high+7
 11599  000028                     
 11600                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
 11601  000028  A4F2               	btfss	intcon,2,c	;volatile
 11602  00002A  D001               	goto	i2u842_41
 11603  00002C  D001               	goto	i2u842_40
 11604  00002E                     i2u842_41:
 11605  00002E  D007               	goto	i2l7289
 11606  000030                     i2u842_40:
 11607  000030                     
 11608                           ;interrupts.c: 19: {
 11609                           ;interrupts.c: 20: delay_interrupt_service();
 11610  000030  EC24  F011         	call	_delay_interrupt_service	;wreg free
 11611  000034                     
 11612                           ; BSR set to: 0
 11613  000034  94F2               	bcf	intcon,2,c	;volatile
 11614  000036                     
 11615                           ; BSR set to: 0
 11616  000036  0EFE               	movlw	254
 11617  000038  6ED7               	movwf	4055,c	;volatile
 11618  00003A  0E0C               	movlw	12
 11619  00003C  6ED6               	movwf	4054,c	;volatile
 11620  00003E                     i2l7289:
 11621                           
 11622                           ;interrupts.c: 23: }
 11623                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 11624  00003E  AA9E               	btfss	3998,5,c	;volatile
 11625  000040  D001               	goto	i2u843_41
 11626  000042  D001               	goto	i2u843_40
 11627  000044                     i2u843_41:
 11628  000044  D003               	goto	i2l7295
 11629  000046                     i2u843_40:
 11630  000046                     
 11631                           ;interrupts.c: 26: {
 11632                           ;interrupts.c: 28: serialport_service();
 11633  000046  EC35  F00F         	call	_serialport_service	;wreg free
 11634  00004A                     
 11635                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 11636  00004A  9A9E               	bcf	3998,5,c	;volatile
 11637  00004C                     i2l7295:
 11638                           
 11639                           ;interrupts.c: 30: }
 11640                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 11641  00004C  AC9E               	btfss	3998,6,c	;volatile
 11642  00004E  D001               	goto	i2u844_41
 11643  000050  D001               	goto	i2u844_40
 11644  000052                     i2u844_41:
 11645  000052  D003               	goto	i2l1020
 11646  000054                     i2u844_40:
 11647  000054                     
 11648                           ;interrupts.c: 36: {
 11649                           ;interrupts.c: 38: detection_obtain_analog_service();
 11650  000054  ECB8  F010         	call	_detection_obtain_analog_service	;wreg free
 11651  000058                     
 11652                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 11653  000058  9C9E               	bcf	3998,6,c	;volatile
 11654  00005A                     i2l1020:
 11655  00005A  C019  FFF5         	movff	??_isr_high+7,tablat
 11656  00005E  C018  FFF8         	movff	??_isr_high+6,tblptru
 11657  000062  C017  FFF7         	movff	??_isr_high+5,tblptrh
 11658  000066  C016  FFF6         	movff	??_isr_high+4,tblptrl
 11659  00006A  C015  FFDA         	movff	??_isr_high+3,fsr2h
 11660  00006E  C014  FFD9         	movff	??_isr_high+2,fsr2l
 11661  000072  C013  FFEA         	movff	??_isr_high+1,fsr0h
 11662  000076  C012  FFE9         	movff	??_isr_high,fsr0l
 11663  00007A  0011               	retfie		f
 11664  00007C                     __end_of_isr_high:
 11665                           	opt stack 0
 11666  00007C                     interrupts@isr_high:
 11667                           	opt stack 19
 11668  00007C  CFE9 F064          	movff	fsr0l,??interrupts@isr_high
 11669  000080  CFEA F065          	movff	fsr0h,??interrupts@isr_high+1
 11670  000084  CFD9 F066          	movff	fsr2l,??interrupts@isr_high+2
 11671  000088  CFDA F067          	movff	fsr2h,??interrupts@isr_high+3
 11672  00008C  CFF6 F068          	movff	tblptrl,??interrupts@isr_high+4
 11673  000090  CFF7 F069          	movff	tblptrh,??interrupts@isr_high+5
 11674  000094  CFF8 F06A          	movff	tblptru,??interrupts@isr_high+6
 11675  000098  CFF5 F06B          	movff	tablat,??interrupts@isr_high+7
 11676  00009C                     
 11677                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
 11678  00009C  A4F2               	btfss	intcon,2,c	;volatile
 11679  00009E  D001               	goto	i2u870_41
 11680  0000A0  D001               	goto	i2u870_40
 11681  0000A2                     i2u870_41:
 11682  0000A2  D007               	goto	i2l7437
 11683  0000A4                     i2u870_40:
 11684  0000A4                     
 11685                           ;interrupts.c: 19: {
 11686                           ;interrupts.c: 20: delay_interrupt_service();
 11687  0000A4  EC24  F011         	call	_delay_interrupt_service	;wreg free
 11688  0000A8                     
 11689                           ; BSR set to: 0
 11690  0000A8  94F2               	bcf	intcon,2,c	;volatile
 11691  0000AA                     
 11692                           ; BSR set to: 0
 11693  0000AA  0EFE               	movlw	254
 11694  0000AC  6ED7               	movwf	4055,c	;volatile
 11695  0000AE  0E0C               	movlw	12
 11696  0000B0  6ED6               	movwf	4054,c	;volatile
 11697  0000B2                     i2l7437:
 11698                           
 11699                           ;interrupts.c: 23: }
 11700                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 11701  0000B2  AA9E               	btfss	3998,5,c	;volatile
 11702  0000B4  D001               	goto	i2u871_41
 11703  0000B6  D001               	goto	i2u871_40
 11704  0000B8                     i2u871_41:
 11705  0000B8  D003               	goto	i2l7443
 11706  0000BA                     i2u871_40:
 11707  0000BA                     
 11708                           ;interrupts.c: 26: {
 11709                           ;interrupts.c: 28: serialport_service();
 11710  0000BA  EC35  F00F         	call	_serialport_service	;wreg free
 11711  0000BE                     
 11712                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 11713  0000BE  9A9E               	bcf	3998,5,c	;volatile
 11714  0000C0                     i2l7443:
 11715                           
 11716                           ;interrupts.c: 30: }
 11717                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 11718  0000C0  AC9E               	btfss	3998,6,c	;volatile
 11719  0000C2  D001               	goto	i2u872_41
 11720  0000C4  D001               	goto	i2u872_40
 11721  0000C6                     i2u872_41:
 11722  0000C6  D003               	goto	i2l1050
 11723  0000C8                     i2u872_40:
 11724  0000C8                     
 11725                           ;interrupts.c: 36: {
 11726                           ;interrupts.c: 38: detection_obtain_analog_service();
 11727  0000C8  ECB8  F010         	call	_detection_obtain_analog_service	;wreg free
 11728  0000CC                     
 11729                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 11730  0000CC  9C9E               	bcf	3998,6,c	;volatile
 11731  0000CE                     i2l1050:
 11732  0000CE  C06B  FFF5         	movff	??interrupts@isr_high+7,tablat
 11733  0000D2  C06A  FFF8         	movff	??interrupts@isr_high+6,tblptru
 11734  0000D6  C069  FFF7         	movff	??interrupts@isr_high+5,tblptrh
 11735  0000DA  C068  FFF6         	movff	??interrupts@isr_high+4,tblptrl
 11736  0000DE  C067  FFDA         	movff	??interrupts@isr_high+3,fsr2h
 11737  0000E2  C066  FFD9         	movff	??interrupts@isr_high+2,fsr2l
 11738  0000E6  C065  FFEA         	movff	??interrupts@isr_high+1,fsr0h
 11739  0000EA  C064  FFE9         	movff	??interrupts@isr_high,fsr0l
 11740  0000EE  0011               	retfie		f
 11741  0000F0                     __end_ofinterrupts@isr_high:
 11742                           	opt stack 0
 11743  0000F0                     tosu	equ	0xFFF
 11744                           tosh	equ	0xFFE
 11745                           tosl	equ	0xFFD
 11746                           pclath	equ	0xFFA
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           indf0	equ	0xFEF
 11755                           postinc0	equ	0xFEE
 11756                           fsr0h	equ	0xFEA
 11757                           fsr0l	equ	0xFE9
 11758                           wreg	equ	0xFE8
 11759                           indf1	equ	0xFE7
 11760                           postinc1	equ	0xFE6
 11761                           postdec1	equ	0xFE5
 11762                           fsr1h	equ	0xFE2
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _delay_interrupt_service *****************
 11772 ;; Defined at:
 11773 ;;		line 60 in file "src/drivers/delay.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;		None               void
 11780 ;; Registers used:
 11781 ;;		wreg, status,2, status,0
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : F/0
 11785 ;;		Unchanged: FFFFFFF0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11787 ;;      Params:         0       0       0       0       0       0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_isr_high
 11797 ;;		interrupts@isr_high
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           	psect	text55
 11802  002248                     __ptext55:
 11803                           	opt stack 0
 11804  002248                     _delay_interrupt_service:
 11805                           	opt stack 22
 11806                           
 11807                           ;delay.c: 61: if(this_delay_timer_ms > 0u) {
 11808  002248  0100               	movlb	0	; () banked
 11809  00224A  51F2               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
 11810  00224C  11F1               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
 11811  00224E  B4D8               	btfsc	status,2,c
 11812  002250  0012               	return	
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;delay.c: 62: this_delay_timer_ms--;
 11816  002252  07F1               	decf	_this_delay_timer_ms& (0+255),f,b	;volatile
 11817  002254  A0D8               	btfss	status,0,c
 11818  002256  07F2               	decf	(_this_delay_timer_ms+1)& (0+255),f,b	;volatile
 11819                           
 11820                           ; BSR set to: 0
 11821  002258  0012               	return	
 11822  00225A                     __end_of_delay_interrupt_service:
 11823                           	opt stack 0
 11824                           tosu	equ	0xFFF
 11825                           tosh	equ	0xFFE
 11826                           tosl	equ	0xFFD
 11827                           pclath	equ	0xFFA
 11828                           tblptru	equ	0xFF8
 11829                           tblptrh	equ	0xFF7
 11830                           tblptrl	equ	0xFF6
 11831                           tablat	equ	0xFF5
 11832                           prodh	equ	0xFF4
 11833                           prodl	equ	0xFF3
 11834                           intcon	equ	0xFF2
 11835                           indf0	equ	0xFEF
 11836                           postinc0	equ	0xFEE
 11837                           fsr0h	equ	0xFEA
 11838                           fsr0l	equ	0xFE9
 11839                           wreg	equ	0xFE8
 11840                           indf1	equ	0xFE7
 11841                           postinc1	equ	0xFE6
 11842                           postdec1	equ	0xFE5
 11843                           fsr1h	equ	0xFE2
 11844                           fsr1l	equ	0xFE1
 11845                           indf2	equ	0xFDF
 11846                           postinc2	equ	0xFDE
 11847                           postdec2	equ	0xFDD
 11848                           fsr2h	equ	0xFDA
 11849                           fsr2l	equ	0xFD9
 11850                           status	equ	0xFD8
 11851                           
 11852 ;; *************** function _serialport_service *****************
 11853 ;; Defined at:
 11854 ;;		line 24 in file "src/modules/serialport.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;		None
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  byte            1    3[BANK0 ] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;		None               void
 11861 ;; Registers used:
 11862 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: FFFFFFF0/0
 11867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11868 ;;      Params:         0       0       0       0       0       0       0
 11869 ;;      Locals:         0       1       0       0       0       0       0
 11870 ;;      Temps:          0       1       0       0       0       0       0
 11871 ;;      Totals:         0       2       0       0       0       0       0
 11872 ;;Total ram usage:        2 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    3
 11875 ;; This function calls:
 11876 ;;		_uart_byte_available
 11877 ;;		_uart_getc
 11878 ;;		i2_rd_buffer_put
 11879 ;; This function is called by:
 11880 ;;		_isr_high
 11881 ;;		interrupts@isr_high
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text56
 11886  001E6A                     __ptext56:
 11887                           	opt stack 0
 11888  001E6A                     _serialport_service:
 11889                           	opt stack 19
 11890                           
 11891                           ;serialport.c: 25: UINT8 byte;
 11892                           ;serialport.c: 26: if (uart_byte_available()) {
 11893                           
 11894                           ; BSR set to: 0
 11895  001E6A  EC4C  F011         	call	_uart_byte_available	;wreg free
 11896  001E6E  0900               	iorlw	0
 11897  001E70  B4D8               	btfsc	status,2,c
 11898  001E72  0012               	return	
 11899                           
 11900                           ;serialport.c: 27: if (uart_getc(&byte) == RESULT_SUCCESS) {
 11901  001E74  0100               	movlb	0	; () banked
 11902  001E76  0E63               	movlw	serialport_service@byte& (0+255)
 11903  001E78  EC53  F010         	call	_uart_getc
 11904  001E7C  6F62               	movwf	??_serialport_service& (0+255),b
 11905  001E7E  0562               	decf	??_serialport_service& (0+255),w,b
 11906  001E80  E10B               	bnz	i2l7423
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;serialport.c: 28: rd_buffer_put(&g_rx_buffer, &byte);
 11910  001E82  0E02               	movlw	high _g_rx_buffer
 11911  001E84  6E1B               	movwf	?i2_rd_buffer_put+1,c
 11912  001E86  0E7F               	movlw	low _g_rx_buffer
 11913  001E88  6E1A               	movwf	?i2_rd_buffer_put,c
 11914  001E8A  0100               	movlb	0	; () banked
 11915  001E8C  0E00               	movlw	high serialport_service@byte
 11916  001E8E  6E1D               	movwf	?i2_rd_buffer_put+3,c
 11917  001E90  0E63               	movlw	low serialport_service@byte
 11918  001E92  6E1C               	movwf	?i2_rd_buffer_put+2,c
 11919  001E94  EC6D  F007         	call	i2_rd_buffer_put	;wreg free
 11920  001E98                     i2l7423:
 11921                           
 11922                           ;serialport.c: 29: }
 11923                           ;serialport.c: 30: if(byte=='\n' || byte=='\r')
 11924  001E98  0100               	movlb	0	; () banked
 11925  001E9A  5163               	movf	serialport_service@byte& (0+255),w,b
 11926  001E9C  0A0A               	xorlw	10
 11927  001E9E  E004               	bz	i2l7427
 11928                           
 11929                           ; BSR set to: 0
 11930  001EA0  5163               	movf	serialport_service@byte& (0+255),w,b
 11931  001EA2  0A0D               	xorlw	13
 11932  001EA4  A4D8               	btfss	status,2,c
 11933  001EA6  0012               	return	
 11934  001EA8                     i2l7427:
 11935                           
 11936                           ; BSR set to: 0
 11937  001EA8  0E01               	movlw	1
 11938  001EAA  6E38               	movwf	_pool+5,c	;volatile
 11939  001EAC  0E0A               	movlw	10
 11940  001EAE  6E30               	movwf	_event_miss+5,c	;volatile
 11941  001EB0  0C0A               	retlw	10
 11942  001EB2                     __end_of_serialport_service:
 11943                           	opt stack 0
 11944                           tosu	equ	0xFFF
 11945                           tosh	equ	0xFFE
 11946                           tosl	equ	0xFFD
 11947                           pclath	equ	0xFFA
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           indf0	equ	0xFEF
 11956                           postinc0	equ	0xFEE
 11957                           fsr0h	equ	0xFEA
 11958                           fsr0l	equ	0xFE9
 11959                           wreg	equ	0xFE8
 11960                           indf1	equ	0xFE7
 11961                           postinc1	equ	0xFE6
 11962                           postdec1	equ	0xFE5
 11963                           fsr1h	equ	0xFE2
 11964                           fsr1l	equ	0xFE1
 11965                           indf2	equ	0xFDF
 11966                           postinc2	equ	0xFDE
 11967                           postdec2	equ	0xFDD
 11968                           fsr2h	equ	0xFDA
 11969                           fsr2l	equ	0xFD9
 11970                           status	equ	0xFD8
 11971                           
 11972 ;; *************** function _uart_getc *****************
 11973 ;; Defined at:
 11974 ;;		line 56 in file "src/drivers/uart.c"
 11975 ;; Parameters:    Size  Location     Type
 11976 ;;  pbyte           1    wreg     PTR unsigned char 
 11977 ;;		 -> serialport_service@byte(1), 
 11978 ;; Auto vars:     Size  Location     Type
 11979 ;;  pbyte           1   26[COMRAM] PTR unsigned char 
 11980 ;;		 -> serialport_service@byte(1), 
 11981 ;;  result          1   27[COMRAM] enum E3389
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      enum E3389
 11984 ;; Registers used:
 11985 ;;		wreg, fsr2l, fsr2h, status,2, cstack
 11986 ;; Tracked objects:
 11987 ;;		On entry : F/0
 11988 ;;		On exit  : F/0
 11989 ;;		Unchanged: FFFFFFF0/0
 11990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11991 ;;      Params:         0       0       0       0       0       0       0
 11992 ;;      Locals:         2       0       0       0       0       0       0
 11993 ;;      Temps:          0       0       0       0       0       0       0
 11994 ;;      Totals:         2       0       0       0       0       0       0
 11995 ;;Total ram usage:        2 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    2
 11998 ;; This function calls:
 11999 ;;		_uart_error
 12000 ;;		_uart_reset
 12001 ;;		_uart_byte_available
 12002 ;; This function is called by:
 12003 ;;		_serialport_service
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           	psect	text57
 12008  0020A6                     __ptext57:
 12009                           	opt stack 0
 12010  0020A6                     _uart_getc:
 12011                           	opt stack 19
 12012                           
 12013                           ;uart_getc@pbyte stored from wreg
 12014  0020A6  CFE8 F01B          	movff	wreg,uart_getc@pbyte
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;uart.c: 57: ResultSuccess_t result = RESULT_FAIL;
 12018  0020AA  6A1C               	clrf	uart_getc@result,c
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;uart.c: 58: if ( uart_error())
 12022  0020AC  EC35  F011         	call	_uart_error	;wreg free
 12023  0020B0  0900               	iorlw	0
 12024  0020B2  E003               	bz	i2l7405
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;uart.c: 59: {
 12028                           ;uart.c: 60: uart_reset();
 12029  0020B4  ECC8  F010         	call	_uart_reset	;wreg free
 12030                           
 12031                           ;uart.c: 61: }
 12032  0020B8  D00C               	goto	i2l7413
 12033  0020BA                     i2l7405:
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;uart.c: 62: else
 12037                           ;uart.c: 63: if( uart_byte_available() )
 12038  0020BA  EC4C  F011         	call	_uart_byte_available	;wreg free
 12039  0020BE  0900               	iorlw	0
 12040  0020C0  E008               	bz	i2l7413
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;uart.c: 64: {
 12044                           ;uart.c: 65: *pbyte = RCREG;
 12045  0020C2  501B               	movf	uart_getc@pbyte,w,c
 12046  0020C4  6ED9               	movwf	fsr2l,c
 12047  0020C6  6ADA               	clrf	fsr2h,c
 12048  0020C8  CFAE FFDF          	movff	4014,indf2	;volatile
 12049                           
 12050                           ; BSR set to: 0
 12051                           ;uart.c: 66: RCIF = 0;
 12052  0020CC  9A9E               	bcf	3998,5,c	;volatile
 12053                           
 12054                           ; BSR set to: 0
 12055                           ;uart.c: 67: result = RESULT_SUCCESS;
 12056  0020CE  0E01               	movlw	1
 12057  0020D0  6E1C               	movwf	uart_getc@result,c
 12058  0020D2                     i2l7413:
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;uart.c: 68: }
 12062                           ;uart.c: 69: return result;
 12063  0020D2  501C               	movf	uart_getc@result,w,c
 12064                           
 12065                           ; BSR set to: 0
 12066  0020D4  0012               	return	
 12067  0020D6                     __end_of_uart_getc:
 12068                           	opt stack 0
 12069                           tosu	equ	0xFFF
 12070                           tosh	equ	0xFFE
 12071                           tosl	equ	0xFFD
 12072                           pclath	equ	0xFFA
 12073                           tblptru	equ	0xFF8
 12074                           tblptrh	equ	0xFF7
 12075                           tblptrl	equ	0xFF6
 12076                           tablat	equ	0xFF5
 12077                           prodh	equ	0xFF4
 12078                           prodl	equ	0xFF3
 12079                           intcon	equ	0xFF2
 12080                           indf0	equ	0xFEF
 12081                           postinc0	equ	0xFEE
 12082                           fsr0h	equ	0xFEA
 12083                           fsr0l	equ	0xFE9
 12084                           wreg	equ	0xFE8
 12085                           indf1	equ	0xFE7
 12086                           postinc1	equ	0xFE6
 12087                           postdec1	equ	0xFE5
 12088                           fsr1h	equ	0xFE2
 12089                           fsr1l	equ	0xFE1
 12090                           indf2	equ	0xFDF
 12091                           postinc2	equ	0xFDE
 12092                           postdec2	equ	0xFDD
 12093                           fsr2h	equ	0xFDA
 12094                           fsr2l	equ	0xFD9
 12095                           status	equ	0xFD8
 12096                           
 12097 ;; *************** function _uart_reset *****************
 12098 ;; Defined at:
 12099 ;;		line 73 in file "src/drivers/uart.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;		None
 12102 ;; Auto vars:     Size  Location     Type
 12103 ;;		None
 12104 ;; Return value:  Size  Location     Type
 12105 ;;		None               void
 12106 ;; Registers used:
 12107 ;;		wreg, status,2, cstack
 12108 ;; Tracked objects:
 12109 ;;		On entry : F/0
 12110 ;;		On exit  : F/0
 12111 ;;		Unchanged: FFFFFFF0/0
 12112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12113 ;;      Params:         0       0       0       0       0       0       0
 12114 ;;      Locals:         0       0       0       0       0       0       0
 12115 ;;      Temps:          0       0       0       0       0       0       0
 12116 ;;      Totals:         0       0       0       0       0       0       0
 12117 ;;Total ram usage:        0 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:    1
 12120 ;; This function calls:
 12121 ;;		_uart_byte_available
 12122 ;;		_uart_error
 12123 ;; This function is called by:
 12124 ;;		_uart_getc
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           	psect	text58
 12129  002190                     __ptext58:
 12130                           	opt stack 0
 12131  002190                     _uart_reset:
 12132                           	opt stack 19
 12133                           
 12134                           ; BSR set to: 0
 12135                           ;uart.c: 74: while(uart_error() )
 12136                           
 12137                           ; BSR set to: 0
 12138  002190  D008               	goto	i2l7393
 12139  002192                     i2l169:
 12140                           
 12141                           ; BSR set to: 0
 12142                           ;uart.c: 75: {
 12143                           ;uart.c: 76: CREN = 0;
 12144  002192  98AB               	bcf	4011,4,c	;volatile
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;uart.c: 77: RCREG;
 12148  002194  50AE               	movf	4014,w,c	;volatile
 12149                           
 12150                           ;uart.c: 78: RCREG;
 12151  002196  50AE               	movf	4014,w,c	;volatile
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;uart.c: 79: CREN = 1;
 12155  002198  88AB               	bsf	4011,4,c	;volatile
 12156  00219A                     i2l7391:
 12157                           
 12158                           ; BSR set to: 0
 12159  00219A  EC4C  F011         	call	_uart_byte_available	;wreg free
 12160  00219E  0900               	iorlw	0
 12161  0021A0  E1FC               	bnz	i2l7391
 12162  0021A2                     i2l7393:
 12163                           
 12164                           ; BSR set to: 0
 12165  0021A2  EC35  F011         	call	_uart_error	;wreg free
 12166  0021A6  0900               	iorlw	0
 12167  0021A8  B4D8               	btfsc	status,2,c
 12168  0021AA  0012               	return	
 12169  0021AC  D7F2               	goto	i2l169
 12170  0021AE                     __end_of_uart_reset:
 12171                           	opt stack 0
 12172                           tosu	equ	0xFFF
 12173                           tosh	equ	0xFFE
 12174                           tosl	equ	0xFFD
 12175                           pclath	equ	0xFFA
 12176                           tblptru	equ	0xFF8
 12177                           tblptrh	equ	0xFF7
 12178                           tblptrl	equ	0xFF6
 12179                           tablat	equ	0xFF5
 12180                           prodh	equ	0xFF4
 12181                           prodl	equ	0xFF3
 12182                           intcon	equ	0xFF2
 12183                           indf0	equ	0xFEF
 12184                           postinc0	equ	0xFEE
 12185                           fsr0h	equ	0xFEA
 12186                           fsr0l	equ	0xFE9
 12187                           wreg	equ	0xFE8
 12188                           indf1	equ	0xFE7
 12189                           postinc1	equ	0xFE6
 12190                           postdec1	equ	0xFE5
 12191                           fsr1h	equ	0xFE2
 12192                           fsr1l	equ	0xFE1
 12193                           indf2	equ	0xFDF
 12194                           postinc2	equ	0xFDE
 12195                           postdec2	equ	0xFDD
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8
 12199                           
 12200 ;; *************** function _uart_byte_available *****************
 12201 ;; Defined at:
 12202 ;;		line 52 in file "src/drivers/uart.c"
 12203 ;; Parameters:    Size  Location     Type
 12204 ;;		None
 12205 ;; Auto vars:     Size  Location     Type
 12206 ;;		None
 12207 ;; Return value:  Size  Location     Type
 12208 ;;                  1    wreg      unsigned char 
 12209 ;; Registers used:
 12210 ;;		wreg
 12211 ;; Tracked objects:
 12212 ;;		On entry : 0/0
 12213 ;;		On exit  : 0/0
 12214 ;;		Unchanged: FFFFFFFF/0
 12215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12216 ;;      Params:         0       0       0       0       0       0       0
 12217 ;;      Locals:         0       0       0       0       0       0       0
 12218 ;;      Temps:          0       0       0       0       0       0       0
 12219 ;;      Totals:         0       0       0       0       0       0       0
 12220 ;;Total ram usage:        0 bytes
 12221 ;; Hardware stack levels used:    1
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_uart_getc
 12226 ;;		_uart_reset
 12227 ;;		_serialport_service
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           	psect	text59
 12232  002298                     __ptext59:
 12233                           	opt stack 0
 12234  002298                     _uart_byte_available:
 12235                           	opt stack 20
 12236                           
 12237                           ;uart.c: 53: return RC1IF;
 12238                           
 12239                           ; BSR set to: 0
 12240  002298  0E00               	movlw	0
 12241  00229A  BA9E               	btfsc	3998,5,c	;volatile
 12242  00229C  0E01               	movlw	1
 12243  00229E  0012               	return	
 12244  0022A0                     __end_of_uart_byte_available:
 12245                           	opt stack 0
 12246                           tosu	equ	0xFFF
 12247                           tosh	equ	0xFFE
 12248                           tosl	equ	0xFFD
 12249                           pclath	equ	0xFFA
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           indf0	equ	0xFEF
 12258                           postinc0	equ	0xFEE
 12259                           fsr0h	equ	0xFEA
 12260                           fsr0l	equ	0xFE9
 12261                           wreg	equ	0xFE8
 12262                           indf1	equ	0xFE7
 12263                           postinc1	equ	0xFE6
 12264                           postdec1	equ	0xFE5
 12265                           fsr1h	equ	0xFE2
 12266                           fsr1l	equ	0xFE1
 12267                           indf2	equ	0xFDF
 12268                           postinc2	equ	0xFDE
 12269                           postdec2	equ	0xFDD
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274 ;; *************** function _uart_error *****************
 12275 ;; Defined at:
 12276 ;;		line 85 in file "src/drivers/uart.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;		None
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;		None
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      unsigned char 
 12283 ;; Registers used:
 12284 ;;		wreg, status,2
 12285 ;; Tracked objects:
 12286 ;;		On entry : F/0
 12287 ;;		On exit  : F/0
 12288 ;;		Unchanged: FFFFFFF0/0
 12289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12290 ;;      Params:         0       0       0       0       0       0       0
 12291 ;;      Locals:         1       0       0       0       0       0       0
 12292 ;;      Temps:          0       0       0       0       0       0       0
 12293 ;;      Totals:         1       0       0       0       0       0       0
 12294 ;;Total ram usage:        1 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; This function calls:
 12297 ;;		Nothing
 12298 ;; This function is called by:
 12299 ;;		_uart_getc
 12300 ;;		_uart_reset
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           	psect	text60
 12305  00226A                     __ptext60:
 12306                           	opt stack 0
 12307  00226A                     _uart_error:
 12308                           	opt stack 19
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;uart.c: 86: return RCSTAbits.OERR || RCSTAbits.FERR ;
 12312  00226A  0E01               	movlw	1
 12313  00226C  6E1A               	movwf	_uart_error$257,c
 12314                           
 12315                           ; BSR set to: 0
 12316  00226E  A2AB               	btfss	4011,1,c	;volatile
 12317                           
 12318                           ; BSR set to: 0
 12319  002270  B4AB               	btfsc	4011,2,c	;volatile
 12320  002272  D001               	goto	i2l7085
 12321                           
 12322                           ; BSR set to: 0
 12323  002274  6A1A               	clrf	_uart_error$257,c
 12324  002276                     i2l7085:
 12325                           
 12326                           ; BSR set to: 0
 12327  002276  501A               	movf	_uart_error$257,w,c
 12328                           
 12329                           ; BSR set to: 0
 12330  002278  0012               	return	
 12331  00227A                     __end_of_uart_error:
 12332                           	opt stack 0
 12333                           tosu	equ	0xFFF
 12334                           tosh	equ	0xFFE
 12335                           tosl	equ	0xFFD
 12336                           pclath	equ	0xFFA
 12337                           tblptru	equ	0xFF8
 12338                           tblptrh	equ	0xFF7
 12339                           tblptrl	equ	0xFF6
 12340                           tablat	equ	0xFF5
 12341                           prodh	equ	0xFF4
 12342                           prodl	equ	0xFF3
 12343                           intcon	equ	0xFF2
 12344                           indf0	equ	0xFEF
 12345                           postinc0	equ	0xFEE
 12346                           fsr0h	equ	0xFEA
 12347                           fsr0l	equ	0xFE9
 12348                           wreg	equ	0xFE8
 12349                           indf1	equ	0xFE7
 12350                           postinc1	equ	0xFE6
 12351                           postdec1	equ	0xFE5
 12352                           fsr1h	equ	0xFE2
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           fsr2h	equ	0xFDA
 12358                           fsr2l	equ	0xFD9
 12359                           status	equ	0xFD8
 12360                           
 12361 ;; *************** function _detection_obtain_analog_service *****************
 12362 ;; Defined at:
 12363 ;;		line 137 in file "src/modules/detection.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;  adc_data        1    2[BANK0 ] unsigned char 
 12368 ;; Return value:  Size  Location     Type
 12369 ;;		None               void
 12370 ;; Registers used:
 12371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12377 ;;      Params:         0       0       0       0       0       0       0
 12378 ;;      Locals:         0       1       0       0       0       0       0
 12379 ;;      Temps:          0       0       0       0       0       0       0
 12380 ;;      Totals:         0       1       0       0       0       0       0
 12381 ;;Total ram usage:        1 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    1
 12384 ;; This function calls:
 12385 ;;		_adc_read
 12386 ;;		i2_rd_buffer_put
 12387 ;; This function is called by:
 12388 ;;		_isr_high
 12389 ;;		interrupts@isr_high
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           	psect	text61
 12394  002170                     __ptext61:
 12395                           	opt stack 0
 12396  002170                     _detection_obtain_analog_service:
 12397                           	opt stack 21
 12398                           
 12399                           ;detection.c: 138: UINT8 adc_data;
 12400                           ;detection.c: 139: adc_data = adc_read(0);
 12401                           
 12402                           ; BSR set to: 0
 12403  002170  0E00               	movlw	0
 12404  002172  EC7C  F00F         	call	_adc_read
 12405  002176  501A               	movf	?_adc_read,w,c
 12406  002178  0100               	movlb	0	; () banked
 12407  00217A  6F62               	movwf	detection_obtain_analog_service@adc_data& (0+255),b
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;detection.c: 140: rd_buffer_put(&meas_buffer, &adc_data);
 12411  00217C  0E04               	movlw	high _meas_buffer
 12412  00217E  6E1B               	movwf	?i2_rd_buffer_put+1,c
 12413  002180  0E50               	movlw	low _meas_buffer
 12414  002182  6E1A               	movwf	?i2_rd_buffer_put,c
 12415  002184  0E00               	movlw	high detection_obtain_analog_service@adc_data
 12416  002186  6E1D               	movwf	?i2_rd_buffer_put+3,c
 12417  002188  0E62               	movlw	low detection_obtain_analog_service@adc_data
 12418  00218A  6E1C               	movwf	?i2_rd_buffer_put+2,c
 12419  00218C  EF6D  F007         	goto	i2_rd_buffer_put	;wreg free
 12420  002190                     __end_of_detection_obtain_analog_service:
 12421                           	opt stack 0
 12422                           tosu	equ	0xFFF
 12423                           tosh	equ	0xFFE
 12424                           tosl	equ	0xFFD
 12425                           pclath	equ	0xFFA
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           indf0	equ	0xFEF
 12434                           postinc0	equ	0xFEE
 12435                           fsr0h	equ	0xFEA
 12436                           fsr0l	equ	0xFE9
 12437                           wreg	equ	0xFE8
 12438                           indf1	equ	0xFE7
 12439                           postinc1	equ	0xFE6
 12440                           postdec1	equ	0xFE5
 12441                           fsr1h	equ	0xFE2
 12442                           fsr1l	equ	0xFE1
 12443                           indf2	equ	0xFDF
 12444                           postinc2	equ	0xFDE
 12445                           postdec2	equ	0xFDD
 12446                           fsr2h	equ	0xFDA
 12447                           fsr2l	equ	0xFD9
 12448                           status	equ	0xFD8
 12449                           
 12450 ;; *************** function _adc_read *****************
 12451 ;; Defined at:
 12452 ;;		line 22 in file "src/drivers/adc.c"
 12453 ;; Parameters:    Size  Location     Type
 12454 ;;  adc_number      1    wreg     unsigned char 
 12455 ;; Auto vars:     Size  Location     Type
 12456 ;;  adc_number      1   28[COMRAM] unsigned char 
 12457 ;; Return value:  Size  Location     Type
 12458 ;;                  2   25[COMRAM] unsigned short 
 12459 ;; Registers used:
 12460 ;;		wreg, status,2, status,0
 12461 ;; Tracked objects:
 12462 ;;		On entry : 0/0
 12463 ;;		On exit  : 0/0
 12464 ;;		Unchanged: 0/0
 12465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12466 ;;      Params:         2       0       0       0       0       0       0
 12467 ;;      Locals:         1       0       0       0       0       0       0
 12468 ;;      Temps:          1       0       0       0       0       0       0
 12469 ;;      Totals:         4       0       0       0       0       0       0
 12470 ;;Total ram usage:        4 bytes
 12471 ;; Hardware stack levels used:    1
 12472 ;; This function calls:
 12473 ;;		Nothing
 12474 ;; This function is called by:
 12475 ;;		_detection_obtain_analog_service
 12476 ;; This function uses a non-reentrant model
 12477 ;;
 12478                           
 12479                           	psect	text62
 12480  001EF8                     __ptext62:
 12481                           	opt stack 0
 12482  001EF8                     _adc_read:
 12483                           	opt stack 21
 12484                           
 12485                           ;adc_read@adc_number stored from wreg
 12486  001EF8  CFE8 F01D          	movff	wreg,adc_read@adc_number
 12487                           
 12488                           ;adc.c: 23: if(ADCON0bits.CHS != adc_number)
 12489  001EFC  30C2               	rrcf	4034,w,c	;volatile
 12490  001EFE  32E8               	rrcf	wreg,f,c
 12491  001F00  0B0F               	andlw	15
 12492  001F02  181D               	xorwf	adc_read@adc_number,w,c
 12493  001F04  E010               	bz	i2l7093
 12494                           
 12495                           ;adc.c: 24: {
 12496                           ;adc.c: 25: ADCON0bits.CHS = adc_number;
 12497  001F06  C01D  F01C         	movff	adc_read@adc_number,??_adc_read
 12498  001F0A  461C               	rlncf	??_adc_read,f,c
 12499  001F0C  461C               	rlncf	??_adc_read,f,c
 12500  001F0E  50C2               	movf	4034,w,c	;volatile
 12501  001F10  181C               	xorwf	??_adc_read,w,c
 12502  001F12  0BC3               	andlw	-61
 12503  001F14  181C               	xorwf	??_adc_read,w,c
 12504  001F16  6EC2               	movwf	4034,c	;volatile
 12505  001F18  F000               	nop		;# 
 12506  001F1A  F000               	nop		;# 
 12507  001F1C  F000               	nop		;# 
 12508  001F1E  F000               	nop		;# 
 12509  001F20  F000               	nop		;# 
 12510  001F22  F000               	nop		;# 
 12511  001F24  F000               	nop		;# 
 12512  001F26                     i2l7093:
 12513                           
 12514                           ;adc.c: 27: }
 12515                           ;adc.c: 28: ADCON0bits.GO_nDONE = TRUE;
 12516  001F26  82C2               	bsf	4034,1,c	;volatile
 12517                           
 12518                           ;adc.c: 29: while (GODONE) {asm(" nop");asm(" nop");}
 12519  001F28  D002               	goto	i2l227
 12520  001F2A                     i2l228:
 12521  001F2A  F000               	nop		;# 
 12522  001F2C  F000               	nop		;# 
 12523  001F2E                     i2l227:
 12524  001F2E  B2C2               	btfsc	4034,1,c	;volatile
 12525  001F30  D7FC               	goto	i2l228
 12526                           
 12527                           ;adc.c: 30: ADIF = FALSE;
 12528  001F32  9C9E               	bcf	3998,6,c	;volatile
 12529                           
 12530                           ;adc.c: 31: return ADRES;
 12531  001F34  CFC3 F01A          	movff	4035,?_adc_read	;volatile
 12532  001F38  CFC4 F01B          	movff	4036,?_adc_read+1	;volatile
 12533  001F3C  0012               	return	
 12534  001F3E                     __end_of_adc_read:
 12535                           	opt stack 0
 12536                           tosu	equ	0xFFF
 12537                           tosh	equ	0xFFE
 12538                           tosl	equ	0xFFD
 12539                           pclath	equ	0xFFA
 12540                           tblptru	equ	0xFF8
 12541                           tblptrh	equ	0xFF7
 12542                           tblptrl	equ	0xFF6
 12543                           tablat	equ	0xFF5
 12544                           prodh	equ	0xFF4
 12545                           prodl	equ	0xFF3
 12546                           intcon	equ	0xFF2
 12547                           indf0	equ	0xFEF
 12548                           postinc0	equ	0xFEE
 12549                           fsr0h	equ	0xFEA
 12550                           fsr0l	equ	0xFE9
 12551                           wreg	equ	0xFE8
 12552                           indf1	equ	0xFE7
 12553                           postinc1	equ	0xFE6
 12554                           postdec1	equ	0xFE5
 12555                           fsr1h	equ	0xFE2
 12556                           fsr1l	equ	0xFE1
 12557                           indf2	equ	0xFDF
 12558                           postinc2	equ	0xFDE
 12559                           postdec2	equ	0xFDD
 12560                           fsr2h	equ	0xFDA
 12561                           fsr2l	equ	0xFD9
 12562                           status	equ	0xFD8
 12563                           
 12564 ;; *************** function i2_rd_buffer_put *****************
 12565 ;; Defined at:
 12566 ;;		line 153 in file "src/modules/rd_buffer.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  rd_buffer_pu    2   25[COMRAM] PTR struct .
 12569 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 12570 ;;  rd_buffer_pu    2   27[COMRAM] PTR unsigned char 
 12571 ;;		 -> STR_31(6), STR_30(6), STR_29(5), STR_28(5), 
 12572 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;  rd_buffer_pu    2   40[COMRAM] int 
 12575 ;;  rd_buffer_pu    2   38[COMRAM] int 
 12576 ;;  rd_buffer_pu    2   35[COMRAM] PTR volatile unsigned ch
 12577 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 12578 ;;  rd_buffer_pu    1   37[COMRAM] unsigned char 
 12579 ;;  rd_buffer_pu    1    0        unsigned char 
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      unsigned char 
 12582 ;; Registers used:
 12583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12584 ;; Tracked objects:
 12585 ;;		On entry : F/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: FFFFFFF0/0
 12588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12589 ;;      Params:         4       0       0       0       0       0       0
 12590 ;;      Locals:         8       0       0       0       0       0       0
 12591 ;;      Temps:          5       0       0       0       0       0       0
 12592 ;;      Totals:        17       0       0       0       0       0       0
 12593 ;;Total ram usage:       17 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_serialport_service
 12599 ;;		_detection_obtain_analog_service
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text63
 12604  000EDA                     __ptext63:
 12605                           	opt stack 0
 12606  000EDA                     i2_rd_buffer_put:
 12607                           	opt stack 21
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;rd_buffer.c: 155: SIZE sz ;
 12611                           ;rd_buffer.c: 156: sz = pbuffer->head.last - pbuffer->head.first;
 12612                           
 12613                           ; BSR set to: 0
 12614  000EDA  EE20 F002          	lfsr	2,2
 12615  000EDE  D88E               	call	PL52	;call to abstracted procedure
 12616  000EE0  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12617  000EE4  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12618  000EE8  CFDE F020          	movff	postinc2,??i2_rd_buffer_put+2
 12619  000EEC  CFDD F021          	movff	postdec2,??i2_rd_buffer_put+3
 12620  000EF0  501E               	movf	??i2_rd_buffer_put,w,c
 12621  000EF2  5C20               	subwf	??i2_rd_buffer_put+2,w,c
 12622  000EF4  6E27               	movwf	i2rd_buffer_put@sz,c
 12623  000EF6  501F               	movf	??i2_rd_buffer_put+1,w,c
 12624  000EF8  5821               	subwfb	??i2_rd_buffer_put+3,w,c
 12625  000EFA  6E28               	movwf	i2rd_buffer_put@sz+1,c
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;rd_buffer.c: 157: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
 12629  000EFC  0E01               	movlw	1
 12630  000EFE  6E26               	movwf	i2_rd_buffer_put$482,c
 12631                           
 12632                           ; BSR set to: 0
 12633  000F00  D886               	call	PL64	;call to abstracted procedure
 12634  000F02  64EA               	cpfsgt	fsr0h,c
 12635  000F04  D003               	bra	i2u854_47
 12636  000F06  6EEA               	movwf	fsr0h,c
 12637  000F08  50EF               	movf	indf0,w,c
 12638  000F0A  D003               	bra	i2u854_40
 12639  000F0C                     i2u854_47:
 12640  000F0C  6EF7               	movwf	tblptrh,c
 12641  000F0E  0008               	tblrd		*
 12642  000F10  50F5               	movf	tablat,w,c
 12643  000F12                     i2u854_40:
 12644  000F12  0A0A               	xorlw	10
 12645  000F14  E00C               	bz	i2l7361
 12646  000F16  D87B               	call	PL64	;call to abstracted procedure
 12647  000F18  64EA               	cpfsgt	fsr0h,c
 12648  000F1A  D003               	bra	i2u856_47
 12649  000F1C  6EEA               	movwf	fsr0h,c
 12650  000F1E  50EF               	movf	indf0,w,c
 12651  000F20  D003               	bra	i2u856_40
 12652  000F22                     i2u856_47:
 12653  000F22  6EF7               	movwf	tblptrh,c
 12654  000F24  0008               	tblrd		*
 12655  000F26  50F5               	movf	tablat,w,c
 12656  000F28                     i2u856_40:
 12657  000F28  0A0D               	xorlw	13
 12658  000F2A  A4D8               	btfss	status,2,c
 12659  000F2C  6A26               	clrf	i2_rd_buffer_put$482,c
 12660  000F2E                     i2l7361:
 12661  000F2E  5026               	movf	i2_rd_buffer_put$482,w,c
 12662  000F30  0100               	movlb	0	; () banked
 12663  000F32  13CC               	iorwf	_this_contains_crlf& (0+255),f,b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;rd_buffer.c: 159: if(sz < 0 ) {
 12667  000F34  AE28               	btfss	i2rd_buffer_put@sz+1,7,c
 12668  000F36  D00A               	goto	i2l288
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;rd_buffer.c: 160: sz += pbuffer->head.size;
 12672  000F38  EE20 F004          	lfsr	2,4
 12673  000F3C  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 12674  000F3E  26D9               	addwf	fsr2l,f,c
 12675  000F40  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12676  000F42  22DA               	addwfc	fsr2h,f,c
 12677  000F44  50DE               	movf	postinc2,w,c
 12678  000F46  2627               	addwf	i2rd_buffer_put@sz,f,c
 12679  000F48  50DD               	movf	postdec2,w,c
 12680  000F4A  2228               	addwfc	i2rd_buffer_put@sz+1,f,c
 12681  000F4C                     i2l288:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;rd_buffer.c: 161: }
 12685                           ;rd_buffer.c: 162: if(sz < (pbuffer->head.size - 1))
 12686  000F4C  EE20 F004          	lfsr	2,4
 12687  000F50  D855               	call	PL52	;call to abstracted procedure
 12688  000F52  0EFF               	movlw	255
 12689  000F54  241E               	addwf	??i2_rd_buffer_put,w,c
 12690  000F56  6E20               	movwf	(??i2_rd_buffer_put+2)& (0+255),c
 12691  000F58  0EFF               	movlw	255
 12692  000F5A  201F               	addwfc	??i2_rd_buffer_put+1,w,c
 12693  000F5C  6E21               	movwf	(??i2_rd_buffer_put+3)& (0+255),c
 12694  000F5E  5028               	movf	i2rd_buffer_put@sz+1,w,c
 12695  000F60  0A80               	xorlw	128
 12696  000F62  6E22               	movwf	(??i2_rd_buffer_put+4)& (0+255),c
 12697  000F64  5020               	movf	??i2_rd_buffer_put+2,w,c
 12698  000F66  5C27               	subwf	i2rd_buffer_put@sz,w,c
 12699  000F68  5021               	movf	??i2_rd_buffer_put+3,w,c
 12700  000F6A  0A80               	xorlw	128
 12701  000F6C  5822               	subwfb	(??i2_rd_buffer_put+4)& (0+255),w,c
 12702  000F6E  B0D8               	btfsc	status,0,c
 12703  000F70  0012               	return	
 12704                           
 12705                           ; BSR set to: 0
 12706                           ;rd_buffer.c: 163: {
 12707                           ;rd_buffer.c: 164: INT ind = pbuffer->head.last;
 12708  000F72  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12709  000F76  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12710  000F7A  CFDE F029          	movff	postinc2,i2rd_buffer_put@ind
 12711  000F7E  CFDD F02A          	movff	postdec2,i2rd_buffer_put@ind+1
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;rd_buffer.c: 165: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
 12715  000F82  C01A  F01E         	movff	i2rd_buffer_put@pbuffer,??i2_rd_buffer_put
 12716  000F86  C01B  F01F         	movff	i2rd_buffer_put@pbuffer+1,??i2_rd_buffer_put+1
 12717  000F8A  5029               	movf	i2rd_buffer_put@ind,w,c
 12718  000F8C  261E               	addwf	??i2_rd_buffer_put,f,c
 12719  000F8E  502A               	movf	i2rd_buffer_put@ind+1,w,c
 12720  000F90  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 12721  000F92  0E06               	movlw	6
 12722  000F94  261E               	addwf	??i2_rd_buffer_put,f,c
 12723  000F96  0E00               	movlw	0
 12724  000F98  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 12725  000F9A  C01E  F024         	movff	??i2_rd_buffer_put,i2rd_buffer_put@mes_rec
 12726  000F9E  C01F  F025         	movff	??i2_rd_buffer_put+1,i2rd_buffer_put@mes_rec+1
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;rd_buffer.c: 166: (*mes_rec) = (*prec);
 12730  000FA2  C01C  FFF6         	movff	i2rd_buffer_put@prec,tblptrl
 12731  000FA6  C01D  FFF7         	movff	i2rd_buffer_put@prec+1,tblptrh
 12732  000FAA  6AF8               	clrf	tblptru,c
 12733  000FAC  C024  FFD9         	movff	i2rd_buffer_put@mes_rec,fsr2l
 12734  000FB0  C025  FFDA         	movff	i2rd_buffer_put@mes_rec+1,fsr2h
 12735  000FB4  0E05               	movlw	(high __ramtop+-1)
 12736  000FB6  64F7               	cpfsgt	tblptrh,c
 12737  000FB8  D003               	bra	i2u860_47
 12738  000FBA  0008               	tblrd		*
 12739  000FBC  50F5               	movf	tablat,w,c
 12740  000FBE  D002               	bra	i2u860_40
 12741  000FC0                     i2u860_47:
 12742  000FC0  ECAC  F009         	call	PL10	;call to abstracted procedure
 12743  000FC4                     i2u860_40:
 12744  000FC4  6EDF               	movwf	indf2,c
 12745                           
 12746                           ;rd_buffer.c: 167: ind++;
 12747  000FC6  4A29               	infsnz	i2rd_buffer_put@ind,f,c
 12748  000FC8  2A2A               	incf	i2rd_buffer_put@ind+1,f,c
 12749                           
 12750                           ;rd_buffer.c: 169: if(ind == pbuffer->head.size ) {
 12751  000FCA  EE20 F004          	lfsr	2,4
 12752  000FCE  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 12753  000FD0  26D9               	addwf	fsr2l,f,c
 12754  000FD2  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12755  000FD4  22DA               	addwfc	fsr2h,f,c
 12756  000FD6  52DE               	movf	postinc2,f,c
 12757  000FD8  502A               	movf	i2rd_buffer_put@ind+1,w,c
 12758  000FDA  18DD               	xorwf	postdec2,w,c
 12759  000FDC  C029  FFE8         	movff	i2rd_buffer_put@ind,wreg
 12760  000FE0  B4D8               	btfsc	status,2,c
 12761  000FE2  18DF               	xorwf	indf2,w,c
 12762  000FE4  E102               	bnz	i2l7379
 12763                           
 12764                           ;rd_buffer.c: 170: ind = 0;
 12765  000FE6  6A29               	clrf	i2rd_buffer_put@ind,c
 12766  000FE8  6A2A               	clrf	i2rd_buffer_put@ind+1,c
 12767  000FEA                     i2l7379:
 12768                           
 12769                           ;rd_buffer.c: 171: }
 12770                           ;rd_buffer.c: 172: pbuffer->head.last = ind;
 12771  000FEA  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12772  000FEE  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12773  000FF2  C029  FFDE         	movff	i2rd_buffer_put@ind,postinc2
 12774  000FF6  C02A  FFDD         	movff	i2rd_buffer_put@ind+1,postdec2
 12775  000FFA  0012               	return	
 12776  000FFC                     __end_ofi2_rd_buffer_put:
 12777                           	opt stack 0
 12778  000FFC                     PL52:
 12779                           	opt stack 21
 12780  000FFC  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 12781  000FFE  26D9               	addwf	fsr2l,f,c
 12782  001000  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12783  001002  22DA               	addwfc	fsr2h,f,c
 12784  001004  CFDE F01E          	movff	postinc2,??i2_rd_buffer_put
 12785  001008  CFDD F01F          	movff	postdec2,??i2_rd_buffer_put+1
 12786  00100C  0012               	return	
 12787  00100E                     __end_ofPL52:
 12788                           	opt stack 0
 12789  00100E                     PL64:
 12790                           	opt stack 21
 12791  00100E  501C               	movf	i2rd_buffer_put@prec,w,c
 12792  001010  6EF6               	movwf	tblptrl,c
 12793  001012  6EE9               	movwf	fsr0l,c
 12794  001014  0E05               	movlw	(high __ramtop+-1)
 12795  001016  6EEA               	movwf	fsr0h,c
 12796  001018  501D               	movf	i2rd_buffer_put@prec+1,w,c
 12797  00101A  0012               	return	
 12798  00101C                     __end_ofPL64:
 12799                           	opt stack 0
 12800                           tosu	equ	0xFFF
 12801                           tosh	equ	0xFFE
 12802                           tosl	equ	0xFFD
 12803                           pclath	equ	0xFFA
 12804                           tblptru	equ	0xFF8
 12805                           tblptrh	equ	0xFF7
 12806                           tblptrl	equ	0xFF6
 12807                           tablat	equ	0xFF5
 12808                           prodh	equ	0xFF4
 12809                           prodl	equ	0xFF3
 12810                           intcon	equ	0xFF2
 12811                           indf0	equ	0xFEF
 12812                           postinc0	equ	0xFEE
 12813                           fsr0h	equ	0xFEA
 12814                           fsr0l	equ	0xFE9
 12815                           wreg	equ	0xFE8
 12816                           indf1	equ	0xFE7
 12817                           postinc1	equ	0xFE6
 12818                           postdec1	equ	0xFE5
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           tosu	equ	0xFFF
 12828                           tosh	equ	0xFFE
 12829                           tosl	equ	0xFFD
 12830                           pclath	equ	0xFFA
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           indf0	equ	0xFEF
 12839                           postinc0	equ	0xFEE
 12840                           fsr0h	equ	0xFEA
 12841                           fsr0l	equ	0xFE9
 12842                           wreg	equ	0xFE8
 12843                           indf1	equ	0xFE7
 12844                           postinc1	equ	0xFE6
 12845                           postdec1	equ	0xFE5
 12846                           fsr1h	equ	0xFE2
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855                           	psect	param0
 12856  0000                     tosu	equ	0xFFF
 12857                           tosh	equ	0xFFE
 12858                           tosl	equ	0xFFD
 12859                           pclath	equ	0xFFA
 12860                           tblptru	equ	0xFF8
 12861                           tblptrh	equ	0xFF7
 12862                           tblptrl	equ	0xFF6
 12863                           tablat	equ	0xFF5
 12864                           prodh	equ	0xFF4
 12865                           prodl	equ	0xFF3
 12866                           intcon	equ	0xFF2
 12867                           indf0	equ	0xFEF
 12868                           postinc0	equ	0xFEE
 12869                           fsr0h	equ	0xFEA
 12870                           fsr0l	equ	0xFE9
 12871                           wreg	equ	0xFE8
 12872                           indf1	equ	0xFE7
 12873                           postinc1	equ	0xFE6
 12874                           postdec1	equ	0xFE5
 12875                           fsr1h	equ	0xFE2
 12876                           fsr1l	equ	0xFE1
 12877                           indf2	equ	0xFDF
 12878                           postinc2	equ	0xFDE
 12879                           postdec2	equ	0xFDD
 12880                           fsr2h	equ	0xFDA
 12881                           fsr2l	equ	0xFD9
 12882                           status	equ	0xFD8
 12883                           tosu	equ	0xFFF
 12884                           tosh	equ	0xFFE
 12885                           tosl	equ	0xFFD
 12886                           pclath	equ	0xFFA
 12887                           tblptru	equ	0xFF8
 12888                           tblptrh	equ	0xFF7
 12889                           tblptrl	equ	0xFF6
 12890                           tablat	equ	0xFF5
 12891                           prodh	equ	0xFF4
 12892                           prodl	equ	0xFF3
 12893                           intcon	equ	0xFF2
 12894                           indf0	equ	0xFEF
 12895                           postinc0	equ	0xFEE
 12896                           fsr0h	equ	0xFEA
 12897                           fsr0l	equ	0xFE9
 12898                           wreg	equ	0xFE8
 12899                           indf1	equ	0xFE7
 12900                           postinc1	equ	0xFE6
 12901                           postdec1	equ	0xFE5
 12902                           fsr1h	equ	0xFE2
 12903                           fsr1l	equ	0xFE1
 12904                           indf2	equ	0xFDF
 12905                           postinc2	equ	0xFDE
 12906                           postdec2	equ	0xFDD
 12907                           fsr2h	equ	0xFDA
 12908                           fsr2l	equ	0xFD9
 12909                           status	equ	0xFD8


Data Sizes:
    Strings     28
    Constant    631
    Data        0
    BSS         1084
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      66
    BANK0           160     88     147
    BANK1           256     12     240
    BANK2           256      0     234
    BANK3           256      0     227
    BANK4           256      0     187
    BANK5           256      0     127

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_syntax_as_integer	int  size(1) Largest target is 0

    ?_syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    on_parameter_found@p	PTR const void  size(3) Largest target is 32767
		 -> parameter_value(BANK2[127]), parameter_text(BANK3[127]), ROM(CODE[32767]), 

    ?_string_utils_atof	float  size(1) Largest target is 0

    ?___asftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwtoft	float  size(1) Largest target is 0

    ?_string_utils_atoi	int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_string_utils_from_hex	int  size(1) Largest target is 0

    ?_string_utils_strchr	int  size(1) Largest target is 0

    ?_string_utils_split	int  size(1) Largest target is 0

    ?_string_utils_copy	int  size(1) Largest target is 0

    ?_string_utils_strlen	int  size(1) Largest target is 0

    ?_rd_buffer_cnt	int  size(1) Largest target is 0

    ?_adc_read	unsigned short  size(1) Largest target is 0

    __asftmul@f1p	PTR float  size(1) Largest target is 3
		 -> string_utils_atof@a(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_33(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> tmp(BANK0[10]), 

    ?_sprintf	int  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1665$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    events	volatile PTR FTN()void [8] size(2) Largest target is 0
		 -> detection_task(), serialport_task(), 

    pd_add_value@d	PTR volatile struct . size(2) Largest target is 101
		 -> pd_detector(BANK1[101]), 

    cla_add_value@d	PTR volatile struct . size(1) Largest target is 21
		 -> cla_detector(BANK0[21]), 

    sp__syntax_as_bytearray	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    sp__syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    syntax_string@pchain	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    syntax_string@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    this_parse_item@pitem	PTR char  size(1) Largest target is 1
		 -> parameter_id(BANK0[1]), command_id(BANK0[1]), 

    this_parse_item@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    this_parse_item@pvar	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_item@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_atof@s	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_atoi@c	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_34(CODE[2]), this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_from_hex@pdata	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_from_hex@phex_str	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_strncmp@pstr2	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strncmp@pstr1	PTR const unsigned char  size(2) Largest target is 621
		 -> syntax@syntax_data(CODE[621]), 

    string_utils_strchr@pbuf	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    string_utils_copy@pdst	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    string_utils_copy@psrc	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strlen@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), parameter_value(BANK2[127]), 

    serialport_write@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[5]), STR_28(CODE[5]), 
		 -> parameter_text(BANK3[127]), 

    S514$callback_function	PTR FTN()void  size(1) Largest target is 0

    timers_list.callback_function	PTR FTN()void  size(1) Largest target is 0

    rd_buffer_put@mes_rec	PTR volatile unsigned char  size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_put@prec	PTR unsigned char  size(2) Largest target is 127
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[5]), STR_28(CODE[5]), 
		 -> detection_obtain_analog_service@adc_data(BANK0[1]), parameter_text(BANK3[127]), putch@byte(COMRAM[1]), serialport_service@byte(BANK0[1]), 

    rd_buffer_put@pbuffer	PTR struct . size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_get@prec	PTR unsigned char  size(2) Largest target is 1
		 -> serialport_task@byte(BANK1[1]), rd_buffer_readline@ch(BANK0[1]), 

    rd_buffer_get@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_cnt@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_readline@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_rx_buffer(BANK2[107]), 

    rd_buffer_readline@pdata	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    rd_buffer_readline@psize	PTR int  size(2) Largest target is 2
		 -> serialport_task@size(BANK1[2]), 

    rd_buffer_init@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    uart_getc@pbyte	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_service@byte(BANK0[1]), 

    uart_puts@pstr	PTR const unsigned char  size(2) Largest target is 10
		 -> tmp(BANK0[10]), STR_32(CODE[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr_high in COMRAM

    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put
    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put

Critical Paths under _main in BANK0

    _serialport_task->_syntax_string
    _rd_buffer_readline->_rd_buffer_get
    _syntax_string->_this_parse_item
    _this_parse_item->_string_utils_atof
    _string_utils_strncmp->_string_utils_is_upper_case
    _string_utils_from_hex->_string_utils_strlen
    _string_utils_strlen->_string_utils_is_symbol
    _string_utils_atoi->___wmul
    _string_utils_atof->___ftadd
    _on_parameter_found->_set_parameter
    _detection_task->_pd_add_value
    _pd_add_value->___awdiv
    _set_parameter->_serialport_write
    _get_parameter->_serialport_write
    _serialport_write->_rd_buffer_put
    _startup->_serialport_startup
    _sysclk_init->_sysclk_setup_intosc
    _uart_init->_uart_set_baudrate
    _uart_puts->_uart_putc
    _serialport_startup->_rd_buffer_init
    _sprintf->_string_utils_atoi
    ___ftadd->___ftmul
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___asftmul->___ftmul
    ___ftmul->___ftpack

Critical Paths under _isr_high in BANK0

    interrupts@isr_high->_serialport_service

Critical Paths under _main in BANK1

    _main->_serialport_task
    _serialport_task->_syntax_string

Critical Paths under _isr_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   32901
                                              8 BANK1      4     4      0
                           _delay_ms
                            _startup
                  _string_utils_atoi
                            _sprintf
                          _uart_puts
                     _detection_task
                    _serialport_task
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2      31
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serialport_task                                      3     3      0   22935
                                              5 BANK1      3     3      0
                      _syntax_string
                 _rd_buffer_readline
                      _rd_buffer_get
                          _uart_putc
                      _rd_buffer_cnt
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_readline                                   7     1      6     737
                                             23 BANK0      7     1      6
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_get                                       11     7      4     418
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_cnt                                        8     6      2     161
                                             12 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _syntax_string                                       10     6      4   21150
                                             83 BANK0      5     1      4
                                              0 BANK1      5     5      0
                 _string_utils_split
                    _this_parse_item
                 _on_parameter_found
                _string_utils_strlen
 ---------------------------------------------------------------------------------
 (3) _string_utils_split                                  13     6      7     654
                                             12 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _this_parse_item                                     16    13      3   11470
                                             67 BANK0     16    13      3
                _string_utils_strlen
                _string_utils_strchr
                  _string_utils_copy
               _string_utils_strncmp
                  _string_utils_atoi
                  _string_utils_atof
              _string_utils_from_hex
 ---------------------------------------------------------------------------------
 (4) _string_utils_copy                                    8     2      6     248
                                             12 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _string_utils_strchr                                  7     4      3     402
                                             12 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (4) _string_utils_strncmp                                14     7      7     822
                                             14 BANK0     14     7      7
         _string_utils_is_upper_case
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_upper_case                           2     2      0     138
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _string_utils_from_hex                               13     9      4     986
                                             18 BANK0     13     9      4
                _string_utils_strlen
               _symb_from_hex_to_bin
 ---------------------------------------------------------------------------------
 (3) _string_utils_strlen                                  4     2      2     402
                                             14 BANK0      4     2      2
             _string_utils_is_symbol
 ---------------------------------------------------------------------------------
 (4) _string_utils_is_symbol                               2     2      0     138
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _symb_from_hex_to_bin                                 1     1      0     168
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _string_utils_atoi                                   10     7      3     708
                                             18 BANK0     10     7      3
                             ___wmul
              _string_utils_is_digit
 ---------------------------------------------------------------------------------
 (4) _string_utils_atof                                   16    13      3    6660
                                             51 BANK0     16    13      3
                            ___ftmul
                           ___lwtoft
                            ___ftadd
              _string_utils_is_digit
                             ___wmul
                          ___asftmul
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_digit                                2     2      0     138
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _on_parameter_found                                   8     2      6    7509
                                             35 BANK0      7     1      6
                      _set_parameter
                      _get_parameter
                   _serialport_write
 ---------------------------------------------------------------------------------
 (1) _detection_task                                       3     3      0    6071
                                             43 BANK0      3     3      0
                       _pd_add_value
                      _cla_add_value
 ---------------------------------------------------------------------------------
 (2) _cla_add_value                                       13     9      4    1283
                                             12 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _pd_add_value                                        23    19      4    4740
                                             20 BANK0     23    19      4
                            ___lbmod
                            ___awdiv
                             ___wmul
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _set_parameter                                        5     5      0    2567
                                             31 BANK0      4     4      0
                  _syntax_as_integer
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (5) _syntax_as_integer                                    2     0      2       0
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _get_parameter                                        2     2      0    2351
                                             31 BANK0      2     2      0
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (4) _serialport_write                                     2     0      2    2069
                                             29 BANK0      2     0      2
                      _rd_buffer_put
                    _syntax_get_text (ARG)
 ---------------------------------------------------------------------------------
 (5) _rd_buffer_put                                       17    13      4    1787
                                             12 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (5) _syntax_get_text                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _startup                                              1     1      0     516
                                             19 BANK0      1     1      0
                          _gpio_init
                        _sysclk_init
                           _adc_init
                          _uart_init
                          _uart_puts
                 _serialport_startup
 ---------------------------------------------------------------------------------
 (2) _sysclk_init                                          0     0      0      31
                _sysclk_setup_intosc
 ---------------------------------------------------------------------------------
 (3) _sysclk_setup_intosc                                  1     1      0      31
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
                  _uart_set_baudrate
 ---------------------------------------------------------------------------------
 (3) _uart_set_baudrate                                    3     0      3       0
                                             12 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _uart_puts                                            4     0      4     127
                                             13 BANK0      4     0      4
                          _uart_putc
 ---------------------------------------------------------------------------------
 (2) _uart_putc                                            1     1      0      31
                                             12 BANK0      1     1      0
                     _uart_byte_sent
 ---------------------------------------------------------------------------------
 (3) _uart_byte_sent                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialport_startup                                   2     2      0     229
                                             17 BANK0      2     2      0
                     _rd_buffer_init
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_init                                       5     1      4     192
                                             12 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    12      4    1169
                                             28 BANK0     16    12      4
                            ___lwdiv
                            ___lwmod
                  _string_utils_atoi (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     445
                                             12 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     433
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             14     8      6    2154
                                             37 BANK0     14     8      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     232
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     241
                                             12 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     232
                                             19 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3     486
                                             20 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     192
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___asftmul                                            4     1      3    1266
                                             37 BANK0      4     1      3
                            ___ftmul
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     444
                                             12 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             17    11      6    1140
                                             20 BANK0     17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     444
                                             12 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr_high                                             8     8      0    6795
                                             17 COMRAM     8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3625
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 (8) interrupts@isr_high                                   8     8      0    6795
                                              4 BANK0      8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3625
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _startup
     _gpio_init
     _sysclk_init
       _sysclk_setup_intosc
     _adc_init
     _uart_init
       _uart_set_baudrate
     _uart_puts
       _uart_putc
         _uart_byte_sent
     _serialport_startup
       _rd_buffer_init
   _string_utils_atoi
     ___wmul
     _string_utils_is_digit
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _string_utils_atoi (ARG)
       ___wmul
       _string_utils_is_digit
   _uart_puts
     _uart_putc
       _uart_byte_sent
   _detection_task
     _pd_add_value
       ___lbmod
       ___awdiv
       ___wmul
       ___awmod
     _cla_add_value
   _serialport_task
     _syntax_string
       _string_utils_split
       _this_parse_item
         _string_utils_strlen
           _string_utils_is_symbol
         _string_utils_strchr
         _string_utils_copy
         _string_utils_strncmp
           _string_utils_is_upper_case
         _string_utils_atoi
           ___wmul
           _string_utils_is_digit
         _string_utils_atof
           ___ftmul
             ___ftpack
           ___lwtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _string_utils_is_digit
           ___wmul
           ___asftmul
             ___ftmul
               ___ftpack
         _string_utils_from_hex
           _string_utils_strlen
             _string_utils_is_symbol
           _symb_from_hex_to_bin
       _on_parameter_found
         _set_parameter
           _syntax_as_integer
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _get_parameter
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _serialport_write
           _rd_buffer_put
           _syntax_get_text (ARG)
       _string_utils_strlen
         _string_utils_is_symbol
     _rd_buffer_readline
       _rd_buffer_get
     _rd_buffer_get
     _uart_putc
       _uart_byte_sent
     _rd_buffer_cnt

 _isr_high (ROOT)
   _delay_interrupt_service
   _serialport_service
     _uart_byte_available
     _uart_getc
       _uart_error
       _uart_reset
         _uart_byte_available
         _uart_error
       _uart_byte_available
     i2_rd_buffer_put
   _detection_obtain_analog_service
     _adc_read
     i2_rd_buffer_put

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0      7F      14       49.6%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      BB      13       73.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      E3      11       88.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      EA       9       91.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      C      F0       7       93.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     58      93       5       91.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      11       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4CC      15        0.0%
DATA                 0      0     4DD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Sat Oct 17 13:23:10 2015

                ?_delay_interrupt_service 0001                  __size_of_this_parse_item 01B8  
                   __end_of_syntax_string 1150                          ?i2_rd_buffer_put 001A  
                                      PL2 04B6                                        PL4 04DE  
                                      PL6 04F2                                        PL8 0504  
                            ___awdiv@sign 0071                       ___wmul@multiplicand 006E  
                string_utils_from_hex@len 0079                              ___asftmul@f2 0085  
           string_utils_from_hex@phex_str 0074                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0092  
                            ___ftadd@exp2 0091                                       PL10 1358  
                                     PL20 0A24                                       PL12 051A  
                                     PL30 07F8                                       PL22 0C0A  
                                     PL14 09F2                                       PL40 057A  
                                     PL32 0554                                       PL24 0A34  
                                     PL16 0A08                                       PL50 124A  
                                     PL42 0A44                                       PL34 0808  
                                     PL26 0536                                       PL18 0A16  
                                     PL60 05C8                                       PL52 0FFC  
                                     PL44 0590                                       PL36 0564  
                                     PL28 07DE                                       PL70 0ECC  
                                     PL62 05D8                                       PL54 0834  
                                     PL46 05A2                                       PL38 1234  
                                     PL80 1CD6                                       PL72 05E8  
                                     PL64 100E                                       PL56 05B6  
                                     PL48 0820                                       PL82 1552  
                                     PL74 1454                                       PL66 1D78  
                                     PL58 0EBA                                       PL84 0D88  
                                     PL76 05F6                                       PL68 0D7A  
                                     PL86 185C                                       PL78 1546  
                                     PL88 0602                              ___ftadd@sign 0090  
                                     l504 21E0                                       l264 1BBA  
                                     l514 21FA                                       l288 0E08  
                                     l800 0382                                       l624 1318  
                                     l456 1FB2                                       l552 1724  
                                     l561 21C6                                       l706 0BD4  
                                     l493 1D6E                                       l692 0AD0  
                                     l749 08DE                                       l871 19BC  
                                     l872 19C2                                       l785 0248  
                                     l938 195E                                       l796 032A  
                                     l788 03D6                                       l869 19B6  
                                     l999 1EF4                              __CFG_CPB$OFF 000000  
              __size_of_string_utils_atof 01D4                __size_of_string_utils_atoi 00FC  
              __size_of_string_utils_copy 0050                              __CFG_CPD$OFF 000000  
                                     _tmp 00E5                              __CFG_BORV$27 000000  
                            ___awmod@sign 0071                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                           ___asftmul@f1p 0088                     __end_of_cla_add_value 09F2  
                            __CFG_LVP$OFF 000000                                      l1074 1424  
                                    l1091 116E                                      l1077 1450  
                                    l1409 0D20                                      l1418 0D32  
                                    l1419 0D3A                                      l1356 17E0  
                                    l1605 20DA                                      l1394 0C74  
                                    l1398 0C98                                      l1569 1E60  
                                    l5033 1F7A                                      l1579 202E  
                                    l6003 1AD0                                      l5051 1B84  
                                    l6021 1BEA                                      l6013 1BD2  
                                    l5045 1B68                                      l6023 1BF2  
                                    l5063 1BBE                                      l6201 2024  
                                    l6025 1BF6                                      l6033 1C12  
                                    l6017 1BDE                                      l5049 1B74  
                                    l5057 1BA2                                      l5083 15FC  
                                    l6037 1C1E                                      l6029 1C08  
                                    l5085 1600                                      l5095 1D2A  
                                    l6161 2124                                      l6153 210C  
                                    l8011 0314                                      l8003 02CE  
                                    l6173 1E30                                      l8101 16A4  
                                    l8021 039A                                      l8005 02E4  
                                    l5613 09A4                                      l6175 1E38  
                                    l8031 03F2                                      l6193 2006  
                                    l6185 1E56                                      l6177 1E3C  
                                    l8033 0408                                      l8025 03C0  
                                    l8017 0370                                      l5617 09F0  
                                    l5609 0984                                      l8203 180C  
                                    l6195 200E                                      l8051 0496  
                                    l8205 181E                                      l6197 2012  
                                    l8207 1828                                      l8231 0C82  
                                    l5911 11C4                                      l5903 11A4  
                                    l8047 0488                                      l8039 0438  
                                    l8055 04B4                                      l5591 08B0  
                                    l5583 0864                                      l8071 19D8  
                                    l4943 221A                                      _ADIF 007CF6  
                                    l8313 14EC                                      l8081 160C  
                                    l5585 0884                                      l8145 1366  
                                    l8323 150C                                      l7515 0EA8  
                                    l8091 1632                                      l7531 1A42  
                                    l7523 19EA                                      l8147 1374  
                                    l8309 14E4                                      l8261 0CE6  
                                    l8253 0CC0                                      l8237 0CA6  
                                    l5925 121A                                      l5917 11D6  
                                    l4965 1C88                                      l8093 1672  
                                    l7525 1A00                                      l8069 19C8  
                                    l8173 13E6                                      l8157 13BE  
                                    l8319 1504                                      l8271 0D10  
                                    l8263 0CEE                                      l5919 11DC  
                                    l5927 1222                                      l4975 2228  
                                    l7631 1DD0                                      l7527 1A24  
                                    l8175 13F0                                      l8167 13C6  
                                    l8273 0D1A                                      l8265 0CF4  
                                    l5929 1228                                      l4969 1CA8  
                                    l8291 1490                                      l8195 17E8  
                                    l8339 20E6                                      l8283 0D54  
                                    l8259 0CDC                                      l5971 1A74  
                                    l8099 1698                                      l7811 063E  
                                    l7731 1728                                      l7723 170C  
                                    l7619 1D94                                      l7627 1DB4  
                                    l7563 10E6                                      l8179 13F6  
                                    l8197 17EC                                      l5877 115A  
                                    l7709 16BE                                      l7733 172C  
                                    l7653 18AA                                      l7645 188E  
                                    l7573 113C                                      l7565 1102  
                                    l7557 1096                                      l7549 1068  
                                    l8295 14BE                                      l8199 1800  
                                    l5983 1A94                                      l7583 1DF2  
                                    l7831 06CA                                      l7823 0698  
                                    l7815 0660                                      l7751 1AE0  
                                    l7719 16FE                                      l7735 173C  
                                    l7911 0B84                                      l7639 1872  
                                    l7559 10AC                                      l7567 1116  
                                    l5985 1A9C                                      l5977 1A84  
                                    l5897 11A0                                      l7497 0DEA  
                                    l7841 06F8                                      l7809 0616  
                                    l7729 171E                                      l7681 1D44  
                                    l7913 0B9E                                      l7921 0BF4  
                                    l7657 18BA                                      l7569 111E  
                                    l5995 1ABA                                      l5987 1AA0  
                                    l7579 1DD8                                      l7819 066A  
                                    l7827 06BA                                      l7755 1AE6  
                                    l7595 1F8A                                      l7915 0BBC  
                                    l7907 0B6C                                      l7923 0BFC  
                                    l7667 18D0                                      l7941 1FD2  
                                    l7853 0740                                      l7845 0716  
                                    l7765 1AF2                                      l7781 17B2  
                                    l7685 1D56                                      l5999 1AC4  
                                    l7935 1FC6                                      l7943 1FDE  
                                    l7863 0790                                      l7791 129E  
                                    l7759 1AEC                                      l7775 175E  
                                    l7687 1D5A                                      l7919 0BDC  
                                    l7927 0C06                                      l7937 1FCC  
                                    l7873 07CC                                      l7859 0768  
                                    l7867 07A6                                      l7795 12C0  
                                    l7973 0172                                      l7869 07B6  
                                    l7797 12CC                                      l7985 0232  
                                    l7977 0178                                      l7889 0AD8  
                                    l7899 0B08                                      l7997 029A  
                                    _CREN 007D5C                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _RCIF 007CF5  
                                    u4670 1C9E                                      u4825 158C  
                                    u4690 1CCE                                      u4677 1C98  
                                    u5725 08A8                                      u4697 1CC8  
                                    u5745 092A                                      u9220 127E  
                                    u5765 0994                                      u9310 0652  
                                    u5775 09B6                                      u9400 06EE  
                                    u9240 129A                                      u9227 127C  
                                    u9420 0712                                      u9260 12B6  
                                    u9317 064E                                      u9350 06AC  
                                    u9407 06EA                                      u9247 1298  
                                    u9440 0738                                      u9280 12FE  
                                    u8730 0DCA                                      u9290 1332  
                                    u9427 070E                                      u9267 12B4  
                                    u9515 0B26                                      u8900 1E18  
                                    u9357 06A8                                      u8750 0DE2  
                                    u9447 0734                                      u9287 12FC  
                                    u8737 0DC4                                      u9297 1330  
                                    u8907 1E12                                      u8757 0DDC  
                                    u8790 0E80                                      u8797 0E7C  
                                    _TMR0 000FD6                                      u9970 0C36  
                                    u9980 0C56                                      u9878 140A  
                                    u9975 0C34                                      u9879 141E  
                                    u9985 0C54                                      u9898 1430  
                                    u9899 1444                                      _TXIF 007CF4  
          string_utils_is_upper_case@symb 006D              __end_of_symb_from_hex_to_bin 1B4E  
                            __CFG_PWRT$ON 000000                          ??_uart_byte_sent 006C  
             __size_of_string_utils_split 0084                          ??_rd_buffer_init 0070  
                         set_parameter@ok 0082                                      _main 1364  
                            ___ftpack@arg 006C                              ___ftpack@exp 006F  
                                    _pool 0033                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      indf0 000FEF  
                                    fsr0l 000FE9                                      fsr2h 000FDA  
                                    indf1 000FE7                                      fsr1l 000FE1  
                                    indf2 000FDF                                      fsr2l 000FD9  
                       rd_buffer_get@last 0072                         rd_buffer_get@prec 006E  
                                    prodh 000FF4                                      prodl 000FF3  
                         _serialport_task 19E8                                      start 00F0  
                           __CFG_IESO$OFF 000000                             __CFG_MCLRE$ON 000000  
                            ___ftmul@cntr 0083                              ___ftmul@sign 0084  
                     i2_rd_buffer_put$482 0026                                     ?_main 0001  
                         __end_of___awdiv 1ADA                                     _ADRES 000FC3  
                         __end_of___ftadd 0D7A                                     STR_30 7FE9  
                                   STR_31 7FE9                                     STR_32 7FE3  
                                   STR_33 7FF9                                     STR_34 7FFD  
                                   STR_28 7FEF                           __end_of___awmod 1C28  
                                   STR_29 7FF4                           __end_of___lbmod 212C  
                                   _ANSEL 000F7E                                     u10200 14A8  
                                   u10205 14A6                                     u10180 147A  
                         __end_of___ftmul 1546                                     u10185 1478  
                         ___awdiv@divisor 006E                             ?_pd_add_value 0074  
                                   _RC1IF 007CF5                           __end_of___lwdiv 1E6A  
                         __end_of___lwmod 2038                                     i2l227 1F2E  
                                   i2l228 1F2A                             __CFG_WDTEN$ON 000000  
                                   i2l169 2192                                     i2l288 0F4C  
                         ___awdiv@counter 0070                                     _RCREG 000FAE  
                                   _RCSTA 000FAB                       this_parse_item@pval 00AD  
                                   _SPBRG 000FAF                       this_parse_item@pvar 00A9  
                     this_parse_item@pstr 00A3                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
                                   _TRISD 000F95                         rd_buffer_put@prec 006E  
                                   _TXREG 000FAD                                     _TXSTA 000FAC  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
 __end_of_detection_obtain_analog_service 2190  __size_of_detection_obtain_analog_service 0020  
       ??_detection_obtain_analog_service 002B          ?_detection_obtain_analog_service 0001  
                          __CFG_EBTR1$OFF 000000           _detection_obtain_analog_service 2170  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
            __size_of_string_utils_strchr 0044              __size_of_string_utils_strlen 003E  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
              string_utils_is_symbol@symb 006D                           __end_of_dpowers 7D76  
                             _sysclk_init 22A0                             ___ftpack@sign 0070  
                                   main@i 01EF                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                      rd_buffer_get@first 0075                                     status 000FD8  
                         __end_of_startup 1EF8                          ?_syntax_get_text 0001  
                        _serialport_write 1DD6                           __end_of_sprintf 1234  
                          __CFG_HFOFST$ON 000000                           ??_get_parameter 007F  
              __end_ofinterrupts@isr_high 00F0                           __initialization 1C28  
                symb_from_hex_to_bin@symb 006C                 uart_set_baudrate@baudrate 006C  
                 rd_buffer_readline@pdata 0079                              __end_of_main 2212  
                 rd_buffer_readline@psize 007B                 rd_buffer_readline@pbuffer 0077  
             __size_of_rd_buffer_readline 0072                        rd_buffer_init@size 006E  
                          ??_pd_add_value 0078                                    ??_main 01EC  
                           __activetblptr 000002                         ??_this_parse_item 00A6  
            __size_of_uart_byte_available 0008                       serialport_task@byte 01E9  
          _string_utils_is_upper_case$795 006C                       serialport_task@size 01EA  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                          ___awdiv@dividend 006C  
                 __end_of_serialport_task 1A62                          __end_of___ftpack 185C  
                                  _ANSELH 000F7F                                    _GODONE 007E11  
                        __end_of_adc_init 2212                          __end_of_adc_read 1F3E  
                                  i2l1020 005A                                    i2l1050 00CE  
              __end_of_serialport_service 1EB2                                    i2l7093 1F26  
                                  i2l7085 2276                                    i2l7413 20D2  
                                  i2l7405 20BA                                    i2l7431 00A4  
                                  i2l7423 1E98                                    i2l7441 00BE  
                                  i2l7433 00A8                                    i2l7361 0F2E  
                                  i2l7281 0028                                    i2l7443 00C0  
                                  i2l7435 00AA                                    i2l7427 1EA8  
                                  i2l7291 0046                                    i2l7283 0030  
                                  i2l7445 00C8                                    i2l7437 00B2  
                                  i2l7429 009C                                    i2l7293 004A  
                                  i2l7285 0034                                    i2l7447 00CC  
                                  i2l7439 00BA                                    i2l7391 219A  
                                  i2l7295 004C                                    i2l7287 0036  
                                  i2l7393 21A2                                    i2l7297 0054  
                                  i2l7289 003E                                    i2l7379 0FEA  
                                  i2l7299 0058               string_utils_split@delimeter 0072  
                        __end_of___lwtoft 2150                                    _OSCCON 000FD3  
                   rd_buffer_init@pbuffer 006C                __end_of_serialport_startup 20A6  
                    this_parse_item@pitem 00A5                                    _STATUS 000FD8  
                           main@event_old 01ED                          __end_of_delay_ms 2224  
                          __CFG_XINST$OFF 000000                        _cla_add_value$1012 0074  
                      _cla_add_value$1013 0076                         get_parameter@p_id 007F  
           __size_of_string_utils_strncmp 0096                         set_parameter@p_id 007F  
                                  ___wmul 20D6                                 ??___awdiv 0070  
                               ??___ftadd 008B                            __CFG_STVREN$ON 000000  
                               ??___awmod 0070                                 ??___lbmod 006D  
                               ??___ftmul 007A                                 ??___lwdiv 0070  
                               ??___lwmod 0077               __end_of_sysclk_setup_intosc 226A  
                                  _events 00B8                                    clear_0 1C2E  
                                  clear_1 1C3A                                    clear_2 1C46  
                                  clear_3 1C52                                    clear_4 1C5E  
                                  clear_5 1C6A                                    clear_6 1C76  
                        ___awdiv@quotient 0072                           ___awmod@divisor 006E  
                         ___awmod@counter 0070                          __end_of_isr_high 007C  
                    _symb_from_hex_to_bin 1ADA                  serialport_startup@result 0072  
                   ___ftmul@f3_as_product 0080                         _serialport_buffer 037F  
                            __mediumconst 7D6C                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                     rd_buffer_get@result 0074                    __size_of_rd_buffer_get 00A8  
                  __size_of_rd_buffer_cnt 0052                    __size_of_rd_buffer_put 0128  
                               ??_startup 0073                                 ??_sprintf 0080  
                 string_utils_strchr@pbuf 006C                        __size_of___asftmul 003C  
                         ___lbmod@divisor 006C                                __accesstop 0060  
                 __end_of__initialization 1C7C                           ___lbmod@counter 006E  
                         __CFG_PBADEN$OFF 000000                                ___ftadd@f1 0085  
                              ___ftadd@f2 0088                   string_utils_strlen@pstr 006E  
                 string_utils_strncmp@len 0072                   string_utils_strncmp@pos 0078  
                              ___ftmul@f1 0074                                ___ftmul@f2 0077  
                          __pcstackCOMRAM 0001                              _cla_detector 00D0  
                        cla_add_value@val 006C                   detection_task@alarm_cla 00CE  
                 detection_task@alarm_wav 00CF                     __end_of_set_parameter 16AA  
                              __end_ofPL2 04DE                                __end_ofPL4 04F2  
                              __end_ofPL6 0504                                __end_ofPL8 051A  
                   ?_symb_from_hex_to_bin 0001                                ___lwtoft@c 0074  
        __size_of_delay_interrupt_service 0012               __size_of_on_parameter_found 003E  
                   _string_utils_is_digit 21AE                     _string_utils_from_hex 1740  
                         __CFG_LPT1OSC$ON 000000                          ?_serialport_task 0001  
                              __pbssBANK0 00B8                                __pbssBANK1 0100  
                              __pbssBANK2 0200                                __pbssBANK3 0300  
                              __pbssBANK4 0400                                __pbssBANK5 0500  
                      __size_of_gpio_init 0012                      __end_of_pd_add_value 04B6  
                 __size_of_detection_task 007C                         fp__detection_task 00F0  
                     _string_utils_strchr 1D34                       _string_utils_strlen 1F7E  
                           _rd_buffer_get 155C                             _rd_buffer_cnt 1CE2  
                           _rd_buffer_put 0D92                                   ?___wmul 006C  
                                 _BAUDCON 000FB8                                   _BAUDCTL 000FB8  
                  i2rd_buffer_put@mes_rec 0024                         __end_of___asftmul 2074  
                               ?___ftpack 006C                    i2rd_buffer_put@pbuffer 001A  
 detection_obtain_analog_service@adc_data 0062                                 ?_adc_init 0001  
                               ?_adc_read 001A                  __end_of_serialport_write 1E20  
                     syntax_string@chains 01E8                                 ?___lwtoft 0074  
                      __size_of_uart_getc 0030                        __size_of_uart_init 0020  
                      __size_of_uart_putc 0012                       syntax_string@pchain 01E6  
                      __size_of_uart_puts 0050                  __size_ofi2_rd_buffer_put 0122  
                  set_parameter@u16_value 0080                       syntax_string@result 01E4  
                    ?_string_utils_strchr 006C                                 ?_delay_ms 006C  
                    ?_string_utils_strlen 006E                           __CFG_WDTPS$1024 000000  
                              _command_id 00EF                     this_parse_item@result 00A8  
                            ?_sysclk_init 0001                __end_of_string_utils_split 18EA  
                       _rd_buffer_put$482 0078                    __size_of_syntax_string 0134  
                string_utils_split@chains 0075                  ??_string_utils_is_symbol 006C  
                     _uart_byte_available 2298                                 ?_isr_high 0001  
                                 __Hparam 0000                                   __Lparam 0000  
                          ?_rd_buffer_get 006C                            ?_rd_buffer_cnt 006C  
                          ?_rd_buffer_put 006C                           _this_parse_item 0A52  
                                 ___awdiv 1A62                                   ___ftadd 0C1E  
                                 ___awmod 1BC0                                   ___lbmod 2102  
                              _event_miss 002B                           __size_of___wmul 002C  
                  __size_of_cla_add_value 01AC                                   ___ftmul 1462  
                                 ___lwdiv 1E20                                   ___lwmod 1FFA  
                  ??_symb_from_hex_to_bin 006C                    serialport_service@byte 0063  
                    serialport_write@pstr 007D                                   __pcinit 1C28  
                              ??___ftpack 0071                                   __ramtop 0600  
                              ??_adc_init 006C                                ??_adc_read 001C  
                                 __ptext0 1364                                   __ptext1 2212  
                                 __ptext2 196C                                   __ptext3 19E8  
                                 __ptext4 1B4E                                   __ptext5 155C  
                                 __ptext6 1CE2                                   __ptext7 101C  
                                 __ptext8 1866                                   __ptext9 0A52  
                       __end_of_gpio_init 2248                                ??___lwtoft 0077  
                    ?_uart_byte_available 0001                                   _dpowers 7D6C  
                      interrupts@isr_high 007C                          ___awmod@dividend 006C  
                   ??_string_utils_strchr 006F                     ??_string_utils_strlen 0070  
                  ?_string_utils_is_digit 0001                                ??_delay_ms 006E  
                  ?_string_utils_from_hex 0072                 _string_utils_is_digit$831 006C  
                                 _startup 1EB2                                   _sprintf 1150  
                     ?interrupts@isr_high 0001                      end_of_initialization 1C7C  
                       _syntax_as_integer 2286                         i2rd_buffer_put@sz 0027  
                           __Lmediumconst 7D6C                    string_utils_atoi@value 007A  
                      ?_syntax_as_integer 006C                                ??_isr_high 0012  
                       __end_of_uart_getc 20D6                         __end_of_uart_init 2170  
                       __end_of_uart_putc 2236                         __end_of_uart_puts 1CD6  
                   __end_of_get_parameter 196C                      rd_buffer_get@pbuffer 006C  
              __end_of_rd_buffer_readline 1BC0                       ??_syntax_as_integer 006E  
                               _RCSTAbits 000FAB                                   postdec1 000FE5  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                 __size_of_uart_byte_sent 0008                        _serialport_service 1E6A  
                    rd_buffer_cnt@pbuffer 006C                  __size_of_syntax_get_text 000C  
                    ??interrupts@isr_high 0064                   __size_of_rd_buffer_init 0040  
                           _syntax_string 101C                        _serialport_startup 2074  
                              _this_alarm 00CB                                _uart_error 226A  
                              _uart_reset 2190              ??_string_utils_is_upper_case 006C  
                   ??_uart_byte_available 001A                       ?_serialport_service 0001  
                 _delay_interrupt_service 2248                       ?_serialport_startup 0001  
                        ___lbmod@dividend 006D              __end_of_string_utils_strncmp 1740  
                           pd_add_value@d 0074                             pd_add_value@i 008A  
                  string_utils_from_hex@i 007D                    string_utils_from_hex@j 007B  
               __end_of_syntax_as_integer 2290                             _cla_add_value 0846  
                   __size_of_pd_add_value 03C2                         ??i2_rd_buffer_put 001E  
                             ___lbmod@rem 006F                   __end_of_this_parse_item 0C0A  
                    ??_serialport_service 0062           __size_of_string_utils_is_symbol 001A  
                         ??_rd_buffer_get 0070                           ??_rd_buffer_cnt 006E  
                    ??_serialport_startup 0071                           ??_rd_buffer_put 0070  
     __size_of_string_utils_is_upper_case 001A                            _detection_task 196C  
                             ___ftmul@exp 007F                             startup@result 0073  
                          ?_syntax_string 00B3                        detection_task@zero 008B  
                       cla_add_value@zero 006E                             delay_ms@delay 006C  
                          __end_of___wmul 2102                          rd_buffer_put@ind 007B  
               string_utils_is_digit@symb 006D                              _pd_add_value 00F4  
                             __end_ofPL10 1364                               __end_ofPL20 0A34  
                             __end_ofPL12 0536                               __end_ofPL30 0808  
                             __end_ofPL22 0C1E                               __end_ofPL14 0A08  
                             __end_ofPL40 0590                               __end_ofPL32 0564  
                             __end_ofPL24 0A44                               __end_ofPL16 0A16  
                             __end_ofPL50 125C                               __end_ofPL42 0A52  
                             __end_ofPL34 0820                               __end_ofPL26 0554  
                             __end_ofPL18 0A24                               __end_ofPL60 05D8  
                             __end_ofPL52 100E                               __end_ofPL44 05A2  
                             __end_ofPL36 057A                               __end_ofPL28 07F8  
                             __end_ofPL70 0EDA                               __end_ofPL62 05E8  
                             __end_ofPL54 0846                               __end_ofPL46 05B6  
                             __end_ofPL38 124A                               __end_ofPL80 1CE2  
                             __end_ofPL72 05F6                               __end_ofPL64 101C  
                             __end_ofPL56 05C8                               __end_ofPL48 0834  
                             __end_ofPL82 155C                               __end_ofPL74 1462  
                             __end_ofPL66 1D86                               __end_ofPL58 0ECC  
                             __end_ofPL84 0D92                               __end_ofPL76 0602  
                             __end_ofPL68 0D88                               __end_ofPL86 1866  
                             __end_ofPL78 1552                               __end_ofPL88 060A  
                     start_initialization 1C28                 string_utils_strchr@result 006F  
            __size_of_sysclk_setup_intosc 0010                           _parameter_value 0200  
                       _uart_set_baudrate 22A6                            cla_add_value@d 0078  
                          ?_cla_add_value 006C                        ?_uart_set_baudrate 006C  
                    __size_of_sysclk_init 0006                    __end_of_detection_task 19E8  
            sysclk_setup_intosc@frequency 006C                       ??_uart_set_baudrate 006F  
                       syntax@syntax_data 7D76                         syntax_string@pstr 00B3  
                    rd_buffer_init@result 0070                    string_utils_split@pbuf 006C  
                  string_utils_split@prev 0077                    string_utils_split@pstr 006E  
                  string_utils_split@symb 0078                                  ??___wmul 0070  
                             ?_uart_error 0001                               ?_uart_reset 0001  
               ??_delay_interrupt_service 001A                    _string_utils_is_symbol 21E4  
                  string_utils_strchr@pos 0071                         ??_syntax_get_text 006C  
                       ?_serialport_write 007D                         __size_of___ftpack 0088  
               __end_of_uart_set_baudrate 22AC                                 ___asftmul 2038  
              __end_of_on_parameter_found 1FFA                         __size_of_adc_init 0014  
                       __size_of_adc_read 0046                               __pbssCOMRAM 002B  
                       __size_of___lwtoft 0024                             __pcstackBANK0 0060  
                           __pcstackBANK1 01E4                        ??_serialport_write 007F  
                     __end_of__stringdata 7FFF                __size_of_syntax_as_integer 000A  
                         uart_getc@result 001C                      rd_buffer_readline@ch 007D  
                       __size_of_delay_ms 0012                    __size_of_set_parameter 00A6  
               __end_ofsyntax@syntax_data 7FE3                 string_utils_strncmp@pstr1 006E  
               string_utils_strncmp@pstr2 0070                 string_utils_strncmp@symb1 007A  
               string_utils_strncmp@symb2 007B                               sprintf@_val 0085  
                             sprintf@flag 0083                          ?_this_parse_item 00A3  
                             sprintf@prec 0084                           ?_detection_task 0001  
                               _g_analog0 00C8                                 _g_analog1 003D  
                               _g_analog2 003F                                 __pnvBANK0 00F1  
                          _uart_error$257 001A                  __size_of_serialport_task 007A  
                        ___lwdiv@dividend 006C                        fp__serialport_task 00F0  
                      _string_utils_split 1866                           ??_syntax_string 00B7  
                       __CFG_CCP2MX$PORTC 000000                         __size_of_isr_high 0074  
                    _string_utils_strncmp 16AA                                 __pintcode 0008  
                          _uart_byte_sent 2290                             __pmediumconst 7D6C  
                          _rd_buffer_init 1F3E                                  ?___awdiv 006C  
                                ?___ftadd 0085                                  ?___awmod 006C  
                                ?___lbmod 006C                                  ?___ftmul 0074  
              _string_utils_is_symbol$801 006C        __end_of_string_utils_is_upper_case 21E4  
              _string_utils_is_upper_case 21CA                                  ?___lwdiv 006C  
                                ?___lwmod 0073                       ?_string_utils_split 006C  
                 ??_string_utils_is_digit 006C                   ??_string_utils_from_hex 0076  
                              ?___asftmul 0085                              _parameter_id 00F0  
                         ??_cla_add_value 0070                                 _gpio_init 2236  
                        ___lwdiv@quotient 0071                                  ?_startup 0001  
                                ?_sprintf 007C                               _g_rx_buffer 027F  
         __end_of_delay_interrupt_service 225A                      ??_string_utils_split 0073  
                     __size_of_uart_error 0010                       __size_of_uart_reset 001E  
                             _g_tx_buffer 0100                            ___wmul@product 0070  
                   string_utils_atof@sign 0098                                  _PIE1bits 000F9D  
                   string_utils_atoi@sign 0078                    on_parameter_found@p_id 0084  
                  __end_of_uart_byte_sent 2298                    on_parameter_found@type 0088  
                     _this_delay_timer_ms 00F1                    __end_of_rd_buffer_init 1F7E  
                                _PIR1bits 000F9E                     ?_string_utils_strncmp 006E  
                   string_utils_copy@pdst 006C                     string_utils_copy@psrc 006E  
                                i2u842_40 0030                                  i2u842_41 002E  
                                i2u843_40 0046                                  i2u843_41 0044  
                                i2u860_40 0FC4                                  i2u844_40 0054  
                                i2u844_41 0052                                  i2u860_47 0FC0  
                                i2u870_40 00A4                                  i2u854_40 0F12  
                                i2u870_41 00A2                                  i2u854_47 0F0C  
                                i2u871_40 00BA                                  i2u871_41 00B8  
                                i2u872_40 00C8                                  i2u856_40 0F28  
                    syntax_string@str_len 00B5                                  i2u872_41 00C6  
                                i2u856_47 0F22                                 _uart_getc 20A6  
                               _uart_init 2150                    this_parse_item@var_len 00B1  
                               _uart_putc 2224                                 _uart_puts 1C86  
                      _this_contains_crlf 00CC                             _set_parameter 1604  
                  this_parse_item@str_len 00AB               __end_of_string_utils_strchr 1D78  
             __end_of_string_utils_strlen 1FBC                      rd_buffer_put@mes_rec 0076  
           __size_of_symb_from_hex_to_bin 0074                                _ADCON0bits 000FC2  
                    rd_buffer_put@pbuffer 006C                               __stringdata 7FE3  
                       ___wmul@multiplier 006C                           i2_rd_buffer_put 0EDA  
              __size_of_uart_set_baudrate 0006                        _rd_buffer_readline 1B4E  
                        this_parse_item@i 00B0                           rd_buffer_cnt@sz 0072  
                              ?_gpio_init 0001                           rd_buffer_put@sz 0079  
                     ?_rd_buffer_readline 0077                               _meas_buffer 0450  
                                _i2c_buff 0042                            _parameter_text 0300  
                          _parameter_type 00CA                                  __Hparam0 0000  
                     i2rd_buffer_put@prec 001C                               _pd_detector 016B  
                        syntax_string@pos 01E5                                  __Lparam0 0000  
                         ?_uart_byte_sent 0001                                  _g_CONFIG 01D0  
                   string_utils_split@len 0070                           ?_rd_buffer_init 006C  
                     _sysclk_setup_intosc 225A                                ?_uart_getc 0001  
                              ?_uart_init 0001               __end_of_uart_byte_available 22A0  
                                _g_STATUS 003B                      ??_rd_buffer_readline 007D  
                              ?_uart_putc 0001                                ?_uart_puts 006D  
             __size_ofinterrupts@isr_high 0074                            ?_set_parameter 0001  
                        __size_of___awdiv 0078                          __size_of___ftadd 015C  
                        __size_of___awmod 0068                          __size_of___lbmod 002A  
                       _pd_add_value$1130 0086                         _pd_add_value$1126 007E  
                       _pd_add_value$1127 0080                         _pd_add_value$1128 0082  
                        __size_of___ftmul 00E4                         _pd_add_value$1129 0084  
                        __size_of___lwdiv 004A                         ??_serialport_task 00B8  
                        __size_of___lwmod 003E                                  ___ftpack 17D4  
                                _adc_init 21FE                                  _adc_read 1EF8  
                          uart_getc@pbyte 001B                                  ___lwtoft 212C  
                             ??___asftmul 0088                      ?_sysclk_setup_intosc 0001  
              string_utils_from_hex@pdata 0072                         _string_utils_atof 060A  
                       _string_utils_atoi 125C                         _string_utils_copy 1D86  
                                _delay_ms 2212                           ___lwdiv@divisor 006E  
                  __size_of_get_parameter 0082                           ___lwdiv@counter 0070  
                                __ptext10 1D86                                  __ptext11 1D34  
                                __ptext20 21AE                                  __ptext12 16AA  
                                __ptext21 1FBC                                  __ptext13 21CA  
                                __ptext30 1EB2                                  __ptext22 0846  
                                __ptext14 1740                                  __ptext31 22A0  
                                __ptext23 00F4                                  __ptext15 1F7E  
                                __ptext40 2074                                  __ptext32 225A  
                                __ptext24 1604                                  __ptext16 21E4  
                                __ptext41 1F3E                                  __ptext33 2150  
                                __ptext25 2286                                  __ptext17 1ADA  
                                __ptext50 20D6                                  __ptext42 1150  
                                __ptext34 22A6                                  __ptext26 18EA  
                                __ptext18 125C                                  __ptext51 2038  
                                __ptext43 1A62                                  __ptext35 1C86  
                                __ptext27 1DD6                                  __ptext19 060A  
                                __ptext60 226A                                  __ptext52 17D4  
                                __ptext44 1BC0                                  __ptext36 2224  
                                __ptext28 0D92                                  __ptext61 2170  
                                __ptext53 1462                                  __ptext45 0C1E  
                                __ptext37 2290                                  __ptext29 227A  
                                __ptext62 1EF8                                  __ptext46 2102  
                                __ptext38 21FE                                  __ptext63 0EDA  
                                __ptext55 2248                                  __ptext47 1E20  
                                __ptext39 2236                                  __ptext56 1E6A  
                                __ptext48 1FFA                                  __ptext57 20A6  
                                __ptext49 212C                                  __ptext58 2190  
                                __ptext59 2298                                  _bitcount 0041  
                      ?_string_utils_atof 0093                        ?_string_utils_atoi 0072  
                      ?_string_utils_copy 006C                          __size_of_startup 0046  
                        __size_of_sprintf 00E4               on_parameter_found@operation 0089  
                           __size_of_main 0EAE                       ??_string_utils_atof 0096  
                     ??_string_utils_atoi 0075                       ??_string_utils_copy 0072  
             __size_of_serialport_service 0048                                  _isr_high 0008  
                  ??_string_utils_strncmp 0075               __size_of_serialport_startup 0032  
                   __end_of_rd_buffer_get 1604                     __end_of_rd_buffer_cnt 1D34  
                   __end_of_rd_buffer_put 0EBA                           _syntax_get_text 227A  
                                _this_buf 0500                   __end_ofi2_rd_buffer_put 0FFC  
                 ?_string_utils_is_symbol 0001        string_utils_strncmp@case_sensitive 0074  
                            ??_uart_error 001A                              ??_uart_reset 001B  
               __end_of_string_utils_atof 07DE                 __end_of_string_utils_atoi 1358  
               __end_of_string_utils_copy 1DD6                string_utils_strncmp@result 0077  
                   ??_sysclk_setup_intosc 006C                                _INTCONbits 000FF2  
                      i2rd_buffer_put@ind 0029                               ??_gpio_init 006C  
                           ??_sysclk_init 006D                  on_parameter_found@cmd_id 0083  
                        ??_detection_task 008B                      string_utils_strlen@i 0070  
                                intlevel2 0000                                 sprintf@ap 0082  
                               sprintf@sp 008A                          ___lwmod@dividend 0073  
                      _on_parameter_found 1FBC                        __end_of_uart_error 227A  
               __size_of_serialport_write 004A                        __end_of_uart_reset 21AE  
                            _this_warning 00CD                   string_utils_copy@maxlen 0070  
                           _get_parameter 18EA            __end_of_string_utils_is_symbol 21FE  
                         ??_set_parameter 007F                       ?_on_parameter_found 0083  
                 string_utils_copy@result 0072                               ??_uart_getc 001B  
                             ??_uart_init 006F                               ??_uart_putc 006C  
                             ??_uart_puts 0071               ?_string_utils_is_upper_case 0001  
                     string_utils_split@i 0073                                  sprintf@c 008B  
                                sprintf@f 007C            __size_of_string_utils_is_digit 001C  
                         ___lwmod@divisor 0075             __end_of_string_utils_is_digit 21CA  
          __size_of_string_utils_from_hex 0094                           ___lwmod@counter 0077  
           __end_of_string_utils_from_hex 17D4                        string_utils_atof@a 009E  
                      string_utils_atof@c 00A1                        string_utils_atof@e 009C  
                      string_utils_atof@i 009A                        string_utils_atoi@c 0072  
                      string_utils_atof@s 0093                       on_parameter_found@p 0085  
                    ??_on_parameter_found 0089              string_utils_strchr@delimeter 006E  
                             _timers_list 0400                             uart_putc@byte 006C  
                 __end_of_syntax_get_text 2286                         __CFG_FOSC$INTIO67 000000  
                     __end_of_sysclk_init 22A6                             uart_puts@size 006F  
                           uart_puts@pstr 006D                        adc_read@adc_number 001D  
                      main@event_priority 01EE                            ?_get_parameter 0001  
                         pd_add_value@val 0076                           pd_add_value@tmp 0088  
