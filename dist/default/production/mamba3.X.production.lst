

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Mon Oct 12 23:28:12 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	param0,global,class=BANK0,space=1,delta=1
    75                           	psect	pa_nodes,global,class=CODE,delta=1
    76  0000                     tosu	equ	0xFFF
    77                           tosh	equ	0xFFE
    78                           tosl	equ	0xFFD
    79                           pclath	equ	0xFFA
    80                           tblptru	equ	0xFF8
    81                           tblptrh	equ	0xFF7
    82                           tblptrl	equ	0xFF6
    83                           tablat	equ	0xFF5
    84                           prodh	equ	0xFF4
    85                           prodl	equ	0xFF3
    86                           intcon	equ	0xFF2
    87                           indf0	equ	0xFEF
    88                           fsr0h	equ	0xFEA
    89                           fsr0l	equ	0xFE9
    90                           wreg	equ	0xFE8
    91                           indf1	equ	0xFE7
    92                           postinc1	equ	0xFE6
    93                           postdec1	equ	0xFE5
    94                           fsr1h	equ	0xFE2
    95                           fsr1l	equ	0xFE1
    96                           indf2	equ	0xFDF
    97                           postinc2	equ	0xFDE
    98                           postdec2	equ	0xFDD
    99                           fsr2h	equ	0xFDA
   100                           fsr2l	equ	0xFD9
   101                           status	equ	0xFD8
   102                           
   103                           	psect	mediumconst
   104  007D70                     __pmediumconst:
   105                           	opt stack 0
   106  007D70                     _syx_param_list:
   107                           	opt stack 0
   108  007D70  73                 	db	115
   109  007D71  69                 	db	105
   110  007D72  67                 	db	103
   111  007D73  6E                 	db	110
   112  007D74  61                 	db	97
   113  007D75  6C                 	db	108
   114  007D76  00                 	db	0
   115  007D77  00                 	db	0
   116  007D78  00                 	db	0
   117  007D79  00                 	db	0
   118  007D7A  00                 	db	0
   119  007D7B  00                 	db	0
   120  007D7C  00                 	db	0
   121  007D7D  00                 	db	0
   122  007D7E  00                 	db	0
   123  007D7F  00                 	db	0
   124  007D80  00                 	db	0
   125  007D81  00                 	db	0
   126  007D82  00                 	db	0
   127  007D83  00                 	db	0
   128  007D84  00                 	db	0
   129  007D85  03                 	db	3
   130  007D86  69                 	db	105
   131  007D87  6D                 	db	109
   132  007D88  70                 	db	112
   133  007D89  00                 	db	0
   134  007D8A  00                 	db	0
   135  007D8B  00                 	db	0
   136  007D8C  00                 	db	0
   137  007D8D  00                 	db	0
   138  007D8E  00                 	db	0
   139  007D8F  00                 	db	0
   140  007D90  00                 	db	0
   141  007D91  00                 	db	0
   142  007D92  00                 	db	0
   143  007D93  00                 	db	0
   144  007D94  00                 	db	0
   145  007D95  00                 	db	0
   146  007D96  00                 	db	0
   147  007D97  00                 	db	0
   148  007D98  00                 	db	0
   149  007D99  00                 	db	0
   150  007D9A  01                 	db	1
   151  007D9B  03                 	db	3
   152  007D9C  70                 	db	112
   153  007D9D  77                 	db	119
   154  007D9E  72                 	db	114
   155  007D9F  00                 	db	0
   156  007DA0  00                 	db	0
   157  007DA1  00                 	db	0
   158  007DA2  00                 	db	0
   159  007DA3  00                 	db	0
   160  007DA4  00                 	db	0
   161  007DA5  00                 	db	0
   162  007DA6  00                 	db	0
   163  007DA7  00                 	db	0
   164  007DA8  00                 	db	0
   165  007DA9  00                 	db	0
   166  007DAA  00                 	db	0
   167  007DAB  00                 	db	0
   168  007DAC  00                 	db	0
   169  007DAD  00                 	db	0
   170  007DAE  00                 	db	0
   171  007DAF  00                 	db	0
   172  007DB0  02                 	db	2
   173  007DB1  03                 	db	3
   174  007DB2  70                 	db	112
   175  007DB3  6F                 	db	111
   176  007DB4  74                 	db	116
   177  007DB5  00                 	db	0
   178  007DB6  00                 	db	0
   179  007DB7  00                 	db	0
   180  007DB8  00                 	db	0
   181  007DB9  00                 	db	0
   182  007DBA  00                 	db	0
   183  007DBB  00                 	db	0
   184  007DBC  00                 	db	0
   185  007DBD  00                 	db	0
   186  007DBE  00                 	db	0
   187  007DBF  00                 	db	0
   188  007DC0  00                 	db	0
   189  007DC1  00                 	db	0
   190  007DC2  00                 	db	0
   191  007DC3  00                 	db	0
   192  007DC4  00                 	db	0
   193  007DC5  00                 	db	0
   194  007DC6  03                 	db	3
   195  007DC7  03                 	db	3
   196  007DC8  76                 	db	118
   197  007DC9  65                 	db	101
   198  007DCA  72                 	db	114
   199  007DCB  00                 	db	0
   200  007DCC  00                 	db	0
   201  007DCD  00                 	db	0
   202  007DCE  00                 	db	0
   203  007DCF  00                 	db	0
   204  007DD0  00                 	db	0
   205  007DD1  00                 	db	0
   206  007DD2  00                 	db	0
   207  007DD3  00                 	db	0
   208  007DD4  00                 	db	0
   209  007DD5  00                 	db	0
   210  007DD6  00                 	db	0
   211  007DD7  00                 	db	0
   212  007DD8  00                 	db	0
   213  007DD9  00                 	db	0
   214  007DDA  00                 	db	0
   215  007DDB  00                 	db	0
   216  007DDC  04                 	db	4
   217  007DDD  03                 	db	3
   218  007DDE  73                 	db	115
   219  007DDF  74                 	db	116
   220  007DE0  61                 	db	97
   221  007DE1  74                 	db	116
   222  007DE2  75                 	db	117
   223  007DE3  73                 	db	115
   224  007DE4  00                 	db	0
   225  007DE5  00                 	db	0
   226  007DE6  00                 	db	0
   227  007DE7  00                 	db	0
   228  007DE8  00                 	db	0
   229  007DE9  00                 	db	0
   230  007DEA  00                 	db	0
   231  007DEB  00                 	db	0
   232  007DEC  00                 	db	0
   233  007DED  00                 	db	0
   234  007DEE  00                 	db	0
   235  007DEF  00                 	db	0
   236  007DF0  00                 	db	0
   237  007DF1  00                 	db	0
   238  007DF2  05                 	db	5
   239  007DF3  03                 	db	3
   240  007DF4  61                 	db	97
   241  007DF5  63                 	db	99
   242  007DF6  63                 	db	99
   243  007DF7  00                 	db	0
   244  007DF8  00                 	db	0
   245  007DF9  00                 	db	0
   246  007DFA  00                 	db	0
   247  007DFB  00                 	db	0
   248  007DFC  00                 	db	0
   249  007DFD  00                 	db	0
   250  007DFE  00                 	db	0
   251  007DFF  00                 	db	0
   252  007E00  00                 	db	0
   253  007E01  00                 	db	0
   254  007E02  00                 	db	0
   255  007E03  00                 	db	0
   256  007E04  00                 	db	0
   257  007E05  00                 	db	0
   258  007E06  00                 	db	0
   259  007E07  00                 	db	0
   260  007E08  07                 	db	7
   261  007E09  03                 	db	3
   262  007E0A  61                 	db	97
   263  007E0B  64                 	db	100
   264  007E0C  72                 	db	114
   265  007E0D  00                 	db	0
   266  007E0E  00                 	db	0
   267  007E0F  00                 	db	0
   268  007E10  00                 	db	0
   269  007E11  00                 	db	0
   270  007E12  00                 	db	0
   271  007E13  00                 	db	0
   272  007E14  00                 	db	0
   273  007E15  00                 	db	0
   274  007E16  00                 	db	0
   275  007E17  00                 	db	0
   276  007E18  00                 	db	0
   277  007E19  00                 	db	0
   278  007E1A  00                 	db	0
   279  007E1B  00                 	db	0
   280  007E1C  00                 	db	0
   281  007E1D  00                 	db	0
   282  007E1E  08                 	db	8
   283  007E1F  03                 	db	3
   284  007E20  65                 	db	101
   285  007E21  72                 	db	114
   286  007E22  72                 	db	114
   287  007E23  6F                 	db	111
   288  007E24  72                 	db	114
   289  007E25  00                 	db	0
   290  007E26  00                 	db	0
   291  007E27  00                 	db	0
   292  007E28  00                 	db	0
   293  007E29  00                 	db	0
   294  007E2A  00                 	db	0
   295  007E2B  00                 	db	0
   296  007E2C  00                 	db	0
   297  007E2D  00                 	db	0
   298  007E2E  00                 	db	0
   299  007E2F  00                 	db	0
   300  007E30  00                 	db	0
   301  007E31  00                 	db	0
   302  007E32  00                 	db	0
   303  007E33  00                 	db	0
   304  007E34  06                 	db	6
   305  007E35  03                 	db	3
   306  007E36  64                 	db	100
   307  007E37  65                 	db	101
   308  007E38  66                 	db	102
   309  007E39  61                 	db	97
   310  007E3A  75                 	db	117
   311  007E3B  6C                 	db	108
   312  007E3C  74                 	db	116
   313  007E3D  73                 	db	115
   314  007E3E  00                 	db	0
   315  007E3F  00                 	db	0
   316  007E40  00                 	db	0
   317  007E41  00                 	db	0
   318  007E42  00                 	db	0
   319  007E43  00                 	db	0
   320  007E44  00                 	db	0
   321  007E45  00                 	db	0
   322  007E46  00                 	db	0
   323  007E47  00                 	db	0
   324  007E48  00                 	db	0
   325  007E49  00                 	db	0
   326  007E4A  09                 	db	9
   327  007E4B  03                 	db	3
   328  007E4C  6D                 	db	109
   329  007E4D  6F                 	db	111
   330  007E4E  64                 	db	100
   331  007E4F  00                 	db	0
   332  007E50  00                 	db	0
   333  007E51  00                 	db	0
   334  007E52  00                 	db	0
   335  007E53  00                 	db	0
   336  007E54  00                 	db	0
   337  007E55  00                 	db	0
   338  007E56  00                 	db	0
   339  007E57  00                 	db	0
   340  007E58  00                 	db	0
   341  007E59  00                 	db	0
   342  007E5A  00                 	db	0
   343  007E5B  00                 	db	0
   344  007E5C  00                 	db	0
   345  007E5D  00                 	db	0
   346  007E5E  00                 	db	0
   347  007E5F  00                 	db	0
   348  007E60  0A                 	db	10
   349  007E61  01                 	db	1
   350  007E62  70                 	db	112
   351  007E63  72                 	db	114
   352  007E64  6F                 	db	111
   353  007E65  66                 	db	102
   354  007E66  69                 	db	105
   355  007E67  6C                 	db	108
   356  007E68  65                 	db	101
   357  007E69  00                 	db	0
   358  007E6A  00                 	db	0
   359  007E6B  00                 	db	0
   360  007E6C  00                 	db	0
   361  007E6D  00                 	db	0
   362  007E6E  00                 	db	0
   363  007E6F  00                 	db	0
   364  007E70  00                 	db	0
   365  007E71  00                 	db	0
   366  007E72  00                 	db	0
   367  007E73  00                 	db	0
   368  007E74  00                 	db	0
   369  007E75  00                 	db	0
   370  007E76  0B                 	db	11
   371  007E77  03                 	db	3
   372  007E78  70                 	db	112
   373  007E79  77                 	db	119
   374  007E7A  72                 	db	114
   375  007E7B  74                 	db	116
   376  007E7C  72                 	db	114
   377  007E7D  69                 	db	105
   378  007E7E  67                 	db	103
   379  007E7F  00                 	db	0
   380  007E80  00                 	db	0
   381  007E81  00                 	db	0
   382  007E82  00                 	db	0
   383  007E83  00                 	db	0
   384  007E84  00                 	db	0
   385  007E85  00                 	db	0
   386  007E86  00                 	db	0
   387  007E87  00                 	db	0
   388  007E88  00                 	db	0
   389  007E89  00                 	db	0
   390  007E8A  00                 	db	0
   391  007E8B  00                 	db	0
   392  007E8C  0C                 	db	12
   393  007E8D  03                 	db	3
   394  007E8E  61                 	db	97
   395  007E8F  63                 	db	99
   396  007E90  63                 	db	99
   397  007E91  74                 	db	116
   398  007E92  72                 	db	114
   399  007E93  69                 	db	105
   400  007E94  67                 	db	103
   401  007E95  00                 	db	0
   402  007E96  00                 	db	0
   403  007E97  00                 	db	0
   404  007E98  00                 	db	0
   405  007E99  00                 	db	0
   406  007E9A  00                 	db	0
   407  007E9B  00                 	db	0
   408  007E9C  00                 	db	0
   409  007E9D  00                 	db	0
   410  007E9E  00                 	db	0
   411  007E9F  00                 	db	0
   412  007EA0  00                 	db	0
   413  007EA1  00                 	db	0
   414  007EA2  0D                 	db	13
   415  007EA3  03                 	db	3
   416  007EA4  74                 	db	116
   417  007EA5  72                 	db	114
   418  007EA6  69                 	db	105
   419  007EA7  67                 	db	103
   420  007EA8  6C                 	db	108
   421  007EA9  65                 	db	101
   422  007EAA  76                 	db	118
   423  007EAB  00                 	db	0
   424  007EAC  00                 	db	0
   425  007EAD  00                 	db	0
   426  007EAE  00                 	db	0
   427  007EAF  00                 	db	0
   428  007EB0  00                 	db	0
   429  007EB1  00                 	db	0
   430  007EB2  00                 	db	0
   431  007EB3  00                 	db	0
   432  007EB4  00                 	db	0
   433  007EB5  00                 	db	0
   434  007EB6  00                 	db	0
   435  007EB7  00                 	db	0
   436  007EB8  0E                 	db	14
   437  007EB9  03                 	db	3
   438  007EBA  74                 	db	116
   439  007EBB  72                 	db	114
   440  007EBC  69                 	db	105
   441  007EBD  67                 	db	103
   442  007EBE  73                 	db	115
   443  007EBF  75                 	db	117
   444  007EC0  6D                 	db	109
   445  007EC1  00                 	db	0
   446  007EC2  00                 	db	0
   447  007EC3  00                 	db	0
   448  007EC4  00                 	db	0
   449  007EC5  00                 	db	0
   450  007EC6  00                 	db	0
   451  007EC7  00                 	db	0
   452  007EC8  00                 	db	0
   453  007EC9  00                 	db	0
   454  007ECA  00                 	db	0
   455  007ECB  00                 	db	0
   456  007ECC  00                 	db	0
   457  007ECD  00                 	db	0
   458  007ECE  0F                 	db	15
   459  007ECF  03                 	db	3
   460  007ED0  74                 	db	116
   461  007ED1  72                 	db	114
   462  007ED2  69                 	db	105
   463  007ED3  67                 	db	103
   464  007ED4  63                 	db	99
   465  007ED5  6E                 	db	110
   466  007ED6  74                 	db	116
   467  007ED7  00                 	db	0
   468  007ED8  00                 	db	0
   469  007ED9  00                 	db	0
   470  007EDA  00                 	db	0
   471  007EDB  00                 	db	0
   472  007EDC  00                 	db	0
   473  007EDD  00                 	db	0
   474  007EDE  00                 	db	0
   475  007EDF  00                 	db	0
   476  007EE0  00                 	db	0
   477  007EE1  00                 	db	0
   478  007EE2  00                 	db	0
   479  007EE3  00                 	db	0
   480  007EE4  10                 	db	16
   481  007EE5  03                 	db	3
   482  007EE6  77                 	db	119
   483  007EE7  61                 	db	97
   484  007EE8  76                 	db	118
   485  007EE9  74                 	db	116
   486  007EEA  6F                 	db	111
   487  007EEB  6C                 	db	108
   488  007EEC  65                 	db	101
   489  007EED  00                 	db	0
   490  007EEE  00                 	db	0
   491  007EEF  00                 	db	0
   492  007EF0  00                 	db	0
   493  007EF1  00                 	db	0
   494  007EF2  00                 	db	0
   495  007EF3  00                 	db	0
   496  007EF4  00                 	db	0
   497  007EF5  00                 	db	0
   498  007EF6  00                 	db	0
   499  007EF7  00                 	db	0
   500  007EF8  00                 	db	0
   501  007EF9  00                 	db	0
   502  007EFA  11                 	db	17
   503  007EFB  03                 	db	3
   504  007EFC  77                 	db	119
   505  007EFD  61                 	db	97
   506  007EFE  76                 	db	118
   507  007EFF  74                 	db	116
   508  007F00  72                 	db	114
   509  007F01  69                 	db	105
   510  007F02  67                 	db	103
   511  007F03  00                 	db	0
   512  007F04  00                 	db	0
   513  007F05  00                 	db	0
   514  007F06  00                 	db	0
   515  007F07  00                 	db	0
   516  007F08  00                 	db	0
   517  007F09  00                 	db	0
   518  007F0A  00                 	db	0
   519  007F0B  00                 	db	0
   520  007F0C  00                 	db	0
   521  007F0D  00                 	db	0
   522  007F0E  00                 	db	0
   523  007F0F  00                 	db	0
   524  007F10  12                 	db	18
   525  007F11  03                 	db	3
   526  007F12  77                 	db	119
   527  007F13  61                 	db	97
   528  007F14  76                 	db	118
   529  007F15  6C                 	db	108
   530  007F16  63                 	db	99
   531  007F17  6E                 	db	110
   532  007F18  74                 	db	116
   533  007F19  00                 	db	0
   534  007F1A  00                 	db	0
   535  007F1B  00                 	db	0
   536  007F1C  00                 	db	0
   537  007F1D  00                 	db	0
   538  007F1E  00                 	db	0
   539  007F1F  00                 	db	0
   540  007F20  00                 	db	0
   541  007F21  00                 	db	0
   542  007F22  00                 	db	0
   543  007F23  00                 	db	0
   544  007F24  00                 	db	0
   545  007F25  00                 	db	0
   546  007F26  13                 	db	19
   547  007F27  03                 	db	3
   548  007F28  77                 	db	119
   549  007F29  61                 	db	97
   550  007F2A  76                 	db	118
   551  007F2B  72                 	db	114
   552  007F2C  63                 	db	99
   553  007F2D  6E                 	db	110
   554  007F2E  74                 	db	116
   555  007F2F  00                 	db	0
   556  007F30  00                 	db	0
   557  007F31  00                 	db	0
   558  007F32  00                 	db	0
   559  007F33  00                 	db	0
   560  007F34  00                 	db	0
   561  007F35  00                 	db	0
   562  007F36  00                 	db	0
   563  007F37  00                 	db	0
   564  007F38  00                 	db	0
   565  007F39  00                 	db	0
   566  007F3A  00                 	db	0
   567  007F3B  00                 	db	0
   568  007F3C  14                 	db	20
   569  007F3D  03                 	db	3
   570  007F3E  69                 	db	105
   571  007F3F  64                 	db	100
   572  007F40  69                 	db	105
   573  007F41  64                 	db	100
   574  007F42  00                 	db	0
   575  007F43  00                 	db	0
   576  007F44  00                 	db	0
   577  007F45  00                 	db	0
   578  007F46  00                 	db	0
   579  007F47  00                 	db	0
   580  007F48  00                 	db	0
   581  007F49  00                 	db	0
   582  007F4A  00                 	db	0
   583  007F4B  00                 	db	0
   584  007F4C  00                 	db	0
   585  007F4D  00                 	db	0
   586  007F4E  00                 	db	0
   587  007F4F  00                 	db	0
   588  007F50  00                 	db	0
   589  007F51  00                 	db	0
   590  007F52  15                 	db	21
   591  007F53  03                 	db	3
   592  007F54  70                 	db	112
   593  007F55  73                 	db	115
   594  007F56  77                 	db	119
   595  007F57  70                 	db	112
   596  007F58  73                 	db	115
   597  007F59  77                 	db	119
   598  007F5A  00                 	db	0
   599  007F5B  00                 	db	0
   600  007F5C  00                 	db	0
   601  007F5D  00                 	db	0
   602  007F5E  00                 	db	0
   603  007F5F  00                 	db	0
   604  007F60  00                 	db	0
   605  007F61  00                 	db	0
   606  007F62  00                 	db	0
   607  007F63  00                 	db	0
   608  007F64  00                 	db	0
   609  007F65  00                 	db	0
   610  007F66  00                 	db	0
   611  007F67  00                 	db	0
   612  007F68  16                 	db	22
   613  007F69  03                 	db	3
   614  007F6A  1D                 	db	29
   615  007F6B  1D                 	db	29
   616  007F6C  00                 	db	0
   617  007F6D  00                 	db	0
   618  007F6E  00                 	db	0
   619  007F6F  00                 	db	0
   620  007F70  00                 	db	0
   621  007F71  00                 	db	0
   622  007F72  00                 	db	0
   623  007F73  00                 	db	0
   624  007F74  00                 	db	0
   625  007F75  00                 	db	0
   626  007F76  00                 	db	0
   627  007F77  00                 	db	0
   628  007F78  00                 	db	0
   629  007F79  00                 	db	0
   630  007F7A  00                 	db	0
   631  007F7B  00                 	db	0
   632  007F7C  00                 	db	0
   633  007F7D  00                 	db	0
   634  007F7E  FF                 	db	255
   635  007F7F  00                 	db	0
   636  007F80                     __end_of_syx_param_list:
   637                           	opt stack 0
   638  007F80                     _syx_cmd_list:
   639                           	opt stack 0
   640  007F80  73                 	db	115
   641  007F81  65                 	db	101
   642  007F82  74                 	db	116
   643  007F83  00                 	db	0
   644  007F84  00                 	db	0
   645  007F85  00                 	db	0
   646  007F86  00                 	db	0
   647  007F87  00                 	db	0
   648  007F88  00                 	db	0
   649  007F89  00                 	db	0
   650  007F8A  00                 	db	0
   651  007F8B  00                 	db	0
   652  007F8C  00                 	db	0
   653  007F8D  00                 	db	0
   654  007F8E  00                 	db	0
   655  007F8F  00                 	db	0
   656  007F90  00                 	db	0
   657  007F91  00                 	db	0
   658  007F92  00                 	db	0
   659  007F93  00                 	db	0
   660  007F94  00                 	db	0
   661  007F95  67                 	db	103
   662  007F96  65                 	db	101
   663  007F97  74                 	db	116
   664  007F98  00                 	db	0
   665  007F99  00                 	db	0
   666  007F9A  00                 	db	0
   667  007F9B  00                 	db	0
   668  007F9C  00                 	db	0
   669  007F9D  00                 	db	0
   670  007F9E  00                 	db	0
   671  007F9F  00                 	db	0
   672  007FA0  00                 	db	0
   673  007FA1  00                 	db	0
   674  007FA2  00                 	db	0
   675  007FA3  00                 	db	0
   676  007FA4  00                 	db	0
   677  007FA5  00                 	db	0
   678  007FA6  00                 	db	0
   679  007FA7  00                 	db	0
   680  007FA8  00                 	db	0
   681  007FA9  01                 	db	1
   682  007FAA  69                 	db	105
   683  007FAB  6E                 	db	110
   684  007FAC  69                 	db	105
   685  007FAD  74                 	db	116
   686  007FAE  00                 	db	0
   687  007FAF  00                 	db	0
   688  007FB0  00                 	db	0
   689  007FB1  00                 	db	0
   690  007FB2  00                 	db	0
   691  007FB3  00                 	db	0
   692  007FB4  00                 	db	0
   693  007FB5  00                 	db	0
   694  007FB6  00                 	db	0
   695  007FB7  00                 	db	0
   696  007FB8  00                 	db	0
   697  007FB9  00                 	db	0
   698  007FBA  00                 	db	0
   699  007FBB  00                 	db	0
   700  007FBC  00                 	db	0
   701  007FBD  00                 	db	0
   702  007FBE  02                 	db	2
   703  007FBF  73                 	db	115
   704  007FC0  65                 	db	101
   705  007FC1  6C                 	db	108
   706  007FC2  66                 	db	102
   707  007FC3  74                 	db	116
   708  007FC4  65                 	db	101
   709  007FC5  73                 	db	115
   710  007FC6  74                 	db	116
   711  007FC7  00                 	db	0
   712  007FC8  00                 	db	0
   713  007FC9  00                 	db	0
   714  007FCA  00                 	db	0
   715  007FCB  00                 	db	0
   716  007FCC  00                 	db	0
   717  007FCD  00                 	db	0
   718  007FCE  00                 	db	0
   719  007FCF  00                 	db	0
   720  007FD0  00                 	db	0
   721  007FD1  00                 	db	0
   722  007FD2  00                 	db	0
   723  007FD3  03                 	db	3
   724  007FD4  1D                 	db	29
   725  007FD5  1D                 	db	29
   726  007FD6  00                 	db	0
   727  007FD7  00                 	db	0
   728  007FD8  00                 	db	0
   729  007FD9  00                 	db	0
   730  007FDA  00                 	db	0
   731  007FDB  00                 	db	0
   732  007FDC  00                 	db	0
   733  007FDD  00                 	db	0
   734  007FDE  00                 	db	0
   735  007FDF  00                 	db	0
   736  007FE0  00                 	db	0
   737  007FE1  00                 	db	0
   738  007FE2  00                 	db	0
   739  007FE3  00                 	db	0
   740  007FE4  00                 	db	0
   741  007FE5  00                 	db	0
   742  007FE6  00                 	db	0
   743  007FE7  00                 	db	0
   744  007FE8  00                 	db	0
   745  007FE9                     __end_of_syx_cmd_list:
   746                           	opt stack 0
   747  0000                     _ADRES	set	4035
   748  0000                     _TMR0	set	4054
   749  0000                     _ADCON0	set	4034
   750  0000                     _ADCON0bits	set	4034
   751  0000                     _ADCON1	set	4033
   752  0000                     _ADCON2	set	4032
   753  0000                     _ANSEL	set	3966
   754  0000                     _ANSELH	set	3967
   755  0000                     _BAUDCON	set	4024
   756  0000                     _BAUDCTL	set	4024
   757  0000                     _INTCONbits	set	4082
   758  0000                     _LATC	set	3979
   759  0000                     _LATD	set	3980
   760  0000                     _OSCCON	set	4051
   761  0000                     _PIE1bits	set	3997
   762  0000                     _PIR1bits	set	3998
   763  0000                     _RCREG	set	4014
   764  0000                     _RCSTA	set	4011
   765  0000                     _RCSTAbits	set	4011
   766  0000                     _SPBRG	set	4015
   767  0000                     _STATUS	set	4056
   768  0000                     _TRISA	set	3986
   769  0000                     _TRISB	set	3987
   770  0000                     _TRISC	set	3988
   771  0000                     _TRISD	set	3989
   772  0000                     _TXREG	set	4013
   773  0000                     _TXSTA	set	4012
   774  0000                     _ADIF	set	31990
   775  0000                     _CREN	set	32092
   776  0000                     _GODONE	set	32273
   777  0000                     _RC1IF	set	31989
   778  0000                     _RCIF	set	31989
   779  0000                     _TXIF	set	31988
   780  007FE9                     __stringdata:
   781                           	opt stack 0
   782  007FE9                     STR_5:
   783  007FE9  68                 	db	104	;'h'
   784  007FEA  65                 	db	101	;'e'
   785  007FEB  6C                 	db	108	;'l'
   786  007FEC  6C                 	db	108	;'l'
   787  007FED  6F                 	db	111	;'o'
   788  007FEE  00                 	db	0
   789  007FEF                     STR_3:
   790  007FEF  3A                 	db	58	;':'
   791  007FF0  65                 	db	101	;'e'
   792  007FF1  72                 	db	114	;'r'
   793  007FF2  72                 	db	114	;'r'
   794  007FF3  20                 	db	32
   795  007FF4  00                 	db	0
   796  007FF5                     STR_1:
   797  007FF5  65                 	db	101	;'e'
   798  007FF6  72                 	db	114	;'r'
   799  007FF7  72                 	db	114	;'r'
   800  007FF8  0A                 	db	10
   801  007FF9  00                 	db	0
   802  007FFA  3A                 	db	58	;':'
   803  007FFB  6F                 	db	111	;'o'
   804  007FFC  6B                 	db	107	;'k'
   805  007FFD  20                 	db	32
   806  007FFE  00                 	db	0
   807  007FFF                     __end_of__stringdata:
   808                           	opt stack 0
   809                           
   810                           ; #config settings
   811  007FFF  00                 	db	0	; dummy byte at the end
   812  0000                     tosu	equ	0xFFF
   813                           tosh	equ	0xFFE
   814                           tosl	equ	0xFFD
   815                           pclath	equ	0xFFA
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           prodh	equ	0xFF4
   821                           prodl	equ	0xFF3
   822                           intcon	equ	0xFF2
   823                           indf0	equ	0xFEF
   824                           fsr0h	equ	0xFEA
   825                           fsr0l	equ	0xFE9
   826                           wreg	equ	0xFE8
   827                           indf1	equ	0xFE7
   828                           postinc1	equ	0xFE6
   829                           postdec1	equ	0xFE5
   830                           fsr1h	equ	0xFE2
   831                           fsr1l	equ	0xFE1
   832                           indf2	equ	0xFDF
   833                           postinc2	equ	0xFDE
   834                           postdec2	equ	0xFDD
   835                           fsr2h	equ	0xFDA
   836                           fsr2l	equ	0xFD9
   837                           status	equ	0xFD8
   838                           
   839                           	psect	nvBANK0
   840  0000F2                     __pnvBANK0:
   841                           	opt stack 0
   842  0000F2                     _this_delay_timer_ms:
   843                           	opt stack 0
   844  0000F2                     	ds	2
   845                           tosu	equ	0xFFF
   846                           tosh	equ	0xFFE
   847                           tosl	equ	0xFFD
   848                           pclath	equ	0xFFA
   849                           tblptru	equ	0xFF8
   850                           tblptrh	equ	0xFF7
   851                           tblptrl	equ	0xFF6
   852                           tablat	equ	0xFF5
   853                           prodh	equ	0xFF4
   854                           prodl	equ	0xFF3
   855                           intcon	equ	0xFF2
   856                           indf0	equ	0xFEF
   857                           fsr0h	equ	0xFEA
   858                           fsr0l	equ	0xFE9
   859                           wreg	equ	0xFE8
   860                           indf1	equ	0xFE7
   861                           postinc1	equ	0xFE6
   862                           postdec1	equ	0xFE5
   863                           fsr1h	equ	0xFE2
   864                           fsr1l	equ	0xFE1
   865                           indf2	equ	0xFDF
   866                           postinc2	equ	0xFDE
   867                           postdec2	equ	0xFDD
   868                           fsr2h	equ	0xFDA
   869                           fsr2l	equ	0xFD9
   870                           status	equ	0xFD8
   871                           
   872                           	psect	cinit
   873  0015FC                     __pcinit:
   874                           	opt stack 0
   875  0015FC                     start_initialization:
   876                           	opt stack 0
   877  0015FC                     __initialization:
   878                           	opt stack 0
   879                           
   880                           ; Clear objects allocated to BANK5 (127 bytes)
   881  0015FC  EE05  F000         	lfsr	0,__pbssBANK5
   882  001600  0E7F               	movlw	127
   883  001602                     clear_0:
   884  001602  6AEE               	clrf	postinc0,c
   885  001604  06E8               	decf	wreg,f,c
   886  001606  E1FD               	bnz	clear_0
   887                           
   888                           ; Clear objects allocated to BANK4 (187 bytes)
   889  001608  EE04  F000         	lfsr	0,__pbssBANK4
   890  00160C  0EBB               	movlw	187
   891  00160E                     clear_1:
   892  00160E  6AEE               	clrf	postinc0,c
   893  001610  06E8               	decf	wreg,f,c
   894  001612  E1FD               	bnz	clear_1
   895                           
   896                           ; Clear objects allocated to BANK3 (254 bytes)
   897  001614  EE03  F000         	lfsr	0,__pbssBANK3
   898  001618  0EFE               	movlw	254
   899  00161A                     clear_2:
   900  00161A  6AEE               	clrf	postinc0,c
   901  00161C  06E8               	decf	wreg,f,c
   902  00161E  E1FD               	bnz	clear_2
   903                           
   904                           ; Clear objects allocated to BANK2 (207 bytes)
   905  001620  EE02  F000         	lfsr	0,__pbssBANK2
   906  001624  0ECF               	movlw	207
   907  001626                     clear_3:
   908  001626  6AEE               	clrf	postinc0,c
   909  001628  06E8               	decf	wreg,f,c
   910  00162A  E1FD               	bnz	clear_3
   911                           
   912                           ; Clear objects allocated to BANK1 (208 bytes)
   913  00162C  EE01  F000         	lfsr	0,__pbssBANK1
   914  001630  0ED0               	movlw	208
   915  001632                     clear_4:
   916  001632  6AEE               	clrf	postinc0,c
   917  001634  06E8               	decf	wreg,f,c
   918  001636  E1FD               	bnz	clear_4
   919                           
   920                           ; Clear objects allocated to BANK0 (70 bytes)
   921  001638  EE00  F0AC         	lfsr	0,__pbssBANK0
   922  00163C  0E46               	movlw	70
   923  00163E                     clear_5:
   924  00163E  6AEE               	clrf	postinc0,c
   925  001640  06E8               	decf	wreg,f,c
   926  001642  E1FD               	bnz	clear_5
   927                           
   928                           ; Clear objects allocated to COMRAM (24 bytes)
   929  001644  EE00  F02B         	lfsr	0,__pbssCOMRAM
   930  001648  0E18               	movlw	24
   931  00164A                     clear_6:
   932  00164A  6AEE               	clrf	postinc0,c
   933  00164C  06E8               	decf	wreg,f,c
   934  00164E  E1FD               	bnz	clear_6
   935  001650                     end_of_initialization:
   936                           	opt stack 0
   937  001650                     __end_of__initialization:
   938                           	opt stack 0
   939  001650  0E00               	movlw	low (__Lmediumconst shr (0+16))
   940  001652  6EF8               	movwf	tblptru,c
   941  001654  0100               	movlb	0
   942  001656  EF5C  F007         	goto	_main	;jump to C main() function
   943                           tosu	equ	0xFFF
   944                           tosh	equ	0xFFE
   945                           tosl	equ	0xFFD
   946                           pclath	equ	0xFFA
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           prodh	equ	0xFF4
   952                           prodl	equ	0xFF3
   953                           intcon	equ	0xFF2
   954                           indf0	equ	0xFEF
   955                           postinc0	equ	0xFEE
   956                           fsr0h	equ	0xFEA
   957                           fsr0l	equ	0xFE9
   958                           wreg	equ	0xFE8
   959                           indf1	equ	0xFE7
   960                           postinc1	equ	0xFE6
   961                           postdec1	equ	0xFE5
   962                           fsr1h	equ	0xFE2
   963                           fsr1l	equ	0xFE1
   964                           indf2	equ	0xFDF
   965                           postinc2	equ	0xFDE
   966                           postdec2	equ	0xFDD
   967                           fsr2h	equ	0xFDA
   968                           fsr2l	equ	0xFD9
   969                           status	equ	0xFD8
   970                           
   971                           	psect	bssCOMRAM
   972  00002B                     __pbssCOMRAM:
   973                           	opt stack 0
   974  00002B                     _event_miss:
   975                           	opt stack 0
   976  00002B                     	ds	8
   977  000033                     _pool:
   978                           	opt stack 0
   979  000033                     	ds	8
   980  00003B                     _g_STATUS:
   981                           	opt stack 0
   982  00003B                     	ds	2
   983  00003D                     _g_analog1:
   984                           	opt stack 0
   985  00003D                     	ds	2
   986  00003F                     _g_analog2:
   987                           	opt stack 0
   988  00003F                     	ds	2
   989  000041                     _bitcount:
   990                           	opt stack 0
   991  000041                     	ds	1
   992  000042                     _i2c_buff:
   993                           	opt stack 0
   994  000042                     	ds	1
   995                           tosu	equ	0xFFF
   996                           tosh	equ	0xFFE
   997                           tosl	equ	0xFFD
   998                           pclath	equ	0xFFA
   999                           tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           prodh	equ	0xFF4
  1004                           prodl	equ	0xFF3
  1005                           intcon	equ	0xFF2
  1006                           indf0	equ	0xFEF
  1007                           postinc0	equ	0xFEE
  1008                           fsr0h	equ	0xFEA
  1009                           fsr0l	equ	0xFE9
  1010                           wreg	equ	0xFE8
  1011                           indf1	equ	0xFE7
  1012                           postinc1	equ	0xFE6
  1013                           postdec1	equ	0xFE5
  1014                           fsr1h	equ	0xFE2
  1015                           fsr1l	equ	0xFE1
  1016                           indf2	equ	0xFDF
  1017                           postinc2	equ	0xFDE
  1018                           postdec2	equ	0xFDD
  1019                           fsr2h	equ	0xFDA
  1020                           fsr2l	equ	0xFD9
  1021                           status	equ	0xFD8
  1022                           
  1023                           	psect	bssBANK0
  1024  0000AC                     __pbssBANK0:
  1025                           	opt stack 0
  1026  0000AC                     _events:
  1027                           	opt stack 0
  1028  0000AC                     	ds	16
  1029  0000BC                     _command_id:
  1030                           	opt stack 0
  1031  0000BC                     	ds	2
  1032  0000BE                     _g_analog0:
  1033                           	opt stack 0
  1034  0000BE                     	ds	2
  1035  0000C0                     _parameter_id:
  1036                           	opt stack 0
  1037  0000C0                     	ds	2
  1038  0000C2                     _parameter_type:
  1039                           	opt stack 0
  1040  0000C2                     	ds	1
  1041  0000C3                     _this_alarm:
  1042                           	opt stack 0
  1043  0000C3                     	ds	1
  1044  0000C4                     _this_case_sensitive:
  1045                           	opt stack 0
  1046  0000C4                     	ds	1
  1047  0000C5                     _this_contains_crlf:
  1048                           	opt stack 0
  1049  0000C5                     	ds	1
  1050  0000C6                     _this_warning:
  1051                           	opt stack 0
  1052  0000C6                     	ds	1
  1053  0000C7                     detection_task@alarm_cla:
  1054                           	opt stack 0
  1055  0000C7                     	ds	1
  1056  0000C8                     detection_task@alarm_wav:
  1057                           	opt stack 0
  1058  0000C8                     	ds	1
  1059  0000C9                     _cla_detector:
  1060                           	opt stack 0
  1061  0000C9                     	ds	21
  1062  0000DE                     _g_CONFIG:
  1063                           	opt stack 0
  1064  0000DE                     	ds	20
  1065                           tosu	equ	0xFFF
  1066                           tosh	equ	0xFFE
  1067                           tosl	equ	0xFFD
  1068                           pclath	equ	0xFFA
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           prodh	equ	0xFF4
  1074                           prodl	equ	0xFF3
  1075                           intcon	equ	0xFF2
  1076                           indf0	equ	0xFEF
  1077                           postinc0	equ	0xFEE
  1078                           fsr0h	equ	0xFEA
  1079                           fsr0l	equ	0xFE9
  1080                           wreg	equ	0xFE8
  1081                           indf1	equ	0xFE7
  1082                           postinc1	equ	0xFE6
  1083                           postdec1	equ	0xFE5
  1084                           fsr1h	equ	0xFE2
  1085                           fsr1l	equ	0xFE1
  1086                           indf2	equ	0xFDF
  1087                           postinc2	equ	0xFDE
  1088                           postdec2	equ	0xFDD
  1089                           fsr2h	equ	0xFDA
  1090                           fsr2l	equ	0xFD9
  1091                           status	equ	0xFD8
  1092                           
  1093                           	psect	bssBANK1
  1094  000100                     __pbssBANK1:
  1095                           	opt stack 0
  1096  000100                     _g_tx_buffer:
  1097                           	opt stack 0
  1098  000100                     	ds	107
  1099  00016B                     _pd_detector:
  1100                           	opt stack 0
  1101  00016B                     	ds	101
  1102                           tosu	equ	0xFFF
  1103                           tosh	equ	0xFFE
  1104                           tosl	equ	0xFFD
  1105                           pclath	equ	0xFFA
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           prodh	equ	0xFF4
  1111                           prodl	equ	0xFF3
  1112                           intcon	equ	0xFF2
  1113                           indf0	equ	0xFEF
  1114                           postinc0	equ	0xFEE
  1115                           fsr0h	equ	0xFEA
  1116                           fsr0l	equ	0xFE9
  1117                           wreg	equ	0xFE8
  1118                           indf1	equ	0xFE7
  1119                           postinc1	equ	0xFE6
  1120                           postdec1	equ	0xFE5
  1121                           fsr1h	equ	0xFE2
  1122                           fsr1l	equ	0xFE1
  1123                           indf2	equ	0xFDF
  1124                           postinc2	equ	0xFDE
  1125                           postdec2	equ	0xFDD
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130                           	psect	bssBANK2
  1131  000200                     __pbssBANK2:
  1132                           	opt stack 0
  1133  000200                     _g_rx_buffer:
  1134                           	opt stack 0
  1135  000200                     	ds	107
  1136  00026B                     _serialport_buffer:
  1137                           	opt stack 0
  1138  00026B                     	ds	100
  1139                           tosu	equ	0xFFF
  1140                           tosh	equ	0xFFE
  1141                           tosl	equ	0xFFD
  1142                           pclath	equ	0xFFA
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           prodh	equ	0xFF4
  1148                           prodl	equ	0xFF3
  1149                           intcon	equ	0xFF2
  1150                           indf0	equ	0xFEF
  1151                           postinc0	equ	0xFEE
  1152                           fsr0h	equ	0xFEA
  1153                           fsr0l	equ	0xFE9
  1154                           wreg	equ	0xFE8
  1155                           indf1	equ	0xFE7
  1156                           postinc1	equ	0xFE6
  1157                           postdec1	equ	0xFE5
  1158                           fsr1h	equ	0xFE2
  1159                           fsr1l	equ	0xFE1
  1160                           indf2	equ	0xFDF
  1161                           postinc2	equ	0xFDE
  1162                           postdec2	equ	0xFDD
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167                           	psect	bssBANK3
  1168  000300                     __pbssBANK3:
  1169                           	opt stack 0
  1170  000300                     _parameter_text:
  1171                           	opt stack 0
  1172  000300                     	ds	127
  1173  00037F                     _parameter_value:
  1174                           	opt stack 0
  1175  00037F                     	ds	127
  1176                           tosu	equ	0xFFF
  1177                           tosh	equ	0xFFE
  1178                           tosl	equ	0xFFD
  1179                           pclath	equ	0xFFA
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           intcon	equ	0xFF2
  1187                           indf0	equ	0xFEF
  1188                           postinc0	equ	0xFEE
  1189                           fsr0h	equ	0xFEA
  1190                           fsr0l	equ	0xFE9
  1191                           wreg	equ	0xFE8
  1192                           indf1	equ	0xFE7
  1193                           postinc1	equ	0xFE6
  1194                           postdec1	equ	0xFE5
  1195                           fsr1h	equ	0xFE2
  1196                           fsr1l	equ	0xFE1
  1197                           indf2	equ	0xFDF
  1198                           postinc2	equ	0xFDE
  1199                           postdec2	equ	0xFDD
  1200                           fsr2h	equ	0xFDA
  1201                           fsr2l	equ	0xFD9
  1202                           status	equ	0xFD8
  1203                           
  1204                           	psect	bssBANK4
  1205  000400                     __pbssBANK4:
  1206                           	opt stack 0
  1207  000400                     	ds	80
  1208  000450                     _meas_buffer:
  1209                           	opt stack 0
  1210  000450                     	ds	107
  1211                           tosu	equ	0xFFF
  1212                           tosh	equ	0xFFE
  1213                           tosl	equ	0xFFD
  1214                           pclath	equ	0xFFA
  1215                           tblptru	equ	0xFF8
  1216                           tblptrh	equ	0xFF7
  1217                           tblptrl	equ	0xFF6
  1218                           tablat	equ	0xFF5
  1219                           prodh	equ	0xFF4
  1220                           prodl	equ	0xFF3
  1221                           intcon	equ	0xFF2
  1222                           indf0	equ	0xFEF
  1223                           postinc0	equ	0xFEE
  1224                           fsr0h	equ	0xFEA
  1225                           fsr0l	equ	0xFE9
  1226                           wreg	equ	0xFE8
  1227                           indf1	equ	0xFE7
  1228                           postinc1	equ	0xFE6
  1229                           postdec1	equ	0xFE5
  1230                           fsr1h	equ	0xFE2
  1231                           fsr1l	equ	0xFE1
  1232                           indf2	equ	0xFDF
  1233                           postinc2	equ	0xFDE
  1234                           postdec2	equ	0xFDD
  1235                           fsr2h	equ	0xFDA
  1236                           fsr2l	equ	0xFD9
  1237                           status	equ	0xFD8
  1238                           
  1239                           	psect	bssBANK5
  1240  000500                     __pbssBANK5:
  1241                           	opt stack 0
  1242  000500                     _this_buf:
  1243                           	opt stack 0
  1244  000500                     	ds	127
  1245                           tosu	equ	0xFFF
  1246                           tosh	equ	0xFFE
  1247                           tosl	equ	0xFFD
  1248                           pclath	equ	0xFFA
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           prodh	equ	0xFF4
  1254                           prodl	equ	0xFF3
  1255                           intcon	equ	0xFF2
  1256                           indf0	equ	0xFEF
  1257                           postinc0	equ	0xFEE
  1258                           fsr0h	equ	0xFEA
  1259                           fsr0l	equ	0xFE9
  1260                           wreg	equ	0xFE8
  1261                           indf1	equ	0xFE7
  1262                           postinc1	equ	0xFE6
  1263                           postdec1	equ	0xFE5
  1264                           fsr1h	equ	0xFE2
  1265                           fsr1l	equ	0xFE1
  1266                           indf2	equ	0xFDF
  1267                           postinc2	equ	0xFDE
  1268                           postdec2	equ	0xFDD
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273                           	psect	cstackBANK1
  1274  0001D0                     __pcstackBANK1:
  1275                           	opt stack 0
  1276  0001D0                     ??_main:
  1277                           
  1278                           ; 0 bytes @ 0x0
  1279  0001D0                     	ds	1
  1280  0001D1                     main@event_old:
  1281                           	opt stack 0
  1282                           
  1283                           ; 1 bytes @ 0x1
  1284  0001D1                     	ds	1
  1285  0001D2                     main@event_priority:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x2
  1289  0001D2                     	ds	1
  1290  0001D3                     main@i:
  1291                           	opt stack 0
  1292                           
  1293                           ; 1 bytes @ 0x3
  1294  0001D3                     	ds	1
  1295                           tosu	equ	0xFFF
  1296                           tosh	equ	0xFFE
  1297                           tosl	equ	0xFFD
  1298                           pclath	equ	0xFFA
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           prodh	equ	0xFF4
  1304                           prodl	equ	0xFF3
  1305                           intcon	equ	0xFF2
  1306                           indf0	equ	0xFEF
  1307                           postinc0	equ	0xFEE
  1308                           fsr0h	equ	0xFEA
  1309                           fsr0l	equ	0xFE9
  1310                           wreg	equ	0xFE8
  1311                           indf1	equ	0xFE7
  1312                           postinc1	equ	0xFE6
  1313                           postdec1	equ	0xFE5
  1314                           fsr1h	equ	0xFE2
  1315                           fsr1l	equ	0xFE1
  1316                           indf2	equ	0xFDF
  1317                           postinc2	equ	0xFDE
  1318                           postdec2	equ	0xFDD
  1319                           fsr2h	equ	0xFDA
  1320                           fsr2l	equ	0xFD9
  1321                           status	equ	0xFD8
  1322                           
  1323                           	psect	cstackBANK0
  1324  000060                     __pcstackBANK0:
  1325                           	opt stack 0
  1326  000060                     	ds	2
  1327  000062                     ??_serialport_service:
  1328  000062                     detection_obtain_analog_service@adc_data:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x2
  1332  000062                     	ds	1
  1333  000063                     serialport_service@byte:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x3
  1337  000063                     	ds	1
  1338  000064                     ??interrupts@isr_high:
  1339                           
  1340                           ; 0 bytes @ 0x4
  1341  000064                     	ds	8
  1342  00006C                     ?_uart_set_baudrate:
  1343                           	opt stack 0
  1344  00006C                     ?_delay_ms:
  1345                           	opt stack 0
  1346  00006C                     ?_rd_buffer_get:
  1347                           	opt stack 0
  1348  00006C                     ?_rd_buffer_init:
  1349                           	opt stack 0
  1350  00006C                     ?_rd_buffer_put:
  1351                           	opt stack 0
  1352  00006C                     ?_cla_add_value:
  1353                           	opt stack 0
  1354  00006C                     ?___lbmod:
  1355                           	opt stack 0
  1356  00006C                     ?_rd_buffer_cnt:
  1357                           	opt stack 0
  1358  00006C                     ?_string_utils_copy:
  1359                           	opt stack 0
  1360  00006C                     ?_string_utils_split:
  1361                           	opt stack 0
  1362  00006C                     ?_string_utils_strchr:
  1363                           	opt stack 0
  1364  00006C                     ?___awdiv:
  1365                           	opt stack 0
  1366  00006C                     ?___awmod:
  1367                           	opt stack 0
  1368  00006C                     ?___wmul:
  1369                           	opt stack 0
  1370  00006C                     sysclk_setup_intosc@frequency:
  1371                           	opt stack 0
  1372  00006C                     uart_putc@byte:
  1373                           	opt stack 0
  1374  00006C                     _string_utils_is_upper_case$730:
  1375                           	opt stack 0
  1376  00006C                     _string_utils_is_symbol$736:
  1377                           	opt stack 0
  1378  00006C                     symb_from_hex_to_bin@symb:
  1379                           	opt stack 0
  1380  00006C                     ___lbmod@divisor:
  1381                           	opt stack 0
  1382  00006C                     delay_ms@delay:
  1383                           	opt stack 0
  1384  00006C                     rd_buffer_init@pbuffer:
  1385                           	opt stack 0
  1386  00006C                     rd_buffer_cnt@pbuffer:
  1387                           	opt stack 0
  1388  00006C                     rd_buffer_get@pbuffer:
  1389                           	opt stack 0
  1390  00006C                     rd_buffer_put@pbuffer:
  1391                           	opt stack 0
  1392  00006C                     string_utils_copy@pdst:
  1393                           	opt stack 0
  1394  00006C                     string_utils_split@pbuf:
  1395                           	opt stack 0
  1396  00006C                     cla_add_value@val:
  1397                           	opt stack 0
  1398  00006C                     ___awdiv@dividend:
  1399                           	opt stack 0
  1400  00006C                     ___awmod@dividend:
  1401                           	opt stack 0
  1402  00006C                     ___wmul@multiplier:
  1403                           	opt stack 0
  1404  00006C                     string_utils_strchr@pbuf:
  1405                           	opt stack 0
  1406                           
  1407                           ; 3 bytes @ 0xC
  1408  00006C                     	ds	1
  1409  00006D                     ?_uart_puts:
  1410                           	opt stack 0
  1411  00006D                     string_utils_is_upper_case@symb:
  1412                           	opt stack 0
  1413  00006D                     string_utils_is_symbol@symb:
  1414                           	opt stack 0
  1415  00006D                     ___lbmod@dividend:
  1416                           	opt stack 0
  1417  00006D                     uart_puts@pstr:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0xD
  1421  00006D                     	ds	1
  1422  00006E                     ??_rd_buffer_cnt:
  1423  00006E                     ___lbmod@counter:
  1424                           	opt stack 0
  1425  00006E                     rd_buffer_init@size:
  1426                           	opt stack 0
  1427  00006E                     rd_buffer_get@prec:
  1428                           	opt stack 0
  1429  00006E                     rd_buffer_put@prec:
  1430                           	opt stack 0
  1431  00006E                     string_utils_split@pstr:
  1432                           	opt stack 0
  1433  00006E                     cla_add_value@zero:
  1434                           	opt stack 0
  1435  00006E                     ___awdiv@divisor:
  1436                           	opt stack 0
  1437  00006E                     ___awmod@divisor:
  1438                           	opt stack 0
  1439  00006E                     ___wmul@multiplicand:
  1440                           	opt stack 0
  1441  00006E                     string_utils_copy@psrc:
  1442                           	opt stack 0
  1443                           
  1444                           ; 3 bytes @ 0xE
  1445  00006E                     	ds	1
  1446  00006F                     string_utils_strchr@delimeter:
  1447                           	opt stack 0
  1448  00006F                     ___lbmod@rem:
  1449                           	opt stack 0
  1450  00006F                     uart_puts@size:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0xF
  1454  00006F                     	ds	1
  1455  000070                     ??_rd_buffer_get:
  1456  000070                     ??_rd_buffer_put:
  1457  000070                     ??_string_utils_strchr:
  1458  000070                     ??_cla_add_value:
  1459  000070                     rd_buffer_init@result:
  1460                           	opt stack 0
  1461  000070                     ___awdiv@counter:
  1462                           	opt stack 0
  1463  000070                     ___awmod@counter:
  1464                           	opt stack 0
  1465  000070                     string_utils_split@len:
  1466                           	opt stack 0
  1467  000070                     ___wmul@product:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x10
  1471  000070                     	ds	1
  1472  000071                     ??_serialport_startup:
  1473  000071                     ___awdiv@sign:
  1474                           	opt stack 0
  1475  000071                     ___awmod@sign:
  1476                           	opt stack 0
  1477  000071                     string_utils_copy@maxlen:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x11
  1481  000071                     	ds	1
  1482  000072                     ?_string_utils_strncmp:
  1483                           	opt stack 0
  1484  000072                     ?_string_utils_strlen:
  1485                           	opt stack 0
  1486  000072                     serialport_startup@result:
  1487                           	opt stack 0
  1488  000072                     string_utils_split@delimeter:
  1489                           	opt stack 0
  1490  000072                     rd_buffer_cnt@sz:
  1491                           	opt stack 0
  1492  000072                     rd_buffer_get@last:
  1493                           	opt stack 0
  1494  000072                     string_utils_strlen@pstr:
  1495                           	opt stack 0
  1496  000072                     string_utils_strncmp@pstr1:
  1497                           	opt stack 0
  1498  000072                     ___awdiv@quotient:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x12
  1502  000072                     	ds	1
  1503  000073                     startup@result:
  1504                           	opt stack 0
  1505  000073                     string_utils_copy@result:
  1506                           	opt stack 0
  1507  000073                     string_utils_split@i:
  1508                           	opt stack 0
  1509  000073                     string_utils_strchr@result:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x13
  1513  000073                     	ds	1
  1514  000074                     ??_string_utils_strlen:
  1515  000074                     ?_pd_add_value:
  1516                           	opt stack 0
  1517  000074                     rd_buffer_get@result:
  1518                           	opt stack 0
  1519  000074                     string_utils_strncmp@pstr2:
  1520                           	opt stack 0
  1521  000074                     _cla_add_value$953:
  1522                           	opt stack 0
  1523  000074                     pd_add_value@d:
  1524                           	opt stack 0
  1525                           
  1526                           ; 2 bytes @ 0x14
  1527  000074                     	ds	1
  1528  000075                     rd_buffer_get@first:
  1529                           	opt stack 0
  1530  000075                     string_utils_split@chains:
  1531                           	opt stack 0
  1532  000075                     string_utils_strchr@pos:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x15
  1536  000075                     	ds	1
  1537  000076                     rd_buffer_put@mes_rec:
  1538                           	opt stack 0
  1539  000076                     string_utils_strlen@i:
  1540                           	opt stack 0
  1541  000076                     string_utils_strncmp@len:
  1542                           	opt stack 0
  1543  000076                     _cla_add_value$954:
  1544                           	opt stack 0
  1545  000076                     pd_add_value@val:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x16
  1549  000076                     	ds	1
  1550  000077                     ?_rd_buffer_readline:
  1551                           	opt stack 0
  1552  000077                     ?_rd_buffer_getn:
  1553                           	opt stack 0
  1554  000077                     string_utils_split@prev:
  1555                           	opt stack 0
  1556  000077                     rd_buffer_readline@pbuffer:
  1557                           	opt stack 0
  1558  000077                     rd_buffer_getn@pbuffer:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x17
  1562  000077                     	ds	1
  1563  000078                     ??_pd_add_value:
  1564  000078                     ?_string_utils_from_hex:
  1565                           	opt stack 0
  1566  000078                     _rd_buffer_put$462:
  1567                           	opt stack 0
  1568  000078                     string_utils_split@symb:
  1569                           	opt stack 0
  1570  000078                     string_utils_strncmp@case_sensitive:
  1571                           	opt stack 0
  1572  000078                     cla_add_value@d:
  1573                           	opt stack 0
  1574  000078                     string_utils_from_hex@pdata:
  1575                           	opt stack 0
  1576                           
  1577                           ; 2 bytes @ 0x18
  1578  000078                     	ds	1
  1579  000079                     ??_string_utils_strncmp:
  1580  000079                     rd_buffer_readline@pdata:
  1581                           	opt stack 0
  1582  000079                     rd_buffer_put@sz:
  1583                           	opt stack 0
  1584  000079                     rd_buffer_getn@prec:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x19
  1588  000079                     	ds	1
  1589  00007A                     string_utils_from_hex@phex_str:
  1590                           	opt stack 0
  1591                           
  1592                           ; 2 bytes @ 0x1A
  1593  00007A                     	ds	1
  1594  00007B                     rd_buffer_readline@psize:
  1595                           	opt stack 0
  1596  00007B                     string_utils_strncmp@result:
  1597                           	opt stack 0
  1598  00007B                     rd_buffer_put@ind:
  1599                           	opt stack 0
  1600  00007B                     rd_buffer_getn@rec_count:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x1B
  1604  00007B                     	ds	1
  1605  00007C                     ??_string_utils_from_hex:
  1606  00007C                     rd_buffer_readline@ch:
  1607                           	opt stack 0
  1608  00007C                     string_utils_strncmp@pos:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x1C
  1612  00007C                     	ds	1
  1613  00007D                     ?_serialport_write:
  1614                           	opt stack 0
  1615  00007D                     serialport_write@pstr:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x1D
  1619  00007D                     	ds	1
  1620  00007E                     string_utils_strncmp@symb1:
  1621                           	opt stack 0
  1622  00007E                     rd_buffer_getn@i:
  1623                           	opt stack 0
  1624  00007E                     _pd_add_value$1067:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x1E
  1628  00007E                     	ds	1
  1629  00007F                     string_utils_strncmp@symb2:
  1630                           	opt stack 0
  1631  00007F                     string_utils_from_hex@len:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x1F
  1635  00007F                     	ds	1
  1636  000080                     ?_on_parameter_found:
  1637                           	opt stack 0
  1638  000080                     ?_this_parse_command:
  1639                           	opt stack 0
  1640  000080                     on_parameter_found@cmd_id:
  1641                           	opt stack 0
  1642  000080                     this_parse_command@pbuf:
  1643                           	opt stack 0
  1644  000080                     _pd_add_value$1068:
  1645                           	opt stack 0
  1646                           
  1647                           ; 2 bytes @ 0x20
  1648  000080                     	ds	1
  1649  000081                     on_parameter_found@p_id:
  1650                           	opt stack 0
  1651  000081                     string_utils_from_hex@j:
  1652                           	opt stack 0
  1653                           
  1654                           ; 2 bytes @ 0x21
  1655  000081                     	ds	1
  1656  000082                     this_parse_command@len:
  1657                           	opt stack 0
  1658  000082                     _pd_add_value$1069:
  1659                           	opt stack 0
  1660  000082                     
  1661                           ; 3 bytes @ 0x22
  1662  000082                     	ds	1
  1663  000083                     string_utils_from_hex@i:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x23
  1667  000083                     	ds	1
  1668  000084                     this_parse_command@pname:
  1669                           	opt stack 0
  1670  000084                     _pd_add_value$1070:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0x24
  1674  000084                     	ds	1
  1675  000085                     ?_this_variable_load_from_text:
  1676                           	opt stack 0
  1677  000085                     this_variable_load_from_text@pval:
  1678                           	opt stack 0
  1679                           
  1680                           ; 3 bytes @ 0x25
  1681  000085                     	ds	1
  1682  000086                     this_parse_command@is_equal:
  1683                           	opt stack 0
  1684  000086                     on_parameter_found@operation:
  1685                           	opt stack 0
  1686  000086                     _pd_add_value$1071:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x26
  1690  000086                     	ds	1
  1691  000087                     this_parse_command@found:
  1692                           	opt stack 0
  1693                           
  1694                           ; 1 bytes @ 0x27
  1695  000087                     	ds	1
  1696  000088                     this_variable_load_from_text@var_type:
  1697                           	opt stack 0
  1698  000088                     this_parse_command@i:
  1699                           	opt stack 0
  1700  000088                     pd_add_value@tmp:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x28
  1704  000088                     	ds	1
  1705  000089                     this_variable_load_from_text@len:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x29
  1709  000089                     	ds	1
  1710  00008A                     pd_add_value@i:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x2A
  1714  00008A                     	ds	1
  1715  00008B                     ?_this_parse_parameter:
  1716                           	opt stack 0
  1717  00008B                     this_parse_parameter@pstr:
  1718                           	opt stack 0
  1719  00008B                     detection_task@zero:
  1720                           	opt stack 0
  1721                           
  1722                           ; 3 bytes @ 0x2B
  1723  00008B                     	ds	2
  1724  00008D                     ??_this_parse_parameter:
  1725                           
  1726                           ; 0 bytes @ 0x2D
  1727  00008D                     	ds	2
  1728  00008F                     this_parse_parameter@is_equal:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x2F
  1732  00008F                     	ds	1
  1733  000090                     this_parse_parameter@result:
  1734                           	opt stack 0
  1735                           
  1736                           ; 1 bytes @ 0x30
  1737  000090                     	ds	1
  1738  000091                     this_parse_parameter@pvar:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x31
  1742  000091                     	ds	2
  1743  000093                     this_parse_parameter@str_len:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0x33
  1747  000093                     	ds	2
  1748  000095                     this_parse_parameter@pval:
  1749                           	opt stack 0
  1750                           
  1751                           ; 3 bytes @ 0x35
  1752  000095                     	ds	3
  1753  000098                     this_parse_parameter@i:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x38
  1757  000098                     	ds	2
  1758  00009A                     this_parse_parameter@var_len:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x3A
  1762  00009A                     	ds	2
  1763  00009C                     ?_syntax_string:
  1764                           	opt stack 0
  1765  00009C                     syntax_string@pstr:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x3C
  1769  00009C                     	ds	2
  1770  00009E                     syntax_string@case_sensitive:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x3E
  1774  00009E                     	ds	1
  1775  00009F                     ??_syntax_string:
  1776                           
  1777                           ; 0 bytes @ 0x3F
  1778  00009F                     	ds	1
  1779  0000A0                     syntax_string@str_len:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x40
  1783  0000A0                     	ds	2
  1784  0000A2                     syntax_string@result:
  1785                           	opt stack 0
  1786                           
  1787                           ; 2 bytes @ 0x42
  1788  0000A2                     	ds	2
  1789  0000A4                     syntax_string@pos:
  1790                           	opt stack 0
  1791                           
  1792                           ; 2 bytes @ 0x44
  1793  0000A4                     	ds	2
  1794  0000A6                     syntax_string@chains:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x46
  1798  0000A6                     	ds	2
  1799  0000A8                     syntax_string@pchain:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x48
  1803  0000A8                     	ds	2
  1804  0000AA                     serialport_task@size:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x4A
  1808  0000AA                     	ds	2
  1809                           tosu	equ	0xFFF
  1810                           tosh	equ	0xFFE
  1811                           tosl	equ	0xFFD
  1812                           pclath	equ	0xFFA
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           indf0	equ	0xFEF
  1821                           postinc0	equ	0xFEE
  1822                           fsr0h	equ	0xFEA
  1823                           fsr0l	equ	0xFE9
  1824                           wreg	equ	0xFE8
  1825                           indf1	equ	0xFE7
  1826                           postinc1	equ	0xFE6
  1827                           postdec1	equ	0xFE5
  1828                           fsr1h	equ	0xFE2
  1829                           fsr1l	equ	0xFE1
  1830                           indf2	equ	0xFDF
  1831                           postinc2	equ	0xFDE
  1832                           postdec2	equ	0xFDD
  1833                           fsr2h	equ	0xFDA
  1834                           fsr2l	equ	0xFD9
  1835                           status	equ	0xFD8
  1836                           
  1837                           	psect	cstackCOMRAM
  1838  000001                     __pcstackCOMRAM:
  1839                           	opt stack 0
  1840  000001                     ?_syntax_get_text:
  1841                           	opt stack 0
  1842  000001                     
  1843                           ; 1 bytes @ 0x0
  1844  000001                     	ds	17
  1845  000012                     ??_isr_high:
  1846                           
  1847                           ; 0 bytes @ 0x11
  1848  000012                     	ds	8
  1849  00001A                     ?i2_rd_buffer_put:
  1850                           	opt stack 0
  1851  00001A                     ?_adc_read:
  1852                           	opt stack 0
  1853  00001A                     _uart_error$257:
  1854                           	opt stack 0
  1855  00001A                     i2rd_buffer_put@pbuffer:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x19
  1859  00001A                     	ds	1
  1860  00001B                     uart_getc@pbyte:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x1A
  1864  00001B                     	ds	1
  1865  00001C                     ??_adc_read:
  1866  00001C                     uart_getc@result:
  1867                           	opt stack 0
  1868  00001C                     i2rd_buffer_put@prec:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1B
  1872  00001C                     	ds	1
  1873  00001D                     adc_read@adc_number:
  1874                           	opt stack 0
  1875                           
  1876                           ; 1 bytes @ 0x1C
  1877  00001D                     	ds	1
  1878  00001E                     ??i2_rd_buffer_put:
  1879                           
  1880                           ; 0 bytes @ 0x1D
  1881  00001E                     	ds	6
  1882  000024                     i2rd_buffer_put@mes_rec:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0x23
  1886  000024                     	ds	2
  1887  000026                     i2_rd_buffer_put$462:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x25
  1891  000026                     	ds	1
  1892  000027                     i2rd_buffer_put@sz:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x26
  1896  000027                     	ds	2
  1897  000029                     i2rd_buffer_put@ind:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x28
  1901  000029                     	ds	2
  1902  00002B                     tosu	equ	0xFFF
  1903                           tosh	equ	0xFFE
  1904                           tosl	equ	0xFFD
  1905                           pclath	equ	0xFFA
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           prodh	equ	0xFF4
  1911                           prodl	equ	0xFF3
  1912                           intcon	equ	0xFF2
  1913                           indf0	equ	0xFEF
  1914                           postinc0	equ	0xFEE
  1915                           fsr0h	equ	0xFEA
  1916                           fsr0l	equ	0xFE9
  1917                           wreg	equ	0xFE8
  1918                           indf1	equ	0xFE7
  1919                           postinc1	equ	0xFE6
  1920                           postdec1	equ	0xFE5
  1921                           fsr1h	equ	0xFE2
  1922                           fsr1l	equ	0xFE1
  1923                           indf2	equ	0xFDF
  1924                           postinc2	equ	0xFDE
  1925                           postdec2	equ	0xFDD
  1926                           fsr2h	equ	0xFDA
  1927                           fsr2l	equ	0xFD9
  1928                           status	equ	0xFD8
  1929                           
  1930                           ; 0 bytes @ 0x2A
  1931 ;;
  1932 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1933 ;;
  1934 ;; *************** function _main *****************
  1935 ;; Defined at:
  1936 ;;		line 25 in file "src/main.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  i               1    3[BANK1 ] unsigned char 
  1941 ;;  event_priori    1    2[BANK1 ] char 
  1942 ;;  event_old       1    1[BANK1 ] char 
  1943 ;; Return value:  Size  Location     Type
  1944 ;;                  2  965[COMRAM] int 
  1945 ;; Registers used:
  1946 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1947 ;; Tracked objects:
  1948 ;;		On entry : 0/0
  1949 ;;		On exit  : 0/0
  1950 ;;		Unchanged: 0/0
  1951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1952 ;;      Params:         0       0       0       0       0       0       0
  1953 ;;      Locals:         0       0       3       0       0       0       0
  1954 ;;      Temps:          0       0       1       0       0       0       0
  1955 ;;      Totals:         0       0       4       0       0       0       0
  1956 ;;Total ram usage:        4 bytes
  1957 ;; Hardware stack levels required when called:   12
  1958 ;; This function calls:
  1959 ;;		_delay_ms
  1960 ;;		_startup
  1961 ;;		_detection_task
  1962 ;;		_serialport_task
  1963 ;; This function is called by:
  1964 ;;		Startup code after reset
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text0
  1969  000EB8                     __ptext0:
  1970                           	opt stack 0
  1971  000EB8                     _main:
  1972                           	opt stack 19
  1973                           
  1974                           ;main.c: 26: while(startup() != RESULT_SUCCESS)
  1975  000EB8  D007               	goto	l6210
  1976  000EBA                     l6208:
  1977                           
  1978                           ; BSR set to: 1
  1979                           ;main.c: 27: {
  1980                           ;main.c: 28: delay_ms(1000);
  1981  000EBA  0E03               	movlw	3
  1982  000EBC  0100               	movlb	0	; () banked
  1983  000EBE  6F6D               	movwf	(?_delay_ms+1)& (0+255),b
  1984  000EC0  0EE8               	movlw	232
  1985  000EC2  6F6C               	movwf	?_delay_ms& (0+255),b
  1986  000EC4  EC6E  F00D         	call	_delay_ms	;wreg free
  1987  000EC8                     l6210:
  1988  000EC8  ECD6  F00B         	call	_startup	;wreg free
  1989  000ECC  0101               	movlb	1	; () banked
  1990  000ECE  6FD0               	movwf	??_main& (0+255),b
  1991  000ED0  05D0               	decf	??_main& (0+255),w,b
  1992  000ED2  E1F3               	bnz	l6208
  1993                           
  1994                           ; BSR set to: 1
  1995                           
  1996                           ;main.c: 29: };
  1997                           ;main.c: 30: do{INTCONbits.GIEH=(1); INTCONbits.GIEL=(1);}while(0);;
  1998  000ED4  8EF2               	bsf	intcon,7,c	;volatile
  1999  000ED6  8CF2               	bsf	intcon,6,c	;volatile
  2000  000ED8                     l972:
  2001  000ED8  0101               	movlb	1	; () banked
  2002  000EDA  69D1               	setf	main@event_old& (0+255),b
  2003  000EDC  69D2               	setf	main@event_priority& (0+255),b
  2004  000EDE  6BD3               	clrf	main@i& (0+255),b
  2005  000EE0                     l6216:
  2006                           
  2007                           ; BSR set to: 1
  2008  000EE0  51D3               	movf	main@i& (0+255),w,b
  2009  000EE2  0F33               	addlw	low _pool	;volatile
  2010  000EE4  6ED9               	movwf	fsr2l,c
  2011  000EE6  6ADA               	clrf	fsr2h,c
  2012  000EE8  0E01               	movlw	1
  2013  000EEA  62DF               	cpfseq	indf2,c
  2014  000EEC  D011               	goto	l6228
  2015                           
  2016                           ; BSR set to: 1
  2017  000EEE  51D3               	movf	main@i& (0+255),w,b
  2018  000EF0  0F2B               	addlw	low _event_miss	;volatile
  2019  000EF2  6ED9               	movwf	fsr2l,c
  2020  000EF4  6ADA               	clrf	fsr2h,c
  2021  000EF6  50DF               	movf	indf2,w,c
  2022  000EF8  E103               	bnz	l6222
  2023                           
  2024                           ; BSR set to: 1
  2025  000EFA  C1D3  F1D1         	movff	main@i,main@event_old
  2026  000EFE  D005               	goto	l6224
  2027  000F00                     l6222:
  2028                           
  2029                           ; BSR set to: 1
  2030  000F00  51D3               	movf	main@i& (0+255),w,b
  2031  000F02  0F2B               	addlw	low _event_miss	;volatile
  2032  000F04  6ED9               	movwf	fsr2l,c
  2033  000F06  6ADA               	clrf	fsr2h,c
  2034  000F08  06DF               	decf	indf2,f,c
  2035  000F0A                     l6224:
  2036                           
  2037                           ; BSR set to: 1
  2038  000F0A  BFD2               	btfsc	main@event_priority& (0+255),7,b
  2039                           
  2040                           ; BSR set to: 1
  2041  000F0C  C1D3  F1D2         	movff	main@i,main@event_priority
  2042  000F10                     l6228:
  2043                           
  2044                           ; BSR set to: 1
  2045  000F10  2BD3               	incf	main@i& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 1
  2048  000F12  0E07               	movlw	7
  2049  000F14  65D3               	cpfsgt	main@i& (0+255),b
  2050  000F16  D7E4               	goto	l6216
  2051                           
  2052                           ; BSR set to: 1
  2053  000F18  BFD1               	btfsc	main@event_old& (0+255),7,b
  2054  000F1A  D011               	goto	l979
  2055                           
  2056                           ; BSR set to: 1
  2057  000F1C  51D1               	movf	main@event_old& (0+255),w,b
  2058  000F1E  D827               	call	PL60	;call to abstracted procedure
  2059  000F20  D801               	call	u6778
  2060  000F22  D00A               	goto	u6779
  2061  000F24                     u6778:
  2062  000F24  0005               	push	
  2063  000F26  6EFA               	movwf	pclath,c
  2064  000F28  50DE               	movf	postinc2,w,c
  2065  000F2A  6EFD               	movwf	tosl,c
  2066  000F2C  50DE               	movf	postinc2,w,c
  2067  000F2E  6EFE               	movwf	tosh,c
  2068  000F30  50F8               	movf	tblptru,w,c
  2069  000F32  6EFF               	movwf	tosu,c
  2070  000F34  50FA               	movf	pclath,w,c
  2071  000F36  0012               	return		;indir
  2072  000F38                     u6779:
  2073  000F38  0101               	movlb	1	; () banked
  2074  000F3A  51D1               	movf	main@event_old& (0+255),w,b
  2075  000F3C  D012               	goto	L1
  2076  000F3E                     l979:
  2077                           
  2078                           ; BSR set to: 1
  2079  000F3E  BFD2               	btfsc	main@event_priority& (0+255),7,b
  2080  000F40  D014               	goto	l982
  2081                           
  2082                           ; BSR set to: 1
  2083  000F42  51D2               	movf	main@event_priority& (0+255),w,b
  2084  000F44  D814               	call	PL60	;call to abstracted procedure
  2085  000F46  D801               	call	u6798
  2086  000F48  D00A               	goto	u6799
  2087  000F4A                     u6798:
  2088  000F4A  0005               	push	
  2089  000F4C  6EFA               	movwf	pclath,c
  2090  000F4E  50DE               	movf	postinc2,w,c
  2091  000F50  6EFD               	movwf	tosl,c
  2092  000F52  50DE               	movf	postinc2,w,c
  2093  000F54  6EFE               	movwf	tosh,c
  2094  000F56  50F8               	movf	tblptru,w,c
  2095  000F58  6EFF               	movwf	tosu,c
  2096  000F5A  50FA               	movf	pclath,w,c
  2097  000F5C  0012               	return		;indir
  2098  000F5E                     u6799:
  2099  000F5E  0101               	movlb	1	; () banked
  2100  000F60  51D2               	movf	main@event_priority& (0+255),w,b
  2101  000F62                     L1:
  2102  000F62  0F33               	addlw	low _pool	;volatile
  2103  000F64  6ED9               	movwf	fsr2l,c
  2104  000F66  6ADA               	clrf	fsr2h,c
  2105  000F68  6ADF               	clrf	indf2,c
  2106  000F6A                     l982:
  2107                           
  2108                           ; BSR set to: 1
  2109  000F6A  0004               	clrwdt		;# 
  2110  000F6C  D7B5               	goto	l972
  2111  000F6E                     PL60:
  2112                           	opt stack 19
  2113  000F6E  0D02               	mullw	2
  2114  000F70  50F3               	movf	prodl,w,c
  2115  000F72  0100               	movlb	0	; () banked
  2116  000F74  0FAC               	addlw	low _events	;volatile
  2117  000F76  6ED9               	movwf	fsr2l,c
  2118  000F78  6ADA               	clrf	fsr2h,c
  2119  000F7A  0012               	return	
  2120  000F7C                     __end_ofPL60:
  2121                           	opt stack 0
  2122                           tosu	equ	0xFFF
  2123                           tosh	equ	0xFFE
  2124                           tosl	equ	0xFFD
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           indf0	equ	0xFEF
  2134                           postinc0	equ	0xFEE
  2135                           fsr0h	equ	0xFEA
  2136                           fsr0l	equ	0xFE9
  2137                           wreg	equ	0xFE8
  2138                           indf1	equ	0xFE7
  2139                           postinc1	equ	0xFE6
  2140                           postdec1	equ	0xFE5
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _delay_ms *****************
  2151 ;; Defined at:
  2152 ;;		line 28 in file "src/drivers/delay.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  delay           2   12[BANK0 ] unsigned int 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;		None               void
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : F/0
  2163 ;;		On exit  : F/0
  2164 ;;		Unchanged: FFFFFFF0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2166 ;;      Params:         0       2       0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0
  2169 ;;      Totals:         0       2       0       0       0       0       0
  2170 ;;Total ram usage:        2 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    5
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_main
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text1
  2181  001ADC                     __ptext1:
  2182                           	opt stack 0
  2183  001ADC                     __end_of_main:
  2184                           	opt stack 0
  2185  001ADC                     _delay_ms:
  2186                           	opt stack 25
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;delay.c: 29: this_delay_timer_ms = delay;
  2190  001ADC  C06C  F0F2         	movff	delay_ms@delay,_this_delay_timer_ms	;volatile
  2191  001AE0  C06D  F0F3         	movff	delay_ms@delay+1,_this_delay_timer_ms+1	;volatile
  2192  001AE4                     l5454:
  2193                           
  2194                           ; BSR set to: 0
  2195  001AE4  51F3               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  2196  001AE6  11F2               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  2197  001AE8  B4D8               	btfsc	status,2,c
  2198  001AEA  0012               	return	
  2199  001AEC  D7FB               	goto	l5454
  2200  001AEE                     __end_of_delay_ms:
  2201                           	opt stack 0
  2202                           tosu	equ	0xFFF
  2203                           tosh	equ	0xFFE
  2204                           tosl	equ	0xFFD
  2205                           pclath	equ	0xFFA
  2206                           tblptru	equ	0xFF8
  2207                           tblptrh	equ	0xFF7
  2208                           tblptrl	equ	0xFF6
  2209                           tablat	equ	0xFF5
  2210                           prodh	equ	0xFF4
  2211                           prodl	equ	0xFF3
  2212                           intcon	equ	0xFF2
  2213                           indf0	equ	0xFEF
  2214                           postinc0	equ	0xFEE
  2215                           fsr0h	equ	0xFEA
  2216                           fsr0l	equ	0xFE9
  2217                           wreg	equ	0xFE8
  2218                           indf1	equ	0xFE7
  2219                           postinc1	equ	0xFE6
  2220                           postdec1	equ	0xFE5
  2221                           fsr1h	equ	0xFE2
  2222                           fsr1l	equ	0xFE1
  2223                           indf2	equ	0xFDF
  2224                           postinc2	equ	0xFDE
  2225                           postdec2	equ	0xFDD
  2226                           fsr2h	equ	0xFDA
  2227                           fsr2l	equ	0xFD9
  2228                           status	equ	0xFD8
  2229                           
  2230 ;; *************** function _detection_task *****************
  2231 ;; Defined at:
  2232 ;;		line 81 in file "src/modules/detection.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  zero            3   43[BANK0 ] m
  2237 ;; Return value:  Size  Location     Type
  2238 ;;		None               void
  2239 ;; Registers used:
  2240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : F/0
  2243 ;;		On exit  : F/0
  2244 ;;		Unchanged: FFFFFFF0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2246 ;;      Params:         0       0       0       0       0       0       0
  2247 ;;      Locals:         0       3       0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0       0       0
  2249 ;;      Totals:         0       3       0       0       0       0       0
  2250 ;;Total ram usage:        3 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    7
  2253 ;; This function calls:
  2254 ;;		_pd_add_value
  2255 ;;		_cla_add_value
  2256 ;; This function is called by:
  2257 ;;		_startup
  2258 ;;		_main
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text2
  2263  0014AA                     __ptext2:
  2264                           	opt stack 0
  2265  0014AA                     _detection_task:
  2266                           	opt stack 23
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;detection.c: 82: static CHAR alarm_cla;
  2270                           ;detection.c: 83: static CHAR alarm_wav;
  2271                           ;detection.c: 84: INT24 zero;
  2272                           ;detection.c: 86: alarm_wav = (CHAR)pd_add_value(&pd_detector, (INT24)g_analog0);
  2273                           
  2274                           ; BSR set to: 0
  2275  0014AA  0E01               	movlw	high _pd_detector	;volatile
  2276  0014AC  0100               	movlb	0	; () banked
  2277  0014AE  6F75               	movwf	(?_pd_add_value+1)& (0+255),b
  2278  0014B0  0E6B               	movlw	low _pd_detector	;volatile
  2279  0014B2  6F74               	movwf	?_pd_add_value& (0+255),b
  2280  0014B4  C0BE  F076         	movff	_g_analog0,?_pd_add_value+2	;volatile
  2281  0014B8  C0BF  F077         	movff	_g_analog0+1,?_pd_add_value+3	;volatile
  2282  0014BC  EC7A  F000         	call	_pd_add_value	;wreg free
  2283  0014C0  6FC8               	movwf	detection_task@alarm_wav& (0+255),b
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;detection.c: 87: zero = pd_detector.ref_v;
  2287  0014C2  C1BF  F08B         	movff	_pd_detector+84,detection_task@zero	;volatile
  2288  0014C6  0100               	movlb	0	; () banked
  2289  0014C8  C1C0  F08C         	movff	_pd_detector+85,detection_task@zero+1	;volatile
  2290  0014CC  6B8D               	clrf	(detection_task@zero+2)& (0+255),b
  2291  0014CE  BF8C               	btfsc	(detection_task@zero+1)& (0+255),7,b
  2292  0014D0  078D               	decf	(detection_task@zero+2)& (0+255),f,b
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;detection.c: 88: alarm_cla = (CHAR)cla_add_value(&cla_detector, (INT24)g_analog0, zero);
  2296  0014D2  C0BE  F06C         	movff	_g_analog0,?_cla_add_value	;volatile
  2297  0014D6  C0BF  F06D         	movff	_g_analog0+1,?_cla_add_value+1	;volatile
  2298  0014DA  C08B  F06E         	movff	detection_task@zero,?_cla_add_value+2
  2299  0014DE  C08C  F06F         	movff	detection_task@zero+1,?_cla_add_value+3
  2300  0014E2  0EC9               	movlw	_cla_detector& (0+255)	;volatile
  2301  0014E4  EC05  F003         	call	_cla_add_value
  2302  0014E8  6FC7               	movwf	detection_task@alarm_cla& (0+255),b
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;detection.c: 89: this_warning = cla_detector.status.over_trig;
  2306  0014EA  0E00               	movlw	0
  2307  0014EC  B5D7               	btfsc	(_cla_detector+14)& (0+255),2,b	;volatile
  2308  0014EE  0E01               	movlw	1
  2309  0014F0  6FC6               	movwf	_this_warning& (0+255),b	;volatile
  2310                           
  2311                           ;detection.c: 91: switch (g_CONFIG.det_mode)
  2312  0014F2  D008               	goto	l6146
  2313  0014F4                     l827:
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;detection.c: 97: this_alarm = FALSE;
  2317  0014F4  6BC3               	clrf	_this_alarm& (0+255),b	;volatile
  2318                           
  2319                           ;detection.c: 98: break;
  2320  0014F6  D00D               	goto	l6148
  2321  0014F8                     l829:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;detection.c: 102: this_alarm = alarm_cla;
  2325  0014F8  C0C7  F0C3         	movff	detection_task@alarm_cla,_this_alarm	;volatile
  2326                           
  2327                           ;detection.c: 103: break;
  2328  0014FC  D00A               	goto	l6148
  2329  0014FE                     l830:
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;detection.c: 110: this_alarm= alarm_wav;
  2333  0014FE  C0C8  F0C3         	movff	detection_task@alarm_wav,_this_alarm	;volatile
  2334                           
  2335                           ;detection.c: 111: break;
  2336  001502  D007               	goto	l6148
  2337  001504                     l6146:
  2338                           
  2339                           ; BSR set to: 0
  2340  001504  51E5               	movf	(_g_CONFIG+7)& (0+255),w,b	;volatile
  2341                           
  2342                           ; Switch size 1, requested type "space"
  2343                           ; Number of cases is 3, Range of values is 0 to 2
  2344                           ; switch strategies available:
  2345                           ; Name         Instructions Cycles
  2346                           ; simple_byte           10     6 (average)
  2347                           ;	Chosen strategy is simple_byte
  2348  001506  E0F6               	bz	l827
  2349  001508  0A01               	xorlw	1	; case 1
  2350  00150A  E0F6               	bz	l829
  2351  00150C  0A03               	xorlw	3	; case 2
  2352  00150E  E0F7               	bz	l830
  2353  001510  D7F1               	goto	l827
  2354  001512                     l6148:
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;detection.c: 119: if(this_alarm) STATUS |= (1<<0);
  2358  001512  51C3               	movf	_this_alarm& (0+255),w,b	;volatile
  2359  001514  A4D8               	btfss	status,2,c
  2360                           
  2361                           ; BSR set to: 0
  2362  001516  80D8               	bsf	status,0,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;detection.c: 120: if(this_warning) STATUS |= (1<<1);
  2366  001518  51C6               	movf	_this_warning& (0+255),w,b	;volatile
  2367  00151A  A4D8               	btfss	status,2,c
  2368                           
  2369                           ; BSR set to: 0
  2370  00151C  82D8               	bsf	status,1,c	;volatile
  2371                           
  2372                           ; BSR set to: 0
  2373  00151E  0012               	return	
  2374  001520                     __end_of_detection_task:
  2375                           	opt stack 0
  2376                           tosu	equ	0xFFF
  2377                           tosh	equ	0xFFE
  2378                           tosl	equ	0xFFD
  2379                           pclath	equ	0xFFA
  2380                           tblptru	equ	0xFF8
  2381                           tblptrh	equ	0xFF7
  2382                           tblptrl	equ	0xFF6
  2383                           tablat	equ	0xFF5
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           indf0	equ	0xFEF
  2388                           postinc0	equ	0xFEE
  2389                           fsr0h	equ	0xFEA
  2390                           fsr0l	equ	0xFE9
  2391                           wreg	equ	0xFE8
  2392                           indf1	equ	0xFE7
  2393                           postinc1	equ	0xFE6
  2394                           postdec1	equ	0xFE5
  2395                           fsr1h	equ	0xFE2
  2396                           fsr1l	equ	0xFE1
  2397                           indf2	equ	0xFDF
  2398                           postinc2	equ	0xFDE
  2399                           postdec2	equ	0xFDD
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _serialport_task *****************
  2405 ;; Defined at:
  2406 ;;		line 35 in file "src/modules/serialport.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;  size            2   74[BANK0 ] int 
  2411 ;; Return value:  Size  Location     Type
  2412 ;;		None               void
  2413 ;; Registers used:
  2414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : F/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: FFFFFFF0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2420 ;;      Params:         0       0       0       0       0       0       0
  2421 ;;      Locals:         0       2       0       0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0
  2423 ;;      Totals:         0       2       0       0       0       0       0
  2424 ;;Total ram usage:        2 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:   11
  2427 ;; This function calls:
  2428 ;;		_rd_buffer_readline
  2429 ;;		_syntax_string
  2430 ;;		_rd_buffer_cnt
  2431 ;;		_rd_buffer_getn
  2432 ;;		_uart_puts
  2433 ;; This function is called by:
  2434 ;;		_startup
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text3
  2440  00129C                     __ptext3:
  2441                           	opt stack 0
  2442  00129C                     _serialport_task:
  2443                           	opt stack 19
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;serialport.c: 36: SIZE size;
  2447                           ;serialport.c: 37: if (rd_buffer_readline(&g_rx_buffer, &serialport_buffer, &size)) {
  2448                           
  2449                           ; BSR set to: 0
  2450  00129C  0E02               	movlw	high _g_rx_buffer
  2451  00129E  0100               	movlb	0	; () banked
  2452  0012A0  6F78               	movwf	(?_rd_buffer_readline+1)& (0+255),b
  2453  0012A2  0E00               	movlw	low _g_rx_buffer
  2454  0012A4  6F77               	movwf	?_rd_buffer_readline& (0+255),b
  2455  0012A6  0E02               	movlw	high _serialport_buffer
  2456  0012A8  6F7A               	movwf	(?_rd_buffer_readline+3)& (0+255),b
  2457  0012AA  0E6B               	movlw	low _serialport_buffer
  2458  0012AC  6F79               	movwf	(?_rd_buffer_readline+2)& (0+255),b
  2459  0012AE  0EAA               	movlw	low serialport_task@size
  2460  0012B0  6F7B               	movwf	(?_rd_buffer_readline+4)& (0+255),b
  2461  0012B2  EC1C  F00C         	call	_rd_buffer_readline	;wreg free
  2462  0012B6  0900               	iorlw	0
  2463  0012B8  E009               	bz	l5640
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;serialport.c: 38: syntax_string(serialport_buffer, FALSE);
  2467  0012BA  0E02               	movlw	high _serialport_buffer
  2468  0012BC  0100               	movlb	0	; () banked
  2469  0012BE  6F9D               	movwf	(?_syntax_string+1)& (0+255),b
  2470  0012C0  0E6B               	movlw	low _serialport_buffer
  2471  0012C2  6F9C               	movwf	?_syntax_string& (0+255),b
  2472  0012C4  0E00               	movlw	0
  2473  0012C6  6B9E               	clrf	(?_syntax_string+2)& (0+255),b
  2474  0012C8  ECF5  F004         	call	_syntax_string	;wreg free
  2475  0012CC                     l5640:
  2476                           
  2477                           ;serialport.c: 39: }
  2478                           ;serialport.c: 40: size = rd_buffer_cnt(&g_tx_buffer);
  2479  0012CC  0E01               	movlw	high _g_tx_buffer
  2480  0012CE  0100               	movlb	0	; () banked
  2481  0012D0  6F6D               	movwf	(?_rd_buffer_cnt+1)& (0+255),b
  2482  0012D2  0E00               	movlw	low _g_tx_buffer
  2483  0012D4  6F6C               	movwf	?_rd_buffer_cnt& (0+255),b
  2484  0012D6  EC88  F00B         	call	_rd_buffer_cnt	;wreg free
  2485  0012DA  C06C  F0AA         	movff	?_rd_buffer_cnt,serialport_task@size
  2486  0012DE  C06D  F0AB         	movff	?_rd_buffer_cnt+1,serialport_task@size+1
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;serialport.c: 41: if (size > 0) {
  2490  0012E2  51AB               	movf	(serialport_task@size+1)& (0+255),w,b
  2491  0012E4  0A80               	xorlw	128
  2492  0012E6  0F80               	addlw	-128
  2493  0012E8  0E01               	movlw	1
  2494  0012EA  B4D8               	btfsc	status,2,c
  2495  0012EC  5DAA               	subwf	serialport_task@size& (0+255),w,b
  2496  0012EE  A0D8               	btfss	status,0,c
  2497  0012F0  0012               	return	
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;serialport.c: 42: rd_buffer_getn(&g_tx_buffer, &serialport_buffer, size);
  2501  0012F2  0E01               	movlw	high _g_tx_buffer
  2502  0012F4  0100               	movlb	0	; () banked
  2503  0012F6  6F78               	movwf	(?_rd_buffer_getn+1)& (0+255),b
  2504  0012F8  0E00               	movlw	low _g_tx_buffer
  2505  0012FA  6F77               	movwf	?_rd_buffer_getn& (0+255),b
  2506  0012FC  0E02               	movlw	high _serialport_buffer
  2507  0012FE  6F7A               	movwf	(?_rd_buffer_getn+3)& (0+255),b
  2508  001300  0E6B               	movlw	low _serialport_buffer
  2509  001302  6F79               	movwf	(?_rd_buffer_getn+2)& (0+255),b
  2510  001304  C0AA  F07B         	movff	serialport_task@size,?_rd_buffer_getn+4
  2511  001308  C0AB  F07C         	movff	serialport_task@size+1,?_rd_buffer_getn+5
  2512  00130C  EC7C  F00C         	call	_rd_buffer_getn	;wreg free
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;serialport.c: 43: uart_puts(serialport_buffer, size);
  2516  001310  0E02               	movlw	high _serialport_buffer
  2517  001312  0100               	movlb	0	; () banked
  2518  001314  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  2519  001316  0E6B               	movlw	low _serialport_buffer
  2520  001318  6F6D               	movwf	?_uart_puts& (0+255),b
  2521  00131A  C0AA  F06F         	movff	serialport_task@size,?_uart_puts+2
  2522  00131E  C0AB  F070         	movff	serialport_task@size+1,?_uart_puts+3
  2523  001322  EF3E  F00B         	goto	l5480	;wreg free
  2524  001326                     __end_of_serialport_task:
  2525                           	opt stack 0
  2526                           tosu	equ	0xFFF
  2527                           tosh	equ	0xFFE
  2528                           tosl	equ	0xFFD
  2529                           pclath	equ	0xFFA
  2530                           tblptru	equ	0xFF8
  2531                           tblptrh	equ	0xFF7
  2532                           tblptrl	equ	0xFF6
  2533                           tablat	equ	0xFF5
  2534                           prodh	equ	0xFF4
  2535                           prodl	equ	0xFF3
  2536                           intcon	equ	0xFF2
  2537                           indf0	equ	0xFEF
  2538                           postinc0	equ	0xFEE
  2539                           fsr0h	equ	0xFEA
  2540                           fsr0l	equ	0xFE9
  2541                           wreg	equ	0xFE8
  2542                           indf1	equ	0xFE7
  2543                           postinc1	equ	0xFE6
  2544                           postdec1	equ	0xFE5
  2545                           fsr1h	equ	0xFE2
  2546                           fsr1l	equ	0xFE1
  2547                           indf2	equ	0xFDF
  2548                           postinc2	equ	0xFDE
  2549                           postdec2	equ	0xFDD
  2550                           fsr2h	equ	0xFDA
  2551                           fsr2l	equ	0xFD9
  2552                           status	equ	0xFD8
  2553                           
  2554 ;; *************** function _rd_buffer_readline *****************
  2555 ;; Defined at:
  2556 ;;		line 39 in file "src/modules/rd_buffer.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  pbuffer         2   23[BANK0 ] PTR struct .
  2559 ;;		 -> g_rx_buffer(107), 
  2560 ;;  pdata           2   25[BANK0 ] PTR unsigned char 
  2561 ;;		 -> serialport_buffer(100), 
  2562 ;;  psize           1   27[BANK0 ] PTR int 
  2563 ;;		 -> serialport_task@size(2), 
  2564 ;; Auto vars:     Size  Location     Type
  2565 ;;  ch              1   28[BANK0 ] unsigned char 
  2566 ;; Return value:  Size  Location     Type
  2567 ;;                  1    wreg      unsigned char 
  2568 ;; Registers used:
  2569 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2570 ;; Tracked objects:
  2571 ;;		On entry : F/0
  2572 ;;		On exit  : F/0
  2573 ;;		Unchanged: FFFFFFF0/0
  2574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2575 ;;      Params:         0       5       0       0       0       0       0
  2576 ;;      Locals:         0       1       0       0       0       0       0
  2577 ;;      Temps:          0       0       0       0       0       0       0
  2578 ;;      Totals:         0       6       0       0       0       0       0
  2579 ;;Total ram usage:        6 bytes
  2580 ;; Hardware stack levels used:    1
  2581 ;; Hardware stack levels required when called:    6
  2582 ;; This function calls:
  2583 ;;		_rd_buffer_get
  2584 ;; This function is called by:
  2585 ;;		_serialport_task
  2586 ;; This function uses a non-reentrant model
  2587 ;;
  2588                           
  2589                           	psect	text4
  2590  001838                     __ptext4:
  2591                           	opt stack 0
  2592  001838                     _rd_buffer_readline:
  2593                           	opt stack 23
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;rd_buffer.c: 40: if(this_contains_crlf && pdata && psize)
  2597  001838  51C5               	movf	_this_contains_crlf& (0+255),w,b
  2598  00183A  E01E               	bz	l5544
  2599                           
  2600                           ; BSR set to: 0
  2601  00183C  517A               	movf	(rd_buffer_readline@pdata+1)& (0+255),w,b
  2602  00183E  1179               	iorwf	rd_buffer_readline@pdata& (0+255),w,b
  2603  001840  E01B               	bz	l5544
  2604                           
  2605                           ; BSR set to: 0
  2606  001842  517B               	movf	rd_buffer_readline@psize& (0+255),w,b
  2607  001844  E10B               	bnz	l5538
  2608  001846  0C00               	retlw	0
  2609  001848                     l5532:
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;rd_buffer.c: 44: {
  2613                           ;rd_buffer.c: 45: *pdata = ch;
  2614  001848  C079  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2615  00184C  C07A  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2616  001850  C07C  FFDF         	movff	rd_buffer_readline@ch,indf2
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;rd_buffer.c: 46: pdata++;
  2620  001854  4B79               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2621  001856  2B7A               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;rd_buffer.c: 47: *psize++;
  2625  001858  0E02               	movlw	2
  2626  00185A  277B               	addwf	rd_buffer_readline@psize& (0+255),f,b
  2627  00185C                     l5538:
  2628                           
  2629                           ; BSR set to: 0
  2630  00185C  C077  F06C         	movff	rd_buffer_readline@pbuffer,?_rd_buffer_get
  2631  001860  C078  F06D         	movff	rd_buffer_readline@pbuffer+1,?_rd_buffer_get+1
  2632  001864  0E00               	movlw	high rd_buffer_readline@ch
  2633  001866  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2634  001868  0E7C               	movlw	low rd_buffer_readline@ch
  2635  00186A  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2636  00186C  EC1B  F008         	call	_rd_buffer_get	;wreg free
  2637  001870  0900               	iorlw	0
  2638  001872  E1EA               	bnz	l5532
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;rd_buffer.c: 48: }
  2642                           ;rd_buffer.c: 49: this_contains_crlf = FALSE;
  2643  001874  6BC5               	clrf	_this_contains_crlf& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;rd_buffer.c: 50: return TRUE;
  2647  001876  0C01               	retlw	1
  2648  001878                     l5544:
  2649                           
  2650                           ; BSR set to: 0
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;rd_buffer.c: 51: }
  2654                           ;rd_buffer.c: 52: return FALSE;
  2655  001878  0C00               	retlw	0
  2656  00187A                     __end_of_rd_buffer_readline:
  2657                           	opt stack 0
  2658                           tosu	equ	0xFFF
  2659                           tosh	equ	0xFFE
  2660                           tosl	equ	0xFFD
  2661                           pclath	equ	0xFFA
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           prodh	equ	0xFF4
  2667                           prodl	equ	0xFF3
  2668                           intcon	equ	0xFF2
  2669                           indf0	equ	0xFEF
  2670                           postinc0	equ	0xFEE
  2671                           fsr0h	equ	0xFEA
  2672                           fsr0l	equ	0xFE9
  2673                           wreg	equ	0xFE8
  2674                           indf1	equ	0xFE7
  2675                           postinc1	equ	0xFE6
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _rd_buffer_cnt *****************
  2687 ;; Defined at:
  2688 ;;		line 63 in file "src/modules/rd_buffer.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2691 ;;		 -> g_tx_buffer(107), 
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  sz              2   18[BANK0 ] int 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  2   12[BANK0 ] int 
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2698 ;; Tracked objects:
  2699 ;;		On entry : F/0
  2700 ;;		On exit  : F/0
  2701 ;;		Unchanged: FFFFFFF0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         0       2       0       0       0       0       0
  2704 ;;      Locals:         0       2       0       0       0       0       0
  2705 ;;      Temps:          0       4       0       0       0       0       0
  2706 ;;      Totals:         0       8       0       0       0       0       0
  2707 ;;Total ram usage:        8 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    5
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_serialport_task
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           	psect	text5
  2718  001710                     __ptext5:
  2719                           	opt stack 0
  2720  001710                     _rd_buffer_cnt:
  2721                           	opt stack 24
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;rd_buffer.c: 64: SIZE sz;
  2725                           ;rd_buffer.c: 65: sz = pbuffer->head.last - pbuffer->head.first;
  2726                           
  2727                           ; BSR set to: 0
  2728  001710  EE20 F002          	lfsr	2,2
  2729  001714  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2730  001716  26D9               	addwf	fsr2l,f,c
  2731  001718  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2732  00171A  22DA               	addwfc	fsr2h,f,c
  2733  00171C  CFDE F06E          	movff	postinc2,??_rd_buffer_cnt
  2734  001720  CFDD F06F          	movff	postdec2,??_rd_buffer_cnt+1
  2735  001724  C06C  FFD9         	movff	rd_buffer_cnt@pbuffer,fsr2l
  2736  001728  C06D  FFDA         	movff	rd_buffer_cnt@pbuffer+1,fsr2h
  2737  00172C  CFDE F070          	movff	postinc2,??_rd_buffer_cnt+2
  2738  001730  CFDD F071          	movff	postdec2,??_rd_buffer_cnt+3
  2739  001734  516E               	movf	??_rd_buffer_cnt& (0+255),w,b
  2740  001736  5D70               	subwf	(??_rd_buffer_cnt+2)& (0+255),w,b
  2741  001738  6F72               	movwf	rd_buffer_cnt@sz& (0+255),b
  2742  00173A  516F               	movf	(??_rd_buffer_cnt+1)& (0+255),w,b
  2743  00173C  5971               	subwfb	(??_rd_buffer_cnt+3)& (0+255),w,b
  2744  00173E  6F73               	movwf	(rd_buffer_cnt@sz+1)& (0+255),b
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;rd_buffer.c: 66: if(sz < 0) {
  2748  001740  AF73               	btfss	(rd_buffer_cnt@sz+1)& (0+255),7,b
  2749  001742  D00A               	goto	l5576
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;rd_buffer.c: 67: sz += pbuffer->head.size;
  2753  001744  EE20 F004          	lfsr	2,4
  2754  001748  516C               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  2755  00174A  26D9               	addwf	fsr2l,f,c
  2756  00174C  516D               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  2757  00174E  22DA               	addwfc	fsr2h,f,c
  2758  001750  50DE               	movf	postinc2,w,c
  2759  001752  2772               	addwf	rd_buffer_cnt@sz& (0+255),f,b
  2760  001754  50DD               	movf	postdec2,w,c
  2761  001756  2373               	addwfc	(rd_buffer_cnt@sz+1)& (0+255),f,b
  2762  001758                     l5576:
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;rd_buffer.c: 68: }
  2766                           ;rd_buffer.c: 69: return sz;
  2767  001758  C072  F06C         	movff	rd_buffer_cnt@sz,?_rd_buffer_cnt
  2768  00175C  C073  F06D         	movff	rd_buffer_cnt@sz+1,?_rd_buffer_cnt+1
  2769                           
  2770                           ; BSR set to: 0
  2771  001760  0012               	return	
  2772  001762                     __end_of_rd_buffer_cnt:
  2773                           	opt stack 0
  2774                           tosu	equ	0xFFF
  2775                           tosh	equ	0xFFE
  2776                           tosl	equ	0xFFD
  2777                           pclath	equ	0xFFA
  2778                           tblptru	equ	0xFF8
  2779                           tblptrh	equ	0xFF7
  2780                           tblptrl	equ	0xFF6
  2781                           tablat	equ	0xFF5
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           intcon	equ	0xFF2
  2785                           indf0	equ	0xFEF
  2786                           postinc0	equ	0xFEE
  2787                           fsr0h	equ	0xFEA
  2788                           fsr0l	equ	0xFE9
  2789                           wreg	equ	0xFE8
  2790                           indf1	equ	0xFE7
  2791                           postinc1	equ	0xFE6
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _rd_buffer_getn *****************
  2803 ;; Defined at:
  2804 ;;		line 185 in file "src/modules/rd_buffer.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  pbuffer         2   23[BANK0 ] PTR struct .
  2807 ;;		 -> g_tx_buffer(107), 
  2808 ;;  prec            2   25[BANK0 ] PTR unsigned char 
  2809 ;;		 -> serialport_buffer(100), 
  2810 ;;  rec_count       2   27[BANK0 ] int 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  i               2   30[BANK0 ] int 
  2813 ;;  result          1    0        unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      unsigned char 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : F/0
  2820 ;;		On exit  : F/0
  2821 ;;		Unchanged: FFFFFFF0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2823 ;;      Params:         0       6       0       0       0       0       0
  2824 ;;      Locals:         0       3       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0
  2826 ;;      Totals:         0       9       0       0       0       0       0
  2827 ;;Total ram usage:        9 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    6
  2830 ;; This function calls:
  2831 ;;		_rd_buffer_get
  2832 ;; This function is called by:
  2833 ;;		_serialport_task
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text6
  2838  0018F8                     __ptext6:
  2839                           	opt stack 0
  2840  0018F8                     _rd_buffer_getn:
  2841                           	opt stack 23
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;rd_buffer.c: 186: SIZE i=0;
  2845                           
  2846                           ; BSR set to: 0
  2847  0018F8  6B7E               	clrf	rd_buffer_getn@i& (0+255),b
  2848  0018FA  6B7F               	clrf	(rd_buffer_getn@i+1)& (0+255),b
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;rd_buffer.c: 188: while(rec_count--){
  2852  0018FC  D011               	goto	l5626
  2853  0018FE                     l5620:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;rd_buffer.c: 189: if(rd_buffer_get(pbuffer, &prec[i]) == FALSE ) {
  2857  0018FE  C077  F06C         	movff	rd_buffer_getn@pbuffer,?_rd_buffer_get
  2858  001902  C078  F06D         	movff	rd_buffer_getn@pbuffer+1,?_rd_buffer_get+1
  2859  001906  517E               	movf	rd_buffer_getn@i& (0+255),w,b
  2860  001908  2579               	addwf	rd_buffer_getn@prec& (0+255),w,b
  2861  00190A  6F6E               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2862  00190C  517F               	movf	(rd_buffer_getn@i+1)& (0+255),w,b
  2863  00190E  217A               	addwfc	(rd_buffer_getn@prec+1)& (0+255),w,b
  2864  001910  6F6F               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2865  001912  EC1B  F008         	call	_rd_buffer_get	;wreg free
  2866  001916  0900               	iorlw	0
  2867  001918  B4D8               	btfsc	status,2,c
  2868  00191A  0012               	return	
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;rd_buffer.c: 192: }
  2872                           ;rd_buffer.c: 193: i++;
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;rd_buffer.c: 191: break;
  2876  00191C  4B7E               	infsnz	rd_buffer_getn@i& (0+255),f,b
  2877  00191E  2B7F               	incf	(rd_buffer_getn@i+1)& (0+255),f,b
  2878  001920                     l5626:
  2879                           
  2880                           ; BSR set to: 0
  2881  001920  077B               	decf	rd_buffer_getn@rec_count& (0+255),f,b
  2882  001922  A0D8               	btfss	status,0,c
  2883  001924  077C               	decf	(rd_buffer_getn@rec_count+1)& (0+255),f,b
  2884  001926  0100               	movlb	0	; () banked
  2885  001928  297B               	incf	rd_buffer_getn@rec_count& (0+255),w,b
  2886  00192A  B4D8               	btfsc	status,2,c
  2887  00192C  297C               	incf	(rd_buffer_getn@rec_count+1)& (0+255),w,b
  2888  00192E  B4D8               	btfsc	status,2,c
  2889                           
  2890                           ; BSR set to: 0
  2891  001930  0012               	return	
  2892  001932  D7E5               	goto	l5620
  2893  001934                     __end_of_rd_buffer_getn:
  2894                           	opt stack 0
  2895                           tosu	equ	0xFFF
  2896                           tosh	equ	0xFFE
  2897                           tosl	equ	0xFFD
  2898                           pclath	equ	0xFFA
  2899                           tblptru	equ	0xFF8
  2900                           tblptrh	equ	0xFF7
  2901                           tblptrl	equ	0xFF6
  2902                           tablat	equ	0xFF5
  2903                           prodh	equ	0xFF4
  2904                           prodl	equ	0xFF3
  2905                           intcon	equ	0xFF2
  2906                           indf0	equ	0xFEF
  2907                           postinc0	equ	0xFEE
  2908                           fsr0h	equ	0xFEA
  2909                           fsr0l	equ	0xFE9
  2910                           wreg	equ	0xFE8
  2911                           indf1	equ	0xFE7
  2912                           postinc1	equ	0xFE6
  2913                           postdec1	equ	0xFE5
  2914                           fsr1h	equ	0xFE2
  2915                           fsr1l	equ	0xFE1
  2916                           indf2	equ	0xFDF
  2917                           postinc2	equ	0xFDE
  2918                           postdec2	equ	0xFDD
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _rd_buffer_get *****************
  2924 ;; Defined at:
  2925 ;;		line 122 in file "src/modules/rd_buffer.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  2928 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  2929 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  2930 ;;		 -> serialport_buffer(100), rd_buffer_readline@ch(1), 
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;  first           2   21[BANK0 ] int 
  2933 ;;  last            2   18[BANK0 ] int 
  2934 ;;  result          1   20[BANK0 ] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      unsigned char 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2939 ;; Tracked objects:
  2940 ;;		On entry : F/0
  2941 ;;		On exit  : F/0
  2942 ;;		Unchanged: FFFFFFF0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2944 ;;      Params:         0       4       0       0       0       0       0
  2945 ;;      Locals:         0       5       0       0       0       0       0
  2946 ;;      Temps:          0       2       0       0       0       0       0
  2947 ;;      Totals:         0      11       0       0       0       0       0
  2948 ;;Total ram usage:       11 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    5
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_rd_buffer_readline
  2955 ;;		_rd_buffer_getn
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959                           	psect	text7
  2960  001036                     __ptext7:
  2961                           	opt stack 0
  2962  001036                     _rd_buffer_get:
  2963                           	opt stack 23
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;rd_buffer.c: 123: CHAR result = FALSE;
  2967                           
  2968                           ; BSR set to: 0
  2969  001036  6B74               	clrf	rd_buffer_get@result& (0+255),b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;rd_buffer.c: 124: INT16 first = pbuffer->head.first;
  2973  001038  EE20 F002          	lfsr	2,2
  2974  00103C  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2975  00103E  26D9               	addwf	fsr2l,f,c
  2976  001040  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2977  001042  22DA               	addwfc	fsr2h,f,c
  2978  001044  CFDE F075          	movff	postinc2,rd_buffer_get@first
  2979  001048  CFDD F076          	movff	postdec2,rd_buffer_get@first+1
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;rd_buffer.c: 125: INT16 last = pbuffer->head.last;
  2983  00104C  C06C  FFD9         	movff	rd_buffer_get@pbuffer,fsr2l
  2984  001050  C06D  FFDA         	movff	rd_buffer_get@pbuffer+1,fsr2h
  2985  001054  CFDE F072          	movff	postinc2,rd_buffer_get@last
  2986  001058  CFDD F073          	movff	postdec2,rd_buffer_get@last+1
  2987                           
  2988                           ;rd_buffer.c: 126: if(first != last) {
  2989  00105C  5173               	movf	(rd_buffer_get@last+1)& (0+255),w,b
  2990  00105E  1976               	xorwf	(rd_buffer_get@first+1)& (0+255),w,b
  2991  001060  E102               	bnz	u5725
  2992  001062  5172               	movf	rd_buffer_get@last& (0+255),w,b
  2993  001064  1975               	xorwf	rd_buffer_get@first& (0+255),w,b
  2994  001066                     u5725:
  2995  001066  E039               	bz	l5566
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;rd_buffer.c: 127: (*prec) = pbuffer->list[first ];
  2999  001068  C06C  F070         	movff	rd_buffer_get@pbuffer,??_rd_buffer_get
  3000  00106C  C06D  F071         	movff	rd_buffer_get@pbuffer+1,??_rd_buffer_get+1
  3001  001070  5175               	movf	rd_buffer_get@first& (0+255),w,b
  3002  001072  2770               	addwf	??_rd_buffer_get& (0+255),f,b
  3003  001074  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  3004  001076  2371               	addwfc	(??_rd_buffer_get+1)& (0+255),f,b
  3005  001078  0E06               	movlw	6
  3006  00107A  2570               	addwf	??_rd_buffer_get& (0+255),w,b
  3007  00107C  6ED9               	movwf	fsr2l,c
  3008  00107E  0E00               	movlw	0
  3009  001080  2171               	addwfc	(??_rd_buffer_get+1)& (0+255),w,b
  3010  001082  6EDA               	movwf	fsr2h,c
  3011  001084  C06E  FFE1         	movff	rd_buffer_get@prec,fsr1l
  3012  001088  C06F  FFE2         	movff	rd_buffer_get@prec+1,fsr1h
  3013  00108C  CFDF FFE7          	movff	indf2,indf1
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;rd_buffer.c: 128: first ++;
  3017  001090  4B75               	infsnz	rd_buffer_get@first& (0+255),f,b
  3018  001092  2B76               	incf	(rd_buffer_get@first+1)& (0+255),f,b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;rd_buffer.c: 129: pbuffer->head.first = first ;
  3022  001094  EE20 F002          	lfsr	2,2
  3023  001098  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  3024  00109A  26D9               	addwf	fsr2l,f,c
  3025  00109C  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  3026  00109E  22DA               	addwfc	fsr2h,f,c
  3027  0010A0  C075  FFDE         	movff	rd_buffer_get@first,postinc2
  3028  0010A4  C076  FFDD         	movff	rd_buffer_get@first+1,postdec2
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;rd_buffer.c: 130: if(first == pbuffer->head.size){
  3032  0010A8  EE20 F004          	lfsr	2,4
  3033  0010AC  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  3034  0010AE  26D9               	addwf	fsr2l,f,c
  3035  0010B0  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  3036  0010B2  22DA               	addwfc	fsr2h,f,c
  3037  0010B4  52DE               	movf	postinc2,f,c
  3038  0010B6  5176               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  3039  0010B8  18DD               	xorwf	postdec2,w,c
  3040  0010BA  C075  FFE8         	movff	rd_buffer_get@first,wreg
  3041  0010BE  B4D8               	btfsc	status,2,c
  3042  0010C0  18DF               	xorwf	indf2,w,c
  3043  0010C2  E109               	bnz	l5564
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;rd_buffer.c: 131: pbuffer->head.first = 0;
  3047  0010C4  EE20 F002          	lfsr	2,2
  3048  0010C8  516C               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  3049  0010CA  26D9               	addwf	fsr2l,f,c
  3050  0010CC  516D               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  3051  0010CE  22DA               	addwfc	fsr2h,f,c
  3052  0010D0  0E00               	movlw	0
  3053  0010D2  6EDE               	movwf	postinc2,c
  3054  0010D4  6EDD               	movwf	postdec2,c
  3055  0010D6                     l5564:
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;rd_buffer.c: 132: }
  3059                           ;rd_buffer.c: 133: result = TRUE;
  3060  0010D6  0E01               	movlw	1
  3061  0010D8  6F74               	movwf	rd_buffer_get@result& (0+255),b
  3062  0010DA                     l5566:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;rd_buffer.c: 134: }
  3066                           ;rd_buffer.c: 135: return result;
  3067  0010DA  5174               	movf	rd_buffer_get@result& (0+255),w,b
  3068                           
  3069                           ; BSR set to: 0
  3070  0010DC  0012               	return	
  3071  0010DE                     __end_of_rd_buffer_get:
  3072                           	opt stack 0
  3073                           tosu	equ	0xFFF
  3074                           tosh	equ	0xFFE
  3075                           tosl	equ	0xFFD
  3076                           pclath	equ	0xFFA
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           intcon	equ	0xFF2
  3084                           indf0	equ	0xFEF
  3085                           postinc0	equ	0xFEE
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           postinc1	equ	0xFE6
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           indf2	equ	0xFDF
  3095                           postinc2	equ	0xFDE
  3096                           postdec2	equ	0xFDD
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _syntax_string *****************
  3102 ;; Defined at:
  3103 ;;		line 167 in file "src/modules/syntax.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  pstr            2   60[BANK0 ] PTR const unsigned char 
  3106 ;;		 -> serialport_buffer(100), 
  3107 ;;  case_sensiti    1   62[BANK0 ] unsigned char 
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;  pchain          2   72[BANK0 ] PTR unsigned char 
  3110 ;;		 -> this_buf(127), 
  3111 ;;  pos             2   68[BANK0 ] int 
  3112 ;;  chains          2   70[BANK0 ] int 
  3113 ;;  result          2   66[BANK0 ] int 
  3114 ;;  str_len         2   64[BANK0 ] int 
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  2   60[BANK0 ] int 
  3117 ;; Registers used:
  3118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : F/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: FFFFFFF0/0
  3123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3124 ;;      Params:         0       3       0       0       0       0       0
  3125 ;;      Locals:         0      10       0       0       0       0       0
  3126 ;;      Temps:          0       1       0       0       0       0       0
  3127 ;;      Totals:         0      14       0       0       0       0       0
  3128 ;;Total ram usage:       14 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:   10
  3131 ;; This function calls:
  3132 ;;		_string_utils_strlen
  3133 ;;		_string_utils_split
  3134 ;;		_this_parse_command
  3135 ;;		_on_parameter_found
  3136 ;;		_this_parse_parameter
  3137 ;;		_string_utils_strchr
  3138 ;; This function is called by:
  3139 ;;		_serialport_task
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text8
  3144  0009EA                     __ptext8:
  3145                           	opt stack 0
  3146  0009EA                     _syntax_string:
  3147                           	opt stack 19
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;syntax.c: 168: INT16 chains ;
  3151                           ;syntax.c: 169: INT16 result =0;
  3152                           
  3153                           ; BSR set to: 0
  3154  0009EA  6BA2               	clrf	syntax_string@result& (0+255),b
  3155  0009EC  6BA3               	clrf	(syntax_string@result+1)& (0+255),b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;syntax.c: 170: INT16 str_len = string_utils_strlen(pstr);
  3159  0009EE  C09C  F072         	movff	syntax_string@pstr,?_string_utils_strlen
  3160  0009F2  C09D  F073         	movff	syntax_string@pstr+1,?_string_utils_strlen+1
  3161  0009F6  EC5B  F00B         	call	_string_utils_strlen	;wreg free
  3162  0009FA  C072  F0A0         	movff	?_string_utils_strlen,syntax_string@str_len
  3163  0009FE  C073  F0A1         	movff	?_string_utils_strlen+1,syntax_string@str_len+1
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;syntax.c: 171: this_case_sensitive = case_sensitive;
  3167  000A02  C09E  F0C4         	movff	syntax_string@case_sensitive,_this_case_sensitive
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;syntax.c: 172: chains = string_utils_split(this_buf, pstr, str_len, ('$'));
  3171  000A06  0E05               	movlw	high _this_buf
  3172  000A08  0100               	movlb	0	; () banked
  3173  000A0A  6F6D               	movwf	(?_string_utils_split+1)& (0+255),b
  3174  000A0C  0E00               	movlw	low _this_buf
  3175  000A0E  6F6C               	movwf	?_string_utils_split& (0+255),b
  3176  000A10  C09C  F06E         	movff	syntax_string@pstr,?_string_utils_split+2
  3177  000A14  C09D  F06F         	movff	syntax_string@pstr+1,?_string_utils_split+3
  3178  000A18  C0A0  F070         	movff	syntax_string@str_len,?_string_utils_split+4
  3179  000A1C  C0A1  F071         	movff	syntax_string@str_len+1,?_string_utils_split+5
  3180  000A20  0E24               	movlw	36
  3181  000A22  6F72               	movwf	(?_string_utils_split+6)& (0+255),b
  3182  000A24  ECD7  F009         	call	_string_utils_split	;wreg free
  3183  000A28  C06C  F0A6         	movff	?_string_utils_split,syntax_string@chains
  3184  000A2C  C06D  F0A7         	movff	?_string_utils_split+1,syntax_string@chains+1
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;syntax.c: 173: command_id = -1;
  3188  000A30  69BC               	setf	_command_id& (0+255),b
  3189  000A32  69BD               	setf	(_command_id+1)& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;syntax.c: 174: parameter_id = -1;
  3193  000A34  69C0               	setf	_parameter_id& (0+255),b
  3194  000A36  69C1               	setf	(_parameter_id+1)& (0+255),b
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;syntax.c: 175: parameter_value[0] = '\0';
  3198  000A38  0103               	movlb	3	; () banked
  3199  000A3A  6B7F               	clrf	_parameter_value& (0+255),b
  3200                           
  3201                           ; BSR set to: 3
  3202                           ;syntax.c: 176: parameter_text[0] = '\0';
  3203  000A3C  6B00               	clrf	_parameter_text& (0+255),b
  3204                           
  3205                           ; BSR set to: 3
  3206                           ;syntax.c: 177: if (chains >= 1 ) {
  3207  000A3E  0100               	movlb	0	; () banked
  3208  000A40  51A7               	movf	(syntax_string@chains+1)& (0+255),w,b
  3209  000A42  0A80               	xorlw	128
  3210  000A44  0F80               	addlw	-128
  3211  000A46  0E01               	movlw	1
  3212  000A48  B4D8               	btfsc	status,2,c
  3213  000A4A  5DA6               	subwf	syntax_string@chains& (0+255),w,b
  3214  000A4C  E366               	bnc	l5688
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;syntax.c: 178: INT16 pos = 0;
  3218  000A4E  6BA4               	clrf	syntax_string@pos& (0+255),b
  3219  000A50  6BA5               	clrf	(syntax_string@pos+1)& (0+255),b
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;syntax.c: 179: char *pchain;
  3223                           ;syntax.c: 180: result = chains -1;
  3224  000A52  0EFF               	movlw	255
  3225  000A54  25A6               	addwf	syntax_string@chains& (0+255),w,b
  3226  000A56  6FA2               	movwf	syntax_string@result& (0+255),b
  3227  000A58  0EFF               	movlw	255
  3228  000A5A  21A7               	addwfc	(syntax_string@chains+1)& (0+255),w,b
  3229  000A5C  6FA3               	movwf	(syntax_string@result+1)& (0+255),b
  3230                           
  3231                           ;syntax.c: 181: while ( chains-- ) {
  3232  000A5E  D055               	goto	l5686
  3233  000A60                     l5670:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;syntax.c: 182: pchain = &this_buf[pos];
  3237  000A60  0E00               	movlw	low _this_buf
  3238  000A62  0100               	movlb	0	; () banked
  3239  000A64  25A4               	addwf	syntax_string@pos& (0+255),w,b
  3240  000A66  6FA8               	movwf	syntax_string@pchain& (0+255),b
  3241  000A68  0E05               	movlw	high _this_buf
  3242  000A6A  21A5               	addwfc	(syntax_string@pos+1)& (0+255),w,b
  3243  000A6C  6FA9               	movwf	(syntax_string@pchain+1)& (0+255),b
  3244                           
  3245                           ;syntax.c: 183: if (pos == 0 ) {
  3246  000A6E  51A5               	movf	(syntax_string@pos+1)& (0+255),w,b
  3247  000A70  11A4               	iorwf	syntax_string@pos& (0+255),w,b
  3248  000A72  E110               	bnz	l5678
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;syntax.c: 185: if ( !this_parse_command( pchain ) ) {result =0;break;}
  3252  000A74  C0A8  F080         	movff	syntax_string@pchain,?_this_parse_command
  3253  000A78  C0A9  F081         	movff	syntax_string@pchain+1,?_this_parse_command+1
  3254  000A7C  ECF4  F006         	call	_this_parse_command	;wreg free
  3255  000A80  0900               	iorlw	0
  3256  000A82  E103               	bnz	l5676
  3257                           
  3258                           ; BSR set to: 0
  3259  000A84  6BA2               	clrf	syntax_string@result& (0+255),b
  3260  000A86  6BA3               	clrf	(syntax_string@result+1)& (0+255),b
  3261  000A88  D048               	goto	l5688
  3262  000A8A                     l5676:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;syntax.c: 186: on_parameter_found(PARSER_START, command_id, -1, (void*)(0), PARSER_TYPE
      +                          _NO_TYPE);
  3266  000A8A  D85B               	call	PL48	;call to abstracted procedure
  3267  000A8C  0E01               	movlw	1
  3268  000A8E  EC5D  F00C         	call	_on_parameter_found
  3269                           
  3270                           ;syntax.c: 187: }
  3271  000A92  D028               	goto	l5684
  3272  000A94                     l5678:
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;syntax.c: 188: else {
  3276                           ;syntax.c: 190: if (this_parse_parameter( pchain ) == TRUE) {
  3277  000A94  C0A8  F08B         	movff	syntax_string@pchain,?_this_parse_parameter
  3278  000A98  C0A9  F08C         	movff	syntax_string@pchain+1,?_this_parse_parameter+1
  3279  000A9C  EC0B  F004         	call	_this_parse_parameter	;wreg free
  3280  000AA0  6F9F               	movwf	??_syntax_string& (0+255),b
  3281  000AA2  059F               	decf	??_syntax_string& (0+255),w,b
  3282  000AA4  E111               	bnz	l5682
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;syntax.c: 191: on_parameter_found(PARSER_PARAMETER, command_id, parameter_id, (void*)pa
      +                          rameter_value, parameter_type);
  3286  000AA6  C0BC  F080         	movff	_command_id,?_on_parameter_found
  3287  000AAA  C0C0  F081         	movff	_parameter_id,?_on_parameter_found+1
  3288  000AAE  0E7F               	movlw	low _parameter_value
  3289  000AB0  0100               	movlb	0	; () banked
  3290  000AB2  6F82               	movwf	(?_on_parameter_found+2)& (0+255),b
  3291  000AB4  0E03               	movlw	high _parameter_value
  3292  000AB6  6F83               	movwf	(?_on_parameter_found+3)& (0+255),b
  3293  000AB8  0E20               	movlw	32
  3294  000ABA  6F84               	movwf	(?_on_parameter_found+4)& (0+255),b
  3295  000ABC  C0C2  F085         	movff	_parameter_type,?_on_parameter_found+5
  3296  000AC0  0E00               	movlw	0
  3297  000AC2  EC5D  F00C         	call	_on_parameter_found
  3298                           
  3299                           ;syntax.c: 192: }
  3300  000AC6  D00E               	goto	l5684
  3301  000AC8                     l5682:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;syntax.c: 194: else {
  3305                           ;syntax.c: 195: on_parameter_found(PARSER_PARAMETER, command_id, -1 , (void*)parameter_t
      +                          ext, PARSER_TYPE_NO_TYPE);
  3306  000AC8  C0BC  F080         	movff	_command_id,?_on_parameter_found
  3307  000ACC  6981               	setf	(?_on_parameter_found+1)& (0+255),b
  3308  000ACE  0E00               	movlw	low _parameter_text
  3309  000AD0  0100               	movlb	0	; () banked
  3310  000AD2  6F82               	movwf	(?_on_parameter_found+2)& (0+255),b
  3311  000AD4  0E03               	movlw	high _parameter_text
  3312  000AD6  6F83               	movwf	(?_on_parameter_found+3)& (0+255),b
  3313  000AD8  0E20               	movlw	32
  3314  000ADA  6F84               	movwf	(?_on_parameter_found+4)& (0+255),b
  3315  000ADC  0E00               	movlw	0
  3316  000ADE  6B85               	clrf	(?_on_parameter_found+5)& (0+255),b
  3317  000AE0  EC5D  F00C         	call	_on_parameter_found
  3318  000AE4                     l5684:
  3319                           
  3320                           ;syntax.c: 196: }
  3321                           ;syntax.c: 197: }
  3322                           ;syntax.c: 199: pos += string_utils_strchr(pchain, ('$')) + 1;
  3323  000AE4  0100               	movlb	0	; () banked
  3324  000AE6  51A8               	movf	syntax_string@pchain& (0+255),w,b
  3325  000AE8  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  3326  000AEA  51A9               	movf	(syntax_string@pchain+1)& (0+255),w,b
  3327  000AEC  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  3328  000AEE  0E20               	movlw	32
  3329  000AF0  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3330  000AF2  0E24               	movlw	36
  3331  000AF4  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3332  000AF6  ECBA  F008         	call	_string_utils_strchr	;wreg free
  3333  000AFA  0100               	movlb	0	; () banked
  3334  000AFC  2B6C               	incf	?_string_utils_strchr& (0+255),f,b
  3335  000AFE  0E00               	movlw	0
  3336  000B00  236D               	addwfc	(?_string_utils_strchr+1)& (0+255),f,b
  3337  000B02  506C               	movf	?_string_utils_strchr,w,c
  3338  000B04  27A4               	addwf	syntax_string@pos& (0+255),f,b
  3339  000B06  506D               	movf	?_string_utils_strchr+1,w,c
  3340  000B08  23A5               	addwfc	(syntax_string@pos+1)& (0+255),f,b
  3341  000B0A                     l5686:
  3342                           
  3343                           ; BSR set to: 0
  3344  000B0A  07A6               	decf	syntax_string@chains& (0+255),f,b
  3345  000B0C  A0D8               	btfss	status,0,c
  3346  000B0E  07A7               	decf	(syntax_string@chains+1)& (0+255),f,b
  3347  000B10  0100               	movlb	0	; () banked
  3348  000B12  29A6               	incf	syntax_string@chains& (0+255),w,b
  3349  000B14  B4D8               	btfsc	status,2,c
  3350  000B16  29A7               	incf	(syntax_string@chains+1)& (0+255),w,b
  3351  000B18  E1A3               	bnz	l5670
  3352  000B1A                     l5688:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;syntax.c: 200: }
  3356                           ;syntax.c: 201: }
  3357                           ;syntax.c: 202: if (result>0 )
  3358  000B1A  51A3               	movf	(syntax_string@result+1)& (0+255),w,b
  3359  000B1C  0A80               	xorlw	128
  3360  000B1E  0F80               	addlw	-128
  3361  000B20  0E01               	movlw	1
  3362  000B22  B4D8               	btfsc	status,2,c
  3363  000B24  5DA2               	subwf	syntax_string@result& (0+255),w,b
  3364  000B26  E304               	bnc	l5692
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;syntax.c: 203: {
  3368                           ;syntax.c: 204: on_parameter_found(PARSER_STOP, command_id, -1, (void*)(0), PARSER_TYPE_
      +                          NO_TYPE);
  3369  000B28  D80C               	call	PL48	;call to abstracted procedure
  3370  000B2A  0E02               	movlw	2
  3371  000B2C  EF5D  F00C         	goto	_on_parameter_found
  3372  000B30                     l5692:
  3373                           
  3374                           ; BSR set to: 0
  3375                           ;syntax.c: 206: else {
  3376                           ;syntax.c: 207: on_parameter_found(PARSER_ERROR,-1, -1, (void*)(0), PARSER_TYPE_NO_TYPE);
  3377  000B30  6980               	setf	?_on_parameter_found& (0+255),b
  3378  000B32  6981               	setf	(?_on_parameter_found+1)& (0+255),b
  3379  000B34  6B82               	clrf	(?_on_parameter_found+2)& (0+255),b
  3380  000B36  6B83               	clrf	(?_on_parameter_found+3)& (0+255),b
  3381  000B38  6B84               	clrf	(?_on_parameter_found+4)& (0+255),b
  3382  000B3A  6B85               	clrf	(?_on_parameter_found+5)& (0+255),b
  3383  000B3C  0E03               	movlw	3
  3384  000B3E  EF5D  F00C         	goto	_on_parameter_found
  3385  000B42                     __end_of_syntax_string:
  3386                           	opt stack 0
  3387  000B42                     PL48:
  3388                           	opt stack 19
  3389  000B42  C0BC  F080         	movff	_command_id,?_on_parameter_found
  3390  000B46  6981               	setf	(?_on_parameter_found+1)& (0+255),b
  3391  000B48  6B82               	clrf	(?_on_parameter_found+2)& (0+255),b
  3392  000B4A  6B83               	clrf	(?_on_parameter_found+3)& (0+255),b
  3393  000B4C  6B84               	clrf	(?_on_parameter_found+4)& (0+255),b
  3394  000B4E  6B85               	clrf	(?_on_parameter_found+5)& (0+255),b
  3395  000B50  0012               	return	
  3396  000B52                     __end_ofPL48:
  3397                           	opt stack 0
  3398                           tosu	equ	0xFFF
  3399                           tosh	equ	0xFFE
  3400                           tosl	equ	0xFFD
  3401                           pclath	equ	0xFFA
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon	equ	0xFF2
  3409                           indf0	equ	0xFEF
  3410                           postinc0	equ	0xFEE
  3411                           fsr0h	equ	0xFEA
  3412                           fsr0l	equ	0xFE9
  3413                           wreg	equ	0xFE8
  3414                           indf1	equ	0xFE7
  3415                           postinc1	equ	0xFE6
  3416                           postdec1	equ	0xFE5
  3417                           fsr1h	equ	0xFE2
  3418                           fsr1l	equ	0xFE1
  3419                           indf2	equ	0xFDF
  3420                           postinc2	equ	0xFDE
  3421                           postdec2	equ	0xFDD
  3422                           fsr2h	equ	0xFDA
  3423                           fsr2l	equ	0xFD9
  3424                           status	equ	0xFD8
  3425                           
  3426 ;; *************** function _string_utils_split *****************
  3427 ;; Defined at:
  3428 ;;		line 94 in file "src/modules/string_utils.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;  pbuf            2   12[BANK0 ] PTR unsigned char 
  3431 ;;		 -> this_buf(127), 
  3432 ;;  pstr            2   14[BANK0 ] PTR const unsigned char 
  3433 ;;		 -> serialport_buffer(100), 
  3434 ;;  len             2   16[BANK0 ] int 
  3435 ;;  delimeter       1   18[BANK0 ] unsigned char 
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;  symb            1   24[BANK0 ] unsigned char 
  3438 ;;  chains          2   21[BANK0 ] int 
  3439 ;;  i               2   19[BANK0 ] int 
  3440 ;;  prev            1   23[BANK0 ] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2   12[BANK0 ] int 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3445 ;; Tracked objects:
  3446 ;;		On entry : F/0
  3447 ;;		On exit  : F/0
  3448 ;;		Unchanged: FFFFFFF0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         0       7       0       0       0       0       0
  3451 ;;      Locals:         0       6       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:         0      13       0       0       0       0       0
  3454 ;;Total ram usage:       13 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    5
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_syntax_string
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text9
  3465  0013AE                     __ptext9:
  3466                           	opt stack 0
  3467  0013AE                     _string_utils_split:
  3468                           	opt stack 23
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;string_utils.c: 95: INT16 i = 0;
  3472  0013AE  6B73               	clrf	string_utils_split@i& (0+255),b
  3473  0013B0  6B74               	clrf	(string_utils_split@i+1)& (0+255),b
  3474                           
  3475                           ;string_utils.c: 96: INT16 chains = 0;
  3476  0013B2  6B75               	clrf	string_utils_split@chains& (0+255),b
  3477  0013B4  6B76               	clrf	(string_utils_split@chains+1)& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;string_utils.c: 97: char prev = ' ';
  3481  0013B6  0E20               	movlw	32
  3482  0013B8  6F77               	movwf	string_utils_split@prev& (0+255),b
  3483  0013BA                     l5758:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;string_utils.c: 99: {
  3487                           ;string_utils.c: 100: char symb = pstr[i];
  3488  0013BA  5173               	movf	string_utils_split@i& (0+255),w,b
  3489  0013BC  256E               	addwf	string_utils_split@pstr& (0+255),w,b
  3490  0013BE  6ED9               	movwf	fsr2l,c
  3491  0013C0  5174               	movf	(string_utils_split@i+1)& (0+255),w,b
  3492  0013C2  216F               	addwfc	(string_utils_split@pstr+1)& (0+255),w,b
  3493  0013C4  6EDA               	movwf	fsr2h,c
  3494  0013C6  50DF               	movf	indf2,w,c
  3495  0013C8  6F78               	movwf	string_utils_split@symb& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;string_utils.c: 101: if (symb == ' ' || len == 0)
  3499  0013CA  5178               	movf	string_utils_split@symb& (0+255),w,b
  3500  0013CC  0A20               	xorlw	32
  3501  0013CE  E003               	bz	l5764
  3502                           
  3503                           ; BSR set to: 0
  3504  0013D0  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3505  0013D2  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3506  0013D4  E10E               	bnz	l5772
  3507  0013D6                     l5764:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;string_utils.c: 102: {
  3511                           ;string_utils.c: 103: if (prev != ' ')
  3512  0013D6  5177               	movf	string_utils_split@prev& (0+255),w,b
  3513  0013D8  0A20               	xorlw	32
  3514  0013DA  E013               	bz	l5776
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;string_utils.c: 104: {
  3518                           ;string_utils.c: 105: *pbuf = delimeter;
  3519  0013DC  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3520  0013E0  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3521  0013E4  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;string_utils.c: 106: pbuf++;
  3525  0013E8  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3526  0013EA  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;string_utils.c: 107: chains++;
  3530  0013EC  4B75               	infsnz	string_utils_split@chains& (0+255),f,b
  3531  0013EE  2B76               	incf	(string_utils_split@chains+1)& (0+255),f,b
  3532  0013F0  D008               	goto	l5776
  3533  0013F2                     l5772:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;string_utils.c: 110: else
  3537                           ;string_utils.c: 111: {
  3538                           ;string_utils.c: 112: *pbuf++ = symb;
  3539  0013F2  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3540  0013F6  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3541  0013FA  C078  FFDF         	movff	string_utils_split@symb,indf2
  3542                           
  3543                           ; BSR set to: 0
  3544  0013FE  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3545  001400  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3546  001402                     l5776:
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;string_utils.c: 113: }
  3550                           ;string_utils.c: 114: if (len == 0)
  3551  001402  5171               	movf	(string_utils_split@len+1)& (0+255),w,b
  3552  001404  1170               	iorwf	string_utils_split@len& (0+255),w,b
  3553  001406  E008               	bz	l5786
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;string_utils.c: 118: else
  3557                           ;string_utils.c: 119: {
  3558                           ;string_utils.c: 120: len--;
  3559  001408  0770               	decf	string_utils_split@len& (0+255),f,b
  3560  00140A  A0D8               	btfss	status,0,c
  3561  00140C  0771               	decf	(string_utils_split@len+1)& (0+255),f,b
  3562                           
  3563                           ;string_utils.c: 121: i++;
  3564  00140E  4B73               	infsnz	string_utils_split@i& (0+255),f,b
  3565  001410  2B74               	incf	(string_utils_split@i+1)& (0+255),f,b
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;string_utils.c: 122: prev = symb;
  3569  001412  C078  F077         	movff	string_utils_split@symb,string_utils_split@prev
  3570  001416  D7D1               	goto	l5758
  3571  001418                     l5786:
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;string_utils.c: 123: }
  3575                           ;string_utils.c: 124: }
  3576                           ;string_utils.c: 125: *pbuf++ = delimeter;
  3577  001418  C06C  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3578  00141C  C06D  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3579  001420  C072  FFDF         	movff	string_utils_split@delimeter,indf2
  3580                           
  3581                           ; BSR set to: 0
  3582  001424  4B6C               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3583  001426  2B6D               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;string_utils.c: 126: return chains;
  3587  001428  C075  F06C         	movff	string_utils_split@chains,?_string_utils_split
  3588  00142C  C076  F06D         	movff	string_utils_split@chains+1,?_string_utils_split+1
  3589                           
  3590                           ; BSR set to: 0
  3591  001430  0012               	return	
  3592  001432                     __end_of_string_utils_split:
  3593                           	opt stack 0
  3594                           tosu	equ	0xFFF
  3595                           tosh	equ	0xFFE
  3596                           tosl	equ	0xFFD
  3597                           pclath	equ	0xFFA
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           indf0	equ	0xFEF
  3606                           postinc0	equ	0xFEE
  3607                           fsr0h	equ	0xFEA
  3608                           fsr0l	equ	0xFE9
  3609                           wreg	equ	0xFE8
  3610                           indf1	equ	0xFE7
  3611                           postinc1	equ	0xFE6
  3612                           postdec1	equ	0xFE5
  3613                           fsr1h	equ	0xFE2
  3614                           fsr1l	equ	0xFE1
  3615                           indf2	equ	0xFDF
  3616                           postinc2	equ	0xFDE
  3617                           postdec2	equ	0xFDD
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function _this_parse_command *****************
  3623 ;; Defined at:
  3624 ;;		line 95 in file "src/modules/syntax.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  pbuf            2   32[BANK0 ] PTR unsigned char 
  3627 ;;		 -> this_buf(127), 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  pname           2   36[BANK0 ] PTR const unsigned char 
  3630 ;;		 -> syx_cmd_list(105), 
  3631 ;;  is_equal        1   38[BANK0 ] unsigned char 
  3632 ;;  i               2   40[BANK0 ] int 
  3633 ;;  len             2   34[BANK0 ] int 
  3634 ;;  found           1   39[BANK0 ] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      unsigned char 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : F/0
  3641 ;;		On exit  : F/0
  3642 ;;		Unchanged: FFFFFFF0/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3644 ;;      Params:         0       2       0       0       0       0       0
  3645 ;;      Locals:         0       8       0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0
  3647 ;;      Totals:         0      10       0       0       0       0       0
  3648 ;;Total ram usage:       10 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    7
  3651 ;; This function calls:
  3652 ;;		_string_utils_strchr
  3653 ;;		___wmul
  3654 ;;		_string_utils_strncmp
  3655 ;; This function is called by:
  3656 ;;		_syntax_string
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text10
  3661  000DE8                     __ptext10:
  3662                           	opt stack 0
  3663  000DE8                     _this_parse_command:
  3664                           	opt stack 21
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;syntax.c: 96: CHAR found = FALSE;
  3668                           
  3669                           ; BSR set to: 0
  3670  000DE8  6B87               	clrf	this_parse_command@found& (0+255),b
  3671                           
  3672                           ;syntax.c: 97: INT16 i = 0;
  3673  000DEA  6B88               	clrf	this_parse_command@i& (0+255),b
  3674  000DEC  6B89               	clrf	(this_parse_command@i+1)& (0+255),b
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;syntax.c: 98: INT16 len = string_utils_strchr(pbuf, ('$'));
  3678  000DEE  5180               	movf	this_parse_command@pbuf& (0+255),w,b
  3679  000DF0  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  3680  000DF2  5181               	movf	(this_parse_command@pbuf+1)& (0+255),w,b
  3681  000DF4  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  3682  000DF6  0E20               	movlw	32
  3683  000DF8  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3684  000DFA  0E24               	movlw	36
  3685  000DFC  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3686  000DFE  ECBA  F008         	call	_string_utils_strchr	;wreg free
  3687  000E02  0100               	movlb	0	; () banked
  3688  000E04  C06C  F082         	movff	?_string_utils_strchr,this_parse_command@len
  3689  000E08  C06D  F083         	movff	?_string_utils_strchr+1,this_parse_command@len+1
  3690                           
  3691                           ;syntax.c: 99: while(syx_cmd_list[i].name[0] != 0x1D) {
  3692  000E0C  D040               	goto	l5922
  3693  000E0E                     l5910:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;syntax.c: 100: const char *pname = syx_cmd_list[i].name;
  3697  000E0E  C088  F06C         	movff	this_parse_command@i,?___wmul
  3698  000E12  C089  F06D         	movff	this_parse_command@i+1,?___wmul+1
  3699  000E16  6B6F               	clrf	(?___wmul+3)& (0+255),b
  3700  000E18  0E15               	movlw	21
  3701  000E1A  6F6E               	movwf	(?___wmul+2)& (0+255),b
  3702  000E1C  ECE8  F00C         	call	___wmul	;wreg free
  3703  000E20  0E80               	movlw	low _syx_cmd_list
  3704  000E22  256C               	addwf	?___wmul& (0+255),w,b
  3705  000E24  6F84               	movwf	this_parse_command@pname& (0+255),b
  3706  000E26  0E7F               	movlw	high _syx_cmd_list
  3707  000E28  216D               	addwfc	(?___wmul+1)& (0+255),w,b
  3708  000E2A  6F85               	movwf	(this_parse_command@pname+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;syntax.c: 101: CHAR is_equal = string_utils_strncmp(pbuf, pname, len, this_case_sensiti
      +                          ve);
  3712  000E2C  C080  F072         	movff	this_parse_command@pbuf,?_string_utils_strncmp
  3713  000E30  C081  F073         	movff	this_parse_command@pbuf+1,?_string_utils_strncmp+1
  3714  000E34  C084  F074         	movff	this_parse_command@pname,?_string_utils_strncmp+2
  3715  000E38  C085  F075         	movff	this_parse_command@pname+1,?_string_utils_strncmp+3
  3716  000E3C  C082  F076         	movff	this_parse_command@len,?_string_utils_strncmp+4
  3717  000E40  C083  F077         	movff	this_parse_command@len+1,?_string_utils_strncmp+5
  3718  000E44  C0C4  F078         	movff	_this_case_sensitive,?_string_utils_strncmp+6
  3719  000E48  ECBE  F007         	call	_string_utils_strncmp	;wreg free
  3720  000E4C  6F86               	movwf	this_parse_command@is_equal& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;syntax.c: 102: if ( is_equal ) {
  3724  000E4E  5186               	movf	this_parse_command@is_equal& (0+255),w,b
  3725  000E50  E01C               	bz	l5920
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;syntax.c: 103: command_id = syx_cmd_list[i].id;
  3729  000E52  C088  F06C         	movff	this_parse_command@i,?___wmul
  3730  000E56  C089  F06D         	movff	this_parse_command@i+1,?___wmul+1
  3731  000E5A  6B6F               	clrf	(?___wmul+3)& (0+255),b
  3732  000E5C  0E15               	movlw	21
  3733  000E5E  6F6E               	movwf	(?___wmul+2)& (0+255),b
  3734  000E60  ECE8  F00C         	call	___wmul	;wreg free
  3735  000E64  0E14               	movlw	20
  3736  000E66  276C               	addwf	?___wmul& (0+255),f,b
  3737  000E68  0E00               	movlw	0
  3738  000E6A  236D               	addwfc	(?___wmul+1)& (0+255),f,b
  3739  000E6C  0E80               	movlw	low _syx_cmd_list
  3740  000E6E  246C               	addwf	?___wmul,w,c
  3741  000E70  6EF6               	movwf	tblptrl,c
  3742  000E72  0E7F               	movlw	high _syx_cmd_list
  3743  000E74  206D               	addwfc	?___wmul+1,w,c
  3744  000E76  6EF7               	movwf	tblptrh,c
  3745  000E78  0008               	tblrd		*
  3746  000E7A  50F5               	movf	tablat,w,c
  3747  000E7C  6FBC               	movwf	_command_id& (0+255),b
  3748  000E7E  6BBD               	clrf	(_command_id+1)& (0+255),b
  3749  000E80  BFBC               	btfsc	_command_id& (0+255),7,b
  3750  000E82  07BD               	decf	(_command_id+1)& (0+255),f,b
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;syntax.c: 104: found = TRUE;
  3754  000E84  0E01               	movlw	1
  3755  000E86  6F87               	movwf	this_parse_command@found& (0+255),b
  3756                           
  3757                           ;syntax.c: 105: break;
  3758  000E88  D015               	goto	l5924
  3759  000E8A                     l5920:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;syntax.c: 106: }
  3763                           ;syntax.c: 107: i++;
  3764  000E8A  4B88               	infsnz	this_parse_command@i& (0+255),f,b
  3765  000E8C  2B89               	incf	(this_parse_command@i+1)& (0+255),f,b
  3766  000E8E                     l5922:
  3767                           
  3768                           ; BSR set to: 0
  3769  000E8E  C088  F06C         	movff	this_parse_command@i,?___wmul
  3770  000E92  C089  F06D         	movff	this_parse_command@i+1,?___wmul+1
  3771  000E96  6B6F               	clrf	(?___wmul+3)& (0+255),b
  3772  000E98  0E15               	movlw	21
  3773  000E9A  6F6E               	movwf	(?___wmul+2)& (0+255),b
  3774  000E9C  ECE8  F00C         	call	___wmul	;wreg free
  3775  000EA0  0E80               	movlw	low _syx_cmd_list
  3776  000EA2  256C               	addwf	?___wmul& (0+255),w,b
  3777  000EA4  6EF6               	movwf	tblptrl,c
  3778  000EA6  0E7F               	movlw	high _syx_cmd_list
  3779  000EA8  216D               	addwfc	(?___wmul+1)& (0+255),w,b
  3780  000EAA  6EF7               	movwf	tblptrh,c
  3781  000EAC  0008               	tblrd		*
  3782  000EAE  50F5               	movf	tablat,w,c
  3783  000EB0  0A1D               	xorlw	29
  3784  000EB2  E1AD               	bnz	l5910
  3785  000EB4                     l5924:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;syntax.c: 108: }
  3789                           ;syntax.c: 109: return found;
  3790  000EB4  5187               	movf	this_parse_command@found& (0+255),w,b
  3791                           
  3792                           ; BSR set to: 0
  3793  000EB6  0012               	return	
  3794  000EB8                     __end_of_this_parse_command:
  3795                           	opt stack 0
  3796                           tosu	equ	0xFFF
  3797                           tosh	equ	0xFFE
  3798                           tosl	equ	0xFFD
  3799                           pclath	equ	0xFFA
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           indf0	equ	0xFEF
  3808                           postinc0	equ	0xFEE
  3809                           fsr0h	equ	0xFEA
  3810                           fsr0l	equ	0xFE9
  3811                           wreg	equ	0xFE8
  3812                           indf1	equ	0xFE7
  3813                           postinc1	equ	0xFE6
  3814                           postdec1	equ	0xFE5
  3815                           fsr1h	equ	0xFE2
  3816                           fsr1l	equ	0xFE1
  3817                           indf2	equ	0xFDF
  3818                           postinc2	equ	0xFDE
  3819                           postdec2	equ	0xFDD
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function _this_parse_parameter *****************
  3825 ;; Defined at:
  3826 ;;		line 121 in file "src/modules/syntax.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  pstr            2   43[BANK0 ] PTR unsigned char 
  3829 ;;		 -> this_buf(127), 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  is_equal        1   47[BANK0 ] unsigned char 
  3832 ;;  pval            3   53[BANK0 ] PTR const unsigned char 
  3833 ;;		 -> this_buf(127), ROM(32767), 
  3834 ;;  var_len         2   58[BANK0 ] int 
  3835 ;;  i               2   56[BANK0 ] int 
  3836 ;;  str_len         2   51[BANK0 ] int 
  3837 ;;  pvar            2   49[BANK0 ] PTR const unsigned char 
  3838 ;;		 -> this_buf(127), 
  3839 ;;  result          1   48[BANK0 ] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  1    wreg      unsigned char 
  3842 ;; Registers used:
  3843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3844 ;; Tracked objects:
  3845 ;;		On entry : F/0
  3846 ;;		On exit  : F/0
  3847 ;;		Unchanged: FFFFFFF0/0
  3848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3849 ;;      Params:         0       2       0       0       0       0       0
  3850 ;;      Locals:         0      13       0       0       0       0       0
  3851 ;;      Temps:          0       2       0       0       0       0       0
  3852 ;;      Totals:         0      17       0       0       0       0       0
  3853 ;;Total ram usage:       17 bytes
  3854 ;; Hardware stack levels used:    1
  3855 ;; Hardware stack levels required when called:    9
  3856 ;; This function calls:
  3857 ;;		_string_utils_strchr
  3858 ;;		_string_utils_copy
  3859 ;;		___wmul
  3860 ;;		_string_utils_strlen
  3861 ;;		_string_utils_strncmp
  3862 ;;		_this_variable_load_from_text
  3863 ;; This function is called by:
  3864 ;;		_syntax_string
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867                           
  3868                           	psect	text11
  3869  000816                     __ptext11:
  3870                           	opt stack 0
  3871  000816                     _this_parse_parameter:
  3872                           	opt stack 19
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;syntax.c: 122: CHAR result = FALSE;
  3876                           
  3877                           ; BSR set to: 0
  3878  000816  6B90               	clrf	this_parse_parameter@result& (0+255),b
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;syntax.c: 123: if (pstr != (0)) {
  3882  000818  518C               	movf	(this_parse_parameter@pstr+1)& (0+255),w,b
  3883  00081A  118B               	iorwf	this_parse_parameter@pstr& (0+255),w,b
  3884  00081C  E101 D0D1          	bz	l5964
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;syntax.c: 124: const char *pvar = pstr;
  3888  000820  C08B  F091         	movff	this_parse_parameter@pstr,this_parse_parameter@pvar
  3889  000824  C08C  F092         	movff	this_parse_parameter@pstr+1,this_parse_parameter@pvar+1
  3890                           
  3891                           ;syntax.c: 125: const char *pval = (0);
  3892  000828  6B95               	clrf	this_parse_parameter@pval& (0+255),b
  3893  00082A  6B96               	clrf	(this_parse_parameter@pval+1)& (0+255),b
  3894  00082C  6B97               	clrf	(this_parse_parameter@pval+2)& (0+255),b
  3895                           
  3896                           ;syntax.c: 126: INT16 var_len;
  3897                           ;syntax.c: 127: INT16 i = 0;
  3898  00082E  6B98               	clrf	this_parse_parameter@i& (0+255),b
  3899  000830  6B99               	clrf	(this_parse_parameter@i+1)& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;syntax.c: 128: INT16 str_len = string_utils_strchr(pstr, ('$'));
  3903  000832  D8D4               	call	PL54	;call to abstracted procedure
  3904  000834  0E24               	movlw	36
  3905  000836  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3906  000838  ECBA  F008         	call	_string_utils_strchr	;wreg free
  3907  00083C  0100               	movlb	0	; () banked
  3908  00083E  C06C  F093         	movff	?_string_utils_strchr,this_parse_parameter@str_len
  3909  000842  C06D  F094         	movff	?_string_utils_strchr+1,this_parse_parameter@str_len+1
  3910                           
  3911                           ;syntax.c: 130: var_len = string_utils_strchr(pstr, '=');
  3912  000846  D8CA               	call	PL54	;call to abstracted procedure
  3913  000848  0E3D               	movlw	61
  3914  00084A  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  3915  00084C  ECBA  F008         	call	_string_utils_strchr	;wreg free
  3916  000850  0100               	movlb	0	; () banked
  3917  000852  C06C  F09A         	movff	?_string_utils_strchr,this_parse_parameter@var_len
  3918  000856  C06D  F09B         	movff	?_string_utils_strchr+1,this_parse_parameter@var_len+1
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;syntax.c: 131: if (var_len >= 0 && var_len < str_len) {
  3922  00085A  BF9B               	btfsc	(this_parse_parameter@var_len+1)& (0+255),7,b
  3923  00085C  D01B               	goto	l657
  3924                           
  3925                           ; BSR set to: 0
  3926  00085E  519B               	movf	(this_parse_parameter@var_len+1)& (0+255),w,b
  3927  000860  0A80               	xorlw	128
  3928  000862  6F8D               	movwf	??_this_parse_parameter& (0+255),b
  3929  000864  5193               	movf	this_parse_parameter@str_len& (0+255),w,b
  3930  000866  5D9A               	subwf	this_parse_parameter@var_len& (0+255),w,b
  3931  000868  5194               	movf	(this_parse_parameter@str_len+1)& (0+255),w,b
  3932  00086A  0A80               	xorlw	128
  3933  00086C  598D               	subwfb	??_this_parse_parameter& (0+255),w,b
  3934  00086E  E212               	bc	l657
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;syntax.c: 132: pval = &pstr[ var_len + 1 ] ;
  3938  000870  C08B  F08D         	movff	this_parse_parameter@pstr,??_this_parse_parameter
  3939  000874  C08C  F08E         	movff	this_parse_parameter@pstr+1,??_this_parse_parameter+1
  3940  000878  519A               	movf	this_parse_parameter@var_len& (0+255),w,b
  3941  00087A  278D               	addwf	??_this_parse_parameter& (0+255),f,b
  3942  00087C  519B               	movf	(this_parse_parameter@var_len+1)& (0+255),w,b
  3943  00087E  238E               	addwfc	(??_this_parse_parameter+1)& (0+255),f,b
  3944  000880  2B8D               	incf	??_this_parse_parameter& (0+255),f,b
  3945  000882  0E00               	movlw	0
  3946  000884  238E               	addwfc	(??_this_parse_parameter+1)& (0+255),f,b
  3947  000886  518D               	movf	??_this_parse_parameter& (0+255),w,b
  3948  000888  6F95               	movwf	this_parse_parameter@pval& (0+255),b
  3949  00088A  518E               	movf	(??_this_parse_parameter+1)& (0+255),w,b
  3950  00088C  6F96               	movwf	(this_parse_parameter@pval+1)& (0+255),b
  3951  00088E  0E20               	movlw	32
  3952  000890  6F97               	movwf	(this_parse_parameter@pval+2)& (0+255),b
  3953                           
  3954                           ;syntax.c: 133: } else {
  3955  000892  D004               	goto	l5942
  3956  000894                     l657:
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;syntax.c: 135: var_len = str_len;
  3960  000894  C093  F09A         	movff	this_parse_parameter@str_len,this_parse_parameter@var_len
  3961  000898  C094  F09B         	movff	this_parse_parameter@str_len+1,this_parse_parameter@var_len+1
  3962  00089C                     l5942:
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;syntax.c: 136: }
  3966                           ;syntax.c: 138: string_utils_copy(parameter_text, pvar, var_len);
  3967  00089C  0E03               	movlw	high _parameter_text
  3968  00089E  0100               	movlb	0	; () banked
  3969  0008A0  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  3970  0008A2  0E00               	movlw	low _parameter_text
  3971  0008A4  6F6C               	movwf	?_string_utils_copy& (0+255),b
  3972  0008A6  5191               	movf	this_parse_parameter@pvar& (0+255),w,b
  3973  0008A8  6F6E               	movwf	(?_string_utils_copy+2)& (0+255),b
  3974  0008AA  5192               	movf	(this_parse_parameter@pvar+1)& (0+255),w,b
  3975  0008AC  6F6F               	movwf	(?_string_utils_copy+3)& (0+255),b
  3976  0008AE  0E20               	movlw	32
  3977  0008B0  6F70               	movwf	(?_string_utils_copy+4)& (0+255),b
  3978  0008B2  C09A  F071         	movff	this_parse_parameter@var_len,?_string_utils_copy+5
  3979  0008B6  C09B  F072         	movff	this_parse_parameter@var_len+1,?_string_utils_copy+6
  3980  0008BA  EC93  F009         	call	_string_utils_copy	;wreg free
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;syntax.c: 139: parameter_text[var_len] = '\0';
  3984  0008BE  0E00               	movlw	low _parameter_text
  3985  0008C0  0100               	movlb	0	; () banked
  3986  0008C2  259A               	addwf	this_parse_parameter@var_len& (0+255),w,b
  3987  0008C4  6ED9               	movwf	fsr2l,c
  3988  0008C6  0E03               	movlw	high _parameter_text
  3989  0008C8  219B               	addwfc	(this_parse_parameter@var_len+1)& (0+255),w,b
  3990  0008CA  6EDA               	movwf	fsr2h,c
  3991  0008CC  6ADF               	clrf	indf2,c
  3992                           
  3993                           ;syntax.c: 140: while( syx_param_list[i].name[0] != 0x1D ) {
  3994  0008CE  D066               	goto	l5962
  3995  0008D0                     l5946:
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;syntax.c: 141: if (string_utils_strlen( syx_param_list[i].name ) == var_len){
  3999  0008D0  C098  F06C         	movff	this_parse_parameter@i,?___wmul
  4000  0008D4  C099  F06D         	movff	this_parse_parameter@i+1,?___wmul+1
  4001  0008D8  6B6F               	clrf	(?___wmul+3)& (0+255),b
  4002  0008DA  0E16               	movlw	22
  4003  0008DC  6F6E               	movwf	(?___wmul+2)& (0+255),b
  4004  0008DE  ECE8  F00C         	call	___wmul	;wreg free
  4005  0008E2  0E70               	movlw	low _syx_param_list
  4006  0008E4  256C               	addwf	?___wmul& (0+255),w,b
  4007  0008E6  6F72               	movwf	?_string_utils_strlen& (0+255),b
  4008  0008E8  0E7D               	movlw	high _syx_param_list
  4009  0008EA  216D               	addwfc	(?___wmul+1)& (0+255),w,b
  4010  0008EC  6F73               	movwf	(?_string_utils_strlen+1)& (0+255),b
  4011  0008EE  EC5B  F00B         	call	_string_utils_strlen	;wreg free
  4012  0008F2  519B               	movf	(this_parse_parameter@var_len+1)& (0+255),w,b
  4013  0008F4  1973               	xorwf	(?_string_utils_strlen+1)& (0+255),w,b
  4014  0008F6  E102               	bnz	u6375
  4015  0008F8  519A               	movf	this_parse_parameter@var_len& (0+255),w,b
  4016  0008FA  1972               	xorwf	?_string_utils_strlen& (0+255),w,b
  4017  0008FC                     u6375:
  4018  0008FC  E14D               	bnz	l5960
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;syntax.c: 142: CHAR is_equal = string_utils_strncmp(syx_param_list[i].name, pvar, var_l
      +                          en, this_case_sensitive);
  4022  0008FE  C098  F06C         	movff	this_parse_parameter@i,?___wmul
  4023  000902  C099  F06D         	movff	this_parse_parameter@i+1,?___wmul+1
  4024  000906  6B6F               	clrf	(?___wmul+3)& (0+255),b
  4025  000908  0E16               	movlw	22
  4026  00090A  6F6E               	movwf	(?___wmul+2)& (0+255),b
  4027  00090C  ECE8  F00C         	call	___wmul	;wreg free
  4028  000910  0E70               	movlw	low _syx_param_list
  4029  000912  256C               	addwf	?___wmul& (0+255),w,b
  4030  000914  6F72               	movwf	?_string_utils_strncmp& (0+255),b
  4031  000916  0E7D               	movlw	high _syx_param_list
  4032  000918  216D               	addwfc	(?___wmul+1)& (0+255),w,b
  4033  00091A  6F73               	movwf	(?_string_utils_strncmp+1)& (0+255),b
  4034  00091C  C091  F074         	movff	this_parse_parameter@pvar,?_string_utils_strncmp+2
  4035  000920  C092  F075         	movff	this_parse_parameter@pvar+1,?_string_utils_strncmp+3
  4036  000924  C09A  F076         	movff	this_parse_parameter@var_len,?_string_utils_strncmp+4
  4037  000928  C09B  F077         	movff	this_parse_parameter@var_len+1,?_string_utils_strncmp+5
  4038  00092C  C0C4  F078         	movff	_this_case_sensitive,?_string_utils_strncmp+6
  4039  000930  ECBE  F007         	call	_string_utils_strncmp	;wreg free
  4040  000934  6F8F               	movwf	this_parse_parameter@is_equal& (0+255),b
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;syntax.c: 143: if ( is_equal ) {
  4044  000936  518F               	movf	this_parse_parameter@is_equal& (0+255),w,b
  4045  000938  E02F               	bz	l5960
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;syntax.c: 144: parameter_id = syx_param_list[i].id;
  4049  00093A  C098  F06C         	movff	this_parse_parameter@i,?___wmul
  4050  00093E  C099  F06D         	movff	this_parse_parameter@i+1,?___wmul+1
  4051  000942  6B6F               	clrf	(?___wmul+3)& (0+255),b
  4052  000944  0E16               	movlw	22
  4053  000946  6F6E               	movwf	(?___wmul+2)& (0+255),b
  4054  000948  ECE8  F00C         	call	___wmul	;wreg free
  4055  00094C  0E14               	movlw	20
  4056  00094E  D83B               	call	PL32	;call to abstracted procedure
  4057  000950  50F5               	movf	tablat,w,c
  4058  000952  6FC0               	movwf	_parameter_id& (0+255),b
  4059  000954  6BC1               	clrf	(_parameter_id+1)& (0+255),b
  4060  000956  BFC0               	btfsc	_parameter_id& (0+255),7,b
  4061  000958  07C1               	decf	(_parameter_id+1)& (0+255),f,b
  4062                           
  4063                           ;syntax.c: 145: parameter_type = syx_param_list[i].type;
  4064  00095A  C098  F06C         	movff	this_parse_parameter@i,?___wmul
  4065  00095E  C099  F06D         	movff	this_parse_parameter@i+1,?___wmul+1
  4066  000962  6B6F               	clrf	(?___wmul+3)& (0+255),b
  4067  000964  0E16               	movlw	22
  4068  000966  6F6E               	movwf	(?___wmul+2)& (0+255),b
  4069  000968  ECE8  F00C         	call	___wmul	;wreg free
  4070  00096C  0E15               	movlw	21
  4071  00096E  D82B               	call	PL32	;call to abstracted procedure
  4072  000970  CFF5 F0C2          	movff	tablat,_parameter_type
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;syntax.c: 146: if (pval)
  4076  000974  5195               	movf	this_parse_parameter@pval& (0+255),w,b
  4077  000976  1196               	iorwf	(this_parse_parameter@pval+1)& (0+255),w,b
  4078  000978  1197               	iorwf	(this_parse_parameter@pval+2)& (0+255),w,b
  4079  00097A  E00A               	bz	l5958
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;syntax.c: 147: this_variable_load_from_text(pval, parameter_type);
  4083  00097C  C095  F085         	movff	this_parse_parameter@pval,?_this_variable_load_from_text
  4084  000980  C096  F086         	movff	this_parse_parameter@pval+1,?_this_variable_load_from_text+1
  4085  000984  C097  F087         	movff	this_parse_parameter@pval+2,?_this_variable_load_from_text+2
  4086  000988  C0C2  F088         	movff	_parameter_type,?_this_variable_load_from_text+3
  4087  00098C  EC6F  F008         	call	_this_variable_load_from_text	;wreg free
  4088  000990                     l5958:
  4089                           
  4090                           ;syntax.c: 148: result = TRUE;
  4091  000990  0E01               	movlw	1
  4092  000992  0100               	movlb	0	; () banked
  4093  000994  6F90               	movwf	this_parse_parameter@result& (0+255),b
  4094                           
  4095                           ;syntax.c: 149: break;
  4096  000996  D015               	goto	l5964
  4097  000998                     l5960:
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;syntax.c: 150: }
  4101                           ;syntax.c: 151: }
  4102                           ;syntax.c: 152: i++;
  4103  000998  4B98               	infsnz	this_parse_parameter@i& (0+255),f,b
  4104  00099A  2B99               	incf	(this_parse_parameter@i+1)& (0+255),f,b
  4105  00099C                     l5962:
  4106                           
  4107                           ; BSR set to: 0
  4108  00099C  C098  F06C         	movff	this_parse_parameter@i,?___wmul
  4109  0009A0  C099  F06D         	movff	this_parse_parameter@i+1,?___wmul+1
  4110  0009A4  6B6F               	clrf	(?___wmul+3)& (0+255),b
  4111  0009A6  0E16               	movlw	22
  4112  0009A8  6F6E               	movwf	(?___wmul+2)& (0+255),b
  4113  0009AA  ECE8  F00C         	call	___wmul	;wreg free
  4114  0009AE  0E70               	movlw	low _syx_param_list
  4115  0009B0  256C               	addwf	?___wmul& (0+255),w,b
  4116  0009B2  6EF6               	movwf	tblptrl,c
  4117  0009B4  0E7D               	movlw	high _syx_param_list
  4118  0009B6  216D               	addwfc	(?___wmul+1)& (0+255),w,b
  4119  0009B8  6EF7               	movwf	tblptrh,c
  4120  0009BA  0008               	tblrd		*
  4121  0009BC  50F5               	movf	tablat,w,c
  4122  0009BE  0A1D               	xorlw	29
  4123  0009C0  E187               	bnz	l5946
  4124  0009C2                     l5964:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;syntax.c: 153: }
  4128                           ;syntax.c: 154: }
  4129                           ;syntax.c: 155: return result;
  4130  0009C2  5190               	movf	this_parse_parameter@result& (0+255),w,b
  4131                           
  4132                           ; BSR set to: 0
  4133  0009C4  0012               	return	
  4134  0009C6                     __end_of_this_parse_parameter:
  4135                           	opt stack 0
  4136  0009C6                     PL32:
  4137                           	opt stack 19
  4138  0009C6  276C               	addwf	?___wmul& (0+255),f,b
  4139  0009C8  0E00               	movlw	0
  4140  0009CA  236D               	addwfc	(?___wmul+1)& (0+255),f,b
  4141  0009CC  0E70               	movlw	low _syx_param_list
  4142  0009CE  246C               	addwf	?___wmul,w,c
  4143  0009D0  6EF6               	movwf	tblptrl,c
  4144  0009D2  0E7D               	movlw	high _syx_param_list
  4145  0009D4  206D               	addwfc	?___wmul+1,w,c
  4146  0009D6  6EF7               	movwf	tblptrh,c
  4147  0009D8  0008               	tblrd		*
  4148  0009DA  0012               	return	
  4149  0009DC                     __end_ofPL32:
  4150                           	opt stack 0
  4151  0009DC                     PL54:
  4152                           	opt stack 19
  4153  0009DC  518B               	movf	this_parse_parameter@pstr& (0+255),w,b
  4154  0009DE  6F6C               	movwf	?_string_utils_strchr& (0+255),b
  4155  0009E0  518C               	movf	(this_parse_parameter@pstr+1)& (0+255),w,b
  4156  0009E2  6F6D               	movwf	(?_string_utils_strchr+1)& (0+255),b
  4157  0009E4  0E20               	movlw	32
  4158  0009E6  6F6E               	movwf	(?_string_utils_strchr+2)& (0+255),b
  4159  0009E8  0C20               	retlw	32
  4160  0009EA                     __end_ofPL54:
  4161                           	opt stack 0
  4162                           tosu	equ	0xFFF
  4163                           tosh	equ	0xFFE
  4164                           tosl	equ	0xFFD
  4165                           pclath	equ	0xFFA
  4166                           tblptru	equ	0xFF8
  4167                           tblptrh	equ	0xFF7
  4168                           tblptrl	equ	0xFF6
  4169                           tablat	equ	0xFF5
  4170                           prodh	equ	0xFF4
  4171                           prodl	equ	0xFF3
  4172                           intcon	equ	0xFF2
  4173                           indf0	equ	0xFEF
  4174                           postinc0	equ	0xFEE
  4175                           fsr0h	equ	0xFEA
  4176                           fsr0l	equ	0xFE9
  4177                           wreg	equ	0xFE8
  4178                           indf1	equ	0xFE7
  4179                           postinc1	equ	0xFE6
  4180                           postdec1	equ	0xFE5
  4181                           fsr1h	equ	0xFE2
  4182                           fsr1l	equ	0xFE1
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           fsr2h	equ	0xFDA
  4187                           fsr2l	equ	0xFD9
  4188                           status	equ	0xFD8
  4189                           
  4190 ;; *************** function _string_utils_strncmp *****************
  4191 ;; Defined at:
  4192 ;;		line 292 in file "src/modules/string_utils.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;  pstr1           2   18[BANK0 ] PTR const unsigned char 
  4195 ;;		 -> this_buf(127), syx_param_list(528), 
  4196 ;;  pstr2           2   20[BANK0 ] PTR const unsigned char 
  4197 ;;		 -> this_buf(127), syx_cmd_list(105), 
  4198 ;;  len             2   22[BANK0 ] int 
  4199 ;;  case_sensiti    1   24[BANK0 ] unsigned char 
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;  symb2           1   31[BANK0 ] unsigned char 
  4202 ;;  symb1           1   30[BANK0 ] unsigned char 
  4203 ;;  pos             2   28[BANK0 ] int 
  4204 ;;  result          1   27[BANK0 ] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      unsigned char 
  4207 ;; Registers used:
  4208 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : F/0
  4211 ;;		On exit  : F/0
  4212 ;;		Unchanged: FFFFFFF0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4214 ;;      Params:         0       7       0       0       0       0       0
  4215 ;;      Locals:         0       5       0       0       0       0       0
  4216 ;;      Temps:          0       2       0       0       0       0       0
  4217 ;;      Totals:         0      14       0       0       0       0       0
  4218 ;;Total ram usage:       14 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    6
  4221 ;; This function calls:
  4222 ;;		_string_utils_is_upper_case
  4223 ;; This function is called by:
  4224 ;;		_this_parse_command
  4225 ;;		_this_parse_parameter
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text12
  4230  000F7C                     __ptext12:
  4231                           	opt stack 0
  4232  000F7C                     _string_utils_strncmp:
  4233                           	opt stack 21
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;string_utils.c: 293: CHAR result = FALSE;
  4237                           
  4238                           ; BSR set to: 0
  4239  000F7C  6B7B               	clrf	string_utils_strncmp@result& (0+255),b
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;string_utils.c: 294: if (pstr1 != (0) && pstr2 != (0) )
  4243  000F7E  5173               	movf	(string_utils_strncmp@pstr1+1)& (0+255),w,b
  4244  000F80  1172               	iorwf	string_utils_strncmp@pstr1& (0+255),w,b
  4245  000F82  E04C               	bz	l5852
  4246                           
  4247                           ; BSR set to: 0
  4248  000F84  5175               	movf	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  4249  000F86  1174               	iorwf	string_utils_strncmp@pstr2& (0+255),w,b
  4250  000F88  E049               	bz	l5852
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;string_utils.c: 295: {
  4254                           ;string_utils.c: 296: INT16 pos = 0;
  4255  000F8A  6B7C               	clrf	string_utils_strncmp@pos& (0+255),b
  4256  000F8C  6B7D               	clrf	(string_utils_strncmp@pos+1)& (0+255),b
  4257                           
  4258                           ;string_utils.c: 297: while ( len-- )
  4259  000F8E  D03E               	goto	l5850
  4260  000F90                     l5828:
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;string_utils.c: 298: {
  4264                           ;string_utils.c: 299: char symb1 = pstr1[pos];
  4265  000F90  C072  F079         	movff	string_utils_strncmp@pstr1,??_string_utils_strncmp
  4266  000F94  C073  F07A         	movff	string_utils_strncmp@pstr1+1,??_string_utils_strncmp+1
  4267  000F98  D843               	call	PL34	;call to abstracted procedure
  4268  000F9A  64EA               	cpfsgt	fsr0h,c
  4269  000F9C  D003               	bra	u6217
  4270  000F9E  6EEA               	movwf	fsr0h,c
  4271  000FA0  50EF               	movf	indf0,w,c
  4272  000FA2  D003               	bra	u6210
  4273  000FA4                     u6217:
  4274  000FA4  6EF7               	movwf	tblptrh,c
  4275  000FA6  0008               	tblrd		*
  4276  000FA8  50F5               	movf	tablat,w,c
  4277  000FAA                     u6210:
  4278  000FAA  0100               	movlb	0	; () banked
  4279  000FAC  6F7E               	movwf	string_utils_strncmp@symb1& (0+255),b
  4280                           
  4281                           ;string_utils.c: 300: char symb2 = pstr2[pos];
  4282  000FAE  C074  F079         	movff	string_utils_strncmp@pstr2,??_string_utils_strncmp
  4283  000FB2  C075  F07A         	movff	string_utils_strncmp@pstr2+1,??_string_utils_strncmp+1
  4284  000FB6  D834               	call	PL34	;call to abstracted procedure
  4285  000FB8  64EA               	cpfsgt	fsr0h,c
  4286  000FBA  D003               	bra	u6227
  4287  000FBC  6EEA               	movwf	fsr0h,c
  4288  000FBE  50EF               	movf	indf0,w,c
  4289  000FC0  D003               	bra	u6220
  4290  000FC2                     u6227:
  4291  000FC2  6EF7               	movwf	tblptrh,c
  4292  000FC4  0008               	tblrd		*
  4293  000FC6  50F5               	movf	tablat,w,c
  4294  000FC8                     u6220:
  4295  000FC8  0100               	movlb	0	; () banked
  4296  000FCA  6F7F               	movwf	string_utils_strncmp@symb2& (0+255),b
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;string_utils.c: 302: if ( !case_sensitive )
  4300  000FCC  6778               	tstfsz	string_utils_strncmp@case_sensitive& (0+255),b
  4301  000FCE  D00E               	goto	l5840
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;string_utils.c: 303: {
  4305                           ;string_utils.c: 304: if ( string_utils_is_upper_case(symb1) )
  4306  000FD0  517E               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4307  000FD2  EC61  F00D         	call	_string_utils_is_upper_case
  4308  000FD6  0900               	iorlw	0
  4309  000FD8  E002               	bz	l5836
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;string_utils.c: 305: {
  4313                           ;string_utils.c: 306: symb1 = (symb1+('a' - 'A'));
  4314  000FDA  0E20               	movlw	32
  4315  000FDC  277E               	addwf	string_utils_strncmp@symb1& (0+255),f,b
  4316  000FDE                     l5836:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;string_utils.c: 307: }
  4320                           ;string_utils.c: 308: if ( string_utils_is_upper_case(symb2) )
  4321  000FDE  517F               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4322  000FE0  EC61  F00D         	call	_string_utils_is_upper_case
  4323  000FE4  0900               	iorlw	0
  4324  000FE6  E002               	bz	l5840
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;string_utils.c: 309: {
  4328                           ;string_utils.c: 310: symb2 = (symb2+('a' - 'A'));
  4329  000FE8  0E20               	movlw	32
  4330  000FEA  277F               	addwf	string_utils_strncmp@symb2& (0+255),f,b
  4331  000FEC                     l5840:
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;string_utils.c: 311: }
  4335                           ;string_utils.c: 312: }
  4336                           ;string_utils.c: 313: if (symb1 == symb2 || symb1 == '?' || symb2 == '?')
  4337  000FEC  517E               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4338  000FEE  197F               	xorwf	string_utils_strncmp@symb2& (0+255),w,b
  4339  000FF0  E006               	bz	l5846
  4340                           
  4341                           ; BSR set to: 0
  4342  000FF2  517E               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4343  000FF4  0A3F               	xorlw	63
  4344  000FF6  E003               	bz	l5846
  4345                           
  4346                           ; BSR set to: 0
  4347  000FF8  517F               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4348  000FFA  0A3F               	xorlw	63
  4349  000FFC  E103               	bnz	l538
  4350  000FFE                     l5846:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;string_utils.c: 314: {
  4354                           ;string_utils.c: 315: result = TRUE;
  4355  000FFE  0E01               	movlw	1
  4356  001000  6F7B               	movwf	string_utils_strncmp@result& (0+255),b
  4357                           
  4358                           ;string_utils.c: 316: }
  4359  001002  D002               	goto	l5848
  4360  001004                     l538:
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;string_utils.c: 317: else
  4364                           ;string_utils.c: 318: {
  4365                           ;string_utils.c: 319: result = FALSE;
  4366  001004  6B7B               	clrf	string_utils_strncmp@result& (0+255),b
  4367                           
  4368                           ;string_utils.c: 320: break;
  4369  001006  D00A               	goto	l5852
  4370  001008                     l5848:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;string_utils.c: 321: }
  4374                           ;string_utils.c: 322: pos++;
  4375  001008  4B7C               	infsnz	string_utils_strncmp@pos& (0+255),f,b
  4376  00100A  2B7D               	incf	(string_utils_strncmp@pos+1)& (0+255),f,b
  4377  00100C                     l5850:
  4378                           
  4379                           ; BSR set to: 0
  4380  00100C  0776               	decf	string_utils_strncmp@len& (0+255),f,b
  4381  00100E  A0D8               	btfss	status,0,c
  4382  001010  0777               	decf	(string_utils_strncmp@len+1)& (0+255),f,b
  4383  001012  0100               	movlb	0	; () banked
  4384  001014  2976               	incf	string_utils_strncmp@len& (0+255),w,b
  4385  001016  B4D8               	btfsc	status,2,c
  4386  001018  2977               	incf	(string_utils_strncmp@len+1)& (0+255),w,b
  4387  00101A  E1BA               	bnz	l5828
  4388  00101C                     l5852:
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;string_utils.c: 323: }
  4392                           ;string_utils.c: 324: }
  4393                           ;string_utils.c: 325: return result;
  4394  00101C  517B               	movf	string_utils_strncmp@result& (0+255),w,b
  4395                           
  4396                           ; BSR set to: 0
  4397  00101E  0012               	return	
  4398  001020                     __end_of_string_utils_strncmp:
  4399                           	opt stack 0
  4400  001020                     PL34:
  4401                           	opt stack 21
  4402  001020  517C               	movf	string_utils_strncmp@pos& (0+255),w,b
  4403  001022  2779               	addwf	??_string_utils_strncmp& (0+255),f,b
  4404  001024  517D               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  4405  001026  237A               	addwfc	(??_string_utils_strncmp+1)& (0+255),f,b
  4406  001028  5179               	movf	??_string_utils_strncmp& (0+255),w,b
  4407  00102A  6EF6               	movwf	tblptrl,c
  4408  00102C  6EE9               	movwf	fsr0l,c
  4409  00102E  0E05               	movlw	(high __ramtop+-1)
  4410  001030  6EEA               	movwf	fsr0h,c
  4411  001032  517A               	movf	(??_string_utils_strncmp+1)& (0+255),w,b
  4412  001034  0012               	return	
  4413  001036                     __end_ofPL34:
  4414                           	opt stack 0
  4415                           tosu	equ	0xFFF
  4416                           tosh	equ	0xFFE
  4417                           tosl	equ	0xFFD
  4418                           pclath	equ	0xFFA
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           indf0	equ	0xFEF
  4427                           postinc0	equ	0xFEE
  4428                           fsr0h	equ	0xFEA
  4429                           fsr0l	equ	0xFE9
  4430                           wreg	equ	0xFE8
  4431                           indf1	equ	0xFE7
  4432                           postinc1	equ	0xFE6
  4433                           postdec1	equ	0xFE5
  4434                           fsr1h	equ	0xFE2
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           fsr2h	equ	0xFDA
  4440                           fsr2l	equ	0xFD9
  4441                           status	equ	0xFD8
  4442                           
  4443 ;; *************** function _string_utils_is_upper_case *****************
  4444 ;; Defined at:
  4445 ;;		line 167 in file "src/modules/string_utils.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;  symb            1    wreg     unsigned char 
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  symb            1   13[BANK0 ] unsigned char 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      unsigned char 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2
  4454 ;; Tracked objects:
  4455 ;;		On entry : F/0
  4456 ;;		On exit  : F/0
  4457 ;;		Unchanged: FFFFFFF0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4459 ;;      Params:         0       0       0       0       0       0       0
  4460 ;;      Locals:         0       2       0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0
  4462 ;;      Totals:         0       2       0       0       0       0       0
  4463 ;;Total ram usage:        2 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    5
  4466 ;; This function calls:
  4467 ;;		Nothing
  4468 ;; This function is called by:
  4469 ;;		_string_utils_strncmp
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           	psect	text13
  4474  001AC2                     __ptext13:
  4475                           	opt stack 0
  4476  001AC2                     _string_utils_is_upper_case:
  4477                           	opt stack 21
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;string_utils_is_upper_case@symb stored from wreg
  4481  001AC2  CFE8 F06D          	movff	wreg,string_utils_is_upper_case@symb
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;string_utils.c: 168: return (symb >= 'A') && (symb <= 'Z');
  4485  001AC6  6B6C               	clrf	_string_utils_is_upper_case$730& (0+255),b
  4486                           
  4487                           ; BSR set to: 0
  4488  001AC8  0E40               	movlw	64
  4489  001ACA  656D               	cpfsgt	string_utils_is_upper_case@symb& (0+255),b
  4490  001ACC  D005               	goto	l490
  4491                           
  4492                           ; BSR set to: 0
  4493  001ACE  0E5B               	movlw	91
  4494  001AD0  616D               	cpfslt	string_utils_is_upper_case@symb& (0+255),b
  4495  001AD2  D002               	goto	l490
  4496                           
  4497                           ; BSR set to: 0
  4498  001AD4  0E01               	movlw	1
  4499  001AD6  6F6C               	movwf	_string_utils_is_upper_case$730& (0+255),b
  4500  001AD8                     l490:
  4501                           
  4502                           ; BSR set to: 0
  4503  001AD8  516C               	movf	_string_utils_is_upper_case$730& (0+255),w,b
  4504                           
  4505                           ; BSR set to: 0
  4506  001ADA  0012               	return	
  4507  001ADC                     __end_of_string_utils_is_upper_case:
  4508                           	opt stack 0
  4509                           tosu	equ	0xFFF
  4510                           tosh	equ	0xFFE
  4511                           tosl	equ	0xFFD
  4512                           pclath	equ	0xFFA
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           indf0	equ	0xFEF
  4521                           postinc0	equ	0xFEE
  4522                           fsr0h	equ	0xFEA
  4523                           fsr0l	equ	0xFE9
  4524                           wreg	equ	0xFE8
  4525                           indf1	equ	0xFE7
  4526                           postinc1	equ	0xFE6
  4527                           postdec1	equ	0xFE5
  4528                           fsr1h	equ	0xFE2
  4529                           fsr1l	equ	0xFE1
  4530                           indf2	equ	0xFDF
  4531                           postinc2	equ	0xFDE
  4532                           postdec2	equ	0xFDD
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _this_variable_load_from_text *****************
  4538 ;; Defined at:
  4539 ;;		line 43 in file "src/modules/syntax.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  pval            3   37[BANK0 ] PTR const unsigned char 
  4542 ;;		 -> this_buf(127), ROM(32767), 
  4543 ;;  var_type        1   40[BANK0 ] enum E4387
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;  len             2   41[BANK0 ] int 
  4546 ;; Return value:  Size  Location     Type
  4547 ;;		None               void
  4548 ;; Registers used:
  4549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4550 ;; Tracked objects:
  4551 ;;		On entry : F/0
  4552 ;;		On exit  : C/0
  4553 ;;		Unchanged: FFFFFFF0/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4555 ;;      Params:         0       4       0       0       0       0       0
  4556 ;;      Locals:         0       2       0       0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0
  4558 ;;      Totals:         0       6       0       0       0       0       0
  4559 ;;Total ram usage:        6 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    8
  4562 ;; This function calls:
  4563 ;;		_string_utils_strchr
  4564 ;;		_string_utils_copy
  4565 ;;		_string_utils_from_hex
  4566 ;; This function is called by:
  4567 ;;		_this_parse_parameter
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text14
  4572  0010DE                     __ptext14:
  4573                           	opt stack 0
  4574  0010DE                     _this_variable_load_from_text:
  4575                           	opt stack 19
  4576                           
  4577                           ; BSR set to: 0
  4578                           ;syntax.c: 44: if (pval != (0) ) {
  4579                           
  4580                           ; BSR set to: 0
  4581  0010DE  5185               	movf	this_variable_load_from_text@pval& (0+255),w,b
  4582  0010E0  1186               	iorwf	(this_variable_load_from_text@pval+1)& (0+255),w,b
  4583  0010E2  1187               	iorwf	(this_variable_load_from_text@pval+2)& (0+255),w,b
  4584  0010E4  B4D8               	btfsc	status,2,c
  4585  0010E6  0012               	return	
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;syntax.c: 45: INT16 len = string_utils_strchr(pval, ('$'));
  4589  0010E8  C085  F06C         	movff	this_variable_load_from_text@pval,?_string_utils_strchr
  4590  0010EC  C086  F06D         	movff	this_variable_load_from_text@pval+1,?_string_utils_strchr+1
  4591  0010F0  C087  F06E         	movff	this_variable_load_from_text@pval+2,?_string_utils_strchr+2
  4592  0010F4  0E24               	movlw	36
  4593  0010F6  6F6F               	movwf	(?_string_utils_strchr+3)& (0+255),b
  4594  0010F8  ECBA  F008         	call	_string_utils_strchr	;wreg free
  4595  0010FC  C06C  F089         	movff	?_string_utils_strchr,this_variable_load_from_text@len
  4596  001100  C06D  F08A         	movff	?_string_utils_strchr+1,this_variable_load_from_text@len+1
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;syntax.c: 46: string_utils_copy(parameter_value , pval, len);
  4600  001104  0E03               	movlw	high _parameter_value
  4601  001106  0100               	movlb	0	; () banked
  4602  001108  6F6D               	movwf	(?_string_utils_copy+1)& (0+255),b
  4603  00110A  0E7F               	movlw	low _parameter_value
  4604  00110C  6F6C               	movwf	?_string_utils_copy& (0+255),b
  4605  00110E  C085  F06E         	movff	this_variable_load_from_text@pval,?_string_utils_copy+2
  4606  001112  C086  F06F         	movff	this_variable_load_from_text@pval+1,?_string_utils_copy+3
  4607  001116  C087  F070         	movff	this_variable_load_from_text@pval+2,?_string_utils_copy+4
  4608  00111A  C089  F071         	movff	this_variable_load_from_text@len,?_string_utils_copy+5
  4609  00111E  C08A  F072         	movff	this_variable_load_from_text@len+1,?_string_utils_copy+6
  4610  001122  EC93  F009         	call	_string_utils_copy	;wreg free
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;syntax.c: 47: parameter_value[len] = '\0';
  4614  001126  0E7F               	movlw	low _parameter_value
  4615  001128  0100               	movlb	0	; () banked
  4616  00112A  2589               	addwf	this_variable_load_from_text@len& (0+255),w,b
  4617  00112C  6ED9               	movwf	fsr2l,c
  4618  00112E  0E03               	movlw	high _parameter_value
  4619  001130  218A               	addwfc	(this_variable_load_from_text@len+1)& (0+255),w,b
  4620  001132  6EDA               	movwf	fsr2h,c
  4621  001134  6ADF               	clrf	indf2,c
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;syntax.c: 50: parameter_type = var_type;
  4625  001136  C088  F0C2         	movff	this_variable_load_from_text@var_type,_parameter_type
  4626                           
  4627                           ;syntax.c: 51: switch (parameter_type) {
  4628  00113A  D00F               	goto	l5904
  4629  00113C                     l5900:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;syntax.c: 74: {
  4633                           ;syntax.c: 75: string_utils_from_hex(parameter_value, parameter_value );
  4634  00113C  0E03               	movlw	high _parameter_value
  4635  00113E  0100               	movlb	0	; () banked
  4636  001140  6F79               	movwf	(?_string_utils_from_hex+1)& (0+255),b
  4637  001142  0E7F               	movlw	low _parameter_value
  4638  001144  6F78               	movwf	?_string_utils_from_hex& (0+255),b
  4639  001146  0E03               	movlw	high _parameter_value
  4640  001148  6F7B               	movwf	(?_string_utils_from_hex+3)& (0+255),b
  4641  00114A  0E7F               	movlw	low _parameter_value
  4642  00114C  6F7A               	movwf	(?_string_utils_from_hex+2)& (0+255),b
  4643  00114E  EF04  F009         	goto	_string_utils_from_hex	;wreg free
  4644  001152                     l645:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;syntax.c: 80: *((INT16*)parameter_value) = 0u;
  4648  001152  0103               	movlb	3	; () banked
  4649  001154  6B7F               	clrf	_parameter_value& (0+255),b
  4650  001156  6B80               	clrf	(_parameter_value+1)& (0+255),b
  4651                           
  4652                           ;syntax.c: 81: break;
  4653  001158  0012               	return	
  4654  00115A                     l5904:
  4655                           
  4656                           ; BSR set to: 0
  4657  00115A  51C2               	movf	_parameter_type& (0+255),w,b
  4658                           
  4659                           ; Switch size 1, requested type "space"
  4660                           ; Number of cases is 4, Range of values is 1 to 5
  4661                           ; switch strategies available:
  4662                           ; Name         Instructions Cycles
  4663                           ; simple_byte           13     7 (average)
  4664                           ;	Chosen strategy is simple_byte
  4665  00115C  0A01               	xorlw	1	; case 1
  4666  00115E  B4D8               	btfsc	status,2,c
  4667  001160  0012               	return	
  4668  001162  0A03               	xorlw	3	; case 2
  4669  001164  E0EB               	bz	l5900
  4670  001166  0A01               	xorlw	1	; case 3
  4671  001168  B4D8               	btfsc	status,2,c
  4672  00116A  0012               	return	
  4673  00116C  0A06               	xorlw	6	; case 5
  4674  00116E  B4D8               	btfsc	status,2,c
  4675                           
  4676                           ; BSR set to: 0
  4677  001170  0012               	return	
  4678  001172  D7EF               	goto	l645
  4679  001174                     __end_of_this_variable_load_from_text:
  4680                           	opt stack 0
  4681                           tosu	equ	0xFFF
  4682                           tosh	equ	0xFFE
  4683                           tosl	equ	0xFFD
  4684                           pclath	equ	0xFFA
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           indf0	equ	0xFEF
  4693                           postinc0	equ	0xFEE
  4694                           fsr0h	equ	0xFEA
  4695                           fsr0l	equ	0xFE9
  4696                           wreg	equ	0xFE8
  4697                           indf1	equ	0xFE7
  4698                           postinc1	equ	0xFE6
  4699                           postdec1	equ	0xFE5
  4700                           fsr1h	equ	0xFE2
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function _string_utils_copy *****************
  4710 ;; Defined at:
  4711 ;;		line 67 in file "src/modules/string_utils.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  pdst            2   12[BANK0 ] PTR unsigned char 
  4714 ;;		 -> parameter_text(127), parameter_value(127), 
  4715 ;;  psrc            3   14[BANK0 ] PTR const unsigned char 
  4716 ;;		 -> this_buf(127), ROM(32767), 
  4717 ;;  maxlen          2   17[BANK0 ] int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  result          2   19[BANK0 ] int 
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  2   12[BANK0 ] int 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4724 ;; Tracked objects:
  4725 ;;		On entry : F/0
  4726 ;;		On exit  : F/0
  4727 ;;		Unchanged: FFFFFFF0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4729 ;;      Params:         0       7       0       0       0       0       0
  4730 ;;      Locals:         0       2       0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0
  4732 ;;      Totals:         0       9       0       0       0       0       0
  4733 ;;Total ram usage:        9 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    5
  4736 ;; This function calls:
  4737 ;;		Nothing
  4738 ;; This function is called by:
  4739 ;;		_this_variable_load_from_text
  4740 ;;		_this_parse_parameter
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text15
  4745  001326                     __ptext15:
  4746                           	opt stack 0
  4747  001326                     _string_utils_copy:
  4748                           	opt stack 21
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;string_utils.c: 68: INT16 result = -1;
  4752  001326  6973               	setf	string_utils_copy@result& (0+255),b
  4753  001328  6974               	setf	(string_utils_copy@result+1)& (0+255),b
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;string_utils.c: 69: if (psrc != (0))
  4757  00132A  516E               	movf	string_utils_copy@psrc& (0+255),w,b
  4758  00132C  116F               	iorwf	(string_utils_copy@psrc+1)& (0+255),w,b
  4759  00132E  1170               	iorwf	(string_utils_copy@psrc+2)& (0+255),w,b
  4760  001330  B4D8               	btfsc	status,2,c
  4761  001332  0012               	return	
  4762  001334  D01E               	goto	l5746
  4763  001336                     l5738:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;string_utils.c: 72: {
  4767                           ;string_utils.c: 73: result++;
  4768  001336  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4769  001338  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;string_utils.c: 74: *pdst++ = *psrc++;
  4773  00133A  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4774  00133E  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4775  001342  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4776  001346  BAF8               	btfsc	tblptru,5,c
  4777  001348  D003               	bra	u6037
  4778  00134A  0008               	tblrd		*
  4779  00134C  50F5               	movf	tablat,w,c
  4780  00134E  D005               	bra	u6030
  4781  001350                     u6037:
  4782  001350  CFF6 FFE9          	movff	tblptrl,fsr0l
  4783  001354  CFF7 FFEA          	movff	tblptrh,fsr0h
  4784  001358  50EF               	movf	indf0,w,c
  4785  00135A                     u6030:
  4786  00135A  C06C  FFD9         	movff	string_utils_copy@pdst,fsr2l
  4787  00135E  C06D  FFDA         	movff	string_utils_copy@pdst+1,fsr2h
  4788  001362  6EDF               	movwf	indf2,c
  4789  001364  0100               	movlb	0	; () banked
  4790  001366  2B6E               	incf	string_utils_copy@psrc& (0+255),f,b
  4791  001368  0E00               	movlw	0
  4792  00136A  236F               	addwfc	(string_utils_copy@psrc+1)& (0+255),f,b
  4793  00136C  2370               	addwfc	(string_utils_copy@psrc+2)& (0+255),f,b
  4794                           
  4795                           ; BSR set to: 0
  4796  00136E  4B6C               	infsnz	string_utils_copy@pdst& (0+255),f,b
  4797  001370  2B6D               	incf	(string_utils_copy@pdst+1)& (0+255),f,b
  4798  001372                     l5746:
  4799                           
  4800                           ; BSR set to: 0
  4801  001372  C06E  FFF6         	movff	string_utils_copy@psrc,tblptrl
  4802  001376  C06F  FFF7         	movff	string_utils_copy@psrc+1,tblptrh
  4803  00137A  C070  FFF8         	movff	string_utils_copy@psrc+2,tblptru
  4804  00137E  BAF8               	btfsc	tblptru,5,c
  4805  001380  D003               	bra	u6047
  4806  001382  0008               	tblrd		*
  4807  001384  50F5               	movf	tablat,w,c
  4808  001386  D005               	bra	u6040
  4809  001388                     u6047:
  4810  001388  CFF6 FFE9          	movff	tblptrl,fsr0l
  4811  00138C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4812  001390  50EF               	movf	indf0,w,c
  4813  001392                     u6040:
  4814  001392  0900               	iorlw	0
  4815  001394  E008               	bz	l5750
  4816  001396  0100               	movlb	0	; () banked
  4817  001398  0771               	decf	string_utils_copy@maxlen& (0+255),f,b
  4818  00139A  A0D8               	btfss	status,0,c
  4819  00139C  0772               	decf	(string_utils_copy@maxlen+1)& (0+255),f,b
  4820  00139E  2971               	incf	string_utils_copy@maxlen& (0+255),w,b
  4821  0013A0  B4D8               	btfsc	status,2,c
  4822  0013A2  2972               	incf	(string_utils_copy@maxlen+1)& (0+255),w,b
  4823  0013A4  E1C8               	bnz	l5738
  4824  0013A6                     l5750:
  4825                           
  4826                           ;string_utils.c: 75: }
  4827                           ;string_utils.c: 76: result++;
  4828  0013A6  0100               	movlb	0	; () banked
  4829  0013A8  4B73               	infsnz	string_utils_copy@result& (0+255),f,b
  4830  0013AA  2B74               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4831                           
  4832                           ; BSR set to: 0
  4833  0013AC  0012               	return	
  4834  0013AE                     __end_of_string_utils_copy:
  4835                           	opt stack 0
  4836                           tosu	equ	0xFFF
  4837                           tosh	equ	0xFFE
  4838                           tosl	equ	0xFFD
  4839                           pclath	equ	0xFFA
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           indf0	equ	0xFEF
  4848                           postinc0	equ	0xFEE
  4849                           fsr0h	equ	0xFEA
  4850                           fsr0l	equ	0xFE9
  4851                           wreg	equ	0xFE8
  4852                           indf1	equ	0xFE7
  4853                           postinc1	equ	0xFE6
  4854                           postdec1	equ	0xFE5
  4855                           fsr1h	equ	0xFE2
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _string_utils_strchr *****************
  4865 ;; Defined at:
  4866 ;;		line 140 in file "src/modules/string_utils.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  pbuf            3   12[BANK0 ] PTR const unsigned char 
  4869 ;;		 -> this_buf(127), ROM(32767), 
  4870 ;;  delimeter       1   15[BANK0 ] unsigned char 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  pos             2   21[BANK0 ] int 
  4873 ;;  result          2   19[BANK0 ] int 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  2   12[BANK0 ] int 
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  4878 ;; Tracked objects:
  4879 ;;		On entry : F/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: FFFFFFF0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4883 ;;      Params:         0       4       0       0       0       0       0
  4884 ;;      Locals:         0       4       0       0       0       0       0
  4885 ;;      Temps:          0       3       0       0       0       0       0
  4886 ;;      Totals:         0      11       0       0       0       0       0
  4887 ;;Total ram usage:       11 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    5
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_this_variable_load_from_text
  4894 ;;		_this_parse_command
  4895 ;;		_this_parse_parameter
  4896 ;;		_syntax_string
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text16
  4901  001174                     __ptext16:
  4902                           	opt stack 0
  4903  001174                     _string_utils_strchr:
  4904                           	opt stack 23
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;string_utils.c: 141: INT16 result = -1;
  4908                           
  4909                           ; BSR set to: 0
  4910  001174  6973               	setf	string_utils_strchr@result& (0+255),b
  4911  001176  6974               	setf	(string_utils_strchr@result+1)& (0+255),b
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;string_utils.c: 142: if (pbuf != (0))
  4915  001178  516C               	movf	string_utils_strchr@pbuf& (0+255),w,b
  4916  00117A  116D               	iorwf	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4917  00117C  116E               	iorwf	(string_utils_strchr@pbuf+2)& (0+255),w,b
  4918  00117E  E02D               	bz	l479
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;string_utils.c: 143: {
  4922                           ;string_utils.c: 144: INT16 pos;
  4923                           ;string_utils.c: 145: for (pos = 0; (pos < (1000)) && pbuf[pos]; pos++)
  4924  001180  6B75               	clrf	string_utils_strchr@pos& (0+255),b
  4925  001182  6B76               	clrf	(string_utils_strchr@pos+1)& (0+255),b
  4926  001184  D016               	goto	l5806
  4927  001186                     l5800:
  4928                           
  4929                           ;string_utils.c: 146: {
  4930                           ;string_utils.c: 147: if (pbuf[pos] == delimeter)
  4931  001186  0100               	movlb	0	; () banked
  4932  001188  D82D               	call	PL16	;call to abstracted procedure
  4933  00118A  BAF8               	btfsc	tblptru,5,c
  4934  00118C  D003               	bra	u6127
  4935  00118E  0008               	tblrd		*
  4936  001190  50F5               	movf	tablat,w,c
  4937  001192  D005               	bra	u6120
  4938  001194                     u6127:
  4939  001194  CFF6 FFE9          	movff	tblptrl,fsr0l
  4940  001198  CFF7 FFEA          	movff	tblptrh,fsr0h
  4941  00119C  50EF               	movf	indf0,w,c
  4942  00119E                     u6120:
  4943  00119E  0100               	movlb	0	; () banked
  4944  0011A0  196F               	xorwf	string_utils_strchr@delimeter& (0+255),w,b
  4945  0011A2  E105               	bnz	l5804
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;string_utils.c: 148: {
  4949                           ;string_utils.c: 149: result = pos;
  4950  0011A4  C075  F073         	movff	string_utils_strchr@pos,string_utils_strchr@result
  4951  0011A8  C076  F074         	movff	string_utils_strchr@pos+1,string_utils_strchr@result+1
  4952                           
  4953                           ;string_utils.c: 150: break;
  4954  0011AC  D016               	goto	l479
  4955  0011AE                     l5804:
  4956                           
  4957                           ; BSR set to: 0
  4958  0011AE  4B75               	infsnz	string_utils_strchr@pos& (0+255),f,b
  4959  0011B0  2B76               	incf	(string_utils_strchr@pos+1)& (0+255),f,b
  4960  0011B2                     l5806:
  4961                           
  4962                           ; BSR set to: 0
  4963  0011B2  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4964  0011B4  0A80               	xorlw	128
  4965  0011B6  0F7D               	addlw	-131
  4966  0011B8  0EE8               	movlw	232
  4967  0011BA  B4D8               	btfsc	status,2,c
  4968  0011BC  5D75               	subwf	string_utils_strchr@pos& (0+255),w,b
  4969  0011BE  E20D               	bc	l479
  4970                           
  4971                           ; BSR set to: 0
  4972  0011C0  D811               	call	PL16	;call to abstracted procedure
  4973  0011C2  BAF8               	btfsc	tblptru,5,c
  4974  0011C4  D003               	bra	u6157
  4975  0011C6  0008               	tblrd		*
  4976  0011C8  50F5               	movf	tablat,w,c
  4977  0011CA  D005               	bra	u6150
  4978  0011CC                     u6157:
  4979  0011CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4980  0011D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4981  0011D4  50EF               	movf	indf0,w,c
  4982  0011D6                     u6150:
  4983  0011D6  0900               	iorlw	0
  4984  0011D8  E1D6               	bnz	l5800
  4985  0011DA                     l479:
  4986                           
  4987                           ;string_utils.c: 151: }
  4988                           ;string_utils.c: 152: }
  4989                           ;string_utils.c: 153: }
  4990                           ;string_utils.c: 154: return result;
  4991  0011DA  C073  F06C         	movff	string_utils_strchr@result,?_string_utils_strchr
  4992  0011DE  C074  F06D         	movff	string_utils_strchr@result+1,?_string_utils_strchr+1
  4993  0011E2  0012               	return	
  4994  0011E4                     __end_of_string_utils_strchr:
  4995                           	opt stack 0
  4996  0011E4                     PL16:
  4997                           	opt stack 23
  4998  0011E4  5175               	movf	string_utils_strchr@pos& (0+255),w,b
  4999  0011E6  256C               	addwf	string_utils_strchr@pbuf& (0+255),w,b
  5000  0011E8  6F70               	movwf	??_string_utils_strchr& (0+255),b
  5001  0011EA  5176               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  5002  0011EC  216D               	addwfc	(string_utils_strchr@pbuf+1)& (0+255),w,b
  5003  0011EE  6F71               	movwf	(??_string_utils_strchr+1)& (0+255),b
  5004  0011F0  0E00               	movlw	0
  5005  0011F2  BF76               	btfsc	(string_utils_strchr@pos+1)& (0+255),7,b
  5006  0011F4  0EFF               	movlw	255
  5007  0011F6  216E               	addwfc	(string_utils_strchr@pbuf+2)& (0+255),w,b
  5008  0011F8  6F72               	movwf	(??_string_utils_strchr+2)& (0+255),b
  5009  0011FA  C070  FFF6         	movff	??_string_utils_strchr,tblptrl
  5010  0011FE  C071  FFF7         	movff	??_string_utils_strchr+1,tblptrh
  5011  001202  C072  FFF8         	movff	??_string_utils_strchr+2,tblptru
  5012  001206  0012               	return	
  5013  001208                     __end_ofPL16:
  5014                           	opt stack 0
  5015                           tosu	equ	0xFFF
  5016                           tosh	equ	0xFFE
  5017                           tosl	equ	0xFFD
  5018                           pclath	equ	0xFFA
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           indf0	equ	0xFEF
  5027                           postinc0	equ	0xFEE
  5028                           fsr0h	equ	0xFEA
  5029                           fsr0l	equ	0xFE9
  5030                           wreg	equ	0xFE8
  5031                           indf1	equ	0xFE7
  5032                           postinc1	equ	0xFE6
  5033                           postdec1	equ	0xFE5
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _string_utils_from_hex *****************
  5044 ;; Defined at:
  5045 ;;		line 400 in file "src/modules/string_utils.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  pdata           2   24[BANK0 ] PTR unsigned char 
  5048 ;;		 -> parameter_value(127), 
  5049 ;;  phex_str        2   26[BANK0 ] PTR const unsigned char 
  5050 ;;		 -> parameter_value(127), 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  i               2   35[BANK0 ] int 
  5053 ;;  j               2   33[BANK0 ] int 
  5054 ;;  len             2   31[BANK0 ] int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2   24[BANK0 ] int 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : F/0
  5061 ;;		On exit  : F/0
  5062 ;;		Unchanged: FFFFFFF0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5064 ;;      Params:         0       4       0       0       0       0       0
  5065 ;;      Locals:         0       6       0       0       0       0       0
  5066 ;;      Temps:          0       3       0       0       0       0       0
  5067 ;;      Totals:         0      13       0       0       0       0       0
  5068 ;;Total ram usage:       13 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    7
  5071 ;; This function calls:
  5072 ;;		_string_utils_strlen
  5073 ;;		_symb_from_hex_to_bin
  5074 ;; This function is called by:
  5075 ;;		_this_variable_load_from_text
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text17
  5080  001208                     __ptext17:
  5081                           	opt stack 0
  5082  001208                     _string_utils_from_hex:
  5083                           	opt stack 19
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;string_utils.c: 401: INT16 i = 0;
  5087  001208  6B83               	clrf	string_utils_from_hex@i& (0+255),b
  5088  00120A  6B84               	clrf	(string_utils_from_hex@i+1)& (0+255),b
  5089                           
  5090                           ;string_utils.c: 402: INT16 j = 0;
  5091  00120C  6B81               	clrf	string_utils_from_hex@j& (0+255),b
  5092  00120E  6B82               	clrf	(string_utils_from_hex@j+1)& (0+255),b
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;string_utils.c: 403: INT16 len = string_utils_strlen(phex_str);
  5096  001210  C07A  F072         	movff	string_utils_from_hex@phex_str,?_string_utils_strlen
  5097  001214  C07B  F073         	movff	string_utils_from_hex@phex_str+1,?_string_utils_strlen+1
  5098  001218  EC5B  F00B         	call	_string_utils_strlen	;wreg free
  5099  00121C  C072  F07F         	movff	?_string_utils_strlen,string_utils_from_hex@len
  5100  001220  C073  F080         	movff	?_string_utils_strlen+1,string_utils_from_hex@len+1
  5101                           
  5102                           ;string_utils.c: 404: while (i < (len - 1))
  5103  001224  D02A               	goto	l5888
  5104  001226                     l5882:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;string_utils.c: 405: {
  5108                           ;string_utils.c: 406: pdata[j] = symb_from_hex_to_bin(phex_str[i]) * 16
  5109                           ;string_utils.c: 407: + symb_from_hex_to_bin(phex_str[i + 1]);
  5110  001226  5181               	movf	string_utils_from_hex@j& (0+255),w,b
  5111  001228  2578               	addwf	string_utils_from_hex@pdata& (0+255),w,b
  5112  00122A  6ED9               	movwf	fsr2l,c
  5113  00122C  5182               	movf	(string_utils_from_hex@j+1)& (0+255),w,b
  5114  00122E  2179               	addwfc	(string_utils_from_hex@pdata+1)& (0+255),w,b
  5115  001230  6EDA               	movwf	fsr2h,c
  5116  001232  C07A  F07C         	movff	string_utils_from_hex@phex_str,??_string_utils_from_hex
  5117  001236  C07B  F07D         	movff	string_utils_from_hex@phex_str+1,??_string_utils_from_hex+1
  5118  00123A  5183               	movf	string_utils_from_hex@i& (0+255),w,b
  5119  00123C  277C               	addwf	??_string_utils_from_hex& (0+255),f,b
  5120  00123E  5184               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  5121  001240  237D               	addwfc	(??_string_utils_from_hex+1)& (0+255),f,b
  5122  001242  297C               	incf	??_string_utils_from_hex& (0+255),w,b
  5123  001244  6EE1               	movwf	fsr1l,c
  5124  001246  0E00               	movlw	0
  5125  001248  217D               	addwfc	(??_string_utils_from_hex+1)& (0+255),w,b
  5126  00124A  6EE2               	movwf	fsr1h,c
  5127  00124C  50E7               	movf	indf1,w,c
  5128  00124E  EC90  F00A         	call	_symb_from_hex_to_bin
  5129  001252  6F7E               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  5130  001254  5183               	movf	string_utils_from_hex@i& (0+255),w,b
  5131  001256  257A               	addwf	string_utils_from_hex@phex_str& (0+255),w,b
  5132  001258  6EE1               	movwf	fsr1l,c
  5133  00125A  5184               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  5134  00125C  217B               	addwfc	(string_utils_from_hex@phex_str+1)& (0+255),w,b
  5135  00125E  6EE2               	movwf	fsr1h,c
  5136  001260  50E7               	movf	indf1,w,c
  5137  001262  EC90  F00A         	call	_symb_from_hex_to_bin
  5138  001266  0D10               	mullw	16
  5139  001268  50F3               	movf	prodl,w,c
  5140  00126A  257E               	addwf	(??_string_utils_from_hex+2)& (0+255),w,b
  5141  00126C  6EDF               	movwf	indf2,c
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;string_utils.c: 408: i += 2; j++;
  5145  00126E  0E02               	movlw	2
  5146  001270  2783               	addwf	string_utils_from_hex@i& (0+255),f,b
  5147  001272  0E00               	movlw	0
  5148  001274  2384               	addwfc	(string_utils_from_hex@i+1)& (0+255),f,b
  5149                           
  5150                           ; BSR set to: 0
  5151  001276  4B81               	infsnz	string_utils_from_hex@j& (0+255),f,b
  5152  001278  2B82               	incf	(string_utils_from_hex@j+1)& (0+255),f,b
  5153  00127A                     l5888:
  5154                           
  5155                           ; BSR set to: 0
  5156  00127A  0EFF               	movlw	255
  5157  00127C  257F               	addwf	string_utils_from_hex@len& (0+255),w,b
  5158  00127E  6F7C               	movwf	??_string_utils_from_hex& (0+255),b
  5159  001280  0EFF               	movlw	255
  5160  001282  2180               	addwfc	(string_utils_from_hex@len+1)& (0+255),w,b
  5161  001284  6F7D               	movwf	(??_string_utils_from_hex+1)& (0+255),b
  5162  001286  5184               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  5163  001288  0A80               	xorlw	128
  5164  00128A  6F7E               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  5165  00128C  517C               	movf	??_string_utils_from_hex& (0+255),w,b
  5166  00128E  5D83               	subwf	string_utils_from_hex@i& (0+255),w,b
  5167  001290  517D               	movf	(??_string_utils_from_hex+1)& (0+255),w,b
  5168  001292  0A80               	xorlw	128
  5169  001294  597E               	subwfb	(??_string_utils_from_hex+2)& (0+255),w,b
  5170  001296  B0D8               	btfsc	status,0,c
  5171  001298  0012               	return	
  5172  00129A  D7C5               	goto	l5882
  5173  00129C                     __end_of_string_utils_from_hex:
  5174                           	opt stack 0
  5175                           tosu	equ	0xFFF
  5176                           tosh	equ	0xFFE
  5177                           tosl	equ	0xFFD
  5178                           pclath	equ	0xFFA
  5179                           tblptru	equ	0xFF8
  5180                           tblptrh	equ	0xFF7
  5181                           tblptrl	equ	0xFF6
  5182                           tablat	equ	0xFF5
  5183                           prodh	equ	0xFF4
  5184                           prodl	equ	0xFF3
  5185                           intcon	equ	0xFF2
  5186                           indf0	equ	0xFEF
  5187                           postinc0	equ	0xFEE
  5188                           fsr0h	equ	0xFEA
  5189                           fsr0l	equ	0xFE9
  5190                           wreg	equ	0xFE8
  5191                           indf1	equ	0xFE7
  5192                           postinc1	equ	0xFE6
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           fsr2h	equ	0xFDA
  5200                           fsr2l	equ	0xFD9
  5201                           status	equ	0xFD8
  5202                           
  5203 ;; *************** function _string_utils_strlen *****************
  5204 ;; Defined at:
  5205 ;;		line 12 in file "src/modules/string_utils.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;  pstr            2   18[BANK0 ] PTR const unsigned char 
  5208 ;;		 -> parameter_value(127), syx_param_list(528), serialport_buffer(100), 
  5209 ;; Auto vars:     Size  Location     Type
  5210 ;;  i               2   22[BANK0 ] int 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  2   18[BANK0 ] int 
  5213 ;; Registers used:
  5214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5215 ;; Tracked objects:
  5216 ;;		On entry : F/0
  5217 ;;		On exit  : F/0
  5218 ;;		Unchanged: FFFFFFF0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5220 ;;      Params:         0       2       0       0       0       0       0
  5221 ;;      Locals:         0       2       0       0       0       0       0
  5222 ;;      Temps:          0       2       0       0       0       0       0
  5223 ;;      Totals:         0       6       0       0       0       0       0
  5224 ;;Total ram usage:        6 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    6
  5227 ;; This function calls:
  5228 ;;		_string_utils_is_symbol
  5229 ;; This function is called by:
  5230 ;;		_string_utils_from_hex
  5231 ;;		_this_parse_parameter
  5232 ;;		_syntax_string
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text18
  5237  0016B6                     __ptext18:
  5238                           	opt stack 0
  5239  0016B6                     _string_utils_strlen:
  5240                           	opt stack 19
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;string_utils.c: 13: INT16 i = 0;
  5244                           
  5245                           ; BSR set to: 0
  5246  0016B6  6B76               	clrf	string_utils_strlen@i& (0+255),b
  5247  0016B8  6B77               	clrf	(string_utils_strlen@i+1)& (0+255),b
  5248                           
  5249                           ; BSR set to: 0
  5250                           ;string_utils.c: 14: if (pstr)
  5251  0016BA  5173               	movf	(string_utils_strlen@pstr+1)& (0+255),w,b
  5252  0016BC  1172               	iorwf	string_utils_strlen@pstr& (0+255),w,b
  5253  0016BE  E023               	bz	l442
  5254  0016C0                     l5714:
  5255                           
  5256                           ; BSR set to: 0
  5257                           ;string_utils.c: 17: {
  5258                           ;string_utils.c: 18: if (! string_utils_is_symbol(pstr[i]))
  5259  0016C0  C072  F074         	movff	string_utils_strlen@pstr,??_string_utils_strlen
  5260  0016C4  C073  F075         	movff	string_utils_strlen@pstr+1,??_string_utils_strlen+1
  5261  0016C8  5176               	movf	string_utils_strlen@i& (0+255),w,b
  5262  0016CA  2774               	addwf	??_string_utils_strlen& (0+255),f,b
  5263  0016CC  5177               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  5264  0016CE  2375               	addwfc	(??_string_utils_strlen+1)& (0+255),f,b
  5265  0016D0  5174               	movf	??_string_utils_strlen& (0+255),w,b
  5266  0016D2  6EF6               	movwf	tblptrl,c
  5267  0016D4  6EE9               	movwf	fsr0l,c
  5268  0016D6  0E05               	movlw	(high __ramtop+-1)
  5269  0016D8  6EEA               	movwf	fsr0h,c
  5270  0016DA  5175               	movf	(??_string_utils_strlen+1)& (0+255),w,b
  5271  0016DC  64EA               	cpfsgt	fsr0h,c
  5272  0016DE  D003               	bra	u5977
  5273  0016E0  6EEA               	movwf	fsr0h,c
  5274  0016E2  50EF               	movf	indf0,w,c
  5275  0016E4  D003               	bra	u5970
  5276  0016E6                     u5977:
  5277  0016E6  6EF7               	movwf	tblptrh,c
  5278  0016E8  0008               	tblrd		*
  5279  0016EA  50F5               	movf	tablat,w,c
  5280  0016EC                     u5970:
  5281  0016EC  EC53  F00D         	call	_string_utils_is_symbol
  5282  0016F0  0900               	iorlw	0
  5283  0016F2  E009               	bz	l442
  5284                           
  5285                           ; BSR set to: 0
  5286  0016F4  4B76               	infsnz	string_utils_strlen@i& (0+255),f,b
  5287  0016F6  2B77               	incf	(string_utils_strlen@i+1)& (0+255),f,b
  5288                           
  5289                           ; BSR set to: 0
  5290  0016F8  5177               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  5291  0016FA  0A80               	xorlw	128
  5292  0016FC  0F7D               	addlw	-131
  5293  0016FE  0EE8               	movlw	232
  5294  001700  B4D8               	btfsc	status,2,c
  5295  001702  5D76               	subwf	string_utils_strlen@i& (0+255),w,b
  5296  001704  E3DD               	bnc	l5714
  5297  001706                     l442:
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;string_utils.c: 21: }
  5301                           ;string_utils.c: 22: }
  5302                           ;string_utils.c: 23: }
  5303                           ;string_utils.c: 24: return i;
  5304  001706  C076  F072         	movff	string_utils_strlen@i,?_string_utils_strlen
  5305  00170A  C077  F073         	movff	string_utils_strlen@i+1,?_string_utils_strlen+1
  5306                           
  5307                           ; BSR set to: 0
  5308  00170E  0012               	return	
  5309  001710                     __end_of_string_utils_strlen:
  5310                           	opt stack 0
  5311                           tosu	equ	0xFFF
  5312                           tosh	equ	0xFFE
  5313                           tosl	equ	0xFFD
  5314                           pclath	equ	0xFFA
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           indf0	equ	0xFEF
  5323                           postinc0	equ	0xFEE
  5324                           fsr0h	equ	0xFEA
  5325                           fsr0l	equ	0xFE9
  5326                           wreg	equ	0xFE8
  5327                           indf1	equ	0xFE7
  5328                           postinc1	equ	0xFE6
  5329                           postdec1	equ	0xFE5
  5330                           fsr1h	equ	0xFE2
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _string_utils_is_symbol *****************
  5340 ;; Defined at:
  5341 ;;		line 194 in file "src/modules/string_utils.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  symb            1    wreg     unsigned char 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  symb            1   13[BANK0 ] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      unsigned char 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : F/0
  5353 ;;		Unchanged: FFFFFFF0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5355 ;;      Params:         0       0       0       0       0       0       0
  5356 ;;      Locals:         0       2       0       0       0       0       0
  5357 ;;      Temps:          0       0       0       0       0       0       0
  5358 ;;      Totals:         0       2       0       0       0       0       0
  5359 ;;Total ram usage:        2 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    5
  5362 ;; This function calls:
  5363 ;;		Nothing
  5364 ;; This function is called by:
  5365 ;;		_string_utils_strlen
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	text19
  5370  001AA6                     __ptext19:
  5371                           	opt stack 0
  5372  001AA6                     _string_utils_is_symbol:
  5373                           	opt stack 19
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;string_utils_is_symbol@symb stored from wreg
  5377  001AA6  CFE8 F06D          	movff	wreg,string_utils_is_symbol@symb
  5378                           
  5379                           ;string_utils.c: 195: return (symb >= ' ') && (symb <= '~');
  5380  001AAA  0100               	movlb	0	; () banked
  5381  001AAC  6B6C               	clrf	_string_utils_is_symbol$736& (0+255),b
  5382                           
  5383                           ; BSR set to: 0
  5384  001AAE  0E1F               	movlw	31
  5385  001AB0  656D               	cpfsgt	string_utils_is_symbol@symb& (0+255),b
  5386  001AB2  D005               	goto	l500
  5387                           
  5388                           ; BSR set to: 0
  5389  001AB4  0E7F               	movlw	127
  5390  001AB6  616D               	cpfslt	string_utils_is_symbol@symb& (0+255),b
  5391  001AB8  D002               	goto	l500
  5392                           
  5393                           ; BSR set to: 0
  5394  001ABA  0E01               	movlw	1
  5395  001ABC  6F6C               	movwf	_string_utils_is_symbol$736& (0+255),b
  5396  001ABE                     l500:
  5397                           
  5398                           ; BSR set to: 0
  5399  001ABE  516C               	movf	_string_utils_is_symbol$736& (0+255),w,b
  5400                           
  5401                           ; BSR set to: 0
  5402  001AC0  0012               	return	
  5403  001AC2                     __end_of_string_utils_is_symbol:
  5404                           	opt stack 0
  5405                           tosu	equ	0xFFF
  5406                           tosh	equ	0xFFE
  5407                           tosl	equ	0xFFD
  5408                           pclath	equ	0xFFA
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           intcon	equ	0xFF2
  5416                           indf0	equ	0xFEF
  5417                           postinc0	equ	0xFEE
  5418                           fsr0h	equ	0xFEA
  5419                           fsr0l	equ	0xFE9
  5420                           wreg	equ	0xFE8
  5421                           indf1	equ	0xFE7
  5422                           postinc1	equ	0xFE6
  5423                           postdec1	equ	0xFE5
  5424                           fsr1h	equ	0xFE2
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           postdec2	equ	0xFDD
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _symb_from_hex_to_bin *****************
  5434 ;; Defined at:
  5435 ;;		line 334 in file "src/modules/string_utils.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  symb            1    wreg     unsigned char 
  5438 ;; Auto vars:     Size  Location     Type
  5439 ;;  symb            1   12[BANK0 ] unsigned char 
  5440 ;; Return value:  Size  Location     Type
  5441 ;;                  1    wreg      unsigned char 
  5442 ;; Registers used:
  5443 ;;		wreg, status,2, status,0
  5444 ;; Tracked objects:
  5445 ;;		On entry : F/0
  5446 ;;		On exit  : F/0
  5447 ;;		Unchanged: FFFFFFF0/0
  5448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5449 ;;      Params:         0       0       0       0       0       0       0
  5450 ;;      Locals:         0       1       0       0       0       0       0
  5451 ;;      Temps:          0       0       0       0       0       0       0
  5452 ;;      Totals:         0       1       0       0       0       0       0
  5453 ;;Total ram usage:        1 bytes
  5454 ;; Hardware stack levels used:    1
  5455 ;; Hardware stack levels required when called:    5
  5456 ;; This function calls:
  5457 ;;		Nothing
  5458 ;; This function is called by:
  5459 ;;		_string_utils_from_hex
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text20
  5464  001520                     __ptext20:
  5465                           	opt stack 0
  5466  001520                     _symb_from_hex_to_bin:
  5467                           	opt stack 20
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;symb_from_hex_to_bin@symb stored from wreg
  5471  001520  CFE8 F06C          	movff	wreg,symb_from_hex_to_bin@symb
  5472                           
  5473                           ; BSR set to: 0
  5474                           ;string_utils.c: 335: switch (symb)
  5475  001524  D009               	goto	l5872
  5476  001526                     l5858:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;string_utils.c: 338: case '1':
  5480                           ;string_utils.c: 339: case '2':
  5481                           ;string_utils.c: 340: case '3':
  5482                           ;string_utils.c: 341: case '4':
  5483                           ;string_utils.c: 342: case '5':
  5484                           ;string_utils.c: 343: case '6':
  5485                           ;string_utils.c: 344: case '7':
  5486                           ;string_utils.c: 345: case '8':
  5487                           ;string_utils.c: 346: case '9':
  5488                           ;string_utils.c: 347: return (UINT8)(symb - '0');
  5489  001526  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5490  001528  0FD0               	addlw	208
  5491  00152A  0012               	return	
  5492  00152C                     l5862:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;string_utils.c: 349: case 'b':
  5496                           ;string_utils.c: 350: case 'c':
  5497                           ;string_utils.c: 351: case 'd':
  5498                           ;string_utils.c: 352: case 'e':
  5499                           ;string_utils.c: 353: case 'f':
  5500                           ;string_utils.c: 354: return (UINT8)(symb - 'a') + 10;
  5501  00152C  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5502  00152E  0FA9               	addlw	169
  5503  001530  0012               	return	
  5504  001532                     l5866:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;string_utils.c: 356: case 'B':
  5508                           ;string_utils.c: 357: case 'C':
  5509                           ;string_utils.c: 358: case 'D':
  5510                           ;string_utils.c: 359: case 'E':
  5511                           ;string_utils.c: 360: case 'F':
  5512                           ;string_utils.c: 361: return (UINT8)(symb - 'A') + 10;
  5513  001532  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5514  001534  0FC9               	addlw	201
  5515  001536  0012               	return	
  5516  001538                     l5872:
  5517                           
  5518                           ; BSR set to: 0
  5519  001538  516C               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5520                           
  5521                           ; Switch size 1, requested type "space"
  5522                           ; Number of cases is 22, Range of values is 48 to 102
  5523                           ; switch strategies available:
  5524                           ; Name         Instructions Cycles
  5525                           ; simple_byte           67    34 (average)
  5526                           ;	Chosen strategy is simple_byte
  5527  00153A  0A30               	xorlw	48	; case 48
  5528  00153C  E0F4               	bz	l5858
  5529  00153E  0A01               	xorlw	1	; case 49
  5530  001540  E0F2               	bz	l5858
  5531  001542  0A03               	xorlw	3	; case 50
  5532  001544  E0F0               	bz	l5858
  5533  001546  0A01               	xorlw	1	; case 51
  5534  001548  E0EE               	bz	l5858
  5535  00154A  0A07               	xorlw	7	; case 52
  5536  00154C  E0EC               	bz	l5858
  5537  00154E  0A01               	xorlw	1	; case 53
  5538  001550  E0EA               	bz	l5858
  5539  001552  0A03               	xorlw	3	; case 54
  5540  001554  E0E8               	bz	l5858
  5541  001556  0A01               	xorlw	1	; case 55
  5542  001558  E0E6               	bz	l5858
  5543  00155A  0A0F               	xorlw	15	; case 56
  5544  00155C  E0E4               	bz	l5858
  5545  00155E  0A01               	xorlw	1	; case 57
  5546  001560  E0E2               	bz	l5858
  5547  001562  0A78               	xorlw	120	; case 65
  5548  001564  E0E6               	bz	l5866
  5549  001566  0A03               	xorlw	3	; case 66
  5550  001568  E0E4               	bz	l5866
  5551  00156A  0A01               	xorlw	1	; case 67
  5552  00156C  E0E2               	bz	l5866
  5553  00156E  0A07               	xorlw	7	; case 68
  5554  001570  E0E0               	bz	l5866
  5555  001572  0A01               	xorlw	1	; case 69
  5556  001574  E0DE               	bz	l5866
  5557  001576  0A03               	xorlw	3	; case 70
  5558  001578  E0DC               	bz	l5866
  5559  00157A  0A27               	xorlw	39	; case 97
  5560  00157C  E0D7               	bz	l5862
  5561  00157E  0A03               	xorlw	3	; case 98
  5562  001580  E0D5               	bz	l5862
  5563  001582  0A01               	xorlw	1	; case 99
  5564  001584  E0D3               	bz	l5862
  5565  001586  0A07               	xorlw	7	; case 100
  5566  001588  E0D1               	bz	l5862
  5567  00158A  0A01               	xorlw	1	; case 101
  5568  00158C  E0CF               	bz	l5862
  5569  00158E  0A03               	xorlw	3	; case 102
  5570  001590  E0CD               	bz	l5862
  5571                           
  5572                           ; BSR set to: 0
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;string_utils.c: 363: return 0;
  5576  001592  0C00               	retlw	0
  5577  001594                     __end_of_symb_from_hex_to_bin:
  5578                           	opt stack 0
  5579                           tosu	equ	0xFFF
  5580                           tosh	equ	0xFFE
  5581                           tosl	equ	0xFFD
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           indf0	equ	0xFEF
  5591                           postinc0	equ	0xFEE
  5592                           fsr0h	equ	0xFEA
  5593                           fsr0l	equ	0xFE9
  5594                           wreg	equ	0xFE8
  5595                           indf1	equ	0xFE7
  5596                           postinc1	equ	0xFE6
  5597                           postdec1	equ	0xFE5
  5598                           fsr1h	equ	0xFE2
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           postdec2	equ	0xFDD
  5603                           fsr2h	equ	0xFDA
  5604                           fsr2l	equ	0xFD9
  5605                           status	equ	0xFD8
  5606                           
  5607 ;; *************** function _on_parameter_found *****************
  5608 ;; Defined at:
  5609 ;;		line 12 in file "src/modules/on_parameter_found.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  operation       1    wreg     enum E4396
  5612 ;;  cmd_id          1   32[BANK0 ] char 
  5613 ;;  p_id            1   33[BANK0 ] char 
  5614 ;;  p               3   34[BANK0 ] PTR const void 
  5615 ;;		 -> parameter_text(127), parameter_value(127), ROM(32767), 
  5616 ;;  type            1   37[BANK0 ] enum E4387
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  operation       1   38[BANK0 ] enum E4396
  5619 ;;  ok              1    0        unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;		None               void
  5622 ;; Registers used:
  5623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5624 ;; Tracked objects:
  5625 ;;		On entry : F/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: FFFFFFF0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5629 ;;      Params:         0       6       0       0       0       0       0
  5630 ;;      Locals:         0       1       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0
  5632 ;;      Totals:         0       7       0       0       0       0       0
  5633 ;;Total ram usage:        7 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    8
  5636 ;; This function calls:
  5637 ;;		_set_parameter
  5638 ;;		_get_parameter
  5639 ;;		_serialport_write
  5640 ;; This function is called by:
  5641 ;;		_syntax_string
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text21
  5646  0018BA                     __ptext21:
  5647                           	opt stack 0
  5648  0018BA                     _on_parameter_found:
  5649                           	opt stack 20
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;on_parameter_found@operation stored from wreg
  5653  0018BA  CFE8 F086          	movff	wreg,on_parameter_found@operation
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;on_parameter_found.c: 13: CHAR ok;
  5657                           ;on_parameter_found.c: 14: if (operation == PARSER_PARAMETER) {
  5658  0018BE  6786               	tstfsz	on_parameter_found@operation& (0+255),b
  5659  0018C0  D00D               	goto	l5980
  5660  0018C2  D006               	goto	l5978
  5661  0018C4                     l5972:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;on_parameter_found.c: 17: ok = set_parameter(p_id);
  5665  0018C4  5181               	movf	on_parameter_found@p_id& (0+255),w,b
  5666  0018C6  EF13  F00D         	goto	_set_parameter
  5667  0018CA                     l5974:
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;on_parameter_found.c: 21: ok = get_parameter(p_id);
  5671  0018CA  5181               	movf	on_parameter_found@p_id& (0+255),w,b
  5672  0018CC  EFAB  F00D         	goto	_get_parameter
  5673  0018D0                     l5978:
  5674                           
  5675                           ; BSR set to: 0
  5676  0018D0  5180               	movf	on_parameter_found@cmd_id& (0+255),w,b
  5677                           
  5678                           ; Switch size 1, requested type "space"
  5679                           ; Number of cases is 2, Range of values is 0 to 1
  5680                           ; switch strategies available:
  5681                           ; Name         Instructions Cycles
  5682                           ; simple_byte            7     4 (average)
  5683                           ;	Chosen strategy is simple_byte
  5684  0018D2  E0F8               	bz	l5972
  5685  0018D4  0A01               	xorlw	1	; case 1
  5686  0018D6  A4D8               	btfss	status,2,c
  5687  0018D8  0012               	return	
  5688  0018DA  D7F7               	goto	l5974
  5689  0018DC                     l5980:
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;on_parameter_found.c: 32: else if (operation == PARSER_STOP) {
  5693  0018DC  5186               	movf	on_parameter_found@operation& (0+255),w,b
  5694  0018DE  0A02               	xorlw	2
  5695  0018E0  B4D8               	btfsc	status,2,c
  5696  0018E2  0012               	return	
  5697                           
  5698                           ; BSR set to: 0
  5699  0018E4  5186               	movf	on_parameter_found@operation& (0+255),w,b
  5700  0018E6  0A03               	xorlw	3
  5701  0018E8  A4D8               	btfss	status,2,c
  5702  0018EA  0012               	return	
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;on_parameter_found.c: 49: serialport_write("err\n");
  5706  0018EC  0E7F               	movlw	high STR_1
  5707  0018EE  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  5708  0018F0  0EF5               	movlw	low STR_1
  5709  0018F2  6F7D               	movwf	?_serialport_write& (0+255),b
  5710  0018F4  EFBF  F00B         	goto	l5702	;wreg free
  5711  0018F8                     __end_of_on_parameter_found:
  5712                           	opt stack 0
  5713                           tosu	equ	0xFFF
  5714                           tosh	equ	0xFFE
  5715                           tosl	equ	0xFFD
  5716                           pclath	equ	0xFFA
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           prodh	equ	0xFF4
  5722                           prodl	equ	0xFF3
  5723                           intcon	equ	0xFF2
  5724                           indf0	equ	0xFEF
  5725                           postinc0	equ	0xFEE
  5726                           fsr0h	equ	0xFEA
  5727                           fsr0l	equ	0xFE9
  5728                           wreg	equ	0xFE8
  5729                           indf1	equ	0xFE7
  5730                           postinc1	equ	0xFE6
  5731                           postdec1	equ	0xFE5
  5732                           fsr1h	equ	0xFE2
  5733                           fsr1l	equ	0xFE1
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           postdec2	equ	0xFDD
  5737                           fsr2h	equ	0xFDA
  5738                           fsr2l	equ	0xFD9
  5739                           status	equ	0xFD8
  5740                           
  5741 ;; *************** function _cla_add_value *****************
  5742 ;; Defined at:
  5743 ;;		line 33 in file "src/modules/classic_detector.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  d               1    wreg     PTR volatile struct .
  5746 ;;		 -> cla_detector(21), 
  5747 ;;  val             2   12[BANK0 ] int 
  5748 ;;  zero            2   14[BANK0 ] int 
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  d               1   24[BANK0 ] PTR volatile struct .
  5751 ;;		 -> cla_detector(21), 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      unsigned char 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : F/0
  5758 ;;		On exit  : F/0
  5759 ;;		Unchanged: FFFFFFF0/0
  5760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5761 ;;      Params:         0       4       0       0       0       0       0
  5762 ;;      Locals:         0       5       0       0       0       0       0
  5763 ;;      Temps:          0       4       0       0       0       0       0
  5764 ;;      Totals:         0      13       0       0       0       0       0
  5765 ;;Total ram usage:       13 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    5
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_detection_task
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text22
  5776  00060A                     __ptext22:
  5777                           	opt stack 0
  5778  00060A                     _cla_add_value:
  5779                           	opt stack 24
  5780                           
  5781                           ;cla_add_value@d stored from wreg
  5782  00060A  CFE8 F078          	movff	wreg,cla_add_value@d
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;classic_detector.c: 34: d->cur_v = ((val- zero)<0?(-(val- zero)):(val- zero));
  5786  00060E  516E               	movf	cla_add_value@zero& (0+255),w,b
  5787  000610  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5788  000612  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5789  000614  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5790  000616  0B80               	andlw	128
  5791  000618  E107               	bnz	l5996
  5792                           
  5793                           ; BSR set to: 0
  5794  00061A  516E               	movf	cla_add_value@zero& (0+255),w,b
  5795  00061C  5D6C               	subwf	cla_add_value@val& (0+255),w,b
  5796  00061E  6F74               	movwf	_cla_add_value$953& (0+255),b
  5797  000620  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5798  000622  596D               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  5799  000624  6F75               	movwf	(_cla_add_value$953+1)& (0+255),b
  5800  000626  D010               	goto	l5998
  5801  000628                     l5996:
  5802                           
  5803                           ; BSR set to: 0
  5804  000628  C06C  F070         	movff	cla_add_value@val,??_cla_add_value
  5805  00062C  C06D  F071         	movff	cla_add_value@val+1,??_cla_add_value+1
  5806  000630  516E               	movf	cla_add_value@zero& (0+255),w,b
  5807  000632  5F70               	subwf	??_cla_add_value& (0+255),f,b
  5808  000634  516F               	movf	(cla_add_value@zero+1)& (0+255),w,b
  5809  000636  5B71               	subwfb	(??_cla_add_value+1)& (0+255),f,b
  5810  000638  1F70               	comf	??_cla_add_value& (0+255),f,b
  5811  00063A  1F71               	comf	(??_cla_add_value+1)& (0+255),f,b
  5812  00063C  4B70               	infsnz	??_cla_add_value& (0+255),f,b
  5813  00063E  2B71               	incf	(??_cla_add_value+1)& (0+255),f,b
  5814  000640  C070  F074         	movff	??_cla_add_value,_cla_add_value$953
  5815  000644  C071  F075         	movff	??_cla_add_value+1,_cla_add_value$953+1
  5816  000648                     l5998:
  5817                           
  5818                           ; BSR set to: 0
  5819  000648  5178               	movf	cla_add_value@d& (0+255),w,b
  5820  00064A  6ED9               	movwf	fsr2l,c
  5821  00064C  6ADA               	clrf	fsr2h,c
  5822  00064E  C074  FFDE         	movff	_cla_add_value$953,postinc2
  5823  000652  C075  FFDD         	movff	_cla_add_value$953+1,postdec2
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;classic_detector.c: 35: d->over_trig_value = (d->cur_v > d->config.sig_trig) ? (d->cur_
      +                          v - d->config.sig_trig):0;
  5827  000656  5178               	movf	cla_add_value@d& (0+255),w,b
  5828  000658  6ED9               	movwf	fsr2l,c
  5829  00065A  6ADA               	clrf	fsr2h,c
  5830  00065C  5178               	movf	cla_add_value@d& (0+255),w,b
  5831  00065E  6EE1               	movwf	fsr1l,c
  5832  000660  6AE2               	clrf	fsr1h,c
  5833  000662  0E13               	movlw	19
  5834  000664  D8A8               	call	PL12	;call to abstracted procedure
  5835  000666  E102               	bnz	u6455
  5836  000668  50DF               	movf	indf2,w,c
  5837  00066A  5CE7               	subwf	indf1,w,c
  5838  00066C                     u6455:
  5839  00066C  E303               	bnc	l6004
  5840                           
  5841                           ; BSR set to: 0
  5842  00066E  6B76               	clrf	_cla_add_value$954& (0+255),b	;volatile
  5843  000670  6B77               	clrf	(_cla_add_value$954+1)& (0+255),b	;volatile
  5844  000672  D017               	goto	l707
  5845  000674                     l6004:
  5846                           
  5847                           ; BSR set to: 0
  5848  000674  5178               	movf	cla_add_value@d& (0+255),w,b
  5849  000676  6ED9               	movwf	fsr2l,c
  5850  000678  6ADA               	clrf	fsr2h,c
  5851  00067A  0E13               	movlw	19
  5852  00067C  26D9               	addwf	fsr2l,f,c
  5853  00067E  6ADA               	clrf	fsr2h,c
  5854  000680  CFDE F070          	movff	postinc2,??_cla_add_value
  5855  000684  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5856  000688  5178               	movf	cla_add_value@d& (0+255),w,b
  5857  00068A  6ED9               	movwf	fsr2l,c
  5858  00068C  6ADA               	clrf	fsr2h,c
  5859  00068E  CFDE F072          	movff	postinc2,??_cla_add_value+2
  5860  000692  CFDD F073          	movff	postdec2,??_cla_add_value+3
  5861  000696  5170               	movf	??_cla_add_value& (0+255),w,b
  5862  000698  5D72               	subwf	(??_cla_add_value+2)& (0+255),w,b
  5863  00069A  6F76               	movwf	_cla_add_value$954& (0+255),b	;volatile
  5864  00069C  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5865  00069E  5973               	subwfb	(??_cla_add_value+3)& (0+255),w,b
  5866  0006A0  6F77               	movwf	(_cla_add_value$954+1)& (0+255),b	;volatile
  5867  0006A2                     l707:
  5868                           
  5869                           ; BSR set to: 0
  5870  0006A2  D8B2               	call	PL36	;call to abstracted procedure
  5871  0006A4  C076  FFDE         	movff	_cla_add_value$954,postinc2	;volatile
  5872  0006A8  C077  FFDD         	movff	_cla_add_value$954+1,postdec2	;volatile
  5873                           
  5874                           ;classic_detector.c: 36: if (d->status.over_trig)
  5875  0006AC  D88F               	call	PL14	;call to abstracted procedure
  5876  0006AE  50DF               	movf	indf2,w,c
  5877  0006B0  6F70               	movwf	??_cla_add_value& (0+255),b
  5878  0006B2  A570               	btfss	??_cla_add_value& (0+255),2,b
  5879  0006B4  D059               	goto	l6026
  5880                           
  5881                           ; BSR set to: 0
  5882                           ;classic_detector.c: 37: {
  5883                           ;classic_detector.c: 38: d->sig_count++;
  5884  0006B6  5178               	movf	cla_add_value@d& (0+255),w,b
  5885  0006B8  6ED9               	movwf	fsr2l,c
  5886  0006BA  6ADA               	clrf	fsr2h,c
  5887  0006BC  0E08               	movlw	8
  5888  0006BE  26D9               	addwf	fsr2l,f,c
  5889  0006C0  6ADA               	clrf	fsr2h,c
  5890  0006C2  2ADE               	incf	postinc2,f,c
  5891  0006C4  0E00               	movlw	0
  5892  0006C6  22DD               	addwfc	postdec2,f,c
  5893                           
  5894                           ;classic_detector.c: 39: d->sig_sum += d->over_trig_value;
  5895  0006C8  D89F               	call	PL36	;call to abstracted procedure
  5896  0006CA  CFDE F070          	movff	postinc2,??_cla_add_value
  5897  0006CE  CFDD F071          	movff	postdec2,??_cla_add_value+1
  5898  0006D2  D883               	call	PL18	;call to abstracted procedure
  5899  0006D4  5170               	movf	??_cla_add_value& (0+255),w,b
  5900  0006D6  26DE               	addwf	postinc2,f,c
  5901  0006D8  5171               	movf	(??_cla_add_value+1)& (0+255),w,b
  5902  0006DA  22DD               	addwfc	postdec2,f,c
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;classic_detector.c: 40: if (d->sig_sum > d->config.sig_sum_trig && d->status.alarm == F
      +                          ALSE)
  5906  0006DC  D87E               	call	PL18	;call to abstracted procedure
  5907  0006DE  5178               	movf	cla_add_value@d& (0+255),w,b
  5908  0006E0  6EE1               	movwf	fsr1l,c
  5909  0006E2  6AE2               	clrf	fsr1h,c
  5910  0006E4  0E11               	movlw	17
  5911  0006E6  D867               	call	PL12	;call to abstracted procedure
  5912  0006E8  E102               	bnz	u6475
  5913  0006EA  50DF               	movf	indf2,w,c
  5914  0006EC  5CE7               	subwf	indf1,w,c
  5915  0006EE                     u6475:
  5916  0006EE  E22C               	bc	l6022
  5917                           
  5918                           ; BSR set to: 0
  5919  0006F0  D86D               	call	PL14	;call to abstracted procedure
  5920  0006F2  50DF               	movf	indf2,w,c
  5921  0006F4  6F70               	movwf	??_cla_add_value& (0+255),b
  5922  0006F6  B170               	btfsc	??_cla_add_value& (0+255),0,b
  5923  0006F8  D027               	goto	l6022
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;classic_detector.c: 41: {
  5927                           ;classic_detector.c: 42: d->status.over_trig = FALSE;
  5928  0006FA  5178               	movf	cla_add_value@d& (0+255),w,b
  5929  0006FC  6ED9               	movwf	fsr2l,c
  5930  0006FE  6ADA               	clrf	fsr2h,c
  5931  000700  0E0E               	movlw	14
  5932  000702  26D9               	addwf	fsr2l,f,c
  5933  000704  6ADA               	clrf	fsr2h,c
  5934  000706  0EFB               	movlw	-5
  5935  000708  16DF               	andwf	223,f,c
  5936                           
  5937                           ;classic_detector.c: 43: d->status.alarm=TRUE;
  5938  00070A  D860               	call	PL14	;call to abstracted procedure
  5939  00070C  0E01               	movlw	1
  5940  00070E  12DF               	iorwf	223,f,c
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;classic_detector.c: 44: d->last_sig_count = d->sig_count;
  5944  000710  5178               	movf	cla_add_value@d& (0+255),w,b
  5945  000712  6ED9               	movwf	fsr2l,c
  5946  000714  D871               	call	PL22	;call to abstracted procedure
  5947  000716  0E0C               	movlw	12
  5948  000718  26E1               	addwf	fsr1l,f,c
  5949  00071A  6AE2               	clrf	fsr1h,c
  5950  00071C  CFDE FFE6          	movff	postinc2,postinc1
  5951  000720  CFDD FFE5          	movff	postdec2,postdec1
  5952                           
  5953                           ; BSR set to: 0
  5954                           ;classic_detector.c: 45: d->last_sig_sum = d->sig_sum;
  5955  000724  D85A               	call	PL18	;call to abstracted procedure
  5956  000726  5178               	movf	cla_add_value@d& (0+255),w,b
  5957  000728  6EE1               	movwf	fsr1l,c
  5958  00072A  6AE2               	clrf	fsr1h,c
  5959  00072C  0E0A               	movlw	10
  5960  00072E  26E1               	addwf	fsr1l,f,c
  5961  000730  6AE2               	clrf	fsr1h,c
  5962  000732  CFDE FFE6          	movff	postinc2,postinc1
  5963  000736  CFDD FFE5          	movff	postdec2,postdec1
  5964                           
  5965                           ;classic_detector.c: 46: d->sig_count = 0;
  5966  00073A  5178               	movf	cla_add_value@d& (0+255),w,b
  5967  00073C  D855               	call	PL20	;call to abstracted procedure
  5968                           
  5969                           ;classic_detector.c: 47: d->sig_sum = 0;
  5970  00073E  D84D               	call	PL18	;call to abstracted procedure
  5971  000740  0E00               	movlw	0
  5972  000742  6EDE               	movwf	postinc2,c
  5973  000744  6EDD               	movwf	postdec2,c
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;classic_detector.c: 48: return TRUE;
  5977  000746  0C01               	retlw	1
  5978  000748                     l6022:
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;classic_detector.c: 49: }
  5982                           ;classic_detector.c: 51: if (d->sig_count > d->config.sig_max_count)
  5983  000748  5178               	movf	cla_add_value@d& (0+255),w,b
  5984  00074A  6ED9               	movwf	fsr2l,c
  5985  00074C  D855               	call	PL22	;call to abstracted procedure
  5986  00074E  0E0F               	movlw	15
  5987  000750  D832               	call	PL12	;call to abstracted procedure
  5988  000752  E102               	bnz	u6495
  5989  000754  50DF               	movf	indf2,w,c
  5990  000756  5CE7               	subwf	indf1,w,c
  5991  000758                     u6495:
  5992  000758  E22D               	bc	l6030
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;classic_detector.c: 52: {
  5996                           ;classic_detector.c: 53: d->status.over_trig = FALSE;
  5997  00075A  D838               	call	PL14	;call to abstracted procedure
  5998  00075C  0EFB               	movlw	-5
  5999  00075E  16DF               	andwf	223,f,c
  6000                           
  6001                           ;classic_detector.c: 54: d->status.alarm = FALSE;
  6002  000760  D835               	call	PL14	;call to abstracted procedure
  6003  000762  0EFE               	movlw	-2
  6004  000764  16DF               	andwf	223,f,c
  6005  000766  0C00               	retlw	0
  6006  000768                     l6026:
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;classic_detector.c: 59: else if (d->over_trig_value > d->config.sig_trig)
  6010  000768  D84F               	call	PL36	;call to abstracted procedure
  6011  00076A  5178               	movf	cla_add_value@d& (0+255),w,b
  6012  00076C  6EE1               	movwf	fsr1l,c
  6013  00076E  6AE2               	clrf	fsr1h,c
  6014  000770  0E13               	movlw	19
  6015  000772  D821               	call	PL12	;call to abstracted procedure
  6016  000774  E102               	bnz	u6505
  6017  000776  50DF               	movf	indf2,w,c
  6018  000778  5CE7               	subwf	indf1,w,c
  6019  00077A                     u6505:
  6020  00077A  E21C               	bc	l6030
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;classic_detector.c: 60: {
  6024                           ;classic_detector.c: 61: d->status.over_trig = TRUE;
  6025  00077C  D827               	call	PL14	;call to abstracted procedure
  6026  00077E  0E04               	movlw	4
  6027  000780  12DF               	iorwf	223,f,c
  6028                           
  6029                           ;classic_detector.c: 62: d->status.alarm = FALSE;
  6030  000782  D824               	call	PL14	;call to abstracted procedure
  6031  000784  0EFE               	movlw	-2
  6032  000786  16DF               	andwf	223,f,c
  6033                           
  6034                           ;classic_detector.c: 63: d->last_sig_count = 0;
  6035  000788  5178               	movf	cla_add_value@d& (0+255),w,b
  6036  00078A  6ED9               	movwf	fsr2l,c
  6037  00078C  6ADA               	clrf	fsr2h,c
  6038  00078E  0E0C               	movlw	12
  6039  000790  26D9               	addwf	fsr2l,f,c
  6040  000792  6ADA               	clrf	fsr2h,c
  6041  000794  6ADE               	clrf	postinc2,c
  6042  000796  6ADD               	clrf	postdec2,c
  6043                           
  6044                           ;classic_detector.c: 64: d->last_sig_sum = 0;
  6045  000798  5178               	movf	cla_add_value@d& (0+255),w,b
  6046  00079A  6ED9               	movwf	fsr2l,c
  6047  00079C  6ADA               	clrf	fsr2h,c
  6048  00079E  0E0A               	movlw	10
  6049  0007A0  26D9               	addwf	fsr2l,f,c
  6050  0007A2  6ADA               	clrf	fsr2h,c
  6051  0007A4  6ADE               	clrf	postinc2,c
  6052  0007A6  6ADD               	clrf	postdec2,c
  6053                           
  6054                           ;classic_detector.c: 65: d->sig_count = 0;
  6055  0007A8  5178               	movf	cla_add_value@d& (0+255),w,b
  6056  0007AA  D81E               	call	PL20	;call to abstracted procedure
  6057                           
  6058                           ;classic_detector.c: 66: d->sig_sum = 0;
  6059  0007AC  D816               	call	PL18	;call to abstracted procedure
  6060  0007AE  0E00               	movlw	0
  6061  0007B0  6EDE               	movwf	postinc2,c
  6062  0007B2  6EDD               	movwf	postdec2,c
  6063  0007B4                     l6030:
  6064                           
  6065                           ; BSR set to: 0
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;classic_detector.c: 67: }
  6069                           ;classic_detector.c: 68: return FALSE;
  6070  0007B4  0C00               	retlw	0
  6071  0007B6                     __end_of_cla_add_value:
  6072                           	opt stack 0
  6073  0007B6                     PL12:
  6074                           	opt stack 24
  6075  0007B6  26E1               	addwf	fsr1l,f,c
  6076  0007B8  6AE2               	clrf	fsr1h,c
  6077  0007BA  52E6               	movf	postinc1,f,c
  6078  0007BC  52DE               	movf	postinc2,f,c
  6079  0007BE  50E5               	movf	postdec1,w,c
  6080  0007C0  0A80               	xorlw	128
  6081  0007C2  6F70               	movwf	??_cla_add_value& (0+255),b
  6082  0007C4  50DD               	movf	postdec2,w,c
  6083  0007C6  0A80               	xorlw	128
  6084  0007C8  5D70               	subwf	??_cla_add_value& (0+255),w,b
  6085  0007CA  0012               	return	
  6086  0007CC                     __end_ofPL12:
  6087                           	opt stack 0
  6088  0007CC                     PL14:
  6089                           	opt stack 24
  6090  0007CC  5178               	movf	cla_add_value@d& (0+255),w,b
  6091  0007CE  6ED9               	movwf	fsr2l,c
  6092  0007D0  6ADA               	clrf	fsr2h,c
  6093  0007D2  0E0E               	movlw	14
  6094  0007D4  26D9               	addwf	fsr2l,f,c
  6095  0007D6  6ADA               	clrf	fsr2h,c
  6096  0007D8  0012               	return	
  6097  0007DA                     __end_ofPL14:
  6098                           	opt stack 0
  6099  0007DA                     PL18:
  6100                           	opt stack 24
  6101  0007DA  5178               	movf	cla_add_value@d& (0+255),w,b
  6102  0007DC  6ED9               	movwf	fsr2l,c
  6103  0007DE  6ADA               	clrf	fsr2h,c
  6104  0007E0  0E06               	movlw	6
  6105  0007E2  26D9               	addwf	fsr2l,f,c
  6106  0007E4  6ADA               	clrf	fsr2h,c
  6107  0007E6  0012               	return	
  6108  0007E8                     __end_ofPL18:
  6109                           	opt stack 0
  6110  0007E8                     PL20:
  6111                           	opt stack 24
  6112  0007E8  6ED9               	movwf	fsr2l,c
  6113  0007EA  6ADA               	clrf	fsr2h,c
  6114  0007EC  0E08               	movlw	8
  6115  0007EE  26D9               	addwf	fsr2l,f,c
  6116  0007F0  6ADA               	clrf	fsr2h,c
  6117  0007F2  6ADE               	clrf	postinc2,c
  6118  0007F4  6ADD               	clrf	postdec2,c
  6119  0007F6  0012               	return	
  6120  0007F8                     __end_ofPL20:
  6121                           	opt stack 0
  6122  0007F8                     PL22:
  6123                           	opt stack 24
  6124  0007F8  6ADA               	clrf	fsr2h,c
  6125  0007FA  0E08               	movlw	8
  6126  0007FC  26D9               	addwf	fsr2l,f,c
  6127  0007FE  6ADA               	clrf	fsr2h,c
  6128  000800  5178               	movf	cla_add_value@d& (0+255),w,b
  6129  000802  6EE1               	movwf	fsr1l,c
  6130  000804  6AE2               	clrf	fsr1h,c
  6131  000806  0012               	return	
  6132  000808                     __end_ofPL22:
  6133                           	opt stack 0
  6134  000808                     PL36:
  6135                           	opt stack 24
  6136  000808  5178               	movf	cla_add_value@d& (0+255),w,b
  6137  00080A  6ED9               	movwf	fsr2l,c
  6138  00080C  6ADA               	clrf	fsr2h,c
  6139  00080E  0E04               	movlw	4
  6140  000810  26D9               	addwf	fsr2l,f,c
  6141  000812  6ADA               	clrf	fsr2h,c
  6142  000814  0012               	return	
  6143  000816                     __end_ofPL36:
  6144                           	opt stack 0
  6145                           tosu	equ	0xFFF
  6146                           tosh	equ	0xFFE
  6147                           tosl	equ	0xFFD
  6148                           pclath	equ	0xFFA
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           indf0	equ	0xFEF
  6157                           postinc0	equ	0xFEE
  6158                           fsr0h	equ	0xFEA
  6159                           fsr0l	equ	0xFE9
  6160                           wreg	equ	0xFE8
  6161                           indf1	equ	0xFE7
  6162                           postinc1	equ	0xFE6
  6163                           postdec1	equ	0xFE5
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function _pd_add_value *****************
  6174 ;; Defined at:
  6175 ;;		line 33 in file "src/modules/peak_detector.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  d               2   20[BANK0 ] PTR volatile struct .
  6178 ;;		 -> pd_detector(101), 
  6179 ;;  val             2   22[BANK0 ] int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  tmp             2   40[BANK0 ] int 
  6182 ;;  i               1   42[BANK0 ] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      unsigned char 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : F/0
  6189 ;;		On exit  : F/0
  6190 ;;		Unchanged: FFFFFFF0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6192 ;;      Params:         0       4       0       0       0       0       0
  6193 ;;      Locals:         0      13       0       0       0       0       0
  6194 ;;      Temps:          0       6       0       0       0       0       0
  6195 ;;      Totals:         0      23       0       0       0       0       0
  6196 ;;Total ram usage:       23 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    6
  6199 ;; This function calls:
  6200 ;;		___lbmod
  6201 ;;		___awdiv
  6202 ;;		___wmul
  6203 ;;		___awmod
  6204 ;; This function is called by:
  6205 ;;		_detection_task
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text23
  6210  0000F4                     __ptext23:
  6211                           	opt stack 0
  6212  0000F4                     _pd_add_value:
  6213                           	opt stack 23
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;peak_detector.c: 34: IDX8 i;
  6217                           ;peak_detector.c: 35: INT16 tmp;
  6218                           ;peak_detector.c: 37: d->last_v_idx %= d->config.lval_cnt;
  6219                           
  6220                           ; BSR set to: 0
  6221  0000F4  EE20 F028          	lfsr	2,40
  6222  0000F8  5174               	movf	pd_add_value@d& (0+255),w,b
  6223  0000FA  26D9               	addwf	fsr2l,f,c
  6224  0000FC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6225  0000FE  22DA               	addwfc	fsr2h,f,c
  6226  000100  EE10 F063          	lfsr	1,99
  6227  000104  5174               	movf	pd_add_value@d& (0+255),w,b
  6228  000106  26E1               	addwf	fsr1l,f,c
  6229  000108  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6230  00010A  22E2               	addwfc	fsr1h,f,c
  6231  00010C  50E7               	movf	indf1,w,c
  6232  00010E  6F6C               	movwf	?___lbmod& (0+255),b
  6233  000110  EE10 F028          	lfsr	1,40
  6234  000114  5174               	movf	pd_add_value@d& (0+255),w,b
  6235  000116  26E1               	addwf	fsr1l,f,c
  6236  000118  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6237  00011A  22E2               	addwfc	fsr1h,f,c
  6238  00011C  50E7               	movf	indf1,w,c
  6239  00011E  ECFE  F00C         	call	___lbmod
  6240  000122  6EDF               	movwf	indf2,c
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;peak_detector.c: 38: d->last_v_buf[d->last_v_idx] = (INT16) val;
  6244  000124  EE20 F028          	lfsr	2,40
  6245  000128  5174               	movf	pd_add_value@d& (0+255),w,b
  6246  00012A  26D9               	addwf	fsr2l,f,c
  6247  00012C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6248  00012E  22DA               	addwfc	fsr2h,f,c
  6249  000130  50DF               	movf	indf2,w,c
  6250  000132  DA52               	call	PL52	;call to abstracted procedure
  6251  000134  C076  FFDE         	movff	pd_add_value@val,postinc2
  6252  000138  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;peak_detector.c: 39: d->last_v_idx++;
  6256  00013C  EE20 F028          	lfsr	2,40
  6257  000140  5174               	movf	pd_add_value@d& (0+255),w,b
  6258  000142  26D9               	addwf	fsr2l,f,c
  6259  000144  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6260  000146  22DA               	addwfc	fsr2h,f,c
  6261  000148  2ADF               	incf	indf2,f,c
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;peak_detector.c: 40: d->last_v = d->cur_v;
  6265  00014A  EE20 F058          	lfsr	2,88
  6266  00014E  5174               	movf	pd_add_value@d& (0+255),w,b
  6267  000150  26D9               	addwf	fsr2l,f,c
  6268  000152  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6269  000154  22DA               	addwfc	fsr2h,f,c
  6270  000156  EE10 F029          	lfsr	1,41
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;peak_detector.c: 41: d->cur_v = d->next_v;
  6274  00015A  D9ED               	call	PL24	;call to abstracted procedure
  6275  00015C  EE10 F058          	lfsr	1,88
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;peak_detector.c: 42: d->next_v = val;
  6279  000160  D9EA               	call	PL24	;call to abstracted procedure
  6280  000162  C076  FFDE         	movff	pd_add_value@val,postinc2
  6281  000166  C077  FFDD         	movff	pd_add_value@val+1,postdec2
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;peak_detector.c: 44: tmp = 0;
  6285  00016A  6B88               	clrf	pd_add_value@tmp& (0+255),b
  6286  00016C  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;peak_detector.c: 45: for (i = 0; i < d->config.lval_cnt; i++) {
  6290  00016E  6B8A               	clrf	pd_add_value@i& (0+255),b
  6291  000170  D003               	goto	l6054
  6292  000172                     l6050:
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;peak_detector.c: 46: tmp += d->last_v_buf[i];
  6296  000172  518A               	movf	pd_add_value@i& (0+255),w,b
  6297  000174  DA31               	call	PL52	;call to abstracted procedure
  6298                           
  6299                           ; BSR set to: 0
  6300  000176  DA3F               	call	PL64	;call to abstracted procedure
  6301  000178                     l6054:
  6302                           
  6303                           ; BSR set to: 0
  6304  000178  D9ED               	call	PL26	;call to abstracted procedure
  6305  00017A  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6306  00017C  E3FA               	bnc	l6050
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;peak_detector.c: 47: }
  6310                           ;peak_detector.c: 48: d->avlv = tmp/d->config.lval_cnt;
  6311  00017E  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  6312  000182  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  6313  000186  D9E6               	call	PL26	;call to abstracted procedure
  6314  000188  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  6315  00018A  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  6316  00018C  EC19  F00A         	call	___awdiv	;wreg free
  6317  000190  EE20 F056          	lfsr	2,86
  6318  000194  D9FD               	call	PL38	;call to abstracted procedure
  6319                           
  6320                           ;peak_detector.c: 50: d->wval = d->cur_v * d->cur_v - d->avlv * d->next_v;
  6321  000196  EE20 F058          	lfsr	2,88
  6322  00019A  5174               	movf	pd_add_value@d& (0+255),w,b
  6323  00019C  26D9               	addwf	fsr2l,f,c
  6324  00019E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6325  0001A0  22DA               	addwfc	fsr2h,f,c
  6326  0001A2  CFDE F06C          	movff	postinc2,?___wmul
  6327  0001A6  CFDD F06D          	movff	postdec2,?___wmul+1
  6328  0001AA  EE20 F058          	lfsr	2,88
  6329  0001AE  5174               	movf	pd_add_value@d& (0+255),w,b
  6330  0001B0  26D9               	addwf	fsr2l,f,c
  6331  0001B2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6332  0001B4  22DA               	addwfc	fsr2h,f,c
  6333  0001B6  CFDE F06E          	movff	postinc2,?___wmul+2
  6334  0001BA  CFDD F06F          	movff	postdec2,?___wmul+3
  6335  0001BE  ECE8  F00C         	call	___wmul	;wreg free
  6336  0001C2  C06C  F078         	movff	?___wmul,??_pd_add_value
  6337  0001C6  C06D  F079         	movff	?___wmul+1,??_pd_add_value+1
  6338  0001CA  EE20 F056          	lfsr	2,86
  6339  0001CE  5174               	movf	pd_add_value@d& (0+255),w,b
  6340  0001D0  26D9               	addwf	fsr2l,f,c
  6341  0001D2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6342  0001D4  22DA               	addwfc	fsr2h,f,c
  6343  0001D6  CFDE F06C          	movff	postinc2,?___wmul
  6344  0001DA  CFDD F06D          	movff	postdec2,?___wmul+1
  6345  0001DE  EE20 F05A          	lfsr	2,90
  6346  0001E2  5174               	movf	pd_add_value@d& (0+255),w,b
  6347  0001E4  26D9               	addwf	fsr2l,f,c
  6348  0001E6  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6349  0001E8  22DA               	addwfc	fsr2h,f,c
  6350  0001EA  CFDE F06E          	movff	postinc2,?___wmul+2
  6351  0001EE  CFDD F06F          	movff	postdec2,?___wmul+3
  6352  0001F2  ECE8  F00C         	call	___wmul	;wreg free
  6353  0001F6  516C               	movf	?___wmul& (0+255),w,b
  6354  0001F8  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6355  0001FA  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6356  0001FC  516D               	movf	(?___wmul+1)& (0+255),w,b
  6357  0001FE  5979               	subwfb	(??_pd_add_value+1)& (0+255),w,b
  6358  000200  6F7B               	movwf	(??_pd_add_value+3)& (0+255),b
  6359  000202  EE20 F05C          	lfsr	2,92
  6360  000206  5174               	movf	pd_add_value@d& (0+255),w,b
  6361  000208  26D9               	addwf	fsr2l,f,c
  6362  00020A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6363  00020C  22DA               	addwfc	fsr2h,f,c
  6364  00020E  C07A  FFDE         	movff	??_pd_add_value+2,postinc2
  6365  000212  C07B  FFDD         	movff	??_pd_add_value+3,postdec2
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;peak_detector.c: 52: if ((((d->wval)<0?(-(d->wval)):(d->wval))) > d->config.wtrigger) {
  6369  000216  D976               	call	PL8	;call to abstracted procedure
  6370  000218  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6371  00021A  D00B               	goto	l6062
  6372                           
  6373                           ; BSR set to: 0
  6374  00021C  EE20 F05C          	lfsr	2,92
  6375  000220  5174               	movf	pd_add_value@d& (0+255),w,b
  6376  000222  26D9               	addwf	fsr2l,f,c
  6377  000224  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6378  000226  22DA               	addwfc	fsr2h,f,c
  6379  000228  CFDE F07E          	movff	postinc2,_pd_add_value$1067	;volatile
  6380  00022C  CFDD F07F          	movff	postdec2,_pd_add_value$1067+1	;volatile
  6381  000230  D00B               	goto	l743
  6382  000232                     l6062:
  6383                           
  6384                           ; BSR set to: 0
  6385  000232  EE20 F05C          	lfsr	2,92
  6386  000236  5174               	movf	pd_add_value@d& (0+255),w,b
  6387  000238  26D9               	addwf	fsr2l,f,c
  6388  00023A  D95B               	call	PL6	;call to abstracted procedure
  6389  00023C  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6390  00023E  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6391  000240  C078  F07E         	movff	??_pd_add_value,_pd_add_value$1067	;volatile
  6392  000244  C079  F07F         	movff	??_pd_add_value+1,_pd_add_value$1067+1	;volatile
  6393  000248                     l743:
  6394                           
  6395                           ; BSR set to: 0
  6396  000248  EE20 F05F          	lfsr	2,95
  6397  00024C  5174               	movf	pd_add_value@d& (0+255),w,b
  6398  00024E  26D9               	addwf	fsr2l,f,c
  6399  000250  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6400  000252  22DA               	addwfc	fsr2h,f,c
  6401  000254  CFDE F078          	movff	postinc2,??_pd_add_value
  6402  000258  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6403  00025C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6404  00025E  0A80               	xorlw	128
  6405  000260  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6406  000262  517E               	movf	_pd_add_value$1067& (0+255),w,b	;volatile
  6407  000264  5D78               	subwf	??_pd_add_value& (0+255),w,b
  6408  000266  517F               	movf	(_pd_add_value$1067+1)& (0+255),w,b	;volatile
  6409  000268  0A80               	xorlw	128
  6410  00026A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6411  00026C  E216               	bc	l6074
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;peak_detector.c: 53: if (!d->status.alarm && !d->status.firststart) {
  6415  00026E  D9A3               	call	PL44	;call to abstracted procedure
  6416  000270  B178               	btfsc	??_pd_add_value& (0+255),0,b
  6417  000272  D013               	goto	l6074
  6418                           
  6419                           ; BSR set to: 0
  6420  000274  EE20 F05E          	lfsr	2,94
  6421  000278  5174               	movf	pd_add_value@d& (0+255),w,b
  6422  00027A  26D9               	addwf	fsr2l,f,c
  6423  00027C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6424  00027E  22DA               	addwfc	fsr2h,f,c
  6425  000280  50DF               	movf	indf2,w,c
  6426  000282  6F78               	movwf	??_pd_add_value& (0+255),b
  6427  000284  B578               	btfsc	??_pd_add_value& (0+255),2,b
  6428  000286  D009               	goto	l6074
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;peak_detector.c: 54: d->status.alarm = 1;
  6432  000288  EE20 F05E          	lfsr	2,94
  6433  00028C  5174               	movf	pd_add_value@d& (0+255),w,b
  6434  00028E  26D9               	addwf	fsr2l,f,c
  6435  000290  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6436  000292  22DA               	addwfc	fsr2h,f,c
  6437  000294  0E01               	movlw	1
  6438  000296  12DF               	iorwf	223,f,c
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;peak_detector.c: 55: return TRUE;
  6442  000298  0C01               	retlw	1
  6443  00029A                     l6074:
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;peak_detector.c: 56: }
  6447                           ;peak_detector.c: 57: }
  6448                           ;peak_detector.c: 58: if (d->status.alarm && (((d->wval)<0?(-(d->wval)):(d->wval))) < (1
      +                          000)
  6449                           ;peak_detector.c: 59: && ((d->cur_v - d->ref_v)<0?(-(d->cur_v - d->ref_v)):(d->cur_v - d
      +                          ->ref_v)) < d->config.tolerance
  6450                           ;peak_detector.c: 60: && ((d->next_v - d->ref_v)<0?(-(d->next_v - d->ref_v)):(d->next_v 
      +                          - d->ref_v)) < d->config.tolerance) {
  6451  00029A  D98D               	call	PL44	;call to abstracted procedure
  6452  00029C  A178               	btfss	??_pd_add_value& (0+255),0,b
  6453  00029E  D09B               	goto	l746
  6454                           
  6455                           ; BSR set to: 0
  6456  0002A0  EE20 F05C          	lfsr	2,92
  6457  0002A4  5174               	movf	pd_add_value@d& (0+255),w,b
  6458  0002A6  26D9               	addwf	fsr2l,f,c
  6459  0002A8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6460  0002AA  22DA               	addwfc	fsr2h,f,c
  6461  0002AC  CFDE F078          	movff	postinc2,??_pd_add_value
  6462  0002B0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6463  0002B4  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6464  0002B6  D00B               	goto	l6080
  6465                           
  6466                           ; BSR set to: 0
  6467  0002B8  EE20 F05C          	lfsr	2,92
  6468  0002BC  5174               	movf	pd_add_value@d& (0+255),w,b
  6469  0002BE  26D9               	addwf	fsr2l,f,c
  6470  0002C0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6471  0002C2  22DA               	addwfc	fsr2h,f,c
  6472  0002C4  CFDE F080          	movff	postinc2,_pd_add_value$1068	;volatile
  6473  0002C8  CFDD F081          	movff	postdec2,_pd_add_value$1068+1	;volatile
  6474  0002CC  D00B               	goto	l6082
  6475  0002CE                     l6080:
  6476                           
  6477                           ; BSR set to: 0
  6478  0002CE  EE20 F05C          	lfsr	2,92
  6479  0002D2  5174               	movf	pd_add_value@d& (0+255),w,b
  6480  0002D4  26D9               	addwf	fsr2l,f,c
  6481  0002D6  D90D               	call	PL6	;call to abstracted procedure
  6482  0002D8  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6483  0002DA  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6484  0002DC  C078  F080         	movff	??_pd_add_value,_pd_add_value$1068	;volatile
  6485  0002E0  C079  F081         	movff	??_pd_add_value+1,_pd_add_value$1068+1	;volatile
  6486  0002E4                     l6082:
  6487                           
  6488                           ; BSR set to: 0
  6489  0002E4  5181               	movf	(_pd_add_value$1068+1)& (0+255),w,b	;volatile
  6490  0002E6  0A80               	xorlw	128
  6491  0002E8  0F7D               	addlw	-131
  6492  0002EA  0EE8               	movlw	232
  6493  0002EC  B4D8               	btfsc	status,2,c
  6494  0002EE  5D80               	subwf	_pd_add_value$1068& (0+255),w,b	;volatile
  6495  0002F0  E272               	bc	l746
  6496                           
  6497                           ; BSR set to: 0
  6498  0002F2  EE20 F054          	lfsr	2,84
  6499  0002F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6500  0002F8  D8DE               	call	PL2	;call to abstracted procedure
  6501  0002FA  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6502  0002FC  D982               	call	PL68	;call to abstracted procedure
  6503  0002FE  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6504  000300  D009               	goto	l6088
  6505                           
  6506                           ; BSR set to: 0
  6507  000302  EE20 F054          	lfsr	2,84
  6508  000306  5174               	movf	pd_add_value@d& (0+255),w,b
  6509  000308  D8D6               	call	PL2	;call to abstracted procedure
  6510  00030A  6F82               	movwf	_pd_add_value$1069& (0+255),b	;volatile
  6511  00030C  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6512  00030E  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6513  000310  6F83               	movwf	(_pd_add_value$1069+1)& (0+255),b	;volatile
  6514  000312  D00B               	goto	l754
  6515  000314                     l6088:
  6516                           
  6517                           ; BSR set to: 0
  6518  000314  EE20 F054          	lfsr	2,84
  6519  000318  5174               	movf	pd_add_value@d& (0+255),w,b
  6520  00031A  D8CD               	call	PL2	;call to abstracted procedure
  6521  00031C  D965               	call	PL58	;call to abstracted procedure
  6522  00031E  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6523  000320  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6524  000322  C07C  F082         	movff	??_pd_add_value+4,_pd_add_value$1069	;volatile
  6525  000326  C07D  F083         	movff	??_pd_add_value+5,_pd_add_value$1069+1	;volatile
  6526  00032A                     l754:
  6527                           
  6528                           ; BSR set to: 0
  6529  00032A  D91C               	call	PL28	;call to abstracted procedure
  6530  00032C  5183               	movf	(_pd_add_value$1069+1)& (0+255),w,b	;volatile
  6531  00032E  0A80               	xorlw	128
  6532  000330  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6533  000332  5178               	movf	??_pd_add_value& (0+255),w,b
  6534  000334  5D82               	subwf	_pd_add_value$1069& (0+255),w,b	;volatile
  6535  000336  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6536  000338  0A80               	xorlw	128
  6537  00033A  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6538  00033C  E24C               	bc	l746
  6539                           
  6540                           ; BSR set to: 0
  6541  00033E  D8ED               	call	PL10	;call to abstracted procedure
  6542  000340  D8CE               	call	PL4	;call to abstracted procedure
  6543  000342  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6544  000344  D95E               	call	PL68	;call to abstracted procedure
  6545  000346  BF7D               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  6546  000348  D013               	goto	l6094
  6547                           
  6548                           ; BSR set to: 0
  6549  00034A  EE20 F054          	lfsr	2,84
  6550  00034E  5174               	movf	pd_add_value@d& (0+255),w,b
  6551  000350  26D9               	addwf	fsr2l,f,c
  6552  000352  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6553  000354  22DA               	addwfc	fsr2h,f,c
  6554  000356  CFDE F078          	movff	postinc2,??_pd_add_value
  6555  00035A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6556  00035E  EE20 F05A          	lfsr	2,90
  6557  000362  5174               	movf	pd_add_value@d& (0+255),w,b
  6558  000364  D8BC               	call	PL4	;call to abstracted procedure
  6559  000366  6F84               	movwf	_pd_add_value$1070& (0+255),b	;volatile
  6560  000368  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6561  00036A  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6562  00036C  6F85               	movwf	(_pd_add_value$1070+1)& (0+255),b	;volatile
  6563  00036E  D009               	goto	l758
  6564  000370                     l6094:
  6565                           
  6566                           ; BSR set to: 0
  6567  000370  D8D4               	call	PL10	;call to abstracted procedure
  6568  000372  D8B5               	call	PL4	;call to abstracted procedure
  6569  000374  D939               	call	PL58	;call to abstracted procedure
  6570  000376  4B7C               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  6571  000378  2B7D               	incf	(??_pd_add_value+5)& (0+255),f,b
  6572  00037A  C07C  F084         	movff	??_pd_add_value+4,_pd_add_value$1070	;volatile
  6573  00037E  C07D  F085         	movff	??_pd_add_value+5,_pd_add_value$1070+1	;volatile
  6574  000382                     l758:
  6575                           
  6576                           ; BSR set to: 0
  6577  000382  D8F0               	call	PL28	;call to abstracted procedure
  6578  000384  5185               	movf	(_pd_add_value$1070+1)& (0+255),w,b	;volatile
  6579  000386  0A80               	xorlw	128
  6580  000388  6F7A               	movwf	(??_pd_add_value+2)& (0+255),b
  6581  00038A  5178               	movf	??_pd_add_value& (0+255),w,b
  6582  00038C  5D84               	subwf	_pd_add_value$1070& (0+255),w,b	;volatile
  6583  00038E  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6584  000390  0A80               	xorlw	128
  6585  000392  597A               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  6586  000394  E220               	bc	l746
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;peak_detector.c: 62: for (i = 0; i < d->config.lval_cnt; i++) {
  6590  000396  6B8A               	clrf	pd_add_value@i& (0+255),b
  6591  000398  D013               	goto	l6102
  6592  00039A                     l6098:
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;peak_detector.c: 63: d->last_v_buf[i] = d->cur_v;
  6596  00039A  EE20 F058          	lfsr	2,88
  6597  00039E  5174               	movf	pd_add_value@d& (0+255),w,b
  6598  0003A0  26D9               	addwf	fsr2l,f,c
  6599  0003A2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6600  0003A4  22DA               	addwfc	fsr2h,f,c
  6601  0003A6  518A               	movf	pd_add_value@i& (0+255),w,b
  6602  0003A8  0D02               	mullw	2
  6603  0003AA  50F3               	movf	prodl,w,c
  6604  0003AC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6605  0003AE  6EE1               	movwf	fsr1l,c
  6606  0003B0  50F4               	movf	prodh,w,c
  6607  0003B2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6608  0003B4  6EE2               	movwf	fsr1h,c
  6609  0003B6  CFDE FFE6          	movff	postinc2,postinc1
  6610  0003BA  CFDD FFE5          	movff	postdec2,postdec1
  6611                           
  6612                           ; BSR set to: 0
  6613  0003BE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6614  0003C0                     l6102:
  6615                           
  6616                           ; BSR set to: 0
  6617  0003C0  D8C9               	call	PL26	;call to abstracted procedure
  6618  0003C2  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6619  0003C4  E3EA               	bnc	l6098
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;peak_detector.c: 64: }
  6623                           ;peak_detector.c: 65: d->status.alarm = FALSE;
  6624  0003C6  EE20 F05E          	lfsr	2,94
  6625  0003CA  5174               	movf	pd_add_value@d& (0+255),w,b
  6626  0003CC  26D9               	addwf	fsr2l,f,c
  6627  0003CE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6628  0003D0  22DA               	addwfc	fsr2h,f,c
  6629  0003D2  0EFE               	movlw	-2
  6630  0003D4  16DF               	andwf	223,f,c
  6631  0003D6                     l746:
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;peak_detector.c: 66: }
  6635                           ;peak_detector.c: 69: if (((d->wval)<0?(-(d->wval)):(d->wval)) < (10)) {
  6636  0003D6  D896               	call	PL8	;call to abstracted procedure
  6637  0003D8  BF79               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  6638  0003DA  D00B               	goto	l6108
  6639                           
  6640                           ; BSR set to: 0
  6641  0003DC  EE20 F05C          	lfsr	2,92
  6642  0003E0  5174               	movf	pd_add_value@d& (0+255),w,b
  6643  0003E2  26D9               	addwf	fsr2l,f,c
  6644  0003E4  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6645  0003E6  22DA               	addwfc	fsr2h,f,c
  6646  0003E8  CFDE F086          	movff	postinc2,_pd_add_value$1071	;volatile
  6647  0003EC  CFDD F087          	movff	postdec2,_pd_add_value$1071+1	;volatile
  6648  0003F0  D00B               	goto	l6110
  6649  0003F2                     l6108:
  6650                           
  6651                           ; BSR set to: 0
  6652  0003F2  EE20 F05C          	lfsr	2,92
  6653  0003F6  5174               	movf	pd_add_value@d& (0+255),w,b
  6654  0003F8  26D9               	addwf	fsr2l,f,c
  6655  0003FA  D87B               	call	PL6	;call to abstracted procedure
  6656  0003FC  4B78               	infsnz	??_pd_add_value& (0+255),f,b
  6657  0003FE  2B79               	incf	(??_pd_add_value+1)& (0+255),f,b
  6658  000400  C078  F086         	movff	??_pd_add_value,_pd_add_value$1071	;volatile
  6659  000404  C079  F087         	movff	??_pd_add_value+1,_pd_add_value$1071+1	;volatile
  6660  000408                     l6110:
  6661                           
  6662                           ; BSR set to: 0
  6663  000408  5187               	movf	(_pd_add_value$1071+1)& (0+255),w,b	;volatile
  6664  00040A  0A80               	xorlw	128
  6665  00040C  0F80               	addlw	-128
  6666  00040E  0E0A               	movlw	10
  6667  000410  B4D8               	btfsc	status,2,c
  6668  000412  5D86               	subwf	_pd_add_value$1071& (0+255),w,b	;volatile
  6669  000414  E24F               	bc	l6132
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;peak_detector.c: 70: if (d->ref_v_idx == 9) {
  6673  000416  EE20 F053          	lfsr	2,83
  6674  00041A  5174               	movf	pd_add_value@d& (0+255),w,b
  6675  00041C  26D9               	addwf	fsr2l,f,c
  6676  00041E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6677  000420  22DA               	addwfc	fsr2h,f,c
  6678  000422  0E09               	movlw	9
  6679  000424  62DF               	cpfseq	indf2,c
  6680  000426  D008               	goto	l6116
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;peak_detector.c: 71: d->status.firststart = FALSE;
  6684  000428  EE20 F05E          	lfsr	2,94
  6685  00042C  5174               	movf	pd_add_value@d& (0+255),w,b
  6686  00042E  26D9               	addwf	fsr2l,f,c
  6687  000430  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6688  000432  22DA               	addwfc	fsr2h,f,c
  6689  000434  0EFB               	movlw	-5
  6690  000436  16DF               	andwf	223,f,c
  6691  000438                     l6116:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;peak_detector.c: 72: }
  6695                           ;peak_detector.c: 75: d->ref_v_buf[d->ref_v_idx] = d->cur_v;
  6696  000438  EE20 F058          	lfsr	2,88
  6697  00043C  5174               	movf	pd_add_value@d& (0+255),w,b
  6698  00043E  D89D               	call	PL30	;call to abstracted procedure
  6699  000440  D8B0               	call	PL40	;call to abstracted procedure
  6700  000442  6EE1               	movwf	fsr1l,c
  6701  000444  0E00               	movlw	0
  6702  000446  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6703  000448  6EE2               	movwf	fsr1h,c
  6704  00044A  CFDE FFE6          	movff	postinc2,postinc1
  6705  00044E  CFDD FFE5          	movff	postdec2,postdec1
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;peak_detector.c: 76: d->ref_v_idx = (d->ref_v_idx + 1) % d->config.rval_cnt;
  6709  000452  EE20 F053          	lfsr	2,83
  6710  000456  5174               	movf	pd_add_value@d& (0+255),w,b
  6711  000458  D890               	call	PL30	;call to abstracted procedure
  6712  00045A  6F78               	movwf	??_pd_add_value& (0+255),b
  6713  00045C  2978               	incf	??_pd_add_value& (0+255),w,b
  6714  00045E  6F6C               	movwf	?___awmod& (0+255),b
  6715  000460  6B6D               	clrf	(?___awmod+1)& (0+255),b
  6716  000462  0E00               	movlw	0
  6717  000464  236D               	addwfc	(?___awmod+1)& (0+255),f,b
  6718  000466  EE10 F064          	lfsr	1,100
  6719  00046A  5174               	movf	pd_add_value@d& (0+255),w,b
  6720  00046C  26E1               	addwf	fsr1l,f,c
  6721  00046E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6722  000470  22E2               	addwfc	fsr1h,f,c
  6723  000472  50E7               	movf	indf1,w,c
  6724  000474  6F6E               	movwf	(?___awmod+2)& (0+255),b
  6725  000476  6B6F               	clrf	(?___awmod+3)& (0+255),b
  6726  000478  ECCA  F00A         	call	___awmod	;wreg free
  6727  00047C  516C               	movf	?___awmod& (0+255),w,b
  6728  00047E  6EDF               	movwf	indf2,c
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;peak_detector.c: 79: tmp = 0;
  6732  000480  6B88               	clrf	pd_add_value@tmp& (0+255),b
  6733  000482  6B89               	clrf	(pd_add_value@tmp+1)& (0+255),b
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;peak_detector.c: 80: for (i = 0; i < d->config.rval_cnt; i++) {
  6737  000484  6B8A               	clrf	pd_add_value@i& (0+255),b
  6738  000486  D007               	goto	l6128
  6739  000488                     l6124:
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;peak_detector.c: 81: tmp += d->ref_v_buf[i];
  6743  000488  518A               	movf	pd_add_value@i& (0+255),w,b
  6744  00048A  D88B               	call	PL40	;call to abstracted procedure
  6745  00048C  6ED9               	movwf	fsr2l,c
  6746  00048E  0E00               	movlw	0
  6747  000490  2179               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  6748  000492  6EDA               	movwf	fsr2h,c
  6749                           
  6750                           ; BSR set to: 0
  6751  000494  D8B0               	call	PL64	;call to abstracted procedure
  6752  000496                     l6128:
  6753                           
  6754                           ; BSR set to: 0
  6755  000496  D898               	call	PL50	;call to abstracted procedure
  6756  000498  5D8A               	subwf	pd_add_value@i& (0+255),w,b
  6757  00049A  E3F6               	bnc	l6124
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;peak_detector.c: 82: }
  6761                           ;peak_detector.c: 84: d->ref_v = tmp/d->config.rval_cnt;
  6762  00049C  C088  F06C         	movff	pd_add_value@tmp,?___awdiv
  6763  0004A0  C089  F06D         	movff	pd_add_value@tmp+1,?___awdiv+1
  6764  0004A4  D891               	call	PL50	;call to abstracted procedure
  6765  0004A6  6F6E               	movwf	(?___awdiv+2)& (0+255),b
  6766  0004A8  6B6F               	clrf	(?___awdiv+3)& (0+255),b
  6767  0004AA  EC19  F00A         	call	___awdiv	;wreg free
  6768  0004AE  EE20 F054          	lfsr	2,84
  6769  0004B2  D86E               	call	PL38	;call to abstracted procedure
  6770  0004B4                     l6132:
  6771                           
  6772                           ; BSR set to: 0
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;peak_detector.c: 85: }
  6776                           ;peak_detector.c: 87: return FALSE;
  6777  0004B4  0C00               	retlw	0
  6778  0004B6                     __end_of_pd_add_value:
  6779                           	opt stack 0
  6780  0004B6                     PL2:
  6781                           	opt stack 23
  6782  0004B6  26D9               	addwf	fsr2l,f,c
  6783  0004B8  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6784  0004BA  22DA               	addwfc	fsr2h,f,c
  6785  0004BC  CFDE F078          	movff	postinc2,??_pd_add_value
  6786  0004C0  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6787  0004C4  EE20 F058          	lfsr	2,88
  6788  0004C8  5174               	movf	pd_add_value@d& (0+255),w,b
  6789  0004CA  26D9               	addwf	fsr2l,f,c
  6790  0004CC  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6791  0004CE  22DA               	addwfc	fsr2h,f,c
  6792  0004D0  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6793  0004D4  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6794  0004D8  5178               	movf	??_pd_add_value& (0+255),w,b
  6795  0004DA  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6796  0004DC  0012               	return	
  6797  0004DE                     __end_ofPL2:
  6798                           	opt stack 0
  6799  0004DE                     PL4:
  6800                           	opt stack 23
  6801  0004DE  26D9               	addwf	fsr2l,f,c
  6802  0004E0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6803  0004E2  22DA               	addwfc	fsr2h,f,c
  6804  0004E4  CFDE F07A          	movff	postinc2,??_pd_add_value+2
  6805  0004E8  CFDD F07B          	movff	postdec2,??_pd_add_value+3
  6806  0004EC  5178               	movf	??_pd_add_value& (0+255),w,b
  6807  0004EE  5D7A               	subwf	(??_pd_add_value+2)& (0+255),w,b
  6808  0004F0  0012               	return	
  6809  0004F2                     __end_ofPL4:
  6810                           	opt stack 0
  6811  0004F2                     PL6:
  6812                           	opt stack 23
  6813  0004F2  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6814  0004F4  22DA               	addwfc	fsr2h,f,c
  6815  0004F6  CFDE F078          	movff	postinc2,??_pd_add_value
  6816  0004FA  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6817  0004FE  1F78               	comf	??_pd_add_value& (0+255),f,b
  6818  000500  1F79               	comf	(??_pd_add_value+1)& (0+255),f,b
  6819  000502  0012               	return	
  6820  000504                     __end_ofPL6:
  6821                           	opt stack 0
  6822  000504                     PL8:
  6823                           	opt stack 23
  6824  000504  EE20 F05C          	lfsr	2,92
  6825  000508  5174               	movf	pd_add_value@d& (0+255),w,b
  6826  00050A  26D9               	addwf	fsr2l,f,c
  6827  00050C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6828  00050E  22DA               	addwfc	fsr2h,f,c
  6829  000510  CFDE F078          	movff	postinc2,??_pd_add_value
  6830  000514  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6831  000518  0012               	return	
  6832  00051A                     __end_ofPL8:
  6833                           	opt stack 0
  6834  00051A                     PL10:
  6835                           	opt stack 23
  6836  00051A  EE20 F054          	lfsr	2,84
  6837  00051E  5174               	movf	pd_add_value@d& (0+255),w,b
  6838  000520  26D9               	addwf	fsr2l,f,c
  6839  000522  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6840  000524  22DA               	addwfc	fsr2h,f,c
  6841  000526  CFDE F078          	movff	postinc2,??_pd_add_value
  6842  00052A  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6843  00052E  EE20 F05A          	lfsr	2,90
  6844  000532  5174               	movf	pd_add_value@d& (0+255),w,b
  6845  000534  0012               	return	
  6846  000536                     __end_ofPL10:
  6847                           	opt stack 0
  6848  000536                     PL24:
  6849                           	opt stack 23
  6850  000536  5174               	movf	pd_add_value@d& (0+255),w,b
  6851  000538  26E1               	addwf	fsr1l,f,c
  6852  00053A  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6853  00053C  22E2               	addwfc	fsr1h,f,c
  6854  00053E  CFDE FFE6          	movff	postinc2,postinc1
  6855  000542  CFDD FFE5          	movff	postdec2,postdec1
  6856  000546  EE20 F05A          	lfsr	2,90
  6857  00054A  5174               	movf	pd_add_value@d& (0+255),w,b
  6858  00054C  26D9               	addwf	fsr2l,f,c
  6859  00054E  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6860  000550  22DA               	addwfc	fsr2h,f,c
  6861  000552  0012               	return	
  6862  000554                     __end_ofPL24:
  6863                           	opt stack 0
  6864  000554                     PL26:
  6865                           	opt stack 23
  6866  000554  EE20 F063          	lfsr	2,99
  6867  000558  5174               	movf	pd_add_value@d& (0+255),w,b
  6868  00055A  26D9               	addwf	fsr2l,f,c
  6869  00055C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6870  00055E  22DA               	addwfc	fsr2h,f,c
  6871  000560  50DF               	movf	indf2,w,c
  6872  000562  0012               	return	
  6873  000564                     __end_ofPL26:
  6874                           	opt stack 0
  6875  000564                     PL28:
  6876                           	opt stack 23
  6877  000564  EE20 F061          	lfsr	2,97
  6878  000568  5174               	movf	pd_add_value@d& (0+255),w,b
  6879  00056A  26D9               	addwf	fsr2l,f,c
  6880  00056C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6881  00056E  22DA               	addwfc	fsr2h,f,c
  6882  000570  CFDE F078          	movff	postinc2,??_pd_add_value
  6883  000574  CFDD F079          	movff	postdec2,??_pd_add_value+1
  6884  000578  0012               	return	
  6885  00057A                     __end_ofPL28:
  6886                           	opt stack 0
  6887  00057A                     PL30:
  6888                           	opt stack 23
  6889  00057A  26D9               	addwf	fsr2l,f,c
  6890  00057C  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6891  00057E  22DA               	addwfc	fsr2h,f,c
  6892  000580  EE10 F053          	lfsr	1,83
  6893  000584  5174               	movf	pd_add_value@d& (0+255),w,b
  6894  000586  26E1               	addwf	fsr1l,f,c
  6895  000588  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6896  00058A  22E2               	addwfc	fsr1h,f,c
  6897  00058C  50E7               	movf	indf1,w,c
  6898  00058E  0012               	return	
  6899  000590                     __end_ofPL30:
  6900                           	opt stack 0
  6901  000590                     PL38:
  6902                           	opt stack 23
  6903  000590  5174               	movf	pd_add_value@d& (0+255),w,b
  6904  000592  26D9               	addwf	fsr2l,f,c
  6905  000594  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6906  000596  22DA               	addwfc	fsr2h,f,c
  6907  000598  C06C  FFDE         	movff	?___awdiv,postinc2
  6908  00059C  C06D  FFDD         	movff	?___awdiv+1,postdec2
  6909  0005A0  0012               	return	
  6910  0005A2                     __end_ofPL38:
  6911                           	opt stack 0
  6912  0005A2                     PL40:
  6913                           	opt stack 23
  6914  0005A2  0D02               	mullw	2
  6915  0005A4  50F3               	movf	prodl,w,c
  6916  0005A6  2574               	addwf	pd_add_value@d& (0+255),w,b
  6917  0005A8  6F78               	movwf	??_pd_add_value& (0+255),b
  6918  0005AA  50F4               	movf	prodh,w,c
  6919  0005AC  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6920  0005AE  6F79               	movwf	(??_pd_add_value+1)& (0+255),b
  6921  0005B0  0E2B               	movlw	43
  6922  0005B2  2578               	addwf	??_pd_add_value& (0+255),w,b
  6923  0005B4  0012               	return	
  6924  0005B6                     __end_ofPL40:
  6925                           	opt stack 0
  6926  0005B6                     PL44:
  6927                           	opt stack 23
  6928  0005B6  EE20 F05E          	lfsr	2,94
  6929  0005BA  5174               	movf	pd_add_value@d& (0+255),w,b
  6930  0005BC  26D9               	addwf	fsr2l,f,c
  6931  0005BE  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6932  0005C0  22DA               	addwfc	fsr2h,f,c
  6933  0005C2  50DF               	movf	indf2,w,c
  6934  0005C4  6F78               	movwf	??_pd_add_value& (0+255),b
  6935  0005C6  0012               	return	
  6936  0005C8                     __end_ofPL44:
  6937                           	opt stack 0
  6938  0005C8                     PL50:
  6939                           	opt stack 23
  6940  0005C8  EE20 F064          	lfsr	2,100
  6941  0005CC  5174               	movf	pd_add_value@d& (0+255),w,b
  6942  0005CE  26D9               	addwf	fsr2l,f,c
  6943  0005D0  5175               	movf	(pd_add_value@d+1)& (0+255),w,b
  6944  0005D2  22DA               	addwfc	fsr2h,f,c
  6945  0005D4  50DF               	movf	indf2,w,c
  6946  0005D6  0012               	return	
  6947  0005D8                     __end_ofPL50:
  6948                           	opt stack 0
  6949  0005D8                     PL52:
  6950                           	opt stack 23
  6951  0005D8  0D02               	mullw	2
  6952  0005DA  50F3               	movf	prodl,w,c
  6953  0005DC  2574               	addwf	pd_add_value@d& (0+255),w,b
  6954  0005DE  6ED9               	movwf	fsr2l,c
  6955  0005E0  50F4               	movf	prodh,w,c
  6956  0005E2  2175               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  6957  0005E4  6EDA               	movwf	fsr2h,c
  6958  0005E6  0012               	return	
  6959  0005E8                     __end_ofPL52:
  6960                           	opt stack 0
  6961  0005E8                     PL58:
  6962                           	opt stack 23
  6963  0005E8  6F7C               	movwf	(??_pd_add_value+4)& (0+255),b
  6964  0005EA  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6965  0005EC  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6966  0005EE  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6967  0005F0  1F7C               	comf	(??_pd_add_value+4)& (0+255),f,b
  6968  0005F2  1F7D               	comf	(??_pd_add_value+5)& (0+255),f,b
  6969  0005F4  0012               	return	
  6970  0005F6                     __end_ofPL58:
  6971                           	opt stack 0
  6972  0005F6                     PL64:
  6973                           	opt stack 23
  6974  0005F6  50DE               	movf	postinc2,w,c
  6975  0005F8  2788               	addwf	pd_add_value@tmp& (0+255),f,b
  6976  0005FA  50DD               	movf	postdec2,w,c
  6977  0005FC  2389               	addwfc	(pd_add_value@tmp+1)& (0+255),f,b
  6978  0005FE  2B8A               	incf	pd_add_value@i& (0+255),f,b
  6979  000600  0012               	return	
  6980  000602                     __end_ofPL64:
  6981                           	opt stack 0
  6982  000602                     PL68:
  6983                           	opt stack 23
  6984  000602  5179               	movf	(??_pd_add_value+1)& (0+255),w,b
  6985  000604  597B               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  6986  000606  6F7D               	movwf	(??_pd_add_value+5)& (0+255),b
  6987  000608  0012               	return	
  6988  00060A                     __end_ofPL68:
  6989                           	opt stack 0
  6990                           tosu	equ	0xFFF
  6991                           tosh	equ	0xFFE
  6992                           tosl	equ	0xFFD
  6993                           pclath	equ	0xFFA
  6994                           tblptru	equ	0xFF8
  6995                           tblptrh	equ	0xFF7
  6996                           tblptrl	equ	0xFF6
  6997                           tablat	equ	0xFF5
  6998                           prodh	equ	0xFF4
  6999                           prodl	equ	0xFF3
  7000                           intcon	equ	0xFF2
  7001                           indf0	equ	0xFEF
  7002                           postinc0	equ	0xFEE
  7003                           fsr0h	equ	0xFEA
  7004                           fsr0l	equ	0xFE9
  7005                           wreg	equ	0xFE8
  7006                           indf1	equ	0xFE7
  7007                           postinc1	equ	0xFE6
  7008                           postdec1	equ	0xFE5
  7009                           fsr1h	equ	0xFE2
  7010                           fsr1l	equ	0xFE1
  7011                           indf2	equ	0xFDF
  7012                           postinc2	equ	0xFDE
  7013                           postdec2	equ	0xFDD
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function _set_parameter *****************
  7019 ;; Defined at:
  7020 ;;		line 54 in file "src/modules/on_parameter_found.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;  p_id            1    wreg     char 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  p_id            1    0[COMRAM] char 
  7025 ;;  ok              1    0        unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      unsigned char 
  7028 ;; Registers used:
  7029 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7030 ;; Tracked objects:
  7031 ;;		On entry : F/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: FFFFFFF0/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7035 ;;      Params:         0       0       0       0       0       0       0
  7036 ;;      Locals:         0       1       0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0       0
  7038 ;;      Totals:         0       1       0       0       0       0       0
  7039 ;;Total ram usage:        1 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    7
  7042 ;; This function calls:
  7043 ;;		_syntax_get_text
  7044 ;;		_serialport_write
  7045 ;; This function is called by:
  7046 ;;		_on_parameter_found
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text24
  7051  001A26                     __ptext24:
  7052                           	opt stack 0
  7053  001A26                     _set_parameter:
  7054                           	opt stack 20
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;on_parameter_found.c: 63: serialport_write( syntax_get_text() );
  7058                           
  7059                           ; BSR set to: 0
  7060                           
  7061                           ; BSR set to: 0
  7062  001A26  ECB2  F00D         	call	_syntax_get_text	;wreg free
  7063  001A2A  C001  F07D         	movff	?_syntax_get_text,?_serialport_write
  7064  001A2E  C002  F07E         	movff	?_syntax_get_text+1,?_serialport_write+1
  7065  001A32  0100               	movlb	0	; () banked
  7066  001A34  ECB1  F00B         	call	_serialport_write	;wreg free
  7067                           
  7068                           ;on_parameter_found.c: 69: else
  7069                           ;on_parameter_found.c: 70: {
  7070                           ;on_parameter_found.c: 71: serialport_write( ":err " );
  7071  001A38  0E7F               	movlw	high STR_3
  7072  001A3A  0100               	movlb	0	; () banked
  7073  001A3C  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7074  001A3E  0EEF               	movlw	low STR_3
  7075  001A40  6F7D               	movwf	?_serialport_write& (0+255),b
  7076  001A42  ECB1  F00B         	call	_serialport_write	;wreg free
  7077                           
  7078                           ;on_parameter_found.c: 72: }
  7079                           ;on_parameter_found.c: 73: return ok;
  7080  001A46  0C00               	retlw	0
  7081  001A48                     __end_of_set_parameter:
  7082                           	opt stack 0
  7083                           tosu	equ	0xFFF
  7084                           tosh	equ	0xFFE
  7085                           tosl	equ	0xFFD
  7086                           pclath	equ	0xFFA
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodh	equ	0xFF4
  7092                           prodl	equ	0xFF3
  7093                           intcon	equ	0xFF2
  7094                           indf0	equ	0xFEF
  7095                           postinc0	equ	0xFEE
  7096                           fsr0h	equ	0xFEA
  7097                           fsr0l	equ	0xFE9
  7098                           wreg	equ	0xFE8
  7099                           indf1	equ	0xFE7
  7100                           postinc1	equ	0xFE6
  7101                           postdec1	equ	0xFE5
  7102                           fsr1h	equ	0xFE2
  7103                           fsr1l	equ	0xFE1
  7104                           indf2	equ	0xFDF
  7105                           postinc2	equ	0xFDE
  7106                           postdec2	equ	0xFDD
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function _syntax_get_text *****************
  7112 ;; Defined at:
  7113 ;;		line 223 in file "src/modules/syntax.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;		None
  7116 ;; Auto vars:     Size  Location     Type
  7117 ;;		None
  7118 ;; Return value:  Size  Location     Type
  7119 ;;                  2    wreg      PTR const unsigned char 
  7120 ;; Registers used:
  7121 ;;		wreg, status,2
  7122 ;; Tracked objects:
  7123 ;;		On entry : F/0
  7124 ;;		On exit  : F/3
  7125 ;;		Unchanged: FFFFFFF0/0
  7126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7127 ;;      Params:         0       0       0       0       0       0       0
  7128 ;;      Locals:         0       0       0       0       0       0       0
  7129 ;;      Temps:          0       0       0       0       0       0       0
  7130 ;;      Totals:         0       0       0       0       0       0       0
  7131 ;;Total ram usage:        0 bytes
  7132 ;; Hardware stack levels used:    1
  7133 ;; Hardware stack levels required when called:    5
  7134 ;; This function calls:
  7135 ;;		Nothing
  7136 ;; This function is called by:
  7137 ;;		_set_parameter
  7138 ;; This function uses a non-reentrant model
  7139 ;;
  7140                           
  7141                           	psect	text25
  7142  001B64                     __ptext25:
  7143                           	opt stack 0
  7144  001B64                     _syntax_get_text:
  7145                           	opt stack 21
  7146                           
  7147                           ; BSR set to: 0
  7148                           ;syntax.c: 224: return parameter_text;
  7149  001B64  0103               	movlb	3	; () banked
  7150  001B66  0E03               	movlw	high _parameter_text
  7151  001B68  6E02               	movwf	?_syntax_get_text+1,c
  7152  001B6A  0E00               	movlw	low _parameter_text
  7153  001B6C  6E01               	movwf	?_syntax_get_text,c
  7154                           
  7155                           ; BSR set to: 3
  7156  001B6E  0012               	return	
  7157  001B70                     __end_of_syntax_get_text:
  7158                           	opt stack 0
  7159                           tosu	equ	0xFFF
  7160                           tosh	equ	0xFFE
  7161                           tosl	equ	0xFFD
  7162                           pclath	equ	0xFFA
  7163                           tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodh	equ	0xFF4
  7168                           prodl	equ	0xFF3
  7169                           intcon	equ	0xFF2
  7170                           indf0	equ	0xFEF
  7171                           postinc0	equ	0xFEE
  7172                           fsr0h	equ	0xFEA
  7173                           fsr0l	equ	0xFE9
  7174                           wreg	equ	0xFE8
  7175                           indf1	equ	0xFE7
  7176                           postinc1	equ	0xFE6
  7177                           postdec1	equ	0xFE5
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _get_parameter *****************
  7188 ;; Defined at:
  7189 ;;		line 76 in file "src/modules/on_parameter_found.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  p_id            1    wreg     char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  p_id            1    0[COMRAM] char 
  7194 ;;  ok              1    0        unsigned char 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      unsigned char 
  7197 ;; Registers used:
  7198 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : F/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: FFFFFFF0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7204 ;;      Params:         0       0       0       0       0       0       0
  7205 ;;      Locals:         0       1       0       0       0       0       0
  7206 ;;      Temps:          0       0       0       0       0       0       0
  7207 ;;      Totals:         0       1       0       0       0       0       0
  7208 ;;Total ram usage:        1 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    7
  7211 ;; This function calls:
  7212 ;;		_serialport_write
  7213 ;; This function is called by:
  7214 ;;		_on_parameter_found
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text26
  7219  001B56                     __ptext26:
  7220                           	opt stack 0
  7221  001B56                     _get_parameter:
  7222                           	opt stack 20
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;on_parameter_found.c: 91: else
  7226                           ;on_parameter_found.c: 92: {
  7227                           ;on_parameter_found.c: 93: serialport_write( ":err " );
  7228                           
  7229                           ; BSR set to: 0
  7230                           
  7231                           ; BSR set to: 3
  7232  001B56  0E7F               	movlw	high STR_3
  7233  001B58  6F7E               	movwf	(?_serialport_write+1)& (0+255),b
  7234  001B5A  0EEF               	movlw	low STR_3
  7235  001B5C  6F7D               	movwf	?_serialport_write& (0+255),b
  7236  001B5E  ECB1  F00B         	call	_serialport_write	;wreg free
  7237                           
  7238                           ;on_parameter_found.c: 94: }
  7239                           ;on_parameter_found.c: 95: return ok;
  7240  001B62  0C00               	retlw	0
  7241  001B64                     __end_of_get_parameter:
  7242                           	opt stack 0
  7243                           tosu	equ	0xFFF
  7244                           tosh	equ	0xFFE
  7245                           tosl	equ	0xFFD
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           indf0	equ	0xFEF
  7255                           postinc0	equ	0xFEE
  7256                           fsr0h	equ	0xFEA
  7257                           fsr0l	equ	0xFE9
  7258                           wreg	equ	0xFE8
  7259                           indf1	equ	0xFE7
  7260                           postinc1	equ	0xFE6
  7261                           postdec1	equ	0xFE5
  7262                           fsr1h	equ	0xFE2
  7263                           fsr1l	equ	0xFE1
  7264                           indf2	equ	0xFDF
  7265                           postinc2	equ	0xFDE
  7266                           postdec2	equ	0xFDD
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function _serialport_write *****************
  7272 ;; Defined at:
  7273 ;;		line 48 in file "src/modules/serialport.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  pstr            2   29[BANK0 ] PTR const unsigned char 
  7276 ;;		 -> STR_4(6), STR_3(6), STR_2(5), STR_1(5), 
  7277 ;;		 -> parameter_text(127), 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;		None
  7280 ;; Return value:  Size  Location     Type
  7281 ;;		None               void
  7282 ;; Registers used:
  7283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : C/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: FFFFFFF0/0
  7288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7289 ;;      Params:         0       2       0       0       0       0       0
  7290 ;;      Locals:         0       0       0       0       0       0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0
  7292 ;;      Totals:         0       2       0       0       0       0       0
  7293 ;;Total ram usage:        2 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    6
  7296 ;; This function calls:
  7297 ;;		_rd_buffer_put
  7298 ;; This function is called by:
  7299 ;;		_on_parameter_found
  7300 ;;		_set_parameter
  7301 ;;		_get_parameter
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	text27
  7306  001762                     __ptext27:
  7307                           	opt stack 0
  7308  001762                     _serialport_write:
  7309                           	opt stack 21
  7310                           
  7311                           ;serialport.c: 49: while (pstr && *pstr)
  7312  001762  D00D               	goto	l5702
  7313  001764                     l5698:
  7314                           
  7315                           ;serialport.c: 50: {
  7316                           ;serialport.c: 51: rd_buffer_put(&g_tx_buffer, (UINT8*)pstr);
  7317  001764  0E01               	movlw	high _g_tx_buffer
  7318  001766  0100               	movlb	0	; () banked
  7319  001768  6F6D               	movwf	(?_rd_buffer_put+1)& (0+255),b
  7320  00176A  0E00               	movlw	low _g_tx_buffer
  7321  00176C  6F6C               	movwf	?_rd_buffer_put& (0+255),b
  7322  00176E  C07D  F06E         	movff	serialport_write@pstr,?_rd_buffer_put+2
  7323  001772  C07E  F06F         	movff	serialport_write@pstr+1,?_rd_buffer_put+3
  7324  001776  ECA9  F005         	call	_rd_buffer_put	;wreg free
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;serialport.c: 52: pstr++;
  7328  00177A  4B7D               	infsnz	serialport_write@pstr& (0+255),f,b
  7329  00177C  2B7E               	incf	(serialport_write@pstr+1)& (0+255),f,b
  7330  00177E                     l5702:
  7331  00177E  0100               	movlb	0	; () banked
  7332  001780  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7333  001782  117D               	iorwf	serialport_write@pstr& (0+255),w,b
  7334  001784  B4D8               	btfsc	status,2,c
  7335  001786  0012               	return	
  7336                           
  7337                           ; BSR set to: 0
  7338  001788  517D               	movf	serialport_write@pstr& (0+255),w,b
  7339  00178A  6EF6               	movwf	tblptrl,c
  7340  00178C  6EE9               	movwf	fsr0l,c
  7341  00178E  0E05               	movlw	(high __ramtop+-1)
  7342  001790  6EEA               	movwf	fsr0h,c
  7343  001792  517E               	movf	(serialport_write@pstr+1)& (0+255),w,b
  7344  001794  64EA               	cpfsgt	fsr0h,c
  7345  001796  D003               	bra	u5947
  7346  001798  6EEA               	movwf	fsr0h,c
  7347  00179A  50EF               	movf	indf0,w,c
  7348  00179C  D003               	bra	u5940
  7349  00179E                     u5947:
  7350  00179E  6EF7               	movwf	tblptrh,c
  7351  0017A0  0008               	tblrd		*
  7352  0017A2  50F5               	movf	tablat,w,c
  7353  0017A4                     u5940:
  7354  0017A4  0900               	iorlw	0
  7355  0017A6  B4D8               	btfsc	status,2,c
  7356  0017A8  0012               	return	
  7357  0017AA  D7DC               	goto	l5698
  7358  0017AC                     __end_of_serialport_write:
  7359                           	opt stack 0
  7360                           tosu	equ	0xFFF
  7361                           tosh	equ	0xFFE
  7362                           tosl	equ	0xFFD
  7363                           pclath	equ	0xFFA
  7364                           tblptru	equ	0xFF8
  7365                           tblptrh	equ	0xFF7
  7366                           tblptrl	equ	0xFF6
  7367                           tablat	equ	0xFF5
  7368                           prodh	equ	0xFF4
  7369                           prodl	equ	0xFF3
  7370                           intcon	equ	0xFF2
  7371                           indf0	equ	0xFEF
  7372                           postinc0	equ	0xFEE
  7373                           fsr0h	equ	0xFEA
  7374                           fsr0l	equ	0xFE9
  7375                           wreg	equ	0xFE8
  7376                           indf1	equ	0xFE7
  7377                           postinc1	equ	0xFE6
  7378                           postdec1	equ	0xFE5
  7379                           fsr1h	equ	0xFE2
  7380                           fsr1l	equ	0xFE1
  7381                           indf2	equ	0xFDF
  7382                           postinc2	equ	0xFDE
  7383                           postdec2	equ	0xFDD
  7384                           fsr2h	equ	0xFDA
  7385                           fsr2l	equ	0xFD9
  7386                           status	equ	0xFD8
  7387                           
  7388 ;; *************** function _rd_buffer_put *****************
  7389 ;; Defined at:
  7390 ;;		line 148 in file "src/modules/rd_buffer.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  7393 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7394 ;;  prec            2   14[BANK0 ] PTR unsigned char 
  7395 ;;		 -> STR_4(6), STR_3(6), STR_2(5), STR_1(5), 
  7396 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  ind             2   27[BANK0 ] int 
  7399 ;;  mes_rec         2   22[BANK0 ] PTR volatile unsigned ch
  7400 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  7401 ;;  sz              2   25[BANK0 ] int 
  7402 ;;  result          1    0        unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;                  1    wreg      unsigned char 
  7405 ;; Registers used:
  7406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7407 ;; Tracked objects:
  7408 ;;		On entry : F/0
  7409 ;;		On exit  : F/0
  7410 ;;		Unchanged: FFFFFFF0/0
  7411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7412 ;;      Params:         0       4       0       0       0       0       0
  7413 ;;      Locals:         0       8       0       0       0       0       0
  7414 ;;      Temps:          0       5       0       0       0       0       0
  7415 ;;      Totals:         0      17       0       0       0       0       0
  7416 ;;Total ram usage:       17 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:    5
  7419 ;; This function calls:
  7420 ;;		Nothing
  7421 ;; This function is called by:
  7422 ;;		_serialport_write
  7423 ;; This function uses a non-reentrant model
  7424 ;;
  7425                           
  7426                           	psect	text28
  7427  000B52                     __ptext28:
  7428                           	opt stack 0
  7429  000B52                     _rd_buffer_put:
  7430                           	opt stack 21
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;rd_buffer.c: 150: SIZE sz ;
  7434                           ;rd_buffer.c: 151: sz = pbuffer->head.last - pbuffer->head.first;
  7435                           
  7436                           ; BSR set to: 0
  7437  000B52  EE20 F002          	lfsr	2,2
  7438  000B56  D894               	call	PL46	;call to abstracted procedure
  7439  000B58  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7440  000B5C  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7441  000B60  CFDE F072          	movff	postinc2,??_rd_buffer_put+2
  7442  000B64  CFDD F073          	movff	postdec2,??_rd_buffer_put+3
  7443  000B68  5170               	movf	??_rd_buffer_put& (0+255),w,b
  7444  000B6A  5D72               	subwf	(??_rd_buffer_put+2)& (0+255),w,b
  7445  000B6C  6F79               	movwf	rd_buffer_put@sz& (0+255),b
  7446  000B6E  5171               	movf	(??_rd_buffer_put+1)& (0+255),w,b
  7447  000B70  5973               	subwfb	(??_rd_buffer_put+3)& (0+255),w,b
  7448  000B72  6F7A               	movwf	(rd_buffer_put@sz+1)& (0+255),b
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;rd_buffer.c: 152: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
  7452  000B74  0E01               	movlw	1
  7453  000B76  6F78               	movwf	_rd_buffer_put$462& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456  000B78  D88C               	call	PL56	;call to abstracted procedure
  7457  000B7A  64EA               	cpfsgt	fsr0h,c
  7458  000B7C  D003               	bra	u5757
  7459  000B7E  6EEA               	movwf	fsr0h,c
  7460  000B80  50EF               	movf	indf0,w,c
  7461  000B82  D003               	bra	u5750
  7462  000B84                     u5757:
  7463  000B84  6EF7               	movwf	tblptrh,c
  7464  000B86  0008               	tblrd		*
  7465  000B88  50F5               	movf	tablat,w,c
  7466  000B8A                     u5750:
  7467  000B8A  0A0A               	xorlw	10
  7468  000B8C  E00E               	bz	l5592
  7469  000B8E  0100               	movlb	0	; () banked
  7470  000B90  D880               	call	PL56	;call to abstracted procedure
  7471  000B92  64EA               	cpfsgt	fsr0h,c
  7472  000B94  D003               	bra	u5777
  7473  000B96  6EEA               	movwf	fsr0h,c
  7474  000B98  50EF               	movf	indf0,w,c
  7475  000B9A  D003               	bra	u5770
  7476  000B9C                     u5777:
  7477  000B9C  6EF7               	movwf	tblptrh,c
  7478  000B9E  0008               	tblrd		*
  7479  000BA0  50F5               	movf	tablat,w,c
  7480  000BA2                     u5770:
  7481  000BA2  0A0D               	xorlw	13
  7482  000BA4  E002               	bz	l5592
  7483  000BA6  0100               	movlb	0	; () banked
  7484  000BA8  6B78               	clrf	_rd_buffer_put$462& (0+255),b
  7485  000BAA                     l5592:
  7486  000BAA  0100               	movlb	0	; () banked
  7487  000BAC  5178               	movf	_rd_buffer_put$462& (0+255),w,b
  7488  000BAE  13C5               	iorwf	_this_contains_crlf& (0+255),f,b
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;rd_buffer.c: 154: if(sz < 0 ) {
  7492  000BB0  AF7A               	btfss	(rd_buffer_put@sz+1)& (0+255),7,b
  7493  000BB2  D00A               	goto	l283
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;rd_buffer.c: 155: sz += pbuffer->head.size;
  7497  000BB4  EE20 F004          	lfsr	2,4
  7498  000BB8  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7499  000BBA  26D9               	addwf	fsr2l,f,c
  7500  000BBC  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7501  000BBE  22DA               	addwfc	fsr2h,f,c
  7502  000BC0  50DE               	movf	postinc2,w,c
  7503  000BC2  2779               	addwf	rd_buffer_put@sz& (0+255),f,b
  7504  000BC4  50DD               	movf	postdec2,w,c
  7505  000BC6  237A               	addwfc	(rd_buffer_put@sz+1)& (0+255),f,b
  7506  000BC8                     l283:
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;rd_buffer.c: 156: }
  7510                           ;rd_buffer.c: 157: if(sz < (pbuffer->head.size - 1))
  7511  000BC8  EE20 F004          	lfsr	2,4
  7512  000BCC  D859               	call	PL46	;call to abstracted procedure
  7513  000BCE  0EFF               	movlw	255
  7514  000BD0  2570               	addwf	??_rd_buffer_put& (0+255),w,b
  7515  000BD2  6F72               	movwf	(??_rd_buffer_put+2)& (0+255),b
  7516  000BD4  0EFF               	movlw	255
  7517  000BD6  2171               	addwfc	(??_rd_buffer_put+1)& (0+255),w,b
  7518  000BD8  6F73               	movwf	(??_rd_buffer_put+3)& (0+255),b
  7519  000BDA  517A               	movf	(rd_buffer_put@sz+1)& (0+255),w,b
  7520  000BDC  0A80               	xorlw	128
  7521  000BDE  6F74               	movwf	(??_rd_buffer_put+4)& (0+255),b
  7522  000BE0  5172               	movf	(??_rd_buffer_put+2)& (0+255),w,b
  7523  000BE2  5D79               	subwf	rd_buffer_put@sz& (0+255),w,b
  7524  000BE4  5173               	movf	(??_rd_buffer_put+3)& (0+255),w,b
  7525  000BE6  0A80               	xorlw	128
  7526  000BE8  5974               	subwfb	(??_rd_buffer_put+4)& (0+255),w,b
  7527  000BEA  B0D8               	btfsc	status,0,c
  7528  000BEC  0012               	return	
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;rd_buffer.c: 158: {
  7532                           ;rd_buffer.c: 159: INT ind = pbuffer->head.last;
  7533  000BEE  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7534  000BF2  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7535  000BF6  CFDE F07B          	movff	postinc2,rd_buffer_put@ind
  7536  000BFA  CFDD F07C          	movff	postdec2,rd_buffer_put@ind+1
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;rd_buffer.c: 160: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
  7540  000BFE  C06C  F070         	movff	rd_buffer_put@pbuffer,??_rd_buffer_put
  7541  000C02  C06D  F071         	movff	rd_buffer_put@pbuffer+1,??_rd_buffer_put+1
  7542  000C06  517B               	movf	rd_buffer_put@ind& (0+255),w,b
  7543  000C08  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7544  000C0A  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7545  000C0C  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7546  000C0E  0E06               	movlw	6
  7547  000C10  2770               	addwf	??_rd_buffer_put& (0+255),f,b
  7548  000C12  0E00               	movlw	0
  7549  000C14  2371               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  7550  000C16  C070  F076         	movff	??_rd_buffer_put,rd_buffer_put@mes_rec
  7551  000C1A  C071  F077         	movff	??_rd_buffer_put+1,rd_buffer_put@mes_rec+1
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;rd_buffer.c: 161: (*mes_rec) = (*prec);
  7555  000C1E  C06E  FFF6         	movff	rd_buffer_put@prec,tblptrl
  7556  000C22  C06F  FFF7         	movff	rd_buffer_put@prec+1,tblptrh
  7557  000C26  6AF8               	clrf	tblptru,c
  7558  000C28  C076  FFD9         	movff	rd_buffer_put@mes_rec,fsr2l
  7559  000C2C  C077  FFDA         	movff	rd_buffer_put@mes_rec+1,fsr2h
  7560  000C30  0E05               	movlw	(high __ramtop+-1)
  7561  000C32  64F7               	cpfsgt	tblptrh,c
  7562  000C34  D003               	bra	u5817
  7563  000C36  0008               	tblrd		*
  7564  000C38  50F5               	movf	tablat,w,c
  7565  000C3A  D005               	bra	u5810
  7566  000C3C                     u5817:
  7567  000C3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7568  000C40  CFF7 FFEA          	movff	tblptrh,fsr0h
  7569  000C44  50EF               	movf	indf0,w,c
  7570  000C46                     u5810:
  7571  000C46  6EDF               	movwf	indf2,c
  7572                           
  7573                           ;rd_buffer.c: 162: ind++;
  7574  000C48  0100               	movlb	0	; () banked
  7575  000C4A  4B7B               	infsnz	rd_buffer_put@ind& (0+255),f,b
  7576  000C4C  2B7C               	incf	(rd_buffer_put@ind+1)& (0+255),f,b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;rd_buffer.c: 164: if(ind == pbuffer->head.size ) {
  7580  000C4E  EE20 F004          	lfsr	2,4
  7581  000C52  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7582  000C54  26D9               	addwf	fsr2l,f,c
  7583  000C56  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7584  000C58  22DA               	addwfc	fsr2h,f,c
  7585  000C5A  52DE               	movf	postinc2,f,c
  7586  000C5C  517C               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  7587  000C5E  18DD               	xorwf	postdec2,w,c
  7588  000C60  C07B  FFE8         	movff	rd_buffer_put@ind,wreg
  7589  000C64  B4D8               	btfsc	status,2,c
  7590  000C66  18DF               	xorwf	indf2,w,c
  7591  000C68  E102               	bnz	l5610
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;rd_buffer.c: 165: ind = 0;
  7595  000C6A  6B7B               	clrf	rd_buffer_put@ind& (0+255),b
  7596  000C6C  6B7C               	clrf	(rd_buffer_put@ind+1)& (0+255),b
  7597  000C6E                     l5610:
  7598                           
  7599                           ; BSR set to: 0
  7600                           ;rd_buffer.c: 166: }
  7601                           ;rd_buffer.c: 167: pbuffer->head.last = ind;
  7602  000C6E  C06C  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  7603  000C72  C06D  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  7604  000C76  C07B  FFDE         	movff	rd_buffer_put@ind,postinc2
  7605  000C7A  C07C  FFDD         	movff	rd_buffer_put@ind+1,postdec2
  7606                           
  7607                           ; BSR set to: 0
  7608                           
  7609                           ; BSR set to: 0
  7610  000C7E  0012               	return	
  7611  000C80                     __end_of_rd_buffer_put:
  7612                           	opt stack 0
  7613  000C80                     PL46:
  7614                           	opt stack 21
  7615  000C80  516C               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  7616  000C82  26D9               	addwf	fsr2l,f,c
  7617  000C84  516D               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  7618  000C86  22DA               	addwfc	fsr2h,f,c
  7619  000C88  CFDE F070          	movff	postinc2,??_rd_buffer_put
  7620  000C8C  CFDD F071          	movff	postdec2,??_rd_buffer_put+1
  7621  000C90  0012               	return	
  7622  000C92                     __end_ofPL46:
  7623                           	opt stack 0
  7624  000C92                     PL56:
  7625                           	opt stack 21
  7626  000C92  516E               	movf	rd_buffer_put@prec& (0+255),w,b
  7627  000C94  6EF6               	movwf	tblptrl,c
  7628  000C96  6EE9               	movwf	fsr0l,c
  7629  000C98  0E05               	movlw	(high __ramtop+-1)
  7630  000C9A  6EEA               	movwf	fsr0h,c
  7631  000C9C  516F               	movf	(rd_buffer_put@prec+1)& (0+255),w,b
  7632  000C9E  0012               	return	
  7633  000CA0                     __end_ofPL56:
  7634                           	opt stack 0
  7635                           tosu	equ	0xFFF
  7636                           tosh	equ	0xFFE
  7637                           tosl	equ	0xFFD
  7638                           pclath	equ	0xFFA
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           indf0	equ	0xFEF
  7647                           postinc0	equ	0xFEE
  7648                           fsr0h	equ	0xFEA
  7649                           fsr0l	equ	0xFE9
  7650                           wreg	equ	0xFE8
  7651                           indf1	equ	0xFE7
  7652                           postinc1	equ	0xFE6
  7653                           postdec1	equ	0xFE5
  7654                           fsr1h	equ	0xFE2
  7655                           fsr1l	equ	0xFE1
  7656                           indf2	equ	0xFDF
  7657                           postinc2	equ	0xFDE
  7658                           postdec2	equ	0xFDD
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _startup *****************
  7664 ;; Defined at:
  7665 ;;		line 16 in file "src/startup/startup.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;  result          1   19[BANK0 ] enum E3388
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      enum E3388
  7672 ;; Registers used:
  7673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : F/0
  7677 ;;		Unchanged: FFFFFFF0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7679 ;;      Params:         0       0       0       0       0       0       0
  7680 ;;      Locals:         0       1       0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0
  7682 ;;      Totals:         0       1       0       0       0       0       0
  7683 ;;Total ram usage:        1 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    8
  7686 ;; This function calls:
  7687 ;;		_gpio_init
  7688 ;;		_sysclk_init
  7689 ;;		_adc_init
  7690 ;;		_uart_init
  7691 ;;		_uart_puts
  7692 ;;		_serialport_startup
  7693 ;; This function is called by:
  7694 ;;		_main
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text29
  7699  0017AC                     __ptext29:
  7700                           	opt stack 0
  7701  0017AC                     _startup:
  7702                           	opt stack 22
  7703                           
  7704                           ;startup.c: 17: ResultSuccess_t result = RESULT_FAIL;
  7705                           
  7706                           ; BSR set to: 0
  7707  0017AC  0100               	movlb	0	; () banked
  7708  0017AE  6B73               	clrf	startup@result& (0+255),b
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;startup.c: 18: gpio_init();
  7712  0017B0  EC89  F00D         	call	_gpio_init	;wreg free
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;startup.c: 19: sysclk_init();
  7716  0017B4  ECC0  F00D         	call	_sysclk_init	;wreg free
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;startup.c: 20: adc_init();
  7720  0017B8  EC80  F00D         	call	_adc_init	;wreg free
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;startup.c: 21: uart_init();
  7724  0017BC  EC24  F00D         	call	_uart_init	;wreg free
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;startup.c: 22: events[(5)] = (PEVENT)serialport_task;
  7728  0017C0  0E12               	movlw	high _serialport_task
  7729  0017C2  6FB7               	movwf	(_events+11)& (0+255),b	;volatile
  7730  0017C4  0E9C               	movlw	low _serialport_task
  7731  0017C6  6FB6               	movwf	(_events+10)& (0+255),b	;volatile
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;startup.c: 23: events[(2)] = (PEVENT)detection_task;
  7735  0017C8  0E14               	movlw	high _detection_task
  7736  0017CA  6FB1               	movwf	(_events+5)& (0+255),b	;volatile
  7737  0017CC  0EAA               	movlw	low _detection_task
  7738  0017CE  6FB0               	movwf	(_events+4)& (0+255),b	;volatile
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;startup.c: 25: uart_puts("hello",100);
  7742  0017D0  0E7F               	movlw	high STR_5
  7743  0017D2  6F6E               	movwf	(?_uart_puts+1)& (0+255),b
  7744  0017D4  0EE9               	movlw	low STR_5
  7745  0017D6  6F6D               	movwf	?_uart_puts& (0+255),b
  7746  0017D8  6B70               	clrf	(?_uart_puts+3)& (0+255),b
  7747  0017DA  0E64               	movlw	100
  7748  0017DC  6F6F               	movwf	(?_uart_puts+2)& (0+255),b
  7749  0017DE  EC2D  F00B         	call	_uart_puts	;wreg free
  7750                           
  7751                           ;startup.c: 27: if(!serialport_startup()) break;
  7752  0017E2  ECB7  F00C         	call	_serialport_startup	;wreg free
  7753  0017E6  0900               	iorlw	0
  7754  0017E8  E002               	bz	l912
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;startup.c: 31: result = RESULT_SUCCESS;
  7758  0017EA  0E01               	movlw	1
  7759  0017EC  6F73               	movwf	startup@result& (0+255),b
  7760  0017EE                     l912:
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;startup.c: 32: }while(0);
  7764                           ;startup.c: 33: return result;
  7765  0017EE  5173               	movf	startup@result& (0+255),w,b
  7766                           
  7767                           ; BSR set to: 0
  7768  0017F0  0012               	return	
  7769  0017F2                     __end_of_startup:
  7770                           	opt stack 0
  7771                           tosu	equ	0xFFF
  7772                           tosh	equ	0xFFE
  7773                           tosl	equ	0xFFD
  7774                           pclath	equ	0xFFA
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           indf0	equ	0xFEF
  7783                           postinc0	equ	0xFEE
  7784                           fsr0h	equ	0xFEA
  7785                           fsr0l	equ	0xFE9
  7786                           wreg	equ	0xFE8
  7787                           indf1	equ	0xFE7
  7788                           postinc1	equ	0xFE6
  7789                           postdec1	equ	0xFE5
  7790                           fsr1h	equ	0xFE2
  7791                           fsr1l	equ	0xFE1
  7792                           indf2	equ	0xFDF
  7793                           postinc2	equ	0xFDE
  7794                           postdec2	equ	0xFDD
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _sysclk_init *****************
  7800 ;; Defined at:
  7801 ;;		line 7 in file "src/drivers/sysclk.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;		None
  7806 ;; Return value:  Size  Location     Type
  7807 ;;		None               void
  7808 ;; Registers used:
  7809 ;;		wreg, status,2, status,0, cstack
  7810 ;; Tracked objects:
  7811 ;;		On entry : F/0
  7812 ;;		On exit  : F/0
  7813 ;;		Unchanged: FFFFFFF0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7815 ;;      Params:         0       0       0       0       0       0       0
  7816 ;;      Locals:         0       0       0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0
  7818 ;;      Totals:         0       0       0       0       0       0       0
  7819 ;;Total ram usage:        0 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    6
  7822 ;; This function calls:
  7823 ;;		_sysclk_setup_intosc
  7824 ;; This function is called by:
  7825 ;;		_startup
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text30
  7830  001B80                     __ptext30:
  7831                           	opt stack 0
  7832  001B80                     _sysclk_init:
  7833                           	opt stack 23
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;sysclk.c: 8: sysclk_setup_intosc(INTOSC_4MHZ);
  7837                           
  7838                           ; BSR set to: 0
  7839  001B80  0E05               	movlw	5
  7840  001B82  EF9B  F00D         	goto	_sysclk_setup_intosc
  7841  001B86                     __end_of_sysclk_init:
  7842                           	opt stack 0
  7843                           tosu	equ	0xFFF
  7844                           tosh	equ	0xFFE
  7845                           tosl	equ	0xFFD
  7846                           pclath	equ	0xFFA
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           indf0	equ	0xFEF
  7855                           postinc0	equ	0xFEE
  7856                           fsr0h	equ	0xFEA
  7857                           fsr0l	equ	0xFE9
  7858                           wreg	equ	0xFE8
  7859                           indf1	equ	0xFE7
  7860                           postinc1	equ	0xFE6
  7861                           postdec1	equ	0xFE5
  7862                           fsr1h	equ	0xFE2
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           postdec2	equ	0xFDD
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _sysclk_setup_intosc *****************
  7872 ;; Defined at:
  7873 ;;		line 12 in file "src/drivers/sysclk.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  frequency       1    wreg     enum E1
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;  frequency       1   12[BANK0 ] enum E1
  7878 ;; Return value:  Size  Location     Type
  7879 ;;		None               void
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : F/0
  7884 ;;		On exit  : F/0
  7885 ;;		Unchanged: FFFFFFF0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         0       0       0       0       0       0       0
  7888 ;;      Locals:         0       1       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0
  7890 ;;      Totals:         0       1       0       0       0       0       0
  7891 ;;Total ram usage:        1 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    5
  7894 ;; This function calls:
  7895 ;;		Nothing
  7896 ;; This function is called by:
  7897 ;;		_sysclk_init
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text31
  7902  001B36                     __ptext31:
  7903                           	opt stack 0
  7904  001B36                     _sysclk_setup_intosc:
  7905                           	opt stack 23
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;sysclk_setup_intosc@frequency stored from wreg
  7909  001B36  CFE8 F06C          	movff	wreg,sysclk_setup_intosc@frequency
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;sysclk.c: 13: OSCCON &= ~(0x07<<4);
  7913  001B3A  0E8F               	movlw	143
  7914  001B3C  16D3               	andwf	4051,f,c	;volatile
  7915                           
  7916                           ;sysclk.c: 14: OSCCON |= frequency<<4;
  7917  001B3E  396C               	swapf	sysclk_setup_intosc@frequency& (0+255),w,b
  7918  001B40  0BF0               	andlw	240
  7919  001B42  12D3               	iorwf	4051,f,c	;volatile
  7920                           
  7921                           ; BSR set to: 0
  7922  001B44  0012               	return	
  7923  001B46                     __end_of_sysclk_setup_intosc:
  7924                           	opt stack 0
  7925                           tosu	equ	0xFFF
  7926                           tosh	equ	0xFFE
  7927                           tosl	equ	0xFFD
  7928                           pclath	equ	0xFFA
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           intcon	equ	0xFF2
  7936                           indf0	equ	0xFEF
  7937                           postinc0	equ	0xFEE
  7938                           fsr0h	equ	0xFEA
  7939                           fsr0l	equ	0xFE9
  7940                           wreg	equ	0xFE8
  7941                           indf1	equ	0xFE7
  7942                           postinc1	equ	0xFE6
  7943                           postdec1	equ	0xFE5
  7944                           fsr1h	equ	0xFE2
  7945                           fsr1l	equ	0xFE1
  7946                           indf2	equ	0xFDF
  7947                           postinc2	equ	0xFDE
  7948                           postdec2	equ	0xFDD
  7949                           fsr2h	equ	0xFDA
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8
  7952                           
  7953 ;; *************** function _uart_init *****************
  7954 ;; Defined at:
  7955 ;;		line 5 in file "src/drivers/uart.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;		None               void
  7962 ;; Registers used:
  7963 ;;		wreg, status,2, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : F/0
  7966 ;;		On exit  : F/0
  7967 ;;		Unchanged: FFFFFFF0/0
  7968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7969 ;;      Params:         0       0       0       0       0       0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0
  7971 ;;      Temps:          0       0       0       0       0       0       0
  7972 ;;      Totals:         0       0       0       0       0       0       0
  7973 ;;Total ram usage:        0 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    6
  7976 ;; This function calls:
  7977 ;;		_uart_set_baudrate
  7978 ;; This function is called by:
  7979 ;;		_startup
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text32
  7984  001A48                     __ptext32:
  7985                           	opt stack 0
  7986  001A48                     _uart_init:
  7987                           	opt stack 23
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;uart.c: 6: TXSTA = 0b00100110;
  7991                           
  7992                           ; BSR set to: 0
  7993  001A48  0E26               	movlw	38
  7994  001A4A  6EAC               	movwf	4012,c	;volatile
  7995                           
  7996                           ;uart.c: 7: RCSTA = 0b10010000;
  7997  001A4C  0E90               	movlw	144
  7998  001A4E  6EAB               	movwf	4011,c	;volatile
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;uart.c: 8: BAUDCTL = 0b00000000;
  8002  001A50  6AB8               	clrf	4024,c	;volatile
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;uart.c: 9: BAUDCON = 0b00000000;
  8006  001A52  6AB8               	clrf	4024,c	;volatile
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;uart.c: 10: uart_set_baudrate(19200);
  8010  001A54  6B6C               	clrf	?_uart_set_baudrate& (0+255),b
  8011  001A56  0E4B               	movlw	75
  8012  001A58  6F6D               	movwf	(?_uart_set_baudrate+1)& (0+255),b
  8013  001A5A  0E00               	movlw	0
  8014  001A5C  6B6E               	clrf	(?_uart_set_baudrate+2)& (0+255),b
  8015  001A5E  ECC3  F00D         	call	_uart_set_baudrate	;wreg free
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;uart.c: 12: PIE1bits.RCIE=1;
  8019  001A62  8A9D               	bsf	3997,5,c	;volatile
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;uart.c: 13: PIR1bits.RCIF=1;
  8023  001A64  8A9E               	bsf	3998,5,c	;volatile
  8024                           
  8025                           ; BSR set to: 0
  8026  001A66  0012               	return	
  8027  001A68                     __end_of_uart_init:
  8028                           	opt stack 0
  8029                           tosu	equ	0xFFF
  8030                           tosh	equ	0xFFE
  8031                           tosl	equ	0xFFD
  8032                           pclath	equ	0xFFA
  8033                           tblptru	equ	0xFF8
  8034                           tblptrh	equ	0xFF7
  8035                           tblptrl	equ	0xFF6
  8036                           tablat	equ	0xFF5
  8037                           prodh	equ	0xFF4
  8038                           prodl	equ	0xFF3
  8039                           intcon	equ	0xFF2
  8040                           indf0	equ	0xFEF
  8041                           postinc0	equ	0xFEE
  8042                           fsr0h	equ	0xFEA
  8043                           fsr0l	equ	0xFE9
  8044                           wreg	equ	0xFE8
  8045                           indf1	equ	0xFE7
  8046                           postinc1	equ	0xFE6
  8047                           postdec1	equ	0xFE5
  8048                           fsr1h	equ	0xFE2
  8049                           fsr1l	equ	0xFE1
  8050                           indf2	equ	0xFDF
  8051                           postinc2	equ	0xFDE
  8052                           postdec2	equ	0xFDD
  8053                           fsr2h	equ	0xFDA
  8054                           fsr2l	equ	0xFD9
  8055                           status	equ	0xFD8
  8056                           
  8057 ;; *************** function _uart_set_baudrate *****************
  8058 ;; Defined at:
  8059 ;;		line 17 in file "src/drivers/uart.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  baudrate        3   12[BANK0 ] unsigned um
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;		None
  8064 ;; Return value:  Size  Location     Type
  8065 ;;		None               void
  8066 ;; Registers used:
  8067 ;;		wreg, status,2
  8068 ;; Tracked objects:
  8069 ;;		On entry : F/0
  8070 ;;		On exit  : F/0
  8071 ;;		Unchanged: FFFFFFF0/0
  8072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8073 ;;      Params:         0       3       0       0       0       0       0
  8074 ;;      Locals:         0       0       0       0       0       0       0
  8075 ;;      Temps:          0       0       0       0       0       0       0
  8076 ;;      Totals:         0       3       0       0       0       0       0
  8077 ;;Total ram usage:        3 bytes
  8078 ;; Hardware stack levels used:    1
  8079 ;; Hardware stack levels required when called:    5
  8080 ;; This function calls:
  8081 ;;		Nothing
  8082 ;; This function is called by:
  8083 ;;		_uart_init
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text33
  8088  001B86                     __ptext33:
  8089                           	opt stack 0
  8090  001B86                     _uart_set_baudrate:
  8091                           	opt stack 23
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;uart.c: 19: SPBRG = 12;
  8095                           
  8096                           ; BSR set to: 0
  8097  001B86  0E0C               	movlw	12
  8098  001B88  6EAF               	movwf	4015,c	;volatile
  8099                           
  8100                           ; BSR set to: 0
  8101  001B8A  0C0C               	retlw	12
  8102  001B8C                     __end_of_uart_set_baudrate:
  8103                           	opt stack 0
  8104                           tosu	equ	0xFFF
  8105                           tosh	equ	0xFFE
  8106                           tosl	equ	0xFFD
  8107                           pclath	equ	0xFFA
  8108                           tblptru	equ	0xFF8
  8109                           tblptrh	equ	0xFF7
  8110                           tblptrl	equ	0xFF6
  8111                           tablat	equ	0xFF5
  8112                           prodh	equ	0xFF4
  8113                           prodl	equ	0xFF3
  8114                           intcon	equ	0xFF2
  8115                           indf0	equ	0xFEF
  8116                           postinc0	equ	0xFEE
  8117                           fsr0h	equ	0xFEA
  8118                           fsr0l	equ	0xFE9
  8119                           wreg	equ	0xFE8
  8120                           indf1	equ	0xFE7
  8121                           postinc1	equ	0xFE6
  8122                           postdec1	equ	0xFE5
  8123                           fsr1h	equ	0xFE2
  8124                           fsr1l	equ	0xFE1
  8125                           indf2	equ	0xFDF
  8126                           postinc2	equ	0xFDE
  8127                           postdec2	equ	0xFDD
  8128                           fsr2h	equ	0xFDA
  8129                           fsr2l	equ	0xFD9
  8130                           status	equ	0xFD8
  8131                           
  8132 ;; *************** function _uart_puts *****************
  8133 ;; Defined at:
  8134 ;;		line 31 in file "src/drivers/uart.c"
  8135 ;; Parameters:    Size  Location     Type
  8136 ;;  pstr            2   13[BANK0 ] PTR const unsigned char 
  8137 ;;		 -> STR_5(6), serialport_buffer(100), 
  8138 ;;  size            2   15[BANK0 ] int 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;		None
  8141 ;; Return value:  Size  Location     Type
  8142 ;;		None               void
  8143 ;; Registers used:
  8144 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : F/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: FFFFFFF0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8150 ;;      Params:         0       4       0       0       0       0       0
  8151 ;;      Locals:         0       0       0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0
  8153 ;;      Totals:         0       4       0       0       0       0       0
  8154 ;;Total ram usage:        4 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    7
  8157 ;; This function calls:
  8158 ;;		_uart_putc
  8159 ;; This function is called by:
  8160 ;;		_serialport_task
  8161 ;;		_startup
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	text34
  8166  00165A                     __ptext34:
  8167                           	opt stack 0
  8168  00165A                     _uart_puts:
  8169                           	opt stack 22
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;uart.c: 32: while(size-- && *pstr)
  8173                           
  8174                           ; BSR set to: 0
  8175  00165A  D010               	goto	l5480
  8176  00165C                     l5476:
  8177                           
  8178                           ;uart.c: 33: {
  8179                           ;uart.c: 34: uart_putc(*pstr);
  8180  00165C  0100               	movlb	0	; () banked
  8181  00165E  516D               	movf	uart_puts@pstr& (0+255),w,b
  8182  001660  D824               	call	PL66	;call to abstracted procedure
  8183  001662  64EA               	cpfsgt	fsr0h,c
  8184  001664  D003               	bra	u5627
  8185  001666  6EEA               	movwf	fsr0h,c
  8186  001668  50EF               	movf	indf0,w,c
  8187  00166A  D003               	bra	u5620
  8188  00166C                     u5627:
  8189  00166C  6EF7               	movwf	tblptrh,c
  8190  00166E  0008               	tblrd		*
  8191  001670  50F5               	movf	tablat,w,c
  8192  001672                     u5620:
  8193  001672  EC77  F00D         	call	_uart_putc
  8194                           
  8195                           ;uart.c: 35: pstr++;
  8196  001676  0100               	movlb	0	; () banked
  8197  001678  4B6D               	infsnz	uart_puts@pstr& (0+255),f,b
  8198  00167A  2B6E               	incf	(uart_puts@pstr+1)& (0+255),f,b
  8199  00167C                     l5480:
  8200                           
  8201                           ; BSR set to: 0
  8202  00167C  076F               	decf	uart_puts@size& (0+255),f,b
  8203  00167E  A0D8               	btfss	status,0,c
  8204  001680  0770               	decf	(uart_puts@size+1)& (0+255),f,b
  8205  001682  0100               	movlb	0	; () banked
  8206  001684  296F               	incf	uart_puts@size& (0+255),w,b
  8207  001686  B4D8               	btfsc	status,2,c
  8208  001688  2970               	incf	(uart_puts@size+1)& (0+255),w,b
  8209  00168A  B4D8               	btfsc	status,2,c
  8210  00168C  0012               	return	
  8211                           
  8212                           ; BSR set to: 0
  8213  00168E  516D               	movf	uart_puts@pstr& (0+255),w,b
  8214  001690  D80C               	call	PL66	;call to abstracted procedure
  8215  001692  64EA               	cpfsgt	fsr0h,c
  8216  001694  D003               	bra	u5647
  8217  001696  6EEA               	movwf	fsr0h,c
  8218  001698  50EF               	movf	indf0,w,c
  8219  00169A  D003               	bra	u5640
  8220  00169C                     u5647:
  8221  00169C  6EF7               	movwf	tblptrh,c
  8222  00169E  0008               	tblrd		*
  8223  0016A0  50F5               	movf	tablat,w,c
  8224  0016A2                     u5640:
  8225  0016A2  0900               	iorlw	0
  8226  0016A4  B4D8               	btfsc	status,2,c
  8227  0016A6  0012               	return	
  8228  0016A8  D7D9               	goto	l5476
  8229  0016AA                     __end_of_uart_puts:
  8230                           	opt stack 0
  8231  0016AA                     PL66:
  8232                           	opt stack 22
  8233  0016AA  6EF6               	movwf	tblptrl,c
  8234  0016AC  6EE9               	movwf	fsr0l,c
  8235  0016AE  0E05               	movlw	(high __ramtop+-1)
  8236  0016B0  6EEA               	movwf	fsr0h,c
  8237  0016B2  516E               	movf	(uart_puts@pstr+1)& (0+255),w,b
  8238  0016B4  0012               	return	
  8239  0016B6                     __end_ofPL66:
  8240                           	opt stack 0
  8241                           tosu	equ	0xFFF
  8242                           tosh	equ	0xFFE
  8243                           tosl	equ	0xFFD
  8244                           pclath	equ	0xFFA
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           intcon	equ	0xFF2
  8252                           indf0	equ	0xFEF
  8253                           postinc0	equ	0xFEE
  8254                           fsr0h	equ	0xFEA
  8255                           fsr0l	equ	0xFE9
  8256                           wreg	equ	0xFE8
  8257                           indf1	equ	0xFE7
  8258                           postinc1	equ	0xFE6
  8259                           postdec1	equ	0xFE5
  8260                           fsr1h	equ	0xFE2
  8261                           fsr1l	equ	0xFE1
  8262                           indf2	equ	0xFDF
  8263                           postinc2	equ	0xFDE
  8264                           postdec2	equ	0xFDD
  8265                           fsr2h	equ	0xFDA
  8266                           fsr2l	equ	0xFD9
  8267                           status	equ	0xFD8
  8268                           
  8269 ;; *************** function _uart_putc *****************
  8270 ;; Defined at:
  8271 ;;		line 40 in file "src/drivers/uart.c"
  8272 ;; Parameters:    Size  Location     Type
  8273 ;;  byte            1    wreg     unsigned char 
  8274 ;; Auto vars:     Size  Location     Type
  8275 ;;  byte            1   12[BANK0 ] unsigned char 
  8276 ;; Return value:  Size  Location     Type
  8277 ;;		None               void
  8278 ;; Registers used:
  8279 ;;		wreg, status,2, cstack
  8280 ;; Tracked objects:
  8281 ;;		On entry : 0/0
  8282 ;;		On exit  : 0/0
  8283 ;;		Unchanged: FFFFFFFF/0
  8284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8285 ;;      Params:         0       0       0       0       0       0       0
  8286 ;;      Locals:         0       1       0       0       0       0       0
  8287 ;;      Temps:          0       0       0       0       0       0       0
  8288 ;;      Totals:         0       1       0       0       0       0       0
  8289 ;;Total ram usage:        1 bytes
  8290 ;; Hardware stack levels used:    1
  8291 ;; Hardware stack levels required when called:    6
  8292 ;; This function calls:
  8293 ;;		_uart_byte_sent
  8294 ;; This function is called by:
  8295 ;;		_uart_puts
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text35
  8300  001AEE                     __ptext35:
  8301                           	opt stack 0
  8302  001AEE                     _uart_putc:
  8303                           	opt stack 22
  8304                           
  8305                           ;uart_putc@byte stored from wreg
  8306  001AEE  CFE8 F06C          	movff	wreg,uart_putc@byte
  8307  001AF2                     l5486:
  8308  001AF2  ECB8  F00D         	call	_uart_byte_sent	;wreg free
  8309  001AF6  0900               	iorlw	0
  8310  001AF8  E0FC               	bz	l5486
  8311                           
  8312                           ;uart.c: 42: TXREG = byte;
  8313  001AFA  C06C  FFAD         	movff	uart_putc@byte,4013	;volatile
  8314  001AFE  0012               	return	
  8315  001B00                     __end_of_uart_putc:
  8316                           	opt stack 0
  8317                           tosu	equ	0xFFF
  8318                           tosh	equ	0xFFE
  8319                           tosl	equ	0xFFD
  8320                           pclath	equ	0xFFA
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           indf0	equ	0xFEF
  8329                           postinc0	equ	0xFEE
  8330                           fsr0h	equ	0xFEA
  8331                           fsr0l	equ	0xFE9
  8332                           wreg	equ	0xFE8
  8333                           indf1	equ	0xFE7
  8334                           postinc1	equ	0xFE6
  8335                           postdec1	equ	0xFE5
  8336                           fsr1h	equ	0xFE2
  8337                           fsr1l	equ	0xFE1
  8338                           indf2	equ	0xFDF
  8339                           postinc2	equ	0xFDE
  8340                           postdec2	equ	0xFDD
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _uart_byte_sent *****************
  8346 ;; Defined at:
  8347 ;;		line 46 in file "src/drivers/uart.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      unsigned char 
  8354 ;; Registers used:
  8355 ;;		wreg
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: FFFFFFFF/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8361 ;;      Params:         0       0       0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0
  8364 ;;      Totals:         0       0       0       0       0       0       0
  8365 ;;Total ram usage:        0 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    5
  8368 ;; This function calls:
  8369 ;;		Nothing
  8370 ;; This function is called by:
  8371 ;;		_uart_putc
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text36
  8376  001B70                     __ptext36:
  8377                           	opt stack 0
  8378  001B70                     _uart_byte_sent:
  8379                           	opt stack 22
  8380                           
  8381                           ;uart.c: 47: return TXIF;
  8382  001B70  0E00               	movlw	0
  8383  001B72  B89E               	btfsc	3998,4,c	;volatile
  8384  001B74  0E01               	movlw	1
  8385  001B76  0012               	return	
  8386  001B78                     __end_of_uart_byte_sent:
  8387                           	opt stack 0
  8388                           tosu	equ	0xFFF
  8389                           tosh	equ	0xFFE
  8390                           tosl	equ	0xFFD
  8391                           pclath	equ	0xFFA
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           indf0	equ	0xFEF
  8400                           postinc0	equ	0xFEE
  8401                           fsr0h	equ	0xFEA
  8402                           fsr0l	equ	0xFE9
  8403                           wreg	equ	0xFE8
  8404                           indf1	equ	0xFE7
  8405                           postinc1	equ	0xFE6
  8406                           postdec1	equ	0xFE5
  8407                           fsr1h	equ	0xFE2
  8408                           fsr1l	equ	0xFE1
  8409                           indf2	equ	0xFDF
  8410                           postinc2	equ	0xFDE
  8411                           postdec2	equ	0xFDD
  8412                           fsr2h	equ	0xFDA
  8413                           fsr2l	equ	0xFD9
  8414                           status	equ	0xFD8
  8415                           
  8416 ;; *************** function _adc_init *****************
  8417 ;; Defined at:
  8418 ;;		line 5 in file "src/drivers/adc.c"
  8419 ;; Parameters:    Size  Location     Type
  8420 ;;		None
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;		None
  8423 ;; Return value:  Size  Location     Type
  8424 ;;		None               void
  8425 ;; Registers used:
  8426 ;;		wreg, status,2
  8427 ;; Tracked objects:
  8428 ;;		On entry : F/0
  8429 ;;		On exit  : F/0
  8430 ;;		Unchanged: FFFFFFF0/0
  8431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8432 ;;      Params:         0       0       0       0       0       0       0
  8433 ;;      Locals:         0       0       0       0       0       0       0
  8434 ;;      Temps:          0       0       0       0       0       0       0
  8435 ;;      Totals:         0       0       0       0       0       0       0
  8436 ;;Total ram usage:        0 bytes
  8437 ;; Hardware stack levels used:    1
  8438 ;; Hardware stack levels required when called:    5
  8439 ;; This function calls:
  8440 ;;		Nothing
  8441 ;; This function is called by:
  8442 ;;		_startup
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           	psect	text37
  8447  001B00                     __ptext37:
  8448                           	opt stack 0
  8449  001B00                     _adc_init:
  8450                           	opt stack 24
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;adc.c: 6: ADCON0 = 0b00000001;
  8454  001B00  0E01               	movlw	1
  8455  001B02  6EC2               	movwf	4034,c	;volatile
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;adc.c: 7: ADCON1 = 0b00000000;
  8459  001B04  6AC1               	clrf	4033,c	;volatile
  8460                           
  8461                           ;adc.c: 8: ADCON2 = 0b00010000;
  8462  001B06  0E10               	movlw	16
  8463  001B08  6EC0               	movwf	4032,c	;volatile
  8464                           
  8465                           ;adc.c: 9: ANSEL = 0b01100011;
  8466  001B0A  0E63               	movlw	99
  8467  001B0C  6E7E               	movwf	3966,c	;volatile
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;adc.c: 10: ANSELH = 0;
  8471  001B0E  6A7F               	clrf	3967,c	;volatile
  8472                           
  8473                           ; BSR set to: 0
  8474  001B10  0012               	return	
  8475  001B12                     __end_of_adc_init:
  8476                           	opt stack 0
  8477                           tosu	equ	0xFFF
  8478                           tosh	equ	0xFFE
  8479                           tosl	equ	0xFFD
  8480                           pclath	equ	0xFFA
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           indf0	equ	0xFEF
  8489                           postinc0	equ	0xFEE
  8490                           fsr0h	equ	0xFEA
  8491                           fsr0l	equ	0xFE9
  8492                           wreg	equ	0xFE8
  8493                           indf1	equ	0xFE7
  8494                           postinc1	equ	0xFE6
  8495                           postdec1	equ	0xFE5
  8496                           fsr1h	equ	0xFE2
  8497                           fsr1l	equ	0xFE1
  8498                           indf2	equ	0xFDF
  8499                           postinc2	equ	0xFDE
  8500                           postdec2	equ	0xFDD
  8501                           fsr2h	equ	0xFDA
  8502                           fsr2l	equ	0xFD9
  8503                           status	equ	0xFD8
  8504                           
  8505 ;; *************** function _gpio_init *****************
  8506 ;; Defined at:
  8507 ;;		line 4 in file "src/drivers/gpio.c"
  8508 ;; Parameters:    Size  Location     Type
  8509 ;;		None
  8510 ;; Auto vars:     Size  Location     Type
  8511 ;;		None
  8512 ;; Return value:  Size  Location     Type
  8513 ;;		None               void
  8514 ;; Registers used:
  8515 ;;		wreg, status,2
  8516 ;; Tracked objects:
  8517 ;;		On entry : F/0
  8518 ;;		On exit  : F/0
  8519 ;;		Unchanged: FFFFFFF0/0
  8520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8521 ;;      Params:         0       0       0       0       0       0       0
  8522 ;;      Locals:         0       0       0       0       0       0       0
  8523 ;;      Temps:          0       0       0       0       0       0       0
  8524 ;;      Totals:         0       0       0       0       0       0       0
  8525 ;;Total ram usage:        0 bytes
  8526 ;; Hardware stack levels used:    1
  8527 ;; Hardware stack levels required when called:    5
  8528 ;; This function calls:
  8529 ;;		Nothing
  8530 ;; This function is called by:
  8531 ;;		_startup
  8532 ;; This function uses a non-reentrant model
  8533 ;;
  8534                           
  8535                           	psect	text38
  8536  001B12                     __ptext38:
  8537                           	opt stack 0
  8538  001B12                     _gpio_init:
  8539                           	opt stack 24
  8540                           
  8541                           ; BSR set to: 0
  8542                           ;gpio.c: 7: TRISA=0xff;
  8543                           
  8544                           ; BSR set to: 0
  8545  001B12  6892               	setf	3986,c	;volatile
  8546                           
  8547                           ;gpio.c: 8: TRISB=0xff;
  8548  001B14  6893               	setf	3987,c	;volatile
  8549                           
  8550                           ;gpio.c: 9: ANSELH=0;
  8551  001B16  6A7F               	clrf	3967,c	;volatile
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;gpio.c: 10: TRISC=0xc1;
  8555  001B18  0EC1               	movlw	193
  8556  001B1A  6E94               	movwf	3988,c	;volatile
  8557                           
  8558                           ; BSR set to: 0
  8559                           ;gpio.c: 11: TRISD=0x00;
  8560  001B1C  6A95               	clrf	3989,c	;volatile
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;gpio.c: 12: LATC=0;
  8564  001B1E  6A8B               	clrf	3979,c	;volatile
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;gpio.c: 13: LATD=0;
  8568  001B20  6A8C               	clrf	3980,c	;volatile
  8569                           
  8570                           ; BSR set to: 0
  8571  001B22  0012               	return	
  8572  001B24                     __end_of_gpio_init:
  8573                           	opt stack 0
  8574                           tosu	equ	0xFFF
  8575                           tosh	equ	0xFFE
  8576                           tosl	equ	0xFFD
  8577                           pclath	equ	0xFFA
  8578                           tblptru	equ	0xFF8
  8579                           tblptrh	equ	0xFF7
  8580                           tblptrl	equ	0xFF6
  8581                           tablat	equ	0xFF5
  8582                           prodh	equ	0xFF4
  8583                           prodl	equ	0xFF3
  8584                           intcon	equ	0xFF2
  8585                           indf0	equ	0xFEF
  8586                           postinc0	equ	0xFEE
  8587                           fsr0h	equ	0xFEA
  8588                           fsr0l	equ	0xFE9
  8589                           wreg	equ	0xFE8
  8590                           indf1	equ	0xFE7
  8591                           postinc1	equ	0xFE6
  8592                           postdec1	equ	0xFE5
  8593                           fsr1h	equ	0xFE2
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _serialport_startup *****************
  8603 ;; Defined at:
  8604 ;;		line 16 in file "src/modules/serialport.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  result          1   18[BANK0 ] enum E3388
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      enum E3388
  8611 ;; Registers used:
  8612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : F/0
  8616 ;;		Unchanged: FFFFFFF0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8618 ;;      Params:         0       0       0       0       0       0       0
  8619 ;;      Locals:         0       1       0       0       0       0       0
  8620 ;;      Temps:          0       1       0       0       0       0       0
  8621 ;;      Totals:         0       2       0       0       0       0       0
  8622 ;;Total ram usage:        2 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    6
  8625 ;; This function calls:
  8626 ;;		_rd_buffer_init
  8627 ;; This function is called by:
  8628 ;;		_startup
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text39
  8633  00196E                     __ptext39:
  8634                           	opt stack 0
  8635  00196E                     _serialport_startup:
  8636                           	opt stack 23
  8637                           
  8638                           ;serialport.c: 18: result = (ResultSuccess_t) rd_buffer_init(&g_rx_buffer, ((100)))
  8639                           ;serialport.c: 19: | (ResultSuccess_t) rd_buffer_init(&g_tx_buffer, ((100)));
  8640                           
  8641                           ; BSR set to: 0
  8642  00196E  0E01               	movlw	high _g_tx_buffer
  8643  001970  0100               	movlb	0	; () banked
  8644  001972  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8645  001974  0E00               	movlw	low _g_tx_buffer
  8646  001976  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8647  001978  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8648  00197A  0E64               	movlw	100
  8649  00197C  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8650  00197E  EC3D  F00C         	call	_rd_buffer_init	;wreg free
  8651  001982  6F71               	movwf	??_serialport_startup& (0+255),b
  8652  001984  0E02               	movlw	high _g_rx_buffer
  8653  001986  0100               	movlb	0	; () banked
  8654  001988  6F6D               	movwf	(?_rd_buffer_init+1)& (0+255),b
  8655  00198A  0E00               	movlw	low _g_rx_buffer
  8656  00198C  6F6C               	movwf	?_rd_buffer_init& (0+255),b
  8657  00198E  6B6F               	clrf	(?_rd_buffer_init+3)& (0+255),b
  8658  001990  0E64               	movlw	100
  8659  001992  6F6E               	movwf	(?_rd_buffer_init+2)& (0+255),b
  8660  001994  EC3D  F00C         	call	_rd_buffer_init	;wreg free
  8661  001998  1171               	iorwf	??_serialport_startup& (0+255),w,b
  8662  00199A  6F72               	movwf	serialport_startup@result& (0+255),b
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;serialport.c: 20: return result;
  8666  00199C  5172               	movf	serialport_startup@result& (0+255),w,b
  8667                           
  8668                           ; BSR set to: 0
  8669  00199E  0012               	return	
  8670  0019A0                     __end_of_serialport_startup:
  8671                           	opt stack 0
  8672                           tosu	equ	0xFFF
  8673                           tosh	equ	0xFFE
  8674                           tosl	equ	0xFFD
  8675                           pclath	equ	0xFFA
  8676                           tblptru	equ	0xFF8
  8677                           tblptrh	equ	0xFF7
  8678                           tblptrl	equ	0xFF6
  8679                           tablat	equ	0xFF5
  8680                           prodh	equ	0xFF4
  8681                           prodl	equ	0xFF3
  8682                           intcon	equ	0xFF2
  8683                           indf0	equ	0xFEF
  8684                           postinc0	equ	0xFEE
  8685                           fsr0h	equ	0xFEA
  8686                           fsr0l	equ	0xFE9
  8687                           wreg	equ	0xFE8
  8688                           indf1	equ	0xFE7
  8689                           postinc1	equ	0xFE6
  8690                           postdec1	equ	0xFE5
  8691                           fsr1h	equ	0xFE2
  8692                           fsr1l	equ	0xFE1
  8693                           indf2	equ	0xFDF
  8694                           postinc2	equ	0xFDE
  8695                           postdec2	equ	0xFDD
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _rd_buffer_init *****************
  8701 ;; Defined at:
  8702 ;;		line 16 in file "src/modules/rd_buffer.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  pbuffer         2   12[BANK0 ] PTR struct .
  8705 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  8706 ;;  size            2   14[BANK0 ] int 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;  result          1   16[BANK0 ] unsigned char 
  8709 ;; Return value:  Size  Location     Type
  8710 ;;                  1    wreg      unsigned char 
  8711 ;; Registers used:
  8712 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8713 ;; Tracked objects:
  8714 ;;		On entry : F/0
  8715 ;;		On exit  : F/0
  8716 ;;		Unchanged: FFFFFFF0/0
  8717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8718 ;;      Params:         0       4       0       0       0       0       0
  8719 ;;      Locals:         0       1       0       0       0       0       0
  8720 ;;      Temps:          0       0       0       0       0       0       0
  8721 ;;      Totals:         0       5       0       0       0       0       0
  8722 ;;Total ram usage:        5 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; Hardware stack levels required when called:    5
  8725 ;; This function calls:
  8726 ;;		Nothing
  8727 ;; This function is called by:
  8728 ;;		_serialport_startup
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text40
  8733  00187A                     __ptext40:
  8734                           	opt stack 0
  8735  00187A                     _rd_buffer_init:
  8736                           	opt stack 23
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;rd_buffer.c: 17: CHAR result = FALSE;
  8740                           
  8741                           ; BSR set to: 0
  8742  00187A  6B70               	clrf	rd_buffer_init@result& (0+255),b
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;rd_buffer.c: 18: if(pbuffer != (0) ){
  8746  00187C  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8747  00187E  116C               	iorwf	rd_buffer_init@pbuffer& (0+255),w,b
  8748  001880  E01A               	bz	l5520
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;rd_buffer.c: 19: pbuffer->head.first = 0;
  8752  001882  EE20 F002          	lfsr	2,2
  8753  001886  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  8754  001888  26D9               	addwf	fsr2l,f,c
  8755  00188A  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8756  00188C  22DA               	addwfc	fsr2h,f,c
  8757  00188E  6ADE               	clrf	postinc2,c
  8758  001890  6ADD               	clrf	postdec2,c
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;rd_buffer.c: 20: pbuffer->head.last = 0;
  8762  001892  C06C  FFD9         	movff	rd_buffer_init@pbuffer,fsr2l
  8763  001896  C06D  FFDA         	movff	rd_buffer_init@pbuffer+1,fsr2h
  8764  00189A  6ADE               	clrf	postinc2,c
  8765  00189C  6ADD               	clrf	postdec2,c
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;rd_buffer.c: 22: pbuffer->head.size = size;
  8769  00189E  EE20 F004          	lfsr	2,4
  8770  0018A2  516C               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  8771  0018A4  26D9               	addwf	fsr2l,f,c
  8772  0018A6  516D               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  8773  0018A8  22DA               	addwfc	fsr2h,f,c
  8774  0018AA  C06E  FFDE         	movff	rd_buffer_init@size,postinc2
  8775  0018AE  C06F  FFDD         	movff	rd_buffer_init@size+1,postdec2
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;rd_buffer.c: 23: result = TRUE;
  8779  0018B2  0E01               	movlw	1
  8780  0018B4  6F70               	movwf	rd_buffer_init@result& (0+255),b
  8781  0018B6                     l5520:
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;rd_buffer.c: 24: }
  8785                           ;rd_buffer.c: 25: return result;
  8786  0018B6  5170               	movf	rd_buffer_init@result& (0+255),w,b
  8787                           
  8788                           ; BSR set to: 0
  8789  0018B8  0012               	return	
  8790  0018BA                     __end_of_rd_buffer_init:
  8791                           	opt stack 0
  8792                           tosu	equ	0xFFF
  8793                           tosh	equ	0xFFE
  8794                           tosl	equ	0xFFD
  8795                           pclath	equ	0xFFA
  8796                           tblptru	equ	0xFF8
  8797                           tblptrh	equ	0xFF7
  8798                           tblptrl	equ	0xFF6
  8799                           tablat	equ	0xFF5
  8800                           prodh	equ	0xFF4
  8801                           prodl	equ	0xFF3
  8802                           intcon	equ	0xFF2
  8803                           indf0	equ	0xFEF
  8804                           postinc0	equ	0xFEE
  8805                           fsr0h	equ	0xFEA
  8806                           fsr0l	equ	0xFE9
  8807                           wreg	equ	0xFE8
  8808                           indf1	equ	0xFE7
  8809                           postinc1	equ	0xFE6
  8810                           postdec1	equ	0xFE5
  8811                           fsr1h	equ	0xFE2
  8812                           fsr1l	equ	0xFE1
  8813                           indf2	equ	0xFDF
  8814                           postinc2	equ	0xFDE
  8815                           postdec2	equ	0xFDD
  8816                           fsr2h	equ	0xFDA
  8817                           fsr2l	equ	0xFD9
  8818                           status	equ	0xFD8
  8819                           
  8820 ;; *************** function ___awdiv *****************
  8821 ;; Defined at:
  8822 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awdiv.c"
  8823 ;; Parameters:    Size  Location     Type
  8824 ;;  dividend        2   12[BANK0 ] int 
  8825 ;;  divisor         2   14[BANK0 ] int 
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;  quotient        2   18[BANK0 ] int 
  8828 ;;  sign            1   17[BANK0 ] unsigned char 
  8829 ;;  counter         1   16[BANK0 ] unsigned char 
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  2   12[BANK0 ] int 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : F/0
  8836 ;;		On exit  : F/0
  8837 ;;		Unchanged: FFFFFFF0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8839 ;;      Params:         0       4       0       0       0       0       0
  8840 ;;      Locals:         0       4       0       0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0
  8842 ;;      Totals:         0       8       0       0       0       0       0
  8843 ;;Total ram usage:        8 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    5
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_pd_add_value
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text41
  8854  001432                     __ptext41:
  8855                           	opt stack 0
  8856  001432                     ___awdiv:
  8857                           	opt stack 23
  8858                           
  8859                           ; BSR set to: 0
  8860                           
  8861                           ; BSR set to: 0
  8862  001432  6B71               	clrf	___awdiv@sign& (0+255),b
  8863  001434  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8864  001436  D006               	goto	l6246
  8865                           
  8866                           ; BSR set to: 0
  8867  001438  6D6E               	negf	___awdiv@divisor& (0+255),b
  8868  00143A  1F6F               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8869  00143C  B0D8               	btfsc	status,0,c
  8870  00143E  2B6F               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8871                           
  8872                           ; BSR set to: 0
  8873  001440  0E01               	movlw	1
  8874  001442  6F71               	movwf	___awdiv@sign& (0+255),b
  8875  001444                     l6246:
  8876                           
  8877                           ; BSR set to: 0
  8878  001444  AF6D               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8879  001446  D006               	goto	l6252
  8880                           
  8881                           ; BSR set to: 0
  8882  001448  6D6C               	negf	___awdiv@dividend& (0+255),b
  8883  00144A  1F6D               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8884  00144C  B0D8               	btfsc	status,0,c
  8885  00144E  2B6D               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8886                           
  8887                           ; BSR set to: 0
  8888  001450  0E01               	movlw	1
  8889  001452  1B71               	xorwf	___awdiv@sign& (0+255),f,b
  8890  001454                     l6252:
  8891                           
  8892                           ; BSR set to: 0
  8893  001454  6B72               	clrf	___awdiv@quotient& (0+255),b
  8894  001456  6B73               	clrf	(___awdiv@quotient+1)& (0+255),b
  8895                           
  8896                           ; BSR set to: 0
  8897  001458  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8898  00145A  116E               	iorwf	___awdiv@divisor& (0+255),w,b
  8899  00145C  E01B               	bz	l6274
  8900                           
  8901                           ; BSR set to: 0
  8902  00145E  0E01               	movlw	1
  8903  001460  6F70               	movwf	___awdiv@counter& (0+255),b
  8904  001462  D004               	goto	l6260
  8905  001464                     l6258:
  8906                           
  8907                           ; BSR set to: 0
  8908  001464  90D8               	bcf	status,0,c
  8909  001466  376E               	rlcf	___awdiv@divisor& (0+255),f,b
  8910  001468  376F               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8911  00146A  2B70               	incf	___awdiv@counter& (0+255),f,b
  8912  00146C                     l6260:
  8913                           
  8914                           ; BSR set to: 0
  8915  00146C  AF6F               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8916  00146E  D7FA               	goto	l6258
  8917  001470                     l6262:
  8918                           
  8919                           ; BSR set to: 0
  8920  001470  90D8               	bcf	status,0,c
  8921  001472  3772               	rlcf	___awdiv@quotient& (0+255),f,b
  8922  001474  3773               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8923                           
  8924                           ; BSR set to: 0
  8925  001476  516E               	movf	___awdiv@divisor& (0+255),w,b
  8926  001478  5D6C               	subwf	___awdiv@dividend& (0+255),w,b
  8927  00147A  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8928  00147C  596D               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8929  00147E  E305               	bnc	l6270
  8930                           
  8931                           ; BSR set to: 0
  8932  001480  516E               	movf	___awdiv@divisor& (0+255),w,b
  8933  001482  5F6C               	subwf	___awdiv@dividend& (0+255),f,b
  8934  001484  516F               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8935  001486  5B6D               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8936                           
  8937                           ; BSR set to: 0
  8938  001488  8172               	bsf	___awdiv@quotient& (0+255),0,b
  8939  00148A                     l6270:
  8940                           
  8941                           ; BSR set to: 0
  8942  00148A  90D8               	bcf	status,0,c
  8943  00148C  336F               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8944  00148E  336E               	rrcf	___awdiv@divisor& (0+255),f,b
  8945                           
  8946                           ; BSR set to: 0
  8947  001490  2F70               	decfsz	___awdiv@counter& (0+255),f,b
  8948  001492  D7EE               	goto	l6262
  8949  001494                     l6274:
  8950                           
  8951                           ; BSR set to: 0
  8952  001494  5171               	movf	___awdiv@sign& (0+255),w,b
  8953  001496  E004               	bz	l6278
  8954                           
  8955                           ; BSR set to: 0
  8956  001498  6D72               	negf	___awdiv@quotient& (0+255),b
  8957  00149A  1F73               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8958  00149C  B0D8               	btfsc	status,0,c
  8959  00149E  2B73               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8960  0014A0                     l6278:
  8961                           
  8962                           ; BSR set to: 0
  8963  0014A0  C072  F06C         	movff	___awdiv@quotient,?___awdiv
  8964  0014A4  C073  F06D         	movff	___awdiv@quotient+1,?___awdiv+1
  8965                           
  8966                           ; BSR set to: 0
  8967  0014A8  0012               	return	
  8968  0014AA                     __end_of___awdiv:
  8969                           	opt stack 0
  8970                           tosu	equ	0xFFF
  8971                           tosh	equ	0xFFE
  8972                           tosl	equ	0xFFD
  8973                           pclath	equ	0xFFA
  8974                           tblptru	equ	0xFF8
  8975                           tblptrh	equ	0xFF7
  8976                           tblptrl	equ	0xFF6
  8977                           tablat	equ	0xFF5
  8978                           prodh	equ	0xFF4
  8979                           prodl	equ	0xFF3
  8980                           intcon	equ	0xFF2
  8981                           indf0	equ	0xFEF
  8982                           postinc0	equ	0xFEE
  8983                           fsr0h	equ	0xFEA
  8984                           fsr0l	equ	0xFE9
  8985                           wreg	equ	0xFE8
  8986                           indf1	equ	0xFE7
  8987                           postinc1	equ	0xFE6
  8988                           postdec1	equ	0xFE5
  8989                           fsr1h	equ	0xFE2
  8990                           fsr1l	equ	0xFE1
  8991                           indf2	equ	0xFDF
  8992                           postinc2	equ	0xFDE
  8993                           postdec2	equ	0xFDD
  8994                           fsr2h	equ	0xFDA
  8995                           fsr2l	equ	0xFD9
  8996                           status	equ	0xFD8
  8997                           
  8998 ;; *************** function ___awmod *****************
  8999 ;; Defined at:
  9000 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awmod.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;  dividend        2   12[BANK0 ] int 
  9003 ;;  divisor         2   14[BANK0 ] int 
  9004 ;; Auto vars:     Size  Location     Type
  9005 ;;  sign            1   17[BANK0 ] unsigned char 
  9006 ;;  counter         1   16[BANK0 ] unsigned char 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  2   12[BANK0 ] int 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, status,0
  9011 ;; Tracked objects:
  9012 ;;		On entry : F/0
  9013 ;;		On exit  : F/0
  9014 ;;		Unchanged: FFFFFFF0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9016 ;;      Params:         0       4       0       0       0       0       0
  9017 ;;      Locals:         0       2       0       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0
  9019 ;;      Totals:         0       6       0       0       0       0       0
  9020 ;;Total ram usage:        6 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:    5
  9023 ;; This function calls:
  9024 ;;		Nothing
  9025 ;; This function is called by:
  9026 ;;		_pd_add_value
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           	psect	text42
  9031  001594                     __ptext42:
  9032                           	opt stack 0
  9033  001594                     ___awmod:
  9034                           	opt stack 23
  9035                           
  9036                           ; BSR set to: 0
  9037                           
  9038                           ; BSR set to: 0
  9039  001594  6B71               	clrf	___awmod@sign& (0+255),b
  9040  001596  AF6D               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9041  001598  D006               	goto	l6288
  9042                           
  9043                           ; BSR set to: 0
  9044  00159A  6D6C               	negf	___awmod@dividend& (0+255),b
  9045  00159C  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  9046  00159E  B0D8               	btfsc	status,0,c
  9047  0015A0  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  9048                           
  9049                           ; BSR set to: 0
  9050  0015A2  0E01               	movlw	1
  9051  0015A4  6F71               	movwf	___awmod@sign& (0+255),b
  9052  0015A6                     l6288:
  9053                           
  9054                           ; BSR set to: 0
  9055  0015A6  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9056  0015A8  D004               	goto	l6292
  9057                           
  9058                           ; BSR set to: 0
  9059  0015AA  6D6E               	negf	___awmod@divisor& (0+255),b
  9060  0015AC  1F6F               	comf	(___awmod@divisor+1)& (0+255),f,b
  9061  0015AE  B0D8               	btfsc	status,0,c
  9062  0015B0  2B6F               	incf	(___awmod@divisor+1)& (0+255),f,b
  9063  0015B2                     l6292:
  9064                           
  9065                           ; BSR set to: 0
  9066  0015B2  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9067  0015B4  116E               	iorwf	___awmod@divisor& (0+255),w,b
  9068  0015B6  E017               	bz	l6308
  9069                           
  9070                           ; BSR set to: 0
  9071  0015B8  0E01               	movlw	1
  9072  0015BA  6F70               	movwf	___awmod@counter& (0+255),b
  9073  0015BC  D004               	goto	l6298
  9074  0015BE                     l6296:
  9075                           
  9076                           ; BSR set to: 0
  9077  0015BE  90D8               	bcf	status,0,c
  9078  0015C0  376E               	rlcf	___awmod@divisor& (0+255),f,b
  9079  0015C2  376F               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9080  0015C4  2B70               	incf	___awmod@counter& (0+255),f,b
  9081  0015C6                     l6298:
  9082                           
  9083                           ; BSR set to: 0
  9084  0015C6  AF6F               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9085  0015C8  D7FA               	goto	l6296
  9086  0015CA                     l6300:
  9087                           
  9088                           ; BSR set to: 0
  9089  0015CA  516E               	movf	___awmod@divisor& (0+255),w,b
  9090  0015CC  5D6C               	subwf	___awmod@dividend& (0+255),w,b
  9091  0015CE  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9092  0015D0  596D               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9093  0015D2  E304               	bnc	l6304
  9094                           
  9095                           ; BSR set to: 0
  9096  0015D4  516E               	movf	___awmod@divisor& (0+255),w,b
  9097  0015D6  5F6C               	subwf	___awmod@dividend& (0+255),f,b
  9098  0015D8  516F               	movf	(___awmod@divisor+1)& (0+255),w,b
  9099  0015DA  5B6D               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9100  0015DC                     l6304:
  9101                           
  9102                           ; BSR set to: 0
  9103  0015DC  90D8               	bcf	status,0,c
  9104  0015DE  336F               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9105  0015E0  336E               	rrcf	___awmod@divisor& (0+255),f,b
  9106                           
  9107                           ; BSR set to: 0
  9108  0015E2  2F70               	decfsz	___awmod@counter& (0+255),f,b
  9109  0015E4  D7F2               	goto	l6300
  9110  0015E6                     l6308:
  9111                           
  9112                           ; BSR set to: 0
  9113  0015E6  5171               	movf	___awmod@sign& (0+255),w,b
  9114  0015E8  E004               	bz	l6312
  9115                           
  9116                           ; BSR set to: 0
  9117  0015EA  6D6C               	negf	___awmod@dividend& (0+255),b
  9118  0015EC  1F6D               	comf	(___awmod@dividend+1)& (0+255),f,b
  9119  0015EE  B0D8               	btfsc	status,0,c
  9120  0015F0  2B6D               	incf	(___awmod@dividend+1)& (0+255),f,b
  9121  0015F2                     l6312:
  9122                           
  9123                           ; BSR set to: 0
  9124  0015F2  C06C  F06C         	movff	___awmod@dividend,?___awmod
  9125  0015F6  C06D  F06D         	movff	___awmod@dividend+1,?___awmod+1
  9126                           
  9127                           ; BSR set to: 0
  9128  0015FA  0012               	return	
  9129  0015FC                     __end_of___awmod:
  9130                           	opt stack 0
  9131                           tosu	equ	0xFFF
  9132                           tosh	equ	0xFFE
  9133                           tosl	equ	0xFFD
  9134                           pclath	equ	0xFFA
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           intcon	equ	0xFF2
  9142                           indf0	equ	0xFEF
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           postinc2	equ	0xFDE
  9154                           postdec2	equ	0xFDD
  9155                           fsr2h	equ	0xFDA
  9156                           fsr2l	equ	0xFD9
  9157                           status	equ	0xFD8
  9158                           
  9159 ;; *************** function ___lbmod *****************
  9160 ;; Defined at:
  9161 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lbmod.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;  dividend        1    wreg     unsigned char 
  9164 ;;  divisor         1   12[BANK0 ] unsigned char 
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  dividend        1   13[BANK0 ] unsigned char 
  9167 ;;  rem             1   15[BANK0 ] unsigned char 
  9168 ;;  counter         1   14[BANK0 ] unsigned char 
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  1    wreg      unsigned char 
  9171 ;; Registers used:
  9172 ;;		wreg, status,2, status,0
  9173 ;; Tracked objects:
  9174 ;;		On entry : F/0
  9175 ;;		On exit  : F/0
  9176 ;;		Unchanged: FFFFFFF0/0
  9177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9178 ;;      Params:         0       1       0       0       0       0       0
  9179 ;;      Locals:         0       3       0       0       0       0       0
  9180 ;;      Temps:          0       0       0       0       0       0       0
  9181 ;;      Totals:         0       4       0       0       0       0       0
  9182 ;;Total ram usage:        4 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    5
  9185 ;; This function calls:
  9186 ;;		Nothing
  9187 ;; This function is called by:
  9188 ;;		_pd_add_value
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           	psect	text43
  9193  0019FC                     __ptext43:
  9194                           	opt stack 0
  9195  0019FC                     ___lbmod:
  9196                           	opt stack 23
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;___lbmod@dividend stored from wreg
  9200  0019FC  CFE8 F06D          	movff	wreg,___lbmod@dividend
  9201                           
  9202                           ; BSR set to: 0
  9203  001A00  0E08               	movlw	8
  9204  001A02  6F6E               	movwf	___lbmod@counter& (0+255),b
  9205                           
  9206                           ; BSR set to: 0
  9207  001A04  6B6F               	clrf	___lbmod@rem& (0+255),b
  9208  001A06                     l6320:
  9209                           
  9210                           ; BSR set to: 0
  9211  001A06  90D8               	bcf	status,0,c
  9212  001A08  0100               	movlb	0	; () banked
  9213  001A0A  356D               	rlcf	___lbmod@dividend& (0+255),w,b
  9214  001A0C  356F               	rlcf	___lbmod@rem& (0+255),w,b
  9215  001A0E  6F6F               	movwf	___lbmod@rem& (0+255),b
  9216                           
  9217                           ; BSR set to: 0
  9218  001A10  90D8               	bcf	status,0,c
  9219  001A12  376D               	rlcf	___lbmod@dividend& (0+255),f,b
  9220                           
  9221                           ; BSR set to: 0
  9222  001A14  516C               	movf	___lbmod@divisor& (0+255),w,b
  9223  001A16  5D6F               	subwf	___lbmod@rem& (0+255),w,b
  9224  001A18  E302               	bnc	l6328
  9225                           
  9226                           ; BSR set to: 0
  9227  001A1A  516C               	movf	___lbmod@divisor& (0+255),w,b
  9228  001A1C  5F6F               	subwf	___lbmod@rem& (0+255),f,b
  9229  001A1E                     l6328:
  9230                           
  9231                           ; BSR set to: 0
  9232  001A1E  2F6E               	decfsz	___lbmod@counter& (0+255),f,b
  9233  001A20  D7F2               	goto	l6320
  9234                           
  9235                           ; BSR set to: 0
  9236  001A22  516F               	movf	___lbmod@rem& (0+255),w,b
  9237                           
  9238                           ; BSR set to: 0
  9239  001A24  0012               	return	
  9240  001A26                     __end_of___lbmod:
  9241                           	opt stack 0
  9242                           tosu	equ	0xFFF
  9243                           tosh	equ	0xFFE
  9244                           tosl	equ	0xFFD
  9245                           pclath	equ	0xFFA
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           intcon	equ	0xFF2
  9253                           indf0	equ	0xFEF
  9254                           postinc0	equ	0xFEE
  9255                           fsr0h	equ	0xFEA
  9256                           fsr0l	equ	0xFE9
  9257                           wreg	equ	0xFE8
  9258                           indf1	equ	0xFE7
  9259                           postinc1	equ	0xFE6
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function ___wmul *****************
  9271 ;; Defined at:
  9272 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.12\sources\wmul.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  multiplier      2   12[BANK0 ] unsigned int 
  9275 ;;  multiplicand    2   14[BANK0 ] unsigned int 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;  product         2   16[BANK0 ] unsigned int 
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  2   12[BANK0 ] unsigned int 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2, status,0
  9282 ;; Tracked objects:
  9283 ;;		On entry : F/0
  9284 ;;		On exit  : F/0
  9285 ;;		Unchanged: FFFFFFF0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         0       4       0       0       0       0       0
  9288 ;;      Locals:         0       2       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0
  9290 ;;      Totals:         0       6       0       0       0       0       0
  9291 ;;Total ram usage:        6 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    5
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_this_parse_command
  9298 ;;		_this_parse_parameter
  9299 ;;		_pd_add_value
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           	psect	text44
  9304  0019D0                     __ptext44:
  9305                           	opt stack 0
  9306  0019D0                     ___wmul:
  9307                           	opt stack 22
  9308                           
  9309                           ; BSR set to: 0
  9310                           
  9311                           ; BSR set to: 0
  9312  0019D0  6B70               	clrf	___wmul@product& (0+255),b
  9313  0019D2  6B71               	clrf	(___wmul@product+1)& (0+255),b
  9314  0019D4                     l1482:
  9315                           
  9316                           ; BSR set to: 0
  9317  0019D4  A16C               	btfss	___wmul@multiplier& (0+255),0,b
  9318  0019D6  D004               	goto	l6338
  9319                           
  9320                           ; BSR set to: 0
  9321  0019D8  516E               	movf	___wmul@multiplicand& (0+255),w,b
  9322  0019DA  2770               	addwf	___wmul@product& (0+255),f,b
  9323  0019DC  516F               	movf	(___wmul@multiplicand+1)& (0+255),w,b
  9324  0019DE  2371               	addwfc	(___wmul@product+1)& (0+255),f,b
  9325  0019E0                     l6338:
  9326                           
  9327                           ; BSR set to: 0
  9328  0019E0  90D8               	bcf	status,0,c
  9329  0019E2  376E               	rlcf	___wmul@multiplicand& (0+255),f,b
  9330  0019E4  376F               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
  9331                           
  9332                           ; BSR set to: 0
  9333  0019E6  90D8               	bcf	status,0,c
  9334  0019E8  336D               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
  9335  0019EA  336C               	rrcf	___wmul@multiplier& (0+255),f,b
  9336  0019EC  516D               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9337  0019EE  116C               	iorwf	___wmul@multiplier& (0+255),w,b
  9338  0019F0  E1F1               	bnz	l1482
  9339                           
  9340                           ; BSR set to: 0
  9341  0019F2  C070  F06C         	movff	___wmul@product,?___wmul
  9342  0019F6  C071  F06D         	movff	___wmul@product+1,?___wmul+1
  9343                           
  9344                           ; BSR set to: 0
  9345  0019FA  0012               	return	
  9346  0019FC                     __end_of___wmul:
  9347                           	opt stack 0
  9348                           tosu	equ	0xFFF
  9349                           tosh	equ	0xFFE
  9350                           tosl	equ	0xFFD
  9351                           pclath	equ	0xFFA
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           indf0	equ	0xFEF
  9360                           postinc0	equ	0xFEE
  9361                           fsr0h	equ	0xFEA
  9362                           fsr0l	equ	0xFE9
  9363                           wreg	equ	0xFE8
  9364                           indf1	equ	0xFE7
  9365                           postinc1	equ	0xFE6
  9366                           postdec1	equ	0xFE5
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           
  9376 ;; *************** function _isr_high *****************
  9377 ;; Defined at:
  9378 ;;		line 16 in file "src/interrupts.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;		None               void
  9385 ;; Registers used:
  9386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9392 ;;      Params:         0       0       0       0       0       0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0
  9394 ;;      Temps:          8       0       0       0       0       0       0
  9395 ;;      Totals:         8       0       0       0       0       0       0
  9396 ;;Total ram usage:        8 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    4
  9399 ;; This function calls:
  9400 ;;		_delay_interrupt_service
  9401 ;;		_serialport_service
  9402 ;;		_detection_obtain_analog_service
  9403 ;; This function is called by:
  9404 ;;		Interrupt level 2
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408 ;; *************** function interrupts@isr_high *****************
  9409 ;; Defined at:
  9410 ;;		line 16 in file "src/interrupts.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;		None
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;		None
  9415 ;; Return value:  Size  Location     Type
  9416 ;;		None               void
  9417 ;; Registers used:
  9418 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9424 ;;      Params:         0       0       0       0       0       0       0
  9425 ;;      Locals:         0       0       0       0       0       0       0
  9426 ;;      Temps:          0       8       0       0       0       0       0
  9427 ;;      Totals:         0       8       0       0       0       0       0
  9428 ;;Total ram usage:        8 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    4
  9431 ;; This function calls:
  9432 ;;		_delay_interrupt_service
  9433 ;;		_serialport_service
  9434 ;;		_detection_obtain_analog_service
  9435 ;; This function is called by:
  9436 ;;		Interrupt level 2
  9437 ;; This function uses a non-reentrant model
  9438 ;;
  9439                           
  9440                           	psect	intcode
  9441  000008                     __pintcode:
  9442                           	opt stack 0
  9443  000008                     _isr_high:
  9444                           	opt stack 19
  9445                           
  9446                           ; BSR set to: 0
  9447  000008  CFE9 F012          	movff	fsr0l,??_isr_high
  9448  00000C  CFEA F013          	movff	fsr0h,??_isr_high+1
  9449  000010  CFD9 F014          	movff	fsr2l,??_isr_high+2
  9450  000014  CFDA F015          	movff	fsr2h,??_isr_high+3
  9451  000018  CFF6 F016          	movff	tblptrl,??_isr_high+4
  9452  00001C  CFF7 F017          	movff	tblptrh,??_isr_high+5
  9453  000020  CFF8 F018          	movff	tblptru,??_isr_high+6
  9454  000024  CFF5 F019          	movff	tablat,??_isr_high+7
  9455  000028                     
  9456                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
  9457  000028  A4F2               	btfss	intcon,2,c	;volatile
  9458  00002A  D001               	goto	i2u532_41
  9459  00002C  D001               	goto	i2u532_40
  9460  00002E                     i2u532_41:
  9461  00002E  D007               	goto	i2l5280
  9462  000030                     i2u532_40:
  9463  000030                     
  9464                           ;interrupts.c: 19: {
  9465                           ;interrupts.c: 20: delay_interrupt_service();
  9466  000030  EC92  F00D         	call	_delay_interrupt_service	;wreg free
  9467  000034                     
  9468                           ; BSR set to: 0
  9469  000034  94F2               	bcf	intcon,2,c	;volatile
  9470  000036                     
  9471                           ; BSR set to: 0
  9472  000036  0EFE               	movlw	254
  9473  000038  6ED7               	movwf	4055,c	;volatile
  9474  00003A  0E0C               	movlw	12
  9475  00003C  6ED6               	movwf	4054,c	;volatile
  9476  00003E                     i2l5280:
  9477                           
  9478                           ;interrupts.c: 23: }
  9479                           ;interrupts.c: 25: if(PIR1bits.RCIF)
  9480  00003E  AA9E               	btfss	3998,5,c	;volatile
  9481  000040  D001               	goto	i2u533_41
  9482  000042  D001               	goto	i2u533_40
  9483  000044                     i2u533_41:
  9484  000044  D003               	goto	i2l5286
  9485  000046                     i2u533_40:
  9486  000046                     
  9487                           ;interrupts.c: 26: {
  9488                           ;interrupts.c: 28: serialport_service();
  9489  000046  EC9A  F00C         	call	_serialport_service	;wreg free
  9490  00004A                     
  9491                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
  9492  00004A  9A9E               	bcf	3998,5,c	;volatile
  9493  00004C                     i2l5286:
  9494                           
  9495                           ;interrupts.c: 30: }
  9496                           ;interrupts.c: 35: if(PIR1bits.ADIF)
  9497  00004C  AC9E               	btfss	3998,6,c	;volatile
  9498  00004E  D001               	goto	i2u534_41
  9499  000050  D001               	goto	i2u534_40
  9500  000052                     i2u534_41:
  9501  000052  D003               	goto	i2l933
  9502  000054                     i2u534_40:
  9503  000054                     
  9504                           ;interrupts.c: 36: {
  9505                           ;interrupts.c: 38: detection_obtain_analog_service();
  9506  000054  EC34  F00D         	call	_detection_obtain_analog_service	;wreg free
  9507  000058                     
  9508                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
  9509  000058  9C9E               	bcf	3998,6,c	;volatile
  9510  00005A                     i2l933:
  9511  00005A  C019  FFF5         	movff	??_isr_high+7,tablat
  9512  00005E  C018  FFF8         	movff	??_isr_high+6,tblptru
  9513  000062  C017  FFF7         	movff	??_isr_high+5,tblptrh
  9514  000066  C016  FFF6         	movff	??_isr_high+4,tblptrl
  9515  00006A  C015  FFDA         	movff	??_isr_high+3,fsr2h
  9516  00006E  C014  FFD9         	movff	??_isr_high+2,fsr2l
  9517  000072  C013  FFEA         	movff	??_isr_high+1,fsr0h
  9518  000076  C012  FFE9         	movff	??_isr_high,fsr0l
  9519  00007A  0011               	retfie		f
  9520  00007C                     __end_of_isr_high:
  9521                           	opt stack 0
  9522  00007C                     interrupts@isr_high:
  9523                           	opt stack 19
  9524  00007C  CFE9 F064          	movff	fsr0l,??interrupts@isr_high
  9525  000080  CFEA F065          	movff	fsr0h,??interrupts@isr_high+1
  9526  000084  CFD9 F066          	movff	fsr2l,??interrupts@isr_high+2
  9527  000088  CFDA F067          	movff	fsr2h,??interrupts@isr_high+3
  9528  00008C  CFF6 F068          	movff	tblptrl,??interrupts@isr_high+4
  9529  000090  CFF7 F069          	movff	tblptrh,??interrupts@isr_high+5
  9530  000094  CFF8 F06A          	movff	tblptru,??interrupts@isr_high+6
  9531  000098  CFF5 F06B          	movff	tablat,??interrupts@isr_high+7
  9532  00009C                     
  9533                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
  9534  00009C  A4F2               	btfss	intcon,2,c	;volatile
  9535  00009E  D001               	goto	i2u558_41
  9536  0000A0  D001               	goto	i2u558_40
  9537  0000A2                     i2u558_41:
  9538  0000A2  D007               	goto	i2l5412
  9539  0000A4                     i2u558_40:
  9540  0000A4                     
  9541                           ;interrupts.c: 19: {
  9542                           ;interrupts.c: 20: delay_interrupt_service();
  9543  0000A4  EC92  F00D         	call	_delay_interrupt_service	;wreg free
  9544  0000A8                     
  9545                           ; BSR set to: 0
  9546  0000A8  94F2               	bcf	intcon,2,c	;volatile
  9547  0000AA                     
  9548                           ; BSR set to: 0
  9549  0000AA  0EFE               	movlw	254
  9550  0000AC  6ED7               	movwf	4055,c	;volatile
  9551  0000AE  0E0C               	movlw	12
  9552  0000B0  6ED6               	movwf	4054,c	;volatile
  9553  0000B2                     i2l5412:
  9554                           
  9555                           ;interrupts.c: 23: }
  9556                           ;interrupts.c: 25: if(PIR1bits.RCIF)
  9557  0000B2  AA9E               	btfss	3998,5,c	;volatile
  9558  0000B4  D001               	goto	i2u559_41
  9559  0000B6  D001               	goto	i2u559_40
  9560  0000B8                     i2u559_41:
  9561  0000B8  D003               	goto	i2l5418
  9562  0000BA                     i2u559_40:
  9563  0000BA                     
  9564                           ;interrupts.c: 26: {
  9565                           ;interrupts.c: 28: serialport_service();
  9566  0000BA  EC9A  F00C         	call	_serialport_service	;wreg free
  9567  0000BE                     
  9568                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
  9569  0000BE  9A9E               	bcf	3998,5,c	;volatile
  9570  0000C0                     i2l5418:
  9571                           
  9572                           ;interrupts.c: 30: }
  9573                           ;interrupts.c: 35: if(PIR1bits.ADIF)
  9574  0000C0  AC9E               	btfss	3998,6,c	;volatile
  9575  0000C2  D001               	goto	i2u560_41
  9576  0000C4  D001               	goto	i2u560_40
  9577  0000C6                     i2u560_41:
  9578  0000C6  D003               	goto	i2l957
  9579  0000C8                     i2u560_40:
  9580  0000C8                     
  9581                           ;interrupts.c: 36: {
  9582                           ;interrupts.c: 38: detection_obtain_analog_service();
  9583  0000C8  EC34  F00D         	call	_detection_obtain_analog_service	;wreg free
  9584  0000CC                     
  9585                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
  9586  0000CC  9C9E               	bcf	3998,6,c	;volatile
  9587  0000CE                     i2l957:
  9588  0000CE  C06B  FFF5         	movff	??interrupts@isr_high+7,tablat
  9589  0000D2  C06A  FFF8         	movff	??interrupts@isr_high+6,tblptru
  9590  0000D6  C069  FFF7         	movff	??interrupts@isr_high+5,tblptrh
  9591  0000DA  C068  FFF6         	movff	??interrupts@isr_high+4,tblptrl
  9592  0000DE  C067  FFDA         	movff	??interrupts@isr_high+3,fsr2h
  9593  0000E2  C066  FFD9         	movff	??interrupts@isr_high+2,fsr2l
  9594  0000E6  C065  FFEA         	movff	??interrupts@isr_high+1,fsr0h
  9595  0000EA  C064  FFE9         	movff	??interrupts@isr_high,fsr0l
  9596  0000EE  0011               	retfie		f
  9597  0000F0                     __end_ofinterrupts@isr_high:
  9598                           	opt stack 0
  9599  0000F0                     tosu	equ	0xFFF
  9600                           tosh	equ	0xFFE
  9601                           tosl	equ	0xFFD
  9602                           pclath	equ	0xFFA
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           intcon	equ	0xFF2
  9610                           indf0	equ	0xFEF
  9611                           postinc0	equ	0xFEE
  9612                           fsr0h	equ	0xFEA
  9613                           fsr0l	equ	0xFE9
  9614                           wreg	equ	0xFE8
  9615                           indf1	equ	0xFE7
  9616                           postinc1	equ	0xFE6
  9617                           postdec1	equ	0xFE5
  9618                           fsr1h	equ	0xFE2
  9619                           fsr1l	equ	0xFE1
  9620                           indf2	equ	0xFDF
  9621                           postinc2	equ	0xFDE
  9622                           postdec2	equ	0xFDD
  9623                           fsr2h	equ	0xFDA
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627 ;; *************** function _delay_interrupt_service *****************
  9628 ;; Defined at:
  9629 ;;		line 70 in file "src/drivers/delay.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;		None
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;		None               void
  9636 ;; Registers used:
  9637 ;;		wreg, status,2, status,0
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : F/0
  9641 ;;		Unchanged: FFFFFFF0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9643 ;;      Params:         0       0       0       0       0       0       0
  9644 ;;      Locals:         0       0       0       0       0       0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0
  9646 ;;      Totals:         0       0       0       0       0       0       0
  9647 ;;Total ram usage:        0 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; This function calls:
  9650 ;;		Nothing
  9651 ;; This function is called by:
  9652 ;;		_isr_high
  9653 ;;		interrupts@isr_high
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text46
  9658  001B24                     __ptext46:
  9659                           	opt stack 0
  9660  001B24                     _delay_interrupt_service:
  9661                           	opt stack 22
  9662                           
  9663                           ;delay.c: 71: if(this_delay_timer_ms > 0u) {
  9664  001B24  0100               	movlb	0	; () banked
  9665  001B26  51F3               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  9666  001B28  11F2               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  9667  001B2A  B4D8               	btfsc	status,2,c
  9668  001B2C  0012               	return	
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;delay.c: 72: this_delay_timer_ms--;
  9672  001B2E  07F2               	decf	_this_delay_timer_ms& (0+255),f,b	;volatile
  9673  001B30  A0D8               	btfss	status,0,c
  9674  001B32  07F3               	decf	(_this_delay_timer_ms+1)& (0+255),f,b	;volatile
  9675                           
  9676                           ; BSR set to: 0
  9677  001B34  0012               	return	
  9678  001B36                     __end_of_delay_interrupt_service:
  9679                           	opt stack 0
  9680                           tosu	equ	0xFFF
  9681                           tosh	equ	0xFFE
  9682                           tosl	equ	0xFFD
  9683                           pclath	equ	0xFFA
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           indf0	equ	0xFEF
  9692                           postinc0	equ	0xFEE
  9693                           fsr0h	equ	0xFEA
  9694                           fsr0l	equ	0xFE9
  9695                           wreg	equ	0xFE8
  9696                           indf1	equ	0xFE7
  9697                           postinc1	equ	0xFE6
  9698                           postdec1	equ	0xFE5
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           indf2	equ	0xFDF
  9702                           postinc2	equ	0xFDE
  9703                           postdec2	equ	0xFDD
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function _serialport_service *****************
  9709 ;; Defined at:
  9710 ;;		line 24 in file "src/modules/serialport.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;		None
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;  byte            1    3[BANK0 ] unsigned char 
  9715 ;; Return value:  Size  Location     Type
  9716 ;;		None               void
  9717 ;; Registers used:
  9718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9719 ;; Tracked objects:
  9720 ;;		On entry : 0/0
  9721 ;;		On exit  : 0/0
  9722 ;;		Unchanged: FFFFFFF0/0
  9723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9724 ;;      Params:         0       0       0       0       0       0       0
  9725 ;;      Locals:         0       1       0       0       0       0       0
  9726 ;;      Temps:          0       1       0       0       0       0       0
  9727 ;;      Totals:         0       2       0       0       0       0       0
  9728 ;;Total ram usage:        2 bytes
  9729 ;; Hardware stack levels used:    1
  9730 ;; Hardware stack levels required when called:    3
  9731 ;; This function calls:
  9732 ;;		_uart_byte_available
  9733 ;;		_uart_getc
  9734 ;;		i2_rd_buffer_put
  9735 ;; This function is called by:
  9736 ;;		_isr_high
  9737 ;;		interrupts@isr_high
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           	psect	text47
  9742  001934                     __ptext47:
  9743                           	opt stack 0
  9744  001934                     _serialport_service:
  9745                           	opt stack 19
  9746                           
  9747                           ;serialport.c: 25: UINT8 byte;
  9748                           ;serialport.c: 26: if (uart_byte_available()) {
  9749                           
  9750                           ; BSR set to: 0
  9751  001934  ECBC  F00D         	call	_uart_byte_available	;wreg free
  9752  001938  0900               	iorlw	0
  9753  00193A  B4D8               	btfsc	status,2,c
  9754  00193C  0012               	return	
  9755                           
  9756                           ;serialport.c: 27: if (uart_getc(&byte) == RESULT_SUCCESS) {
  9757  00193E  0100               	movlb	0	; () banked
  9758  001940  0E63               	movlw	serialport_service@byte& (0+255)
  9759  001942  ECD0  F00C         	call	_uart_getc
  9760  001946  6F62               	movwf	??_serialport_service& (0+255),b
  9761  001948  0562               	decf	??_serialport_service& (0+255),w,b
  9762  00194A  A4D8               	btfss	status,2,c
  9763  00194C  0012               	return	
  9764                           
  9765                           ; BSR set to: 0
  9766                           ;serialport.c: 28: rd_buffer_put(&g_rx_buffer, &byte);
  9767  00194E  0E02               	movlw	high _g_rx_buffer
  9768  001950  6E1B               	movwf	?i2_rd_buffer_put+1,c
  9769  001952  0E00               	movlw	low _g_rx_buffer
  9770  001954  6E1A               	movwf	?i2_rd_buffer_put,c
  9771  001956  0100               	movlb	0	; () banked
  9772  001958  0E00               	movlw	high serialport_service@byte
  9773  00195A  6E1D               	movwf	?i2_rd_buffer_put+3,c
  9774  00195C  0E63               	movlw	low serialport_service@byte
  9775  00195E  6E1C               	movwf	?i2_rd_buffer_put+2,c
  9776  001960  EC50  F006         	call	i2_rd_buffer_put	;wreg free
  9777  001964  0E01               	movlw	1
  9778  001966  6E38               	movwf	_pool+5,c	;volatile
  9779  001968  0E0A               	movlw	10
  9780  00196A  6E30               	movwf	_event_miss+5,c	;volatile
  9781  00196C  0C0A               	retlw	10
  9782  00196E                     __end_of_serialport_service:
  9783                           	opt stack 0
  9784                           tosu	equ	0xFFF
  9785                           tosh	equ	0xFFE
  9786                           tosl	equ	0xFFD
  9787                           pclath	equ	0xFFA
  9788                           tblptru	equ	0xFF8
  9789                           tblptrh	equ	0xFF7
  9790                           tblptrl	equ	0xFF6
  9791                           tablat	equ	0xFF5
  9792                           prodh	equ	0xFF4
  9793                           prodl	equ	0xFF3
  9794                           intcon	equ	0xFF2
  9795                           indf0	equ	0xFEF
  9796                           postinc0	equ	0xFEE
  9797                           fsr0h	equ	0xFEA
  9798                           fsr0l	equ	0xFE9
  9799                           wreg	equ	0xFE8
  9800                           indf1	equ	0xFE7
  9801                           postinc1	equ	0xFE6
  9802                           postdec1	equ	0xFE5
  9803                           fsr1h	equ	0xFE2
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           fsr2h	equ	0xFDA
  9809                           fsr2l	equ	0xFD9
  9810                           status	equ	0xFD8
  9811                           
  9812 ;; *************** function _uart_getc *****************
  9813 ;; Defined at:
  9814 ;;		line 56 in file "src/drivers/uart.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  pbyte           1    wreg     PTR unsigned char 
  9817 ;;		 -> serialport_service@byte(1), 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  pbyte           1   26[COMRAM] PTR unsigned char 
  9820 ;;		 -> serialport_service@byte(1), 
  9821 ;;  result          1   27[COMRAM] enum E3388
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      enum E3388
  9824 ;; Registers used:
  9825 ;;		wreg, fsr2l, fsr2h, status,2, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : F/0
  9828 ;;		On exit  : F/0
  9829 ;;		Unchanged: FFFFFFF0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9831 ;;      Params:         0       0       0       0       0       0       0
  9832 ;;      Locals:         2       0       0       0       0       0       0
  9833 ;;      Temps:          0       0       0       0       0       0       0
  9834 ;;      Totals:         2       0       0       0       0       0       0
  9835 ;;Total ram usage:        2 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    2
  9838 ;; This function calls:
  9839 ;;		_uart_error
  9840 ;;		_uart_reset
  9841 ;;		_uart_byte_available
  9842 ;; This function is called by:
  9843 ;;		_serialport_service
  9844 ;; This function uses a non-reentrant model
  9845 ;;
  9846                           
  9847                           	psect	text48
  9848  0019A0                     __ptext48:
  9849                           	opt stack 0
  9850  0019A0                     _uart_getc:
  9851                           	opt stack 19
  9852                           
  9853                           ;uart_getc@pbyte stored from wreg
  9854  0019A0  CFE8 F01B          	movff	wreg,uart_getc@pbyte
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;uart.c: 57: ResultSuccess_t result = RESULT_FAIL;
  9858  0019A4  6A1C               	clrf	uart_getc@result,c
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;uart.c: 58: if ( uart_error())
  9862  0019A6  ECA3  F00D         	call	_uart_error	;wreg free
  9863  0019AA  0900               	iorlw	0
  9864  0019AC  E003               	bz	i2l5382
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;uart.c: 59: {
  9868                           ;uart.c: 60: uart_reset();
  9869  0019AE  EC44  F00D         	call	_uart_reset	;wreg free
  9870                           
  9871                           ;uart.c: 61: }
  9872  0019B2  D00C               	goto	i2l5390
  9873  0019B4                     i2l5382:
  9874                           
  9875                           ; BSR set to: 0
  9876                           ;uart.c: 62: else
  9877                           ;uart.c: 63: if( uart_byte_available() )
  9878  0019B4  ECBC  F00D         	call	_uart_byte_available	;wreg free
  9879  0019B8  0900               	iorlw	0
  9880  0019BA  E008               	bz	i2l5390
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;uart.c: 64: {
  9884                           ;uart.c: 65: *pbyte = RCREG;
  9885  0019BC  501B               	movf	uart_getc@pbyte,w,c
  9886  0019BE  6ED9               	movwf	fsr2l,c
  9887  0019C0  6ADA               	clrf	fsr2h,c
  9888  0019C2  CFAE FFDF          	movff	4014,indf2	;volatile
  9889                           
  9890                           ; BSR set to: 0
  9891                           ;uart.c: 66: RCIF = 0;
  9892  0019C6  9A9E               	bcf	3998,5,c	;volatile
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;uart.c: 67: result = RESULT_SUCCESS;
  9896  0019C8  0E01               	movlw	1
  9897  0019CA  6E1C               	movwf	uart_getc@result,c
  9898  0019CC                     i2l5390:
  9899                           
  9900                           ; BSR set to: 0
  9901                           ;uart.c: 68: }
  9902                           ;uart.c: 69: return result;
  9903  0019CC  501C               	movf	uart_getc@result,w,c
  9904                           
  9905                           ; BSR set to: 0
  9906  0019CE  0012               	return	
  9907  0019D0                     __end_of_uart_getc:
  9908                           	opt stack 0
  9909                           tosu	equ	0xFFF
  9910                           tosh	equ	0xFFE
  9911                           tosl	equ	0xFFD
  9912                           pclath	equ	0xFFA
  9913                           tblptru	equ	0xFF8
  9914                           tblptrh	equ	0xFF7
  9915                           tblptrl	equ	0xFF6
  9916                           tablat	equ	0xFF5
  9917                           prodh	equ	0xFF4
  9918                           prodl	equ	0xFF3
  9919                           intcon	equ	0xFF2
  9920                           indf0	equ	0xFEF
  9921                           postinc0	equ	0xFEE
  9922                           fsr0h	equ	0xFEA
  9923                           fsr0l	equ	0xFE9
  9924                           wreg	equ	0xFE8
  9925                           indf1	equ	0xFE7
  9926                           postinc1	equ	0xFE6
  9927                           postdec1	equ	0xFE5
  9928                           fsr1h	equ	0xFE2
  9929                           fsr1l	equ	0xFE1
  9930                           indf2	equ	0xFDF
  9931                           postinc2	equ	0xFDE
  9932                           postdec2	equ	0xFDD
  9933                           fsr2h	equ	0xFDA
  9934                           fsr2l	equ	0xFD9
  9935                           status	equ	0xFD8
  9936                           
  9937 ;; *************** function _uart_reset *****************
  9938 ;; Defined at:
  9939 ;;		line 73 in file "src/drivers/uart.c"
  9940 ;; Parameters:    Size  Location     Type
  9941 ;;		None
  9942 ;; Auto vars:     Size  Location     Type
  9943 ;;		None
  9944 ;; Return value:  Size  Location     Type
  9945 ;;		None               void
  9946 ;; Registers used:
  9947 ;;		wreg, status,2, cstack
  9948 ;; Tracked objects:
  9949 ;;		On entry : F/0
  9950 ;;		On exit  : F/0
  9951 ;;		Unchanged: FFFFFFF0/0
  9952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9953 ;;      Params:         0       0       0       0       0       0       0
  9954 ;;      Locals:         0       0       0       0       0       0       0
  9955 ;;      Temps:          0       0       0       0       0       0       0
  9956 ;;      Totals:         0       0       0       0       0       0       0
  9957 ;;Total ram usage:        0 bytes
  9958 ;; Hardware stack levels used:    1
  9959 ;; Hardware stack levels required when called:    1
  9960 ;; This function calls:
  9961 ;;		_uart_byte_available
  9962 ;;		_uart_error
  9963 ;; This function is called by:
  9964 ;;		_uart_getc
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text49
  9969  001A88                     __ptext49:
  9970                           	opt stack 0
  9971  001A88                     _uart_reset:
  9972                           	opt stack 19
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;uart.c: 74: while(uart_error() )
  9976                           
  9977                           ; BSR set to: 0
  9978  001A88  D008               	goto	i2l5370
  9979  001A8A                     i2l169:
  9980                           
  9981                           ; BSR set to: 0
  9982                           ;uart.c: 75: {
  9983                           ;uart.c: 76: CREN = 0;
  9984  001A8A  98AB               	bcf	4011,4,c	;volatile
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;uart.c: 77: RCREG;
  9988  001A8C  50AE               	movf	4014,w,c	;volatile
  9989                           
  9990                           ;uart.c: 78: RCREG;
  9991  001A8E  50AE               	movf	4014,w,c	;volatile
  9992                           
  9993                           ; BSR set to: 0
  9994                           ;uart.c: 79: CREN = 1;
  9995  001A90  88AB               	bsf	4011,4,c	;volatile
  9996  001A92                     i2l5368:
  9997                           
  9998                           ; BSR set to: 0
  9999  001A92  ECBC  F00D         	call	_uart_byte_available	;wreg free
 10000  001A96  0900               	iorlw	0
 10001  001A98  E1FC               	bnz	i2l5368
 10002  001A9A                     i2l5370:
 10003                           
 10004                           ; BSR set to: 0
 10005  001A9A  ECA3  F00D         	call	_uart_error	;wreg free
 10006  001A9E  0900               	iorlw	0
 10007  001AA0  B4D8               	btfsc	status,2,c
 10008  001AA2  0012               	return	
 10009  001AA4  D7F2               	goto	i2l169
 10010  001AA6                     __end_of_uart_reset:
 10011                           	opt stack 0
 10012                           tosu	equ	0xFFF
 10013                           tosh	equ	0xFFE
 10014                           tosl	equ	0xFFD
 10015                           pclath	equ	0xFFA
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           indf0	equ	0xFEF
 10024                           postinc0	equ	0xFEE
 10025                           fsr0h	equ	0xFEA
 10026                           fsr0l	equ	0xFE9
 10027                           wreg	equ	0xFE8
 10028                           indf1	equ	0xFE7
 10029                           postinc1	equ	0xFE6
 10030                           postdec1	equ	0xFE5
 10031                           fsr1h	equ	0xFE2
 10032                           fsr1l	equ	0xFE1
 10033                           indf2	equ	0xFDF
 10034                           postinc2	equ	0xFDE
 10035                           postdec2	equ	0xFDD
 10036                           fsr2h	equ	0xFDA
 10037                           fsr2l	equ	0xFD9
 10038                           status	equ	0xFD8
 10039                           
 10040 ;; *************** function _uart_byte_available *****************
 10041 ;; Defined at:
 10042 ;;		line 52 in file "src/drivers/uart.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;		None
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;		None
 10047 ;; Return value:  Size  Location     Type
 10048 ;;                  1    wreg      unsigned char 
 10049 ;; Registers used:
 10050 ;;		wreg
 10051 ;; Tracked objects:
 10052 ;;		On entry : 0/0
 10053 ;;		On exit  : 0/0
 10054 ;;		Unchanged: FFFFFFFF/0
 10055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10056 ;;      Params:         0       0       0       0       0       0       0
 10057 ;;      Locals:         0       0       0       0       0       0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0
 10059 ;;      Totals:         0       0       0       0       0       0       0
 10060 ;;Total ram usage:        0 bytes
 10061 ;; Hardware stack levels used:    1
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_uart_getc
 10066 ;;		_uart_reset
 10067 ;;		_serialport_service
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text50
 10072  001B78                     __ptext50:
 10073                           	opt stack 0
 10074  001B78                     _uart_byte_available:
 10075                           	opt stack 20
 10076                           
 10077                           ;uart.c: 53: return RC1IF;
 10078                           
 10079                           ; BSR set to: 0
 10080  001B78  0E00               	movlw	0
 10081  001B7A  BA9E               	btfsc	3998,5,c	;volatile
 10082  001B7C  0E01               	movlw	1
 10083  001B7E  0012               	return	
 10084  001B80                     __end_of_uart_byte_available:
 10085                           	opt stack 0
 10086                           tosu	equ	0xFFF
 10087                           tosh	equ	0xFFE
 10088                           tosl	equ	0xFFD
 10089                           pclath	equ	0xFFA
 10090                           tblptru	equ	0xFF8
 10091                           tblptrh	equ	0xFF7
 10092                           tblptrl	equ	0xFF6
 10093                           tablat	equ	0xFF5
 10094                           prodh	equ	0xFF4
 10095                           prodl	equ	0xFF3
 10096                           intcon	equ	0xFF2
 10097                           indf0	equ	0xFEF
 10098                           postinc0	equ	0xFEE
 10099                           fsr0h	equ	0xFEA
 10100                           fsr0l	equ	0xFE9
 10101                           wreg	equ	0xFE8
 10102                           indf1	equ	0xFE7
 10103                           postinc1	equ	0xFE6
 10104                           postdec1	equ	0xFE5
 10105                           fsr1h	equ	0xFE2
 10106                           fsr1l	equ	0xFE1
 10107                           indf2	equ	0xFDF
 10108                           postinc2	equ	0xFDE
 10109                           postdec2	equ	0xFDD
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _uart_error *****************
 10115 ;; Defined at:
 10116 ;;		line 85 in file "src/drivers/uart.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;		None
 10119 ;; Auto vars:     Size  Location     Type
 10120 ;;		None
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      unsigned char 
 10123 ;; Registers used:
 10124 ;;		wreg, status,2
 10125 ;; Tracked objects:
 10126 ;;		On entry : F/0
 10127 ;;		On exit  : F/0
 10128 ;;		Unchanged: FFFFFFF0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10130 ;;      Params:         0       0       0       0       0       0       0
 10131 ;;      Locals:         1       0       0       0       0       0       0
 10132 ;;      Temps:          0       0       0       0       0       0       0
 10133 ;;      Totals:         1       0       0       0       0       0       0
 10134 ;;Total ram usage:        1 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; This function calls:
 10137 ;;		Nothing
 10138 ;; This function is called by:
 10139 ;;		_uart_getc
 10140 ;;		_uart_reset
 10141 ;; This function uses a non-reentrant model
 10142 ;;
 10143                           
 10144                           	psect	text51
 10145  001B46                     __ptext51:
 10146                           	opt stack 0
 10147  001B46                     _uart_error:
 10148                           	opt stack 19
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;uart.c: 86: return RCSTAbits.OERR || RCSTAbits.FERR ;
 10152  001B46  0E01               	movlw	1
 10153  001B48  6E1A               	movwf	_uart_error$257,c
 10154                           
 10155                           ; BSR set to: 0
 10156  001B4A  A2AB               	btfss	4011,1,c	;volatile
 10157                           
 10158                           ; BSR set to: 0
 10159  001B4C  B4AB               	btfsc	4011,2,c	;volatile
 10160  001B4E  D001               	goto	i2l5086
 10161                           
 10162                           ; BSR set to: 0
 10163  001B50  6A1A               	clrf	_uart_error$257,c
 10164  001B52                     i2l5086:
 10165                           
 10166                           ; BSR set to: 0
 10167  001B52  501A               	movf	_uart_error$257,w,c
 10168                           
 10169                           ; BSR set to: 0
 10170  001B54  0012               	return	
 10171  001B56                     __end_of_uart_error:
 10172                           	opt stack 0
 10173                           tosu	equ	0xFFF
 10174                           tosh	equ	0xFFE
 10175                           tosl	equ	0xFFD
 10176                           pclath	equ	0xFFA
 10177                           tblptru	equ	0xFF8
 10178                           tblptrh	equ	0xFF7
 10179                           tblptrl	equ	0xFF6
 10180                           tablat	equ	0xFF5
 10181                           prodh	equ	0xFF4
 10182                           prodl	equ	0xFF3
 10183                           intcon	equ	0xFF2
 10184                           indf0	equ	0xFEF
 10185                           postinc0	equ	0xFEE
 10186                           fsr0h	equ	0xFEA
 10187                           fsr0l	equ	0xFE9
 10188                           wreg	equ	0xFE8
 10189                           indf1	equ	0xFE7
 10190                           postinc1	equ	0xFE6
 10191                           postdec1	equ	0xFE5
 10192                           fsr1h	equ	0xFE2
 10193                           fsr1l	equ	0xFE1
 10194                           indf2	equ	0xFDF
 10195                           postinc2	equ	0xFDE
 10196                           postdec2	equ	0xFDD
 10197                           fsr2h	equ	0xFDA
 10198                           fsr2l	equ	0xFD9
 10199                           status	equ	0xFD8
 10200                           
 10201 ;; *************** function _detection_obtain_analog_service *****************
 10202 ;; Defined at:
 10203 ;;		line 137 in file "src/modules/detection.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;		None
 10206 ;; Auto vars:     Size  Location     Type
 10207 ;;  adc_data        1    2[BANK0 ] unsigned char 
 10208 ;; Return value:  Size  Location     Type
 10209 ;;		None               void
 10210 ;; Registers used:
 10211 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10212 ;; Tracked objects:
 10213 ;;		On entry : 0/0
 10214 ;;		On exit  : 0/0
 10215 ;;		Unchanged: 0/0
 10216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10217 ;;      Params:         0       0       0       0       0       0       0
 10218 ;;      Locals:         0       1       0       0       0       0       0
 10219 ;;      Temps:          0       0       0       0       0       0       0
 10220 ;;      Totals:         0       1       0       0       0       0       0
 10221 ;;Total ram usage:        1 bytes
 10222 ;; Hardware stack levels used:    1
 10223 ;; Hardware stack levels required when called:    1
 10224 ;; This function calls:
 10225 ;;		_adc_read
 10226 ;;		i2_rd_buffer_put
 10227 ;; This function is called by:
 10228 ;;		_isr_high
 10229 ;;		interrupts@isr_high
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           	psect	text52
 10234  001A68                     __ptext52:
 10235                           	opt stack 0
 10236  001A68                     _detection_obtain_analog_service:
 10237                           	opt stack 21
 10238                           
 10239                           ;detection.c: 138: UINT8 adc_data;
 10240                           ;detection.c: 139: adc_data = adc_read(0);
 10241                           
 10242                           ; BSR set to: 0
 10243  001A68  0E00               	movlw	0
 10244  001A6A  ECF9  F00B         	call	_adc_read
 10245  001A6E  501A               	movf	?_adc_read,w,c
 10246  001A70  0100               	movlb	0	; () banked
 10247  001A72  6F62               	movwf	detection_obtain_analog_service@adc_data& (0+255),b
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;detection.c: 140: rd_buffer_put(&meas_buffer, &adc_data);
 10251  001A74  0E04               	movlw	high _meas_buffer
 10252  001A76  6E1B               	movwf	?i2_rd_buffer_put+1,c
 10253  001A78  0E50               	movlw	low _meas_buffer
 10254  001A7A  6E1A               	movwf	?i2_rd_buffer_put,c
 10255  001A7C  0E00               	movlw	high detection_obtain_analog_service@adc_data
 10256  001A7E  6E1D               	movwf	?i2_rd_buffer_put+3,c
 10257  001A80  0E62               	movlw	low detection_obtain_analog_service@adc_data
 10258  001A82  6E1C               	movwf	?i2_rd_buffer_put+2,c
 10259  001A84  EF50  F006         	goto	i2_rd_buffer_put	;wreg free
 10260  001A88                     __end_of_detection_obtain_analog_service:
 10261                           	opt stack 0
 10262                           tosu	equ	0xFFF
 10263                           tosh	equ	0xFFE
 10264                           tosl	equ	0xFFD
 10265                           pclath	equ	0xFFA
 10266                           tblptru	equ	0xFF8
 10267                           tblptrh	equ	0xFF7
 10268                           tblptrl	equ	0xFF6
 10269                           tablat	equ	0xFF5
 10270                           prodh	equ	0xFF4
 10271                           prodl	equ	0xFF3
 10272                           intcon	equ	0xFF2
 10273                           indf0	equ	0xFEF
 10274                           postinc0	equ	0xFEE
 10275                           fsr0h	equ	0xFEA
 10276                           fsr0l	equ	0xFE9
 10277                           wreg	equ	0xFE8
 10278                           indf1	equ	0xFE7
 10279                           postinc1	equ	0xFE6
 10280                           postdec1	equ	0xFE5
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           fsr2h	equ	0xFDA
 10287                           fsr2l	equ	0xFD9
 10288                           status	equ	0xFD8
 10289                           
 10290 ;; *************** function _adc_read *****************
 10291 ;; Defined at:
 10292 ;;		line 20 in file "src/drivers/adc.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;  adc_number      1    wreg     unsigned char 
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  adc_number      1   28[COMRAM] unsigned char 
 10297 ;; Return value:  Size  Location     Type
 10298 ;;                  2   25[COMRAM] unsigned short 
 10299 ;; Registers used:
 10300 ;;		wreg, status,2, status,0
 10301 ;; Tracked objects:
 10302 ;;		On entry : 0/0
 10303 ;;		On exit  : 0/0
 10304 ;;		Unchanged: 0/0
 10305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10306 ;;      Params:         2       0       0       0       0       0       0
 10307 ;;      Locals:         1       0       0       0       0       0       0
 10308 ;;      Temps:          1       0       0       0       0       0       0
 10309 ;;      Totals:         4       0       0       0       0       0       0
 10310 ;;Total ram usage:        4 bytes
 10311 ;; Hardware stack levels used:    1
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_detection_obtain_analog_service
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text53
 10320  0017F2                     __ptext53:
 10321                           	opt stack 0
 10322  0017F2                     _adc_read:
 10323                           	opt stack 21
 10324                           
 10325                           ;adc_read@adc_number stored from wreg
 10326  0017F2  CFE8 F01D          	movff	wreg,adc_read@adc_number
 10327                           
 10328                           ;adc.c: 21: if(ADCON0bits.CHS != adc_number)
 10329  0017F6  30C2               	rrcf	4034,w,c	;volatile
 10330  0017F8  32E8               	rrcf	wreg,f,c
 10331  0017FA  0B0F               	andlw	15
 10332  0017FC  181D               	xorwf	adc_read@adc_number,w,c
 10333  0017FE  E010               	bz	i2l5094
 10334                           
 10335                           ;adc.c: 22: {
 10336                           ;adc.c: 23: ADCON0bits.CHS = adc_number;
 10337  001800  C01D  F01C         	movff	adc_read@adc_number,??_adc_read
 10338  001804  461C               	rlncf	??_adc_read,f,c
 10339  001806  461C               	rlncf	??_adc_read,f,c
 10340  001808  50C2               	movf	4034,w,c	;volatile
 10341  00180A  181C               	xorwf	??_adc_read,w,c
 10342  00180C  0BC3               	andlw	-61
 10343  00180E  181C               	xorwf	??_adc_read,w,c
 10344  001810  6EC2               	movwf	4034,c	;volatile
 10345  001812  F000               	nop		;# 
 10346  001814  F000               	nop		;# 
 10347  001816  F000               	nop		;# 
 10348  001818  F000               	nop		;# 
 10349  00181A  F000               	nop		;# 
 10350  00181C  F000               	nop		;# 
 10351  00181E  F000               	nop		;# 
 10352  001820                     i2l5094:
 10353                           
 10354                           ;adc.c: 25: }
 10355                           ;adc.c: 26: ADCON0bits.GO_nDONE = TRUE;
 10356  001820  82C2               	bsf	4034,1,c	;volatile
 10357                           
 10358                           ;adc.c: 27: while (GODONE) {asm(" nop");asm(" nop");}
 10359  001822  D002               	goto	i2l225
 10360  001824                     i2l226:
 10361  001824  F000               	nop		;# 
 10362  001826  F000               	nop		;# 
 10363  001828                     i2l225:
 10364  001828  B2C2               	btfsc	4034,1,c	;volatile
 10365  00182A  D7FC               	goto	i2l226
 10366                           
 10367                           ;adc.c: 28: ADIF = FALSE;
 10368  00182C  9C9E               	bcf	3998,6,c	;volatile
 10369                           
 10370                           ;adc.c: 29: return ADRES;
 10371  00182E  CFC3 F01A          	movff	4035,?_adc_read	;volatile
 10372  001832  CFC4 F01B          	movff	4036,?_adc_read+1	;volatile
 10373  001836  0012               	return	
 10374  001838                     __end_of_adc_read:
 10375                           	opt stack 0
 10376                           tosu	equ	0xFFF
 10377                           tosh	equ	0xFFE
 10378                           tosl	equ	0xFFD
 10379                           pclath	equ	0xFFA
 10380                           tblptru	equ	0xFF8
 10381                           tblptrh	equ	0xFF7
 10382                           tblptrl	equ	0xFF6
 10383                           tablat	equ	0xFF5
 10384                           prodh	equ	0xFF4
 10385                           prodl	equ	0xFF3
 10386                           intcon	equ	0xFF2
 10387                           indf0	equ	0xFEF
 10388                           postinc0	equ	0xFEE
 10389                           fsr0h	equ	0xFEA
 10390                           fsr0l	equ	0xFE9
 10391                           wreg	equ	0xFE8
 10392                           indf1	equ	0xFE7
 10393                           postinc1	equ	0xFE6
 10394                           postdec1	equ	0xFE5
 10395                           fsr1h	equ	0xFE2
 10396                           fsr1l	equ	0xFE1
 10397                           indf2	equ	0xFDF
 10398                           postinc2	equ	0xFDE
 10399                           postdec2	equ	0xFDD
 10400                           fsr2h	equ	0xFDA
 10401                           fsr2l	equ	0xFD9
 10402                           status	equ	0xFD8
 10403                           
 10404 ;; *************** function i2_rd_buffer_put *****************
 10405 ;; Defined at:
 10406 ;;		line 148 in file "src/modules/rd_buffer.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  rd_buffer_pu    2   25[COMRAM] PTR struct .
 10409 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10410 ;;  rd_buffer_pu    2   27[COMRAM] PTR unsigned char 
 10411 ;;		 -> STR_4(6), STR_3(6), STR_2(5), STR_1(5), 
 10412 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;  rd_buffer_pu    2   40[COMRAM] int 
 10415 ;;  rd_buffer_pu    2   38[COMRAM] int 
 10416 ;;  rd_buffer_pu    2   35[COMRAM] PTR volatile unsigned ch
 10417 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 10418 ;;  rd_buffer_pu    1   37[COMRAM] unsigned char 
 10419 ;;  rd_buffer_pu    1    0        unsigned char 
 10420 ;; Return value:  Size  Location     Type
 10421 ;;                  1    wreg      unsigned char 
 10422 ;; Registers used:
 10423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 10424 ;; Tracked objects:
 10425 ;;		On entry : F/0
 10426 ;;		On exit  : 0/0
 10427 ;;		Unchanged: FFFFFFF0/0
 10428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10429 ;;      Params:         4       0       0       0       0       0       0
 10430 ;;      Locals:         8       0       0       0       0       0       0
 10431 ;;      Temps:          5       0       0       0       0       0       0
 10432 ;;      Totals:        17       0       0       0       0       0       0
 10433 ;;Total ram usage:       17 bytes
 10434 ;; Hardware stack levels used:    1
 10435 ;; This function calls:
 10436 ;;		Nothing
 10437 ;; This function is called by:
 10438 ;;		_serialport_service
 10439 ;;		_detection_obtain_analog_service
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           	psect	text54
 10444  000CA0                     __ptext54:
 10445                           	opt stack 0
 10446  000CA0                     i2_rd_buffer_put:
 10447                           	opt stack 21
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;rd_buffer.c: 150: SIZE sz ;
 10451                           ;rd_buffer.c: 151: sz = pbuffer->head.last - pbuffer->head.first;
 10452                           
 10453                           ; BSR set to: 0
 10454  000CA0  EE20 F002          	lfsr	2,2
 10455  000CA4  D891               	call	PL42	;call to abstracted procedure
 10456  000CA6  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10457  000CAA  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10458  000CAE  CFDE F020          	movff	postinc2,??i2_rd_buffer_put+2
 10459  000CB2  CFDD F021          	movff	postdec2,??i2_rd_buffer_put+3
 10460  000CB6  501E               	movf	??i2_rd_buffer_put,w,c
 10461  000CB8  5C20               	subwf	??i2_rd_buffer_put+2,w,c
 10462  000CBA  6E27               	movwf	i2rd_buffer_put@sz,c
 10463  000CBC  501F               	movf	??i2_rd_buffer_put+1,w,c
 10464  000CBE  5821               	subwfb	??i2_rd_buffer_put+3,w,c
 10465  000CC0  6E28               	movwf	i2rd_buffer_put@sz+1,c
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;rd_buffer.c: 152: this_contains_crlf |= (((CHAR)*prec) == '\n') || (((CHAR)*prec) == '\
      +                          r');
 10469  000CC2  0E01               	movlw	1
 10470  000CC4  6E26               	movwf	i2_rd_buffer_put$462,c
 10471                           
 10472                           ; BSR set to: 0
 10473  000CC6  D889               	call	PL62	;call to abstracted procedure
 10474  000CC8  64EA               	cpfsgt	fsr0h,c
 10475  000CCA  D003               	bra	i2u544_47
 10476  000CCC  6EEA               	movwf	fsr0h,c
 10477  000CCE  50EF               	movf	indf0,w,c
 10478  000CD0  D003               	bra	i2u544_40
 10479  000CD2                     i2u544_47:
 10480  000CD2  6EF7               	movwf	tblptrh,c
 10481  000CD4  0008               	tblrd		*
 10482  000CD6  50F5               	movf	tablat,w,c
 10483  000CD8                     i2u544_40:
 10484  000CD8  0A0A               	xorlw	10
 10485  000CDA  E00C               	bz	i2l5338
 10486  000CDC  D87E               	call	PL62	;call to abstracted procedure
 10487  000CDE  64EA               	cpfsgt	fsr0h,c
 10488  000CE0  D003               	bra	i2u546_47
 10489  000CE2  6EEA               	movwf	fsr0h,c
 10490  000CE4  50EF               	movf	indf0,w,c
 10491  000CE6  D003               	bra	i2u546_40
 10492  000CE8                     i2u546_47:
 10493  000CE8  6EF7               	movwf	tblptrh,c
 10494  000CEA  0008               	tblrd		*
 10495  000CEC  50F5               	movf	tablat,w,c
 10496  000CEE                     i2u546_40:
 10497  000CEE  0A0D               	xorlw	13
 10498  000CF0  A4D8               	btfss	status,2,c
 10499  000CF2  6A26               	clrf	i2_rd_buffer_put$462,c
 10500  000CF4                     i2l5338:
 10501  000CF4  5026               	movf	i2_rd_buffer_put$462,w,c
 10502  000CF6  0100               	movlb	0	; () banked
 10503  000CF8  13C5               	iorwf	_this_contains_crlf& (0+255),f,b
 10504                           
 10505                           ; BSR set to: 0
 10506                           ;rd_buffer.c: 154: if(sz < 0 ) {
 10507  000CFA  AE28               	btfss	i2rd_buffer_put@sz+1,7,c
 10508  000CFC  D00A               	goto	i2l283
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;rd_buffer.c: 155: sz += pbuffer->head.size;
 10512  000CFE  EE20 F004          	lfsr	2,4
 10513  000D02  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10514  000D04  26D9               	addwf	fsr2l,f,c
 10515  000D06  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10516  000D08  22DA               	addwfc	fsr2h,f,c
 10517  000D0A  50DE               	movf	postinc2,w,c
 10518  000D0C  2627               	addwf	i2rd_buffer_put@sz,f,c
 10519  000D0E  50DD               	movf	postdec2,w,c
 10520  000D10  2228               	addwfc	i2rd_buffer_put@sz+1,f,c
 10521  000D12                     i2l283:
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;rd_buffer.c: 156: }
 10525                           ;rd_buffer.c: 157: if(sz < (pbuffer->head.size - 1))
 10526  000D12  EE20 F004          	lfsr	2,4
 10527  000D16  D858               	call	PL42	;call to abstracted procedure
 10528  000D18  0EFF               	movlw	255
 10529  000D1A  241E               	addwf	??i2_rd_buffer_put,w,c
 10530  000D1C  6E20               	movwf	(??i2_rd_buffer_put+2)& (0+255),c
 10531  000D1E  0EFF               	movlw	255
 10532  000D20  201F               	addwfc	??i2_rd_buffer_put+1,w,c
 10533  000D22  6E21               	movwf	(??i2_rd_buffer_put+3)& (0+255),c
 10534  000D24  5028               	movf	i2rd_buffer_put@sz+1,w,c
 10535  000D26  0A80               	xorlw	128
 10536  000D28  6E22               	movwf	(??i2_rd_buffer_put+4)& (0+255),c
 10537  000D2A  5020               	movf	??i2_rd_buffer_put+2,w,c
 10538  000D2C  5C27               	subwf	i2rd_buffer_put@sz,w,c
 10539  000D2E  5021               	movf	??i2_rd_buffer_put+3,w,c
 10540  000D30  0A80               	xorlw	128
 10541  000D32  5822               	subwfb	(??i2_rd_buffer_put+4)& (0+255),w,c
 10542  000D34  B0D8               	btfsc	status,0,c
 10543  000D36  0012               	return	
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;rd_buffer.c: 158: {
 10547                           ;rd_buffer.c: 159: INT ind = pbuffer->head.last;
 10548  000D38  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10549  000D3C  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10550  000D40  CFDE F029          	movff	postinc2,i2rd_buffer_put@ind
 10551  000D44  CFDD F02A          	movff	postdec2,i2rd_buffer_put@ind+1
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;rd_buffer.c: 160: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
 10555  000D48  C01A  F01E         	movff	i2rd_buffer_put@pbuffer,??i2_rd_buffer_put
 10556  000D4C  C01B  F01F         	movff	i2rd_buffer_put@pbuffer+1,??i2_rd_buffer_put+1
 10557  000D50  5029               	movf	i2rd_buffer_put@ind,w,c
 10558  000D52  261E               	addwf	??i2_rd_buffer_put,f,c
 10559  000D54  502A               	movf	i2rd_buffer_put@ind+1,w,c
 10560  000D56  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 10561  000D58  0E06               	movlw	6
 10562  000D5A  261E               	addwf	??i2_rd_buffer_put,f,c
 10563  000D5C  0E00               	movlw	0
 10564  000D5E  221F               	addwfc	??i2_rd_buffer_put+1,f,c
 10565  000D60  C01E  F024         	movff	??i2_rd_buffer_put,i2rd_buffer_put@mes_rec
 10566  000D64  C01F  F025         	movff	??i2_rd_buffer_put+1,i2rd_buffer_put@mes_rec+1
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;rd_buffer.c: 161: (*mes_rec) = (*prec);
 10570  000D68  C01C  FFF6         	movff	i2rd_buffer_put@prec,tblptrl
 10571  000D6C  C01D  FFF7         	movff	i2rd_buffer_put@prec+1,tblptrh
 10572  000D70  6AF8               	clrf	tblptru,c
 10573  000D72  C024  FFD9         	movff	i2rd_buffer_put@mes_rec,fsr2l
 10574  000D76  C025  FFDA         	movff	i2rd_buffer_put@mes_rec+1,fsr2h
 10575  000D7A  0E05               	movlw	(high __ramtop+-1)
 10576  000D7C  64F7               	cpfsgt	tblptrh,c
 10577  000D7E  D003               	bra	i2u550_47
 10578  000D80  0008               	tblrd		*
 10579  000D82  50F5               	movf	tablat,w,c
 10580  000D84  D005               	bra	i2u550_40
 10581  000D86                     i2u550_47:
 10582  000D86  CFF6 FFE9          	movff	tblptrl,fsr0l
 10583  000D8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 10584  000D8E  50EF               	movf	indf0,w,c
 10585  000D90                     i2u550_40:
 10586  000D90  6EDF               	movwf	indf2,c
 10587                           
 10588                           ;rd_buffer.c: 162: ind++;
 10589  000D92  4A29               	infsnz	i2rd_buffer_put@ind,f,c
 10590  000D94  2A2A               	incf	i2rd_buffer_put@ind+1,f,c
 10591                           
 10592                           ;rd_buffer.c: 164: if(ind == pbuffer->head.size ) {
 10593  000D96  EE20 F004          	lfsr	2,4
 10594  000D9A  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10595  000D9C  26D9               	addwf	fsr2l,f,c
 10596  000D9E  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10597  000DA0  22DA               	addwfc	fsr2h,f,c
 10598  000DA2  52DE               	movf	postinc2,f,c
 10599  000DA4  502A               	movf	i2rd_buffer_put@ind+1,w,c
 10600  000DA6  18DD               	xorwf	postdec2,w,c
 10601  000DA8  C029  FFE8         	movff	i2rd_buffer_put@ind,wreg
 10602  000DAC  B4D8               	btfsc	status,2,c
 10603  000DAE  18DF               	xorwf	indf2,w,c
 10604  000DB0  E102               	bnz	i2l5356
 10605                           
 10606                           ;rd_buffer.c: 165: ind = 0;
 10607  000DB2  6A29               	clrf	i2rd_buffer_put@ind,c
 10608  000DB4  6A2A               	clrf	i2rd_buffer_put@ind+1,c
 10609  000DB6                     i2l5356:
 10610                           
 10611                           ;rd_buffer.c: 166: }
 10612                           ;rd_buffer.c: 167: pbuffer->head.last = ind;
 10613  000DB6  C01A  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 10614  000DBA  C01B  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 10615  000DBE  C029  FFDE         	movff	i2rd_buffer_put@ind,postinc2
 10616  000DC2  C02A  FFDD         	movff	i2rd_buffer_put@ind+1,postdec2
 10617  000DC6  0012               	return	
 10618  000DC8                     __end_ofi2_rd_buffer_put:
 10619                           	opt stack 0
 10620  000DC8                     PL42:
 10621                           	opt stack 21
 10622  000DC8  501A               	movf	i2rd_buffer_put@pbuffer,w,c
 10623  000DCA  26D9               	addwf	fsr2l,f,c
 10624  000DCC  501B               	movf	i2rd_buffer_put@pbuffer+1,w,c
 10625  000DCE  22DA               	addwfc	fsr2h,f,c
 10626  000DD0  CFDE F01E          	movff	postinc2,??i2_rd_buffer_put
 10627  000DD4  CFDD F01F          	movff	postdec2,??i2_rd_buffer_put+1
 10628  000DD8  0012               	return	
 10629  000DDA                     __end_ofPL42:
 10630                           	opt stack 0
 10631  000DDA                     PL62:
 10632                           	opt stack 21
 10633  000DDA  501C               	movf	i2rd_buffer_put@prec,w,c
 10634  000DDC  6EF6               	movwf	tblptrl,c
 10635  000DDE  6EE9               	movwf	fsr0l,c
 10636  000DE0  0E05               	movlw	(high __ramtop+-1)
 10637  000DE2  6EEA               	movwf	fsr0h,c
 10638  000DE4  501D               	movf	i2rd_buffer_put@prec+1,w,c
 10639  000DE6  0012               	return	
 10640  000DE8                     __end_ofPL62:
 10641                           	opt stack 0
 10642                           tosu	equ	0xFFF
 10643                           tosh	equ	0xFFE
 10644                           tosl	equ	0xFFD
 10645                           pclath	equ	0xFFA
 10646                           tblptru	equ	0xFF8
 10647                           tblptrh	equ	0xFF7
 10648                           tblptrl	equ	0xFF6
 10649                           tablat	equ	0xFF5
 10650                           prodh	equ	0xFF4
 10651                           prodl	equ	0xFF3
 10652                           intcon	equ	0xFF2
 10653                           indf0	equ	0xFEF
 10654                           postinc0	equ	0xFEE
 10655                           fsr0h	equ	0xFEA
 10656                           fsr0l	equ	0xFE9
 10657                           wreg	equ	0xFE8
 10658                           indf1	equ	0xFE7
 10659                           postinc1	equ	0xFE6
 10660                           postdec1	equ	0xFE5
 10661                           fsr1h	equ	0xFE2
 10662                           fsr1l	equ	0xFE1
 10663                           indf2	equ	0xFDF
 10664                           postinc2	equ	0xFDE
 10665                           postdec2	equ	0xFDD
 10666                           fsr2h	equ	0xFDA
 10667                           fsr2l	equ	0xFD9
 10668                           status	equ	0xFD8
 10669                           tosu	equ	0xFFF
 10670                           tosh	equ	0xFFE
 10671                           tosl	equ	0xFFD
 10672                           pclath	equ	0xFFA
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           intcon	equ	0xFF2
 10680                           indf0	equ	0xFEF
 10681                           postinc0	equ	0xFEE
 10682                           fsr0h	equ	0xFEA
 10683                           fsr0l	equ	0xFE9
 10684                           wreg	equ	0xFE8
 10685                           indf1	equ	0xFE7
 10686                           postinc1	equ	0xFE6
 10687                           postdec1	equ	0xFE5
 10688                           fsr1h	equ	0xFE2
 10689                           fsr1l	equ	0xFE1
 10690                           indf2	equ	0xFDF
 10691                           postinc2	equ	0xFDE
 10692                           postdec2	equ	0xFDD
 10693                           fsr2h	equ	0xFDA
 10694                           fsr2l	equ	0xFD9
 10695                           status	equ	0xFD8
 10696                           
 10697                           	psect	param0
 10698  0000                     tosu	equ	0xFFF
 10699                           tosh	equ	0xFFE
 10700                           tosl	equ	0xFFD
 10701                           pclath	equ	0xFFA
 10702                           tblptru	equ	0xFF8
 10703                           tblptrh	equ	0xFF7
 10704                           tblptrl	equ	0xFF6
 10705                           tablat	equ	0xFF5
 10706                           prodh	equ	0xFF4
 10707                           prodl	equ	0xFF3
 10708                           intcon	equ	0xFF2
 10709                           indf0	equ	0xFEF
 10710                           postinc0	equ	0xFEE
 10711                           fsr0h	equ	0xFEA
 10712                           fsr0l	equ	0xFE9
 10713                           wreg	equ	0xFE8
 10714                           indf1	equ	0xFE7
 10715                           postinc1	equ	0xFE6
 10716                           postdec1	equ	0xFE5
 10717                           fsr1h	equ	0xFE2
 10718                           fsr1l	equ	0xFE1
 10719                           indf2	equ	0xFDF
 10720                           postinc2	equ	0xFDE
 10721                           postdec2	equ	0xFDD
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           tosu	equ	0xFFF
 10726                           tosh	equ	0xFFE
 10727                           tosl	equ	0xFFD
 10728                           pclath	equ	0xFFA
 10729                           tblptru	equ	0xFF8
 10730                           tblptrh	equ	0xFF7
 10731                           tblptrl	equ	0xFF6
 10732                           tablat	equ	0xFF5
 10733                           prodh	equ	0xFF4
 10734                           prodl	equ	0xFF3
 10735                           intcon	equ	0xFF2
 10736                           indf0	equ	0xFEF
 10737                           postinc0	equ	0xFEE
 10738                           fsr0h	equ	0xFEA
 10739                           fsr0l	equ	0xFE9
 10740                           wreg	equ	0xFE8
 10741                           indf1	equ	0xFE7
 10742                           postinc1	equ	0xFE6
 10743                           postdec1	equ	0xFE5
 10744                           fsr1h	equ	0xFE2
 10745                           fsr1l	equ	0xFE1
 10746                           indf2	equ	0xFDF
 10747                           postinc2	equ	0xFDE
 10748                           postdec2	equ	0xFDD
 10749                           fsr2h	equ	0xFDA
 10750                           fsr2l	equ	0xFD9
 10751                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    633
    Data        0
    BSS         1077
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      66
    BANK0           160     76     148
    BANK1           256      4     212
    BANK2           256      0     207
    BANK3           256      0     254
    BANK4           256      0     187
    BANK5           256      0     127

Pointer List with Targets:

    ?___awmod	int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    on_parameter_found@p	PTR const void  size(3) Largest target is 32767
		 -> parameter_text(BANK3[127]), parameter_value(BANK3[127]), ROM(CODE[32767]), 

    ?_string_utils_from_hex	int  size(1) Largest target is 0

    ?_string_utils_strchr	int  size(1) Largest target is 0

    ?_string_utils_split	int  size(1) Largest target is 0

    ?_string_utils_copy	int  size(1) Largest target is 0

    ?_string_utils_strlen	int  size(1) Largest target is 0

    ?_syntax_string	int  size(1) Largest target is 0

    ?_rd_buffer_cnt	int  size(1) Largest target is 0

    ?_adc_read	unsigned short  size(1) Largest target is 0

    events	volatile PTR FTN()void [8] size(2) Largest target is 0
		 -> detection_task(), serialport_task(), 

    pd_add_value@d	PTR volatile struct . size(2) Largest target is 101
		 -> pd_detector(BANK1[101]), 

    cla_add_value@d	PTR volatile struct . size(1) Largest target is 21
		 -> cla_detector(BANK0[21]), 

    sp__syntax_as_bytearray	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK3[127]), 

    sp__syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    syntax_string@pchain	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    syntax_string@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK2[100]), 

    this_parse_parameter@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    this_parse_parameter@pvar	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_parameter@pstr	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_command@pname	PTR const unsigned char  size(2) Largest target is 105
		 -> syx_cmd_list(CODE[105]), 

    this_parse_command@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_variable_load_from_text@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_from_hex@pdata	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK3[127]), 

    string_utils_from_hex@phex_str	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK3[127]), 

    string_utils_strncmp@pstr2	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), syx_cmd_list(CODE[105]), 

    string_utils_strncmp@pstr1	PTR const unsigned char  size(2) Largest target is 528
		 -> this_buf(BANK5[127]), syx_param_list(CODE[528]), 

    string_utils_strchr@pbuf	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_split@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK2[100]), 

    string_utils_copy@pdst	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), parameter_value(BANK3[127]), 

    string_utils_copy@psrc	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_strlen@pstr	PTR const unsigned char  size(2) Largest target is 528
		 -> parameter_value(BANK3[127]), syx_param_list(CODE[528]), serialport_buffer(BANK2[100]), 

    serialport_write@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[5]), STR_1(CODE[5]), 
		 -> parameter_text(BANK3[127]), 

    S494$callback_function	PTR FTN()void  size(1) Largest target is 0

    timers_list.callback_function	PTR FTN()void  size(1) Largest target is 0

    rd_buffer_getn@prec	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK2[100]), 

    rd_buffer_getn@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_put@mes_rec	PTR volatile unsigned char  size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_put@prec	PTR unsigned char  size(2) Largest target is 127
		 -> STR_4(CODE[6]), STR_3(CODE[6]), STR_2(CODE[5]), STR_1(CODE[5]), 
		 -> detection_obtain_analog_service@adc_data(BANK0[1]), parameter_text(BANK3[127]), putch@byte(COMRAM[1]), serialport_service@byte(BANK0[1]), 

    rd_buffer_put@pbuffer	PTR struct . size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_get@prec	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK2[100]), rd_buffer_readline@ch(BANK0[1]), 

    rd_buffer_get@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_cnt@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_readline@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_rx_buffer(BANK2[107]), 

    rd_buffer_readline@psize	PTR int  size(1) Largest target is 2
		 -> serialport_task@size(BANK0[2]), 

    rd_buffer_readline@pdata	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK2[100]), 

    rd_buffer_init@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    uart_getc@pbyte	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_service@byte(BANK0[1]), 

    uart_puts@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> STR_5(CODE[6]), serialport_buffer(BANK2[100]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr_high in COMRAM

    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put
    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put

Critical Paths under _main in BANK0

    _main->_serialport_task
    _serialport_task->_syntax_string
    _rd_buffer_readline->_rd_buffer_get
    _rd_buffer_getn->_rd_buffer_get
    _syntax_string->_this_parse_parameter
    _this_parse_command->_string_utils_strncmp
    _this_parse_parameter->_this_variable_load_from_text
    _string_utils_strncmp->___wmul
    _this_variable_load_from_text->_string_utils_from_hex
    _string_utils_from_hex->_string_utils_strlen
    _string_utils_strlen->___wmul
    _on_parameter_found->_set_parameter
    _on_parameter_found->_get_parameter
    _detection_task->_pd_add_value
    _pd_add_value->___awdiv
    _set_parameter->_serialport_write
    _get_parameter->_serialport_write
    _serialport_write->_rd_buffer_put
    _startup->_serialport_startup
    _sysclk_init->_sysclk_setup_intosc
    _uart_init->_uart_set_baudrate
    _uart_puts->_uart_putc
    _serialport_startup->_rd_buffer_init

Critical Paths under _isr_high in BANK0

    interrupts@isr_high->_serialport_service

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   23688
                                              0 BANK1      4     4      0
                           _delay_ms
                            _startup
                     _detection_task
                    _serialport_task
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2      31
                                             12 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serialport_task                                      2     2      0   16725
                                             74 BANK0      2     2      0
                 _rd_buffer_readline
                      _syntax_string
                      _rd_buffer_cnt
                     _rd_buffer_getn
                          _uart_puts
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_readline                                   6     1      5     616
                                             23 BANK0      6     1      5
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_cnt                                        8     6      2     161
                                             12 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_getn                                       9     3      6     561
                                             23 BANK0      9     3      6
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_get                                       11     7      4     418
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _syntax_string                                       14    11      3   14891
                                             60 BANK0     14    11      3
                _string_utils_strlen
                 _string_utils_split
                 _this_parse_command
                 _on_parameter_found
               _this_parse_parameter
                _string_utils_strchr
 ---------------------------------------------------------------------------------
 (3) _string_utils_split                                  13     6      7     467
                                             12 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _this_parse_command                                  10     8      2    1438
                                             32 BANK0     10     8      2
                _string_utils_strchr
                             ___wmul
               _string_utils_strncmp
 ---------------------------------------------------------------------------------
 (3) _this_parse_parameter                                17    15      2    3975
                                             43 BANK0     17    15      2
                _string_utils_strchr
                  _string_utils_copy
                             ___wmul
                _string_utils_strlen
               _string_utils_strncmp
       _this_variable_load_from_text
 ---------------------------------------------------------------------------------
 (4) _string_utils_strncmp                                14     7      7     591
                                             18 BANK0     14     7      7
         _string_utils_is_upper_case
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_upper_case                           2     2      0      99
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _this_variable_load_from_text                         6     2      4    1373
                                             37 BANK0      6     2      4
                _string_utils_strchr
                  _string_utils_copy
              _string_utils_from_hex
 ---------------------------------------------------------------------------------
 (5) _string_utils_copy                                    9     2      7     177
                                             12 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (3) _string_utils_strchr                                 11     7      4     291
                                             12 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (5) _string_utils_from_hex                               13     9      4     716
                                             24 BANK0     13     9      4
                _string_utils_strlen
               _symb_from_hex_to_bin
 ---------------------------------------------------------------------------------
 (6) _string_utils_strlen                                  6     4      2     291
                                             18 BANK0      6     4      2
             _string_utils_is_symbol
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) _string_utils_is_symbol                               2     2      0      99
                                             12 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _symb_from_hex_to_bin                                 1     1      0     124
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _on_parameter_found                                   8     2      6    7119
                                             32 BANK0      7     1      6
                      _set_parameter
                      _get_parameter
                   _serialport_write
 ---------------------------------------------------------------------------------
 (1) _detection_task                                       3     3      0    5072
                                             43 BANK0      3     3      0
                       _pd_add_value
                      _cla_add_value
 ---------------------------------------------------------------------------------
 (2) _cla_add_value                                       13     9      4    1283
                                             12 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _pd_add_value                                        23    19      4    3755
                                             20 BANK0     23    19      4
                            ___lbmod
                            ___awdiv
                             ___wmul
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _set_parameter                                        2     2      0    2264
                                             31 BANK0      1     1      0
                    _syntax_get_text
                   _serialport_write
 ---------------------------------------------------------------------------------
 (5) _syntax_get_text                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _get_parameter                                        2     2      0    2264
                                             31 BANK0      1     1      0
                   _serialport_write
 ---------------------------------------------------------------------------------
 (4) _serialport_write                                     2     0      2    2069
                                             29 BANK0      2     0      2
                      _rd_buffer_put
                    _syntax_get_text (ARG)
 ---------------------------------------------------------------------------------
 (5) _rd_buffer_put                                       17    13      4    1787
                                             12 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (1) _startup                                              1     1      0     516
                                             19 BANK0      1     1      0
                          _gpio_init
                        _sysclk_init
                           _adc_init
                          _uart_init
                          _uart_puts
                 _serialport_startup
 ---------------------------------------------------------------------------------
 (2) _sysclk_init                                          0     0      0      31
                _sysclk_setup_intosc
 ---------------------------------------------------------------------------------
 (3) _sysclk_setup_intosc                                  1     1      0      31
                                             12 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
                  _uart_set_baudrate
 ---------------------------------------------------------------------------------
 (3) _uart_set_baudrate                                    3     0      3       0
                                             12 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            4     0      4     127
                                             13 BANK0      4     0      4
                          _uart_putc
 ---------------------------------------------------------------------------------
 (3) _uart_putc                                            1     1      0      31
                                             12 BANK0      1     1      0
                     _uart_byte_sent
 ---------------------------------------------------------------------------------
 (4) _uart_byte_sent                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialport_startup                                   2     2      0     229
                                             17 BANK0      2     2      0
                     _rd_buffer_init
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_init                                       5     1      4     192
                                             12 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     445
                                             12 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     433
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     232
                                             12 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     136
                                             12 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr_high                                             8     8      0    6655
                                             17 COMRAM     8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3485
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 (8) interrupts@isr_high                                   8     8      0    6655
                                              4 BANK0      8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    3485
                                              2 BANK0      2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0     370
                                             26 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0     100
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0     100
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    3170
                                              2 BANK0      1     1      0
                           _adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _adc_read                                            4     2      2     140
                                             25 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    17    13      4    2840
                                             25 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _startup
     _gpio_init
     _sysclk_init
       _sysclk_setup_intosc
     _adc_init
     _uart_init
       _uart_set_baudrate
     _uart_puts
       _uart_putc
         _uart_byte_sent
     _serialport_startup
       _rd_buffer_init
   _detection_task
     _pd_add_value
       ___lbmod
       ___awdiv
       ___wmul
       ___awmod
     _cla_add_value
   _serialport_task
     _rd_buffer_readline
       _rd_buffer_get
     _syntax_string
       _string_utils_strlen
         _string_utils_is_symbol
         ___wmul (ARG)
       _string_utils_split
       _this_parse_command
         _string_utils_strchr
         ___wmul
         _string_utils_strncmp
           _string_utils_is_upper_case
           ___wmul (ARG)
       _on_parameter_found
         _set_parameter
           _syntax_get_text
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _get_parameter
           _serialport_write
             _rd_buffer_put
             _syntax_get_text (ARG)
         _serialport_write
           _rd_buffer_put
           _syntax_get_text (ARG)
       _this_parse_parameter
         _string_utils_strchr
         _string_utils_copy
         ___wmul
         _string_utils_strlen
           _string_utils_is_symbol
           ___wmul (ARG)
         _string_utils_strncmp
           _string_utils_is_upper_case
           ___wmul (ARG)
         _this_variable_load_from_text
           _string_utils_strchr
           _string_utils_copy
           _string_utils_from_hex
             _string_utils_strlen
               _string_utils_is_symbol
               ___wmul (ARG)
             _symb_from_hex_to_bin
       _string_utils_strchr
     _rd_buffer_cnt
     _rd_buffer_getn
       _rd_buffer_get
     _uart_puts
       _uart_putc
         _uart_byte_sent

 _isr_high (ROOT)
   _delay_interrupt_service
   _serialport_service
     _uart_byte_available
     _uart_getc
       _uart_error
       _uart_reset
         _uart_byte_available
         _uart_error
       _uart_byte_available
     i2_rd_buffer_put
   _detection_obtain_analog_service
     _adc_read
     i2_rd_buffer_put

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0      7F      14       49.6%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      BB      13       73.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      FE      11       99.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      CF       9       80.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4      D4       7       82.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      94       5       92.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      11       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4B1      15        0.0%
DATA                 0      0     4C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Mon Oct 12 23:28:12 2015

                ?_delay_interrupt_service 0001                    ??_this_parse_parameter 008D  
                   __end_of_syntax_string 0B42                          ?i2_rd_buffer_put 001A  
                                      PL2 04B6                                        PL4 04DE  
                                      PL6 04F2                                        PL8 0504  
                            ___awdiv@sign 0071                       ___wmul@multiplicand 006E  
                string_utils_from_hex@len 007F             string_utils_from_hex@phex_str 007A  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                                     PL10 051A                                       PL20 07E8  
                                     PL12 07B6                                       PL30 057A  
                                     PL22 07F8                                       PL14 07CC  
                                     PL40 05A2                                       PL32 09C6  
                                     PL24 0536                                       PL16 11E4  
                                     PL50 05C8                                       PL42 0DC8  
                                     PL34 1020                                       PL26 0554  
                                     PL18 07DA                                       PL60 0F6E  
                                     PL52 05D8                                       PL44 05B6  
                                     PL36 0808                                       PL28 0564  
                                     PL62 0DDA                                       PL54 09DC  
                                     PL46 0C80                                       PL38 0590  
                                     PL64 05F6                                       PL56 0C92  
                                     PL48 0B42                                       PL66 16AA  
                                     PL58 05E8                                       PL68 0602  
                                     l500 1ABE                                       l442 1706  
                                     l283 0BC8                                       l490 1AD8  
                                     l538 1004                                       l707 06A2  
                                     l645 1152                                       l830 14FE  
                                     l743 0248                                       l479 11DA  
                                     l912 17EE                                       l657 0894  
                                     l754 032A                                       l746 03D6  
                                     l827 14F4                                       l829 14F8  
                                     l758 0382                                       l972 0ED8  
                                     l982 0F6A                                       l979 0F3E  
                            __CFG_CPB$OFF 000000                __size_of_string_utils_copy 0088  
                            __CFG_CPD$OFF 000000                              __CFG_BORV$27 000000  
                            ___awmod@sign 0071                                       tosl 000FFD  
                                     wreg 000FE8                     rd_buffer_getn@pbuffer 0077  
                   __end_of_cla_add_value 07B6                              __CFG_LVP$OFF 000000  
                  __end_of_syx_param_list 7F80      __end_of_this_variable_load_from_text 1174  
   __size_of_this_variable_load_from_text 0096              _this_variable_load_from_text 10DE  
                                    l1482 19D4                                      l6004 0674  
                                    l6110 0408                                      l6102 03C0  
                                    l6030 07B4                                      l6022 0748  
                                    l6050 0172                                      l6026 0768  
                                    l6210 0EC8                                      l6300 15CA  
                                    l6124 0488                                      l6116 0438  
                                    l6132 04B4                                      l6108 03F2  
                                    l6062 0232                                      l6054 0178  
                                    l6222 0F00                                      l6320 1A06  
                                    l6312 15F2                                      l6304 15DC  
                                    l5520 18B6                                      l6128 0496  
                                    l6080 02CE                                      l6224 0F0A  
                                    l6216 0EE0                                      l6208 0EBA  
                                    l5610 0C6E                                      l6082 02E4  
                                    l6074 029A                                      l6146 1504  
                                    l6308 15E6                                      l6260 146C  
                                    l6252 1454                                      l5620 18FE  
                                    l5532 1848                                      l6148 1512  
                                    l6228 0F10                                      l6270 148A  
                                    l6262 1470                                      l6246 1444  
                                    l5702 177E                                      l6094 0370  
                                    l5454 1AE4                                      l6328 1A1E  
                                    l5480 167C                                      l6088 0314  
                                    l5800 1186                                      l5544 1878  
                                    l5640 12CC                                      l6338 19E0  
                                    l6258 1464                                      l6274 1494  
                                    l6098 039A                                      l5714 16C0  
                                    l5626 1920                                      l5538 185C  
                                    l6292 15B2                                      l5476 165C  
                                    l5804 11AE                                      l5900 113C  
                                    l5564 10D6                                      l6278 14A0  
                                    l5486 1AF2                                      l5806 11B2  
                                    l5750 13A6                                      l5910 0E0E  
                                    l5670 0A60                                      l5566 10DA  
                                    l6296 15BE                                      l6288 15A6  
                                    l5592 0BAA                                      l5904 115A  
                                    l5840 0FEC                                      l5920 0E8A  
                                    l5576 1758                                      _ADIF 007CF6  
                                    l6298 15C6                                      l5738 1336  
                                    l5746 1372                                      l5850 100C  
                                    l5922 0E8E                                      l5682 0AC8  
                                    l5836 0FDE                                      l5828 0F90  
                                    l5852 101C                                      l5924 0EB4  
                                    l5772 13F2                                      l5764 13D6  
                                    l5692 0B30                                      l5684 0AE4  
                                    l5676 0A8A                                      l5862 152C  
                                    l5846 0FFE                                      l5942 089C  
                                    l5758 13BA                                      l5678 0A94  
                                    l5686 0B0A                                      l5872 1538  
                                    l5848 1008                                      l5960 0998  
                                    l5776 1402                                      l5688 0B1A  
                                    l5698 1764                                      l5866 1532  
                                    l5858 1526                                      l5882 1226  
                                    l5946 08D0                                      l5962 099C  
                                    l5786 1418                                      l5972 18C4  
                                    l5980 18DC                                      l5964 09C2  
                                    l5974 18CA                                      l5958 0990  
                                    l5888 127A                                      l5978 18D0  
                                    l5996 0628                                      l5998 0648  
                                    STR_1 7FF5                                      STR_2 7FFA  
                                    STR_3 7FEF                                      STR_4 7FEF  
                                    STR_5 7FE9                                      _CREN 007D5C  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    u6030 135A                                      u6120 119E  
                                    u6040 1392                                      u6210 0FAA  
                                    u6220 0FC8                                      u6037 1350  
                                    u6150 11D6                                      u6127 1194  
                                    u6047 1388                                      u6217 0FA4  
                                    u6227 0FC2                                      u5620 1672  
                                    _RCIF 007CF5                                      u6157 11CC  
                                    u5640 16A2                                      u6505 077A  
                                    u5810 0C46                                      u5627 166C  
                                    u5725 1066                                      u5750 0B8A  
                                    u5647 169C                                      u6455 066C  
                                    u6375 08FC                                      u5817 0C3C  
                                    u5770 0BA2                                      u6475 06EE  
                                    u5940 17A4                                      u5757 0B84  
                                    u6495 0758                                      u5777 0B9C  
                                    u5970 16EC                                      u5947 179E  
                                    u5977 16E6                                      u6778 0F24  
                                    u6779 0F38                                      u6798 0F4A  
                                    u6799 0F5E                                      _TMR0 000FD6  
                                    _TXIF 007CF4            string_utils_is_upper_case@symb 006D  
            __end_of_symb_from_hex_to_bin 1594                              __CFG_PWRT$ON 000000  
                        ??_uart_byte_sent 006C               __size_of_string_utils_split 0084  
                        ??_rd_buffer_getn 007D                          ??_rd_buffer_init 0070  
                                    _main 0EB8                                      _pool 0033  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      indf1 000FE7  
                                    fsr1l 000FE1                                      indf2 000FDF  
                                    fsr2l 000FD9                         rd_buffer_get@last 0072  
                       rd_buffer_get@prec 006E                                      prodh 000FF4  
                                    prodl 000FF3                           _serialport_task 129C  
                                    start 00F0                             __CFG_IESO$OFF 000000  
                           __CFG_MCLRE$ON 000000                       this_parse_command@i 0088  
                     i2_rd_buffer_put$462 0026                                     ?_main 0001  
                         __end_of___awdiv 14AA                                     _ADRES 000FC3  
                         __end_of___awmod 15FC                           __end_of___lbmod 1A26  
                                   _ANSEL 000F7E                           ___awdiv@divisor 006E  
                           ?_pd_add_value 0074                                     _RC1IF 007CF5  
             this_parse_parameter@var_len 009A                                     i2l225 1828  
                                   i2l226 1824                             __CFG_WDTEN$ON 000000  
                                   i2l169 1A8A                                     i2l283 0D12  
                                   i2l933 005A                           ___awdiv@counter 0070  
                                   i2l957 00CE                                     _RCREG 000FAE  
                                   _RCSTA 000FAB                                     _SPBRG 000FAF  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                       rd_buffer_put@prec 006E                                     _TXREG 000FAD  
                                   _TXSTA 000FAC               this_parse_parameter@str_len 0093  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
 __end_of_detection_obtain_analog_service 1A88  __size_of_detection_obtain_analog_service 0020  
       ??_detection_obtain_analog_service 002B          ?_detection_obtain_analog_service 0001  
                          __CFG_EBTR1$OFF 000000           _detection_obtain_analog_service 1A68  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
            __size_of_string_utils_strchr 0070              __size_of_string_utils_strlen 005A  
                       _cla_add_value$953 0074                         _cla_add_value$954 0076  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
              string_utils_is_symbol@symb 006D                               _sysclk_init 1B80  
                                   main@i 01D3                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                      rd_buffer_get@first 0075             ?_this_variable_load_from_text 0085  
                                   status 000FD8                           __end_of_startup 17F2  
                 rd_buffer_getn@rec_count 007B                          ?_syntax_get_text 0001  
                        _serialport_write 1762                            __CFG_HFOFST$ON 000000  
                         ??_get_parameter 007F                        rd_buffer_getn@prec 0079  
              __end_ofinterrupts@isr_high 00F0                           __initialization 15FC  
                symb_from_hex_to_bin@symb 006C                 uart_set_baudrate@baudrate 006C  
                 rd_buffer_readline@pdata 0079                              __end_of_main 1ADC  
                 rd_buffer_readline@psize 007B                 rd_buffer_readline@pbuffer 0077  
                 this_parse_command@found 0087               __size_of_rd_buffer_readline 0042  
                 this_parse_command@pname 0084                        rd_buffer_init@size 006E  
                          ??_pd_add_value 0078                                    ??_main 01D0  
                           __activetblptr 000002              __size_of_uart_byte_available 0008  
          _string_utils_is_upper_case$730 006C                       serialport_task@size 00AA  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                          ___awdiv@dividend 006C  
                 __end_of_serialport_task 1326                                    _ANSELH 000F7F  
                                  _GODONE 007E11                          __end_of_adc_init 1B12  
                        __end_of_adc_read 1838                __end_of_serialport_service 196E  
                                  i2l5410 00AA                                    i2l5420 00C8  
                                  i2l5412 00B2                                    i2l5404 009C  
                                  i2l5422 00CC                                    i2l5414 00BA  
                                  i2l5406 00A4                                    i2l5094 1820  
                                  i2l5086 1B52                                    i2l5416 00BE  
                                  i2l5408 00A8                                    i2l5280 003E  
                                  i2l5272 0028                                    i2l5418 00C0  
                                  i2l5338 0CF4                                    i2l5370 1A9A  
                                  i2l5290 0058                                    i2l5282 0046  
                                  i2l5274 0030                                    i2l5356 0DB6  
                                  i2l5284 004A                                    i2l5276 0034  
                                  i2l5390 19CC                                    i2l5382 19B4  
                                  i2l5286 004C                                    i2l5278 0036  
                                  i2l5368 1A92                                    i2l5288 0054  
             string_utils_split@delimeter 0072                                    _OSCCON 000FD3  
                   rd_buffer_init@pbuffer 006C                __end_of_serialport_startup 19A0  
                                  _STATUS 000FD8                             main@event_old 01D1  
                        __end_of_delay_ms 1AEE                  this_parse_parameter@pval 0095  
                this_parse_parameter@pvar 0091                  this_parse_parameter@pstr 008B  
                      _this_parse_command 0DE8                            __CFG_XINST$OFF 000000  
                       get_parameter@p_id 0001             __size_of_string_utils_strncmp 00A4  
                       set_parameter@p_id 0001                                    ___wmul 19D0  
                               ??___awdiv 0070                            __CFG_STVREN$ON 000000  
                               ??___awmod 0070                                 ??___lbmod 006D  
                     ?_this_parse_command 0080               __end_of_sysclk_setup_intosc 1B46  
                                  _events 00AC                                    clear_0 1602  
                                  clear_1 160E                                    clear_2 161A  
                                  clear_3 1626                                    clear_4 1632  
                                  clear_5 163E                                    clear_6 164A  
                        ___awdiv@quotient 0072                           ___awmod@divisor 006E  
                         ___awmod@counter 0070                          __end_of_isr_high 007C  
                    _symb_from_hex_to_bin 1520                  serialport_startup@result 0072  
                            _syx_cmd_list 7F80                         _serialport_buffer 026B  
                            __mediumconst 7D70                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                     rd_buffer_get@result 0074                    __size_of_rd_buffer_get 00A8  
                  __size_of_rd_buffer_cnt 0052                    __size_of_rd_buffer_put 012E  
                               ??_startup 0073                   string_utils_strchr@pbuf 006C  
                    ??_this_parse_command 0082                           ___lbmod@divisor 006C  
                              __accesstop 0060                   __end_of__initialization 1650  
                         ___lbmod@counter 006E                           __CFG_PBADEN$OFF 000000  
                 string_utils_strlen@pstr 0072            ??_this_variable_load_from_text 0089  
                 string_utils_strncmp@len 0076                   string_utils_strncmp@pos 007C  
                          __pcstackCOMRAM 0001                              _cla_detector 00C9  
                        cla_add_value@val 006C                   detection_task@alarm_cla 00C7  
                 detection_task@alarm_wav 00C8                     __end_of_set_parameter 1A48  
                              __end_ofPL2 04DE                                __end_ofPL4 04F2  
                              __end_ofPL6 0504                                __end_ofPL8 051A  
                   ?_symb_from_hex_to_bin 0001                     this_parse_command@len 0082  
        __size_of_delay_interrupt_service 0012          this_variable_load_from_text@pval 0085  
             __size_of_on_parameter_found 003E                     _string_utils_from_hex 1208  
                         __CFG_LPT1OSC$ON 000000                          ?_serialport_task 0001  
                              __pbssBANK0 00AC                                __pbssBANK1 0100  
                              __pbssBANK2 0200                                __pbssBANK3 0300  
                              __pbssBANK4 0400                                __pbssBANK5 0500  
                      __size_of_gpio_init 0012                      __end_of_pd_add_value 04B6  
                 __size_of_detection_task 0076                         fp__detection_task 00F0  
                     _string_utils_strchr 1174                       _string_utils_strlen 16B6  
                           _rd_buffer_get 1036                             _rd_buffer_cnt 1710  
                           _rd_buffer_put 0B52                                   ?___wmul 006C  
                                 _BAUDCON 000FB8                                   _BAUDCTL 000FB8  
                  i2rd_buffer_put@mes_rec 0024             __size_of_this_parse_parameter 01B0  
                  i2rd_buffer_put@pbuffer 001A   detection_obtain_analog_service@adc_data 0062  
                               ?_adc_init 0001                                 ?_adc_read 001A  
         this_variable_load_from_text@len 0089                  __end_of_serialport_write 17AC  
                     syntax_string@chains 00A6                        __size_of_uart_getc 0030  
                      __size_of_uart_init 0020                        __size_of_uart_putc 0012  
                     syntax_string@pchain 00A8                        __size_of_uart_puts 0050  
                __size_ofi2_rd_buffer_put 0128                       syntax_string@result 00A2  
                    ?_string_utils_strchr 006C                                 ?_delay_ms 006C  
                    ?_string_utils_strlen 0072                           __CFG_WDTPS$1024 000000  
                              _command_id 00BC                              ?_sysclk_init 0001  
              __end_of_string_utils_split 1432                         _rd_buffer_put$462 0078  
                  __size_of_syntax_string 0158                  string_utils_split@chains 0075  
                ??_string_utils_is_symbol 006C                       _uart_byte_available 1B78  
                               ?_isr_high 0001                                   __Hparam 0000  
                                 __Lparam 0000                            ?_rd_buffer_get 006C  
                          ?_rd_buffer_cnt 006C                     this_parse_parameter@i 0098  
                          ?_rd_buffer_put 006C                                   ___awdiv 1432  
                                 ___awmod 1594                                   ___lbmod 19FC  
                              _event_miss 002B                           __size_of___wmul 002C  
                  __size_of_cla_add_value 01AC                    ??_symb_from_hex_to_bin 006C  
                  serialport_service@byte 0063                      serialport_write@pstr 007D  
                                 __pcinit 15FC                                   __ramtop 0600  
                              ??_adc_init 006C                                ??_adc_read 001C  
                                 __ptext0 0EB8                                   __ptext1 1ADC  
                                 __ptext2 14AA                                   __ptext3 129C  
                                 __ptext4 1838                                   __ptext5 1710  
                                 __ptext6 18F8                                   __ptext7 1036  
                                 __ptext8 09EA                                   __ptext9 13AE  
                       __end_of_gpio_init 1B24                      ?_uart_byte_available 0001  
                      interrupts@isr_high 007C                          ___awmod@dividend 006C  
                   ??_string_utils_strchr 0070                     ??_string_utils_strlen 0074  
                              ??_delay_ms 006E                    ?_string_utils_from_hex 0078  
                                 _startup 17AC                       ?interrupts@isr_high 0001  
                    end_of_initialization 1650                         i2rd_buffer_put@sz 0027  
                           __Lmediumconst 7D70                                ??_isr_high 0012  
                       __end_of_uart_getc 19D0                         __end_of_uart_init 1A68  
                       __end_of_uart_putc 1B00                         __end_of_uart_puts 16AA  
                   __end_of_get_parameter 1B64                      rd_buffer_get@pbuffer 006C  
              __end_of_rd_buffer_readline 187A                                 _RCSTAbits 000FAB  
                                 postdec1 000FE5                                   postdec2 000FDD  
                     _this_case_sensitive 00C4                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                 __size_of_uart_byte_sent 0008                        _serialport_service 1934  
                    rd_buffer_cnt@pbuffer 006C                  __size_of_syntax_get_text 000C  
                    ??interrupts@isr_high 0064                   __size_of_rd_buffer_getn 003C  
                 __size_of_rd_buffer_init 0040                             _syntax_string 09EA  
                      _serialport_startup 196E                                _this_alarm 00C3  
                              _uart_error 1B46                                _uart_reset 1A88  
            ??_string_utils_is_upper_case 006C                     ??_uart_byte_available 001A  
                     ?_serialport_service 0001                   _delay_interrupt_service 1B24  
                     ?_serialport_startup 0001                          ___lbmod@dividend 006D  
            __end_of_string_utils_strncmp 1020                             pd_add_value@d 0074  
                           pd_add_value@i 008A                    string_utils_from_hex@i 0083  
                  string_utils_from_hex@j 0081                             _cla_add_value 060A  
                   __size_of_pd_add_value 03C2                         ??i2_rd_buffer_put 001E  
                             ___lbmod@rem 006F                      ??_serialport_service 0062  
         __size_of_string_utils_is_symbol 001C                           ??_rd_buffer_get 0070  
                         ??_rd_buffer_cnt 006E                      ??_serialport_startup 0071  
                         ??_rd_buffer_put 0070       __size_of_string_utils_is_upper_case 001A  
                          _detection_task 14AA                             startup@result 0073  
                          ?_syntax_string 009C                        detection_task@zero 008B  
                       cla_add_value@zero 006E                             delay_ms@delay 006C  
              this_parse_parameter@result 0090                            __end_of___wmul 19FC  
                        rd_buffer_put@ind 007B                              _pd_add_value 00F4  
                             __end_ofPL10 0536                               __end_ofPL20 07F8  
                             __end_ofPL12 07CC                               __end_ofPL30 0590  
                             __end_ofPL22 0808                               __end_ofPL14 07DA  
                             __end_ofPL40 05B6                               __end_ofPL32 09DC  
                             __end_ofPL24 0554                               __end_ofPL16 1208  
                             __end_ofPL50 05D8                               __end_ofPL42 0DDA  
                             __end_ofPL34 1036                               __end_ofPL26 0564  
                             __end_ofPL18 07E8                               __end_ofPL60 0F7C  
                             __end_ofPL52 05E8                               __end_ofPL44 05C8  
                             __end_ofPL36 0816                               __end_ofPL28 057A  
                             __end_ofPL62 0DE8                               __end_ofPL54 09EA  
                             __end_ofPL46 0C92                               __end_ofPL38 05A2  
                             __end_ofPL64 0602                               __end_ofPL56 0CA0  
                             __end_ofPL48 0B52                               __end_ofPL66 16B6  
                             __end_ofPL58 05F6                               __end_ofPL68 060A  
                     start_initialization 15FC                 string_utils_strchr@result 0073  
            __size_of_sysclk_setup_intosc 0010                           _parameter_value 037F  
                       _uart_set_baudrate 1B86                            cla_add_value@d 0078  
                          ?_cla_add_value 006C                    this_parse_command@pbuf 0080  
                      ?_uart_set_baudrate 006C               __size_of_this_parse_command 00D0  
                    __size_of_sysclk_init 0006                    __end_of_detection_task 1520  
            sysclk_setup_intosc@frequency 006C                       ??_uart_set_baudrate 006F  
                       syntax_string@pstr 009C                      rd_buffer_init@result 0070  
                  string_utils_split@pbuf 006C                    string_utils_split@prev 0077  
                  string_utils_split@pstr 006E                    string_utils_split@symb 0078  
                                ??___wmul 0070                               ?_uart_error 0001  
                             ?_uart_reset 0001                 ??_delay_interrupt_service 001A  
                  _string_utils_is_symbol 1AA6                    string_utils_strchr@pos 0075  
                       ??_syntax_get_text 006C                         ?_serialport_write 007D  
               __end_of_uart_set_baudrate 1B8C                __end_of_on_parameter_found 18F8  
                       __size_of_adc_init 0012                         __size_of_adc_read 0046  
                             __pbssCOMRAM 002B                             __pcstackBANK0 0060  
                           __pcstackBANK1 01D0                        ??_serialport_write 007F  
                     __end_of__stringdata 7FFF                           uart_getc@result 001C  
                    rd_buffer_readline@ch 007C                         __size_of_delay_ms 0012  
            __end_of_this_parse_parameter 09C6                    __size_of_set_parameter 0022  
               string_utils_strncmp@pstr1 0072                 string_utils_strncmp@pstr2 0074  
               string_utils_strncmp@symb1 007E                 string_utils_strncmp@symb2 007F  
                         ?_detection_task 0001                                 _g_analog0 00BE  
                               _g_analog1 003D                                 _g_analog2 003F  
                               __pnvBANK0 00F2                            _uart_error$257 001A  
                __size_of_serialport_task 008A                        fp__serialport_task 00F0  
                      _string_utils_split 13AE                           ??_syntax_string 009F  
                       __CFG_CCP2MX$PORTC 000000                         __size_of_isr_high 0074  
                    _string_utils_strncmp 0F7C                                 __pintcode 0008  
                          _uart_byte_sent 1B70                             __pmediumconst 7D70  
                          _rd_buffer_getn 18F8                            _rd_buffer_init 187A  
                                ?___awdiv 006C                                  ?___awmod 006C  
                                ?___lbmod 006C                _string_utils_is_symbol$736 006C  
      __end_of_string_utils_is_upper_case 1ADC                _string_utils_is_upper_case 1AC2  
                     ?_string_utils_split 006C                   ??_string_utils_from_hex 007C  
                            _parameter_id 00C0                           ??_cla_add_value 0070  
                               _gpio_init 1B12                                  ?_startup 0001  
                             _g_rx_buffer 0200           __end_of_delay_interrupt_service 1B36  
                    ??_string_utils_split 0073                       __size_of_uart_error 0010  
                     __size_of_uart_reset 001E                               _g_tx_buffer 0100  
                          ___wmul@product 0070                                  _PIE1bits 000F9D  
                  on_parameter_found@p_id 0081                    __end_of_uart_byte_sent 1B78  
                  on_parameter_found@type 0085                       _this_delay_timer_ms 00F2  
                  __end_of_rd_buffer_getn 1934                    __end_of_rd_buffer_init 18BA  
                                _PIR1bits 000F9E                                  i2u532_40 0030  
                                i2u532_41 002E                                  i2u533_40 0046  
                                i2u533_41 0044                                  i2u550_40 0D90  
                                i2u534_40 0054                                  i2u534_41 0052  
                                i2u550_47 0D86                     ?_string_utils_strncmp 0072  
                                i2u560_40 00C8                                  i2u544_40 0CD8  
                                i2u560_41 00C6                                  i2u544_47 0CD2  
                                i2u546_40 0CEE                                  i2u546_47 0CE8  
                   string_utils_copy@pdst 006C                                  i2u558_40 00A4  
                                i2u558_41 00A2                                  i2u559_40 00BA  
                                i2u559_41 00B8                     string_utils_copy@psrc 006E  
                    syntax_string@str_len 00A0                                 _uart_getc 19A0  
                               _uart_init 1A48                                 _uart_putc 1AEE  
                               _uart_puts 165A                        _this_contains_crlf 00C5  
                           _set_parameter 1A26               __end_of_string_utils_strchr 11E4  
             __end_of_string_utils_strlen 1710                      rd_buffer_put@mes_rec 0076  
           __size_of_symb_from_hex_to_bin 0074                                _ADCON0bits 000FC2  
                    rd_buffer_put@pbuffer 006C                               __stringdata 7FE9  
            this_parse_parameter@is_equal 008F                         ___wmul@multiplier 006C  
                         i2_rd_buffer_put 0CA0                __size_of_uart_set_baudrate 0006  
                      _rd_buffer_readline 1838                           rd_buffer_cnt@sz 0072  
                         rd_buffer_getn@i 007E                                ?_gpio_init 0001  
                         rd_buffer_put@sz 0079                       ?_rd_buffer_readline 0077  
                             _meas_buffer 0450                                  _i2c_buff 0042  
                          _parameter_text 0300                            _parameter_type 00C2  
                                __Hparam0 0000                       i2rd_buffer_put@prec 001C  
                             _pd_detector 016B                          syntax_string@pos 00A4  
                                __Lparam0 0000                           ?_uart_byte_sent 0001  
                                _g_CONFIG 00DE                           ?_rd_buffer_getn 0077  
                   string_utils_split@len 0070                           ?_rd_buffer_init 006C  
                     _sysclk_setup_intosc 1B36                                ?_uart_getc 0001  
                              ?_uart_init 0001               __end_of_uart_byte_available 1B80  
                                _g_STATUS 003B                      ??_rd_buffer_readline 007C  
                              ?_uart_putc 0001                                ?_uart_puts 006D  
             __size_ofinterrupts@isr_high 0074                            ?_set_parameter 0001  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
                        __size_of___lbmod 002A                         _pd_add_value$1070 0084  
                       _pd_add_value$1071 0086                         _pd_add_value$1067 007E  
                       _pd_add_value$1068 0080                         _pd_add_value$1069 0082  
                       ??_serialport_task 00AA                      _this_parse_parameter 0816  
                                _adc_init 1B00                                  _adc_read 17F2  
                          uart_getc@pbyte 001B                      ?_sysclk_setup_intosc 0001  
              string_utils_from_hex@pdata 0078                         _string_utils_copy 1326  
                                _delay_ms 1ADC                    __size_of_get_parameter 000E  
                                __ptext10 0DE8                                  __ptext11 0816  
                                __ptext20 1520                                  __ptext12 0F7C  
                                __ptext21 18BA                                  __ptext13 1AC2  
                                __ptext30 1B80                                  __ptext22 060A  
                                __ptext14 10DE                                  __ptext31 1B36  
                                __ptext23 00F4                                  __ptext15 1326  
                                __ptext40 187A                                  __ptext32 1A48  
                                __ptext24 1A26                                  __ptext16 1174  
                                __ptext41 1432                                  __ptext33 1B86  
                                __ptext25 1B64                                  __ptext17 1208  
                                __ptext50 1B78                                  __ptext42 1594  
                                __ptext34 165A                                  __ptext26 1B56  
                                __ptext18 16B6                                  __ptext51 1B46  
                                __ptext43 19FC                                  __ptext35 1AEE  
                                __ptext27 1762                                  __ptext19 1AA6  
                                __ptext52 1A68                                  __ptext44 19D0  
                                __ptext36 1B70                                  __ptext28 0B52  
                                __ptext53 17F2                                  __ptext37 1B00  
                                __ptext29 17AC                                  __ptext54 0CA0  
                                __ptext46 1B24                                  __ptext38 1B12  
                                __ptext47 1934                                  __ptext39 196E  
                                __ptext48 19A0                                  __ptext49 1A88  
                                _bitcount 0041                        ?_string_utils_copy 006C  
                        __size_of_startup 0046               on_parameter_found@operation 0086  
                           __size_of_main 0C24                       ??_string_utils_copy 0073  
             __size_of_serialport_service 003A                                  _isr_high 0008  
                  ??_string_utils_strncmp 0079               __size_of_serialport_startup 0032  
                   __end_of_rd_buffer_get 10DE                     __end_of_rd_buffer_cnt 1762  
                   __end_of_rd_buffer_put 0C80               syntax_string@case_sensitive 009E  
                         _syntax_get_text 1B64                                  _this_buf 0500  
                 __end_ofi2_rd_buffer_put 0DC8                   ?_string_utils_is_symbol 0001  
      string_utils_strncmp@case_sensitive 0078                              ??_uart_error 001A  
                   ?_this_parse_parameter 008B                              ??_uart_reset 001B  
               __end_of_string_utils_copy 13AE                string_utils_strncmp@result 007B  
                   ??_sysclk_setup_intosc 006C                                _INTCONbits 000FF2  
                      i2rd_buffer_put@ind 0029                               ??_gpio_init 006C  
    this_variable_load_from_text@var_type 0088                __end_of_this_parse_command 0EB8  
                           ??_sysclk_init 006D                  on_parameter_found@cmd_id 0080  
                        ??_detection_task 008B                      string_utils_strlen@i 0076  
              this_parse_command@is_equal 0086                                  intlevel2 0000  
                      _on_parameter_found 18BA                        __end_of_uart_error 1B56  
               __size_of_serialport_write 004A                        __end_of_uart_reset 1AA6  
                            _this_warning 00C6                   string_utils_copy@maxlen 0071  
                           _get_parameter 1B56            __end_of_string_utils_is_symbol 1AC2  
                         ??_set_parameter 007F                       ?_on_parameter_found 0080  
                 string_utils_copy@result 0073                               ??_uart_getc 001B  
                             ??_uart_init 006F                               ??_uart_putc 006C  
                             ??_uart_puts 0071               ?_string_utils_is_upper_case 0001  
                     string_utils_split@i 0073            __size_of_string_utils_from_hex 0094  
           __end_of_string_utils_from_hex 129C                       on_parameter_found@p 0082  
                    ??_on_parameter_found 0086              string_utils_strchr@delimeter 006F  
                             _timers_list 0400                            _syx_param_list 7D70  
                           uart_putc@byte 006C                   __end_of_syntax_get_text 1B70  
                       __CFG_FOSC$INTIO67 000000                      __end_of_syx_cmd_list 7FE9  
                     __end_of_sysclk_init 1B86                             uart_puts@size 006F  
                           uart_puts@pstr 006D                        adc_read@adc_number 001D  
                      main@event_priority 01D2                            ?_get_parameter 0001  
                         pd_add_value@val 0076                           pd_add_value@tmp 0088  
