

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Thu Oct 22 23:48:03 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F45K20
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	param0,global,class=BANK0,space=1,delta=1
    87                           	psect	pa_nodes,global,class=CODE,delta=1
    88  0000                     tosu	equ	0xFFF
    89                           tosh	equ	0xFFE
    90                           tosl	equ	0xFFD
    91                           pclath	equ	0xFFA
    92                           tblptru	equ	0xFF8
    93                           tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           indf0	equ	0xFEF
   100                           fsr0h	equ	0xFEA
   101                           fsr0l	equ	0xFE9
   102                           wreg	equ	0xFE8
   103                           indf1	equ	0xFE7
   104                           postinc1	equ	0xFE6
   105                           postdec1	equ	0xFE5
   106                           fsr1h	equ	0xFE2
   107                           fsr1l	equ	0xFE1
   108                           indf2	equ	0xFDF
   109                           postinc2	equ	0xFDE
   110                           postdec2	equ	0xFDD
   111                           fsr2h	equ	0xFDA
   112                           fsr2l	equ	0xFD9
   113                           status	equ	0xFD8
   114                           
   115                           	psect	mediumconst
   116  007D68                     __pmediumconst:
   117                           	opt stack 0
   118  007D68                     _dpowers:
   119                           	opt stack 0
   120  007D68  0001               	dw	1
   121  007D6A  000A               	dw	10
   122  007D6C  0064               	dw	100
   123  007D6E  03E8               	dw	1000
   124  007D70  2710               	dw	10000
   125  007D72                     __end_of_dpowers:
   126                           	opt stack 0
   127  007D72                     syntax@syntax_data:
   128                           	opt stack 0
   129  007D72  73                 	db	115
   130  007D73  65                 	db	101
   131  007D74  74                 	db	116
   132  007D75  00                 	db	0
   133  007D76  00                 	db	0
   134  007D77  00                 	db	0
   135  007D78  00                 	db	0
   136  007D79  00                 	db	0
   137  007D7A  00                 	db	0
   138  007D7B  00                 	db	0
   139  007D7C  00                 	db	0
   140  007D7D  00                 	db	0
   141  007D7E  00                 	db	0
   142  007D7F  00                 	db	0
   143  007D80  00                 	db	0
   144  007D81  00                 	db	0
   145  007D82  00                 	db	0
   146  007D83  00                 	db	0
   147  007D84  00                 	db	0
   148  007D85  00                 	db	0
   149  007D86  03                 	db	3
   150  007D87  00                 	db	0
   151  007D88  00                 	db	0
   152  007D89  67                 	db	103
   153  007D8A  65                 	db	101
   154  007D8B  74                 	db	116
   155  007D8C  00                 	db	0
   156  007D8D  00                 	db	0
   157  007D8E  00                 	db	0
   158  007D8F  00                 	db	0
   159  007D90  00                 	db	0
   160  007D91  00                 	db	0
   161  007D92  00                 	db	0
   162  007D93  00                 	db	0
   163  007D94  00                 	db	0
   164  007D95  00                 	db	0
   165  007D96  00                 	db	0
   166  007D97  00                 	db	0
   167  007D98  00                 	db	0
   168  007D99  00                 	db	0
   169  007D9A  00                 	db	0
   170  007D9B  00                 	db	0
   171  007D9C  00                 	db	0
   172  007D9D  03                 	db	3
   173  007D9E  01                 	db	1
   174  007D9F  00                 	db	0
   175  007DA0  69                 	db	105
   176  007DA1  6E                 	db	110
   177  007DA2  69                 	db	105
   178  007DA3  74                 	db	116
   179  007DA4  00                 	db	0
   180  007DA5  00                 	db	0
   181  007DA6  00                 	db	0
   182  007DA7  00                 	db	0
   183  007DA8  00                 	db	0
   184  007DA9  00                 	db	0
   185  007DAA  00                 	db	0
   186  007DAB  00                 	db	0
   187  007DAC  00                 	db	0
   188  007DAD  00                 	db	0
   189  007DAE  00                 	db	0
   190  007DAF  00                 	db	0
   191  007DB0  00                 	db	0
   192  007DB1  00                 	db	0
   193  007DB2  00                 	db	0
   194  007DB3  00                 	db	0
   195  007DB4  04                 	db	4
   196  007DB5  02                 	db	2
   197  007DB6  00                 	db	0
   198  007DB7  73                 	db	115
   199  007DB8  65                 	db	101
   200  007DB9  6C                 	db	108
   201  007DBA  66                 	db	102
   202  007DBB  74                 	db	116
   203  007DBC  65                 	db	101
   204  007DBD  73                 	db	115
   205  007DBE  74                 	db	116
   206  007DBF  00                 	db	0
   207  007DC0  00                 	db	0
   208  007DC1  00                 	db	0
   209  007DC2  00                 	db	0
   210  007DC3  00                 	db	0
   211  007DC4  00                 	db	0
   212  007DC5  00                 	db	0
   213  007DC6  00                 	db	0
   214  007DC7  00                 	db	0
   215  007DC8  00                 	db	0
   216  007DC9  00                 	db	0
   217  007DCA  00                 	db	0
   218  007DCB  08                 	db	8
   219  007DCC  03                 	db	3
   220  007DCD  00                 	db	0
   221  007DCE  73                 	db	115
   222  007DCF  69                 	db	105
   223  007DD0  67                 	db	103
   224  007DD1  6E                 	db	110
   225  007DD2  61                 	db	97
   226  007DD3  6C                 	db	108
   227  007DD4  00                 	db	0
   228  007DD5  00                 	db	0
   229  007DD6  00                 	db	0
   230  007DD7  00                 	db	0
   231  007DD8  00                 	db	0
   232  007DD9  00                 	db	0
   233  007DDA  00                 	db	0
   234  007DDB  00                 	db	0
   235  007DDC  00                 	db	0
   236  007DDD  00                 	db	0
   237  007DDE  00                 	db	0
   238  007DDF  00                 	db	0
   239  007DE0  00                 	db	0
   240  007DE1  00                 	db	0
   241  007DE2  06                 	db	6
   242  007DE3  04                 	db	4
   243  007DE4  03                 	db	3
   244  007DE5  69                 	db	105
   245  007DE6  6D                 	db	109
   246  007DE7  70                 	db	112
   247  007DE8  00                 	db	0
   248  007DE9  00                 	db	0
   249  007DEA  00                 	db	0
   250  007DEB  00                 	db	0
   251  007DEC  00                 	db	0
   252  007DED  00                 	db	0
   253  007DEE  00                 	db	0
   254  007DEF  00                 	db	0
   255  007DF0  00                 	db	0
   256  007DF1  00                 	db	0
   257  007DF2  00                 	db	0
   258  007DF3  00                 	db	0
   259  007DF4  00                 	db	0
   260  007DF5  00                 	db	0
   261  007DF6  00                 	db	0
   262  007DF7  00                 	db	0
   263  007DF8  00                 	db	0
   264  007DF9  03                 	db	3
   265  007DFA  05                 	db	5
   266  007DFB  03                 	db	3
   267  007DFC  70                 	db	112
   268  007DFD  77                 	db	119
   269  007DFE  72                 	db	114
   270  007DFF  00                 	db	0
   271  007E00  00                 	db	0
   272  007E01  00                 	db	0
   273  007E02  00                 	db	0
   274  007E03  00                 	db	0
   275  007E04  00                 	db	0
   276  007E05  00                 	db	0
   277  007E06  00                 	db	0
   278  007E07  00                 	db	0
   279  007E08  00                 	db	0
   280  007E09  00                 	db	0
   281  007E0A  00                 	db	0
   282  007E0B  00                 	db	0
   283  007E0C  00                 	db	0
   284  007E0D  00                 	db	0
   285  007E0E  00                 	db	0
   286  007E0F  00                 	db	0
   287  007E10  03                 	db	3
   288  007E11  06                 	db	6
   289  007E12  03                 	db	3
   290  007E13  70                 	db	112
   291  007E14  6F                 	db	111
   292  007E15  74                 	db	116
   293  007E16  00                 	db	0
   294  007E17  00                 	db	0
   295  007E18  00                 	db	0
   296  007E19  00                 	db	0
   297  007E1A  00                 	db	0
   298  007E1B  00                 	db	0
   299  007E1C  00                 	db	0
   300  007E1D  00                 	db	0
   301  007E1E  00                 	db	0
   302  007E1F  00                 	db	0
   303  007E20  00                 	db	0
   304  007E21  00                 	db	0
   305  007E22  00                 	db	0
   306  007E23  00                 	db	0
   307  007E24  00                 	db	0
   308  007E25  00                 	db	0
   309  007E26  00                 	db	0
   310  007E27  03                 	db	3
   311  007E28  07                 	db	7
   312  007E29  03                 	db	3
   313  007E2A  76                 	db	118
   314  007E2B  65                 	db	101
   315  007E2C  72                 	db	114
   316  007E2D  00                 	db	0
   317  007E2E  00                 	db	0
   318  007E2F  00                 	db	0
   319  007E30  00                 	db	0
   320  007E31  00                 	db	0
   321  007E32  00                 	db	0
   322  007E33  00                 	db	0
   323  007E34  00                 	db	0
   324  007E35  00                 	db	0
   325  007E36  00                 	db	0
   326  007E37  00                 	db	0
   327  007E38  00                 	db	0
   328  007E39  00                 	db	0
   329  007E3A  00                 	db	0
   330  007E3B  00                 	db	0
   331  007E3C  00                 	db	0
   332  007E3D  00                 	db	0
   333  007E3E  03                 	db	3
   334  007E3F  08                 	db	8
   335  007E40  03                 	db	3
   336  007E41  73                 	db	115
   337  007E42  74                 	db	116
   338  007E43  61                 	db	97
   339  007E44  74                 	db	116
   340  007E45  75                 	db	117
   341  007E46  73                 	db	115
   342  007E47  00                 	db	0
   343  007E48  00                 	db	0
   344  007E49  00                 	db	0
   345  007E4A  00                 	db	0
   346  007E4B  00                 	db	0
   347  007E4C  00                 	db	0
   348  007E4D  00                 	db	0
   349  007E4E  00                 	db	0
   350  007E4F  00                 	db	0
   351  007E50  00                 	db	0
   352  007E51  00                 	db	0
   353  007E52  00                 	db	0
   354  007E53  00                 	db	0
   355  007E54  00                 	db	0
   356  007E55  06                 	db	6
   357  007E56  09                 	db	9
   358  007E57  03                 	db	3
   359  007E58  61                 	db	97
   360  007E59  63                 	db	99
   361  007E5A  63                 	db	99
   362  007E5B  00                 	db	0
   363  007E5C  00                 	db	0
   364  007E5D  00                 	db	0
   365  007E5E  00                 	db	0
   366  007E5F  00                 	db	0
   367  007E60  00                 	db	0
   368  007E61  00                 	db	0
   369  007E62  00                 	db	0
   370  007E63  00                 	db	0
   371  007E64  00                 	db	0
   372  007E65  00                 	db	0
   373  007E66  00                 	db	0
   374  007E67  00                 	db	0
   375  007E68  00                 	db	0
   376  007E69  00                 	db	0
   377  007E6A  00                 	db	0
   378  007E6B  00                 	db	0
   379  007E6C  03                 	db	3
   380  007E6D  0A                 	db	10
   381  007E6E  03                 	db	3
   382  007E6F  61                 	db	97
   383  007E70  64                 	db	100
   384  007E71  72                 	db	114
   385  007E72  00                 	db	0
   386  007E73  00                 	db	0
   387  007E74  00                 	db	0
   388  007E75  00                 	db	0
   389  007E76  00                 	db	0
   390  007E77  00                 	db	0
   391  007E78  00                 	db	0
   392  007E79  00                 	db	0
   393  007E7A  00                 	db	0
   394  007E7B  00                 	db	0
   395  007E7C  00                 	db	0
   396  007E7D  00                 	db	0
   397  007E7E  00                 	db	0
   398  007E7F  00                 	db	0
   399  007E80  00                 	db	0
   400  007E81  00                 	db	0
   401  007E82  00                 	db	0
   402  007E83  03                 	db	3
   403  007E84  0B                 	db	11
   404  007E85  03                 	db	3
   405  007E86  65                 	db	101
   406  007E87  72                 	db	114
   407  007E88  72                 	db	114
   408  007E89  6F                 	db	111
   409  007E8A  72                 	db	114
   410  007E8B  00                 	db	0
   411  007E8C  00                 	db	0
   412  007E8D  00                 	db	0
   413  007E8E  00                 	db	0
   414  007E8F  00                 	db	0
   415  007E90  00                 	db	0
   416  007E91  00                 	db	0
   417  007E92  00                 	db	0
   418  007E93  00                 	db	0
   419  007E94  00                 	db	0
   420  007E95  00                 	db	0
   421  007E96  00                 	db	0
   422  007E97  00                 	db	0
   423  007E98  00                 	db	0
   424  007E99  00                 	db	0
   425  007E9A  05                 	db	5
   426  007E9B  0C                 	db	12
   427  007E9C  03                 	db	3
   428  007E9D  64                 	db	100
   429  007E9E  65                 	db	101
   430  007E9F  66                 	db	102
   431  007EA0  61                 	db	97
   432  007EA1  75                 	db	117
   433  007EA2  6C                 	db	108
   434  007EA3  74                 	db	116
   435  007EA4  73                 	db	115
   436  007EA5  00                 	db	0
   437  007EA6  00                 	db	0
   438  007EA7  00                 	db	0
   439  007EA8  00                 	db	0
   440  007EA9  00                 	db	0
   441  007EAA  00                 	db	0
   442  007EAB  00                 	db	0
   443  007EAC  00                 	db	0
   444  007EAD  00                 	db	0
   445  007EAE  00                 	db	0
   446  007EAF  00                 	db	0
   447  007EB0  00                 	db	0
   448  007EB1  08                 	db	8
   449  007EB2  0D                 	db	13
   450  007EB3  03                 	db	3
   451  007EB4  6D                 	db	109
   452  007EB5  6F                 	db	111
   453  007EB6  64                 	db	100
   454  007EB7  00                 	db	0
   455  007EB8  00                 	db	0
   456  007EB9  00                 	db	0
   457  007EBA  00                 	db	0
   458  007EBB  00                 	db	0
   459  007EBC  00                 	db	0
   460  007EBD  00                 	db	0
   461  007EBE  00                 	db	0
   462  007EBF  00                 	db	0
   463  007EC0  00                 	db	0
   464  007EC1  00                 	db	0
   465  007EC2  00                 	db	0
   466  007EC3  00                 	db	0
   467  007EC4  00                 	db	0
   468  007EC5  00                 	db	0
   469  007EC6  00                 	db	0
   470  007EC7  00                 	db	0
   471  007EC8  03                 	db	3
   472  007EC9  0E                 	db	14
   473  007ECA  01                 	db	1
   474  007ECB  70                 	db	112
   475  007ECC  72                 	db	114
   476  007ECD  6F                 	db	111
   477  007ECE  66                 	db	102
   478  007ECF  69                 	db	105
   479  007ED0  6C                 	db	108
   480  007ED1  65                 	db	101
   481  007ED2  00                 	db	0
   482  007ED3  00                 	db	0
   483  007ED4  00                 	db	0
   484  007ED5  00                 	db	0
   485  007ED6  00                 	db	0
   486  007ED7  00                 	db	0
   487  007ED8  00                 	db	0
   488  007ED9  00                 	db	0
   489  007EDA  00                 	db	0
   490  007EDB  00                 	db	0
   491  007EDC  00                 	db	0
   492  007EDD  00                 	db	0
   493  007EDE  00                 	db	0
   494  007EDF  07                 	db	7
   495  007EE0  0F                 	db	15
   496  007EE1  03                 	db	3
   497  007EE2  70                 	db	112
   498  007EE3  77                 	db	119
   499  007EE4  72                 	db	114
   500  007EE5  74                 	db	116
   501  007EE6  72                 	db	114
   502  007EE7  69                 	db	105
   503  007EE8  67                 	db	103
   504  007EE9  00                 	db	0
   505  007EEA  00                 	db	0
   506  007EEB  00                 	db	0
   507  007EEC  00                 	db	0
   508  007EED  00                 	db	0
   509  007EEE  00                 	db	0
   510  007EEF  00                 	db	0
   511  007EF0  00                 	db	0
   512  007EF1  00                 	db	0
   513  007EF2  00                 	db	0
   514  007EF3  00                 	db	0
   515  007EF4  00                 	db	0
   516  007EF5  00                 	db	0
   517  007EF6  07                 	db	7
   518  007EF7  10                 	db	16
   519  007EF8  03                 	db	3
   520  007EF9  61                 	db	97
   521  007EFA  63                 	db	99
   522  007EFB  63                 	db	99
   523  007EFC  74                 	db	116
   524  007EFD  72                 	db	114
   525  007EFE  69                 	db	105
   526  007EFF  67                 	db	103
   527  007F00  00                 	db	0
   528  007F01  00                 	db	0
   529  007F02  00                 	db	0
   530  007F03  00                 	db	0
   531  007F04  00                 	db	0
   532  007F05  00                 	db	0
   533  007F06  00                 	db	0
   534  007F07  00                 	db	0
   535  007F08  00                 	db	0
   536  007F09  00                 	db	0
   537  007F0A  00                 	db	0
   538  007F0B  00                 	db	0
   539  007F0C  00                 	db	0
   540  007F0D  07                 	db	7
   541  007F0E  11                 	db	17
   542  007F0F  03                 	db	3
   543  007F10  74                 	db	116
   544  007F11  72                 	db	114
   545  007F12  69                 	db	105
   546  007F13  67                 	db	103
   547  007F14  6C                 	db	108
   548  007F15  65                 	db	101
   549  007F16  76                 	db	118
   550  007F17  00                 	db	0
   551  007F18  00                 	db	0
   552  007F19  00                 	db	0
   553  007F1A  00                 	db	0
   554  007F1B  00                 	db	0
   555  007F1C  00                 	db	0
   556  007F1D  00                 	db	0
   557  007F1E  00                 	db	0
   558  007F1F  00                 	db	0
   559  007F20  00                 	db	0
   560  007F21  00                 	db	0
   561  007F22  00                 	db	0
   562  007F23  00                 	db	0
   563  007F24  07                 	db	7
   564  007F25  12                 	db	18
   565  007F26  03                 	db	3
   566  007F27  74                 	db	116
   567  007F28  72                 	db	114
   568  007F29  69                 	db	105
   569  007F2A  67                 	db	103
   570  007F2B  73                 	db	115
   571  007F2C  75                 	db	117
   572  007F2D  6D                 	db	109
   573  007F2E  00                 	db	0
   574  007F2F  00                 	db	0
   575  007F30  00                 	db	0
   576  007F31  00                 	db	0
   577  007F32  00                 	db	0
   578  007F33  00                 	db	0
   579  007F34  00                 	db	0
   580  007F35  00                 	db	0
   581  007F36  00                 	db	0
   582  007F37  00                 	db	0
   583  007F38  00                 	db	0
   584  007F39  00                 	db	0
   585  007F3A  00                 	db	0
   586  007F3B  07                 	db	7
   587  007F3C  13                 	db	19
   588  007F3D  03                 	db	3
   589  007F3E  74                 	db	116
   590  007F3F  72                 	db	114
   591  007F40  69                 	db	105
   592  007F41  67                 	db	103
   593  007F42  63                 	db	99
   594  007F43  6E                 	db	110
   595  007F44  74                 	db	116
   596  007F45  00                 	db	0
   597  007F46  00                 	db	0
   598  007F47  00                 	db	0
   599  007F48  00                 	db	0
   600  007F49  00                 	db	0
   601  007F4A  00                 	db	0
   602  007F4B  00                 	db	0
   603  007F4C  00                 	db	0
   604  007F4D  00                 	db	0
   605  007F4E  00                 	db	0
   606  007F4F  00                 	db	0
   607  007F50  00                 	db	0
   608  007F51  00                 	db	0
   609  007F52  07                 	db	7
   610  007F53  14                 	db	20
   611  007F54  03                 	db	3
   612  007F55  77                 	db	119
   613  007F56  61                 	db	97
   614  007F57  76                 	db	118
   615  007F58  74                 	db	116
   616  007F59  6F                 	db	111
   617  007F5A  6C                 	db	108
   618  007F5B  65                 	db	101
   619  007F5C  00                 	db	0
   620  007F5D  00                 	db	0
   621  007F5E  00                 	db	0
   622  007F5F  00                 	db	0
   623  007F60  00                 	db	0
   624  007F61  00                 	db	0
   625  007F62  00                 	db	0
   626  007F63  00                 	db	0
   627  007F64  00                 	db	0
   628  007F65  00                 	db	0
   629  007F66  00                 	db	0
   630  007F67  00                 	db	0
   631  007F68  00                 	db	0
   632  007F69  07                 	db	7
   633  007F6A  15                 	db	21
   634  007F6B  03                 	db	3
   635  007F6C  77                 	db	119
   636  007F6D  61                 	db	97
   637  007F6E  76                 	db	118
   638  007F6F  74                 	db	116
   639  007F70  72                 	db	114
   640  007F71  69                 	db	105
   641  007F72  67                 	db	103
   642  007F73  00                 	db	0
   643  007F74  00                 	db	0
   644  007F75  00                 	db	0
   645  007F76  00                 	db	0
   646  007F77  00                 	db	0
   647  007F78  00                 	db	0
   648  007F79  00                 	db	0
   649  007F7A  00                 	db	0
   650  007F7B  00                 	db	0
   651  007F7C  00                 	db	0
   652  007F7D  00                 	db	0
   653  007F7E  00                 	db	0
   654  007F7F  00                 	db	0
   655  007F80  07                 	db	7
   656  007F81  16                 	db	22
   657  007F82  03                 	db	3
   658  007F83  77                 	db	119
   659  007F84  61                 	db	97
   660  007F85  76                 	db	118
   661  007F86  6C                 	db	108
   662  007F87  63                 	db	99
   663  007F88  6E                 	db	110
   664  007F89  74                 	db	116
   665  007F8A  00                 	db	0
   666  007F8B  00                 	db	0
   667  007F8C  00                 	db	0
   668  007F8D  00                 	db	0
   669  007F8E  00                 	db	0
   670  007F8F  00                 	db	0
   671  007F90  00                 	db	0
   672  007F91  00                 	db	0
   673  007F92  00                 	db	0
   674  007F93  00                 	db	0
   675  007F94  00                 	db	0
   676  007F95  00                 	db	0
   677  007F96  00                 	db	0
   678  007F97  07                 	db	7
   679  007F98  17                 	db	23
   680  007F99  03                 	db	3
   681  007F9A  77                 	db	119
   682  007F9B  61                 	db	97
   683  007F9C  76                 	db	118
   684  007F9D  72                 	db	114
   685  007F9E  63                 	db	99
   686  007F9F  6E                 	db	110
   687  007FA0  74                 	db	116
   688  007FA1  00                 	db	0
   689  007FA2  00                 	db	0
   690  007FA3  00                 	db	0
   691  007FA4  00                 	db	0
   692  007FA5  00                 	db	0
   693  007FA6  00                 	db	0
   694  007FA7  00                 	db	0
   695  007FA8  00                 	db	0
   696  007FA9  00                 	db	0
   697  007FAA  00                 	db	0
   698  007FAB  00                 	db	0
   699  007FAC  00                 	db	0
   700  007FAD  00                 	db	0
   701  007FAE  07                 	db	7
   702  007FAF  18                 	db	24
   703  007FB0  03                 	db	3
   704  007FB1  69                 	db	105
   705  007FB2  64                 	db	100
   706  007FB3  69                 	db	105
   707  007FB4  64                 	db	100
   708  007FB5  00                 	db	0
   709  007FB6  00                 	db	0
   710  007FB7  00                 	db	0
   711  007FB8  00                 	db	0
   712  007FB9  00                 	db	0
   713  007FBA  00                 	db	0
   714  007FBB  00                 	db	0
   715  007FBC  00                 	db	0
   716  007FBD  00                 	db	0
   717  007FBE  00                 	db	0
   718  007FBF  00                 	db	0
   719  007FC0  00                 	db	0
   720  007FC1  00                 	db	0
   721  007FC2  00                 	db	0
   722  007FC3  00                 	db	0
   723  007FC4  00                 	db	0
   724  007FC5  04                 	db	4
   725  007FC6  19                 	db	25
   726  007FC7  03                 	db	3
   727  007FC8  70                 	db	112
   728  007FC9  73                 	db	115
   729  007FCA  77                 	db	119
   730  007FCB  70                 	db	112
   731  007FCC  73                 	db	115
   732  007FCD  77                 	db	119
   733  007FCE  00                 	db	0
   734  007FCF  00                 	db	0
   735  007FD0  00                 	db	0
   736  007FD1  00                 	db	0
   737  007FD2  00                 	db	0
   738  007FD3  00                 	db	0
   739  007FD4  00                 	db	0
   740  007FD5  00                 	db	0
   741  007FD6  00                 	db	0
   742  007FD7  00                 	db	0
   743  007FD8  00                 	db	0
   744  007FD9  00                 	db	0
   745  007FDA  00                 	db	0
   746  007FDB  00                 	db	0
   747  007FDC  06                 	db	6
   748  007FDD  1A                 	db	26
   749  007FDE  03                 	db	3
   750  007FDF                     __end_ofsyntax@syntax_data:
   751                           	opt stack 0
   752  0000                     _TMR0	set	4054
   753  0000                     _ADCON0	set	4034
   754  0000                     _ADCON0bits	set	4034
   755  0000                     _ADCON1	set	4033
   756  0000                     _ADCON2	set	4032
   757  0000                     _ADRESL	set	4035
   758  0000                     _ANSEL	set	3966
   759  0000                     _ANSELH	set	3967
   760  0000                     _BAUDCON	set	4024
   761  0000                     _BAUDCTL	set	4024
   762  0000                     _INTCONbits	set	4082
   763  0000                     _LATC	set	3979
   764  0000                     _LATD	set	3980
   765  0000                     _OSCCON	set	4051
   766  0000                     _PIE1bits	set	3997
   767  0000                     _PIR1bits	set	3998
   768  0000                     _RCREG	set	4014
   769  0000                     _RCSTA	set	4011
   770  0000                     _RCSTAbits	set	4011
   771  0000                     _SPBRG	set	4015
   772  0000                     _STATUS	set	4056
   773  0000                     _TRISA	set	3986
   774  0000                     _TRISB	set	3987
   775  0000                     _TRISC	set	3988
   776  0000                     _TRISD	set	3989
   777  0000                     _TXREG	set	4013
   778  0000                     _TXSTA	set	4012
   779  0000                     _ADIF	set	31990
   780  0000                     _CREN	set	32092
   781  0000                     _RC1IF	set	31989
   782  0000                     _RCIF	set	31989
   783  0000                     _TXIF	set	31988
   784  007FDF                     __stringdata:
   785                           	opt stack 0
   786  007FDF                     STR_36:
   787  007FDF  68                 	db	104	;'h'
   788  007FE0  65                 	db	101	;'e'
   789  007FE1  6C                 	db	108	;'l'
   790  007FE2  6C                 	db	108	;'l'
   791  007FE3  6F                 	db	111	;'o'
   792  007FE4  00                 	db	0
   793  007FE5                     STR_29:
   794  007FE5  3A                 	db	58	;':'
   795  007FE6  65                 	db	101	;'e'
   796  007FE7  72                 	db	114	;'r'
   797  007FE8  72                 	db	114	;'r'
   798  007FE9  20                 	db	32
   799  007FEA  00                 	db	0
   800  007FEB                     STR_30:
   801  007FEB  3D                 	db	61	;'='
   802  007FEC  25                 	db	37
   803  007FED  64                 	db	100	;'d'
   804  007FEE  0A                 	db	10
   805  007FEF  00                 	db	0
   806  007FF0                     STR_35:
   807  007FF0  65                 	db	101	;'e'
   808  007FF1  72                 	db	114	;'r'
   809  007FF2  72                 	db	114	;'r'
   810  007FF3  0A                 	db	10
   811  007FF4  00                 	db	0
   812  007FF5                     STR_28:
   813  007FF5  3A                 	db	58	;':'
   814  007FF6  6F                 	db	111	;'o'
   815  007FF7  6B                 	db	107	;'k'
   816  007FF8  20                 	db	32
   817  007FF9  00                 	db	0
   818  007FFA                     STR_31:
   819  007FFA  3D                 	db	61	;'='
   820  007FFB  25                 	db	37
   821  007FFC  64                 	db	100	;'d'
   822  007FFD  00                 	db	0
   823  007FFE                     __end_of__stringdata:
   824                           	opt stack 0
   825                           
   826                           ; #config settings
   827  007FFE  00                 	db	0	; dummy byte at the end
   828  0000                     tosu	equ	0xFFF
   829                           tosh	equ	0xFFE
   830                           tosl	equ	0xFFD
   831                           pclath	equ	0xFFA
   832                           tblptru	equ	0xFF8
   833                           tblptrh	equ	0xFF7
   834                           tblptrl	equ	0xFF6
   835                           tablat	equ	0xFF5
   836                           prodh	equ	0xFF4
   837                           prodl	equ	0xFF3
   838                           intcon	equ	0xFF2
   839                           indf0	equ	0xFEF
   840                           fsr0h	equ	0xFEA
   841                           fsr0l	equ	0xFE9
   842                           wreg	equ	0xFE8
   843                           indf1	equ	0xFE7
   844                           postinc1	equ	0xFE6
   845                           postdec1	equ	0xFE5
   846                           fsr1h	equ	0xFE2
   847                           fsr1l	equ	0xFE1
   848                           indf2	equ	0xFDF
   849                           postinc2	equ	0xFDE
   850                           postdec2	equ	0xFDD
   851                           fsr2h	equ	0xFDA
   852                           fsr2l	equ	0xFD9
   853                           status	equ	0xFD8
   854                           
   855                           	psect	nvBANK0
   856  0000F6                     __pnvBANK0:
   857                           	opt stack 0
   858  0000F6                     _this_delay_timer_ms:
   859                           	opt stack 0
   860  0000F6                     	ds	2
   861                           tosu	equ	0xFFF
   862                           tosh	equ	0xFFE
   863                           tosl	equ	0xFFD
   864                           pclath	equ	0xFFA
   865                           tblptru	equ	0xFF8
   866                           tblptrh	equ	0xFF7
   867                           tblptrl	equ	0xFF6
   868                           tablat	equ	0xFF5
   869                           prodh	equ	0xFF4
   870                           prodl	equ	0xFF3
   871                           intcon	equ	0xFF2
   872                           indf0	equ	0xFEF
   873                           fsr0h	equ	0xFEA
   874                           fsr0l	equ	0xFE9
   875                           wreg	equ	0xFE8
   876                           indf1	equ	0xFE7
   877                           postinc1	equ	0xFE6
   878                           postdec1	equ	0xFE5
   879                           fsr1h	equ	0xFE2
   880                           fsr1l	equ	0xFE1
   881                           indf2	equ	0xFDF
   882                           postinc2	equ	0xFDE
   883                           postdec2	equ	0xFDD
   884                           fsr2h	equ	0xFDA
   885                           fsr2l	equ	0xFD9
   886                           status	equ	0xFD8
   887                           
   888                           	psect	cinit
   889  001B9E                     __pcinit:
   890                           	opt stack 0
   891  001B9E                     start_initialization:
   892                           	opt stack 0
   893  001B9E                     __initialization:
   894                           	opt stack 0
   895                           
   896                           ; Clear objects allocated to BANK5 (127 bytes)
   897  001B9E  EE05  F000         	lfsr	0,__pbssBANK5
   898  001BA2  0E7F               	movlw	127
   899  001BA4                     clear_0:
   900  001BA4  6AEE               	clrf	postinc0,c
   901  001BA6  06E8               	decf	wreg,f,c
   902  001BA8  E1FD               	bnz	clear_0
   903                           
   904                           ; Clear objects allocated to BANK4 (187 bytes)
   905  001BAA  EE04  F000         	lfsr	0,__pbssBANK4
   906  001BAE  0EBB               	movlw	187
   907  001BB0                     clear_1:
   908  001BB0  6AEE               	clrf	postinc0,c
   909  001BB2  06E8               	decf	wreg,f,c
   910  001BB4  E1FD               	bnz	clear_1
   911                           
   912                           ; Clear objects allocated to BANK3 (227 bytes)
   913  001BB6  EE03  F000         	lfsr	0,__pbssBANK3
   914  001BBA  0EE3               	movlw	227
   915  001BBC                     clear_2:
   916  001BBC  6AEE               	clrf	postinc0,c
   917  001BBE  06E8               	decf	wreg,f,c
   918  001BC0  E1FD               	bnz	clear_2
   919                           
   920                           ; Clear objects allocated to BANK2 (234 bytes)
   921  001BC2  EE02  F000         	lfsr	0,__pbssBANK2
   922  001BC6  0EEA               	movlw	234
   923  001BC8                     clear_3:
   924  001BC8  6AEE               	clrf	postinc0,c
   925  001BCA  06E8               	decf	wreg,f,c
   926  001BCC  E1FD               	bnz	clear_3
   927                           
   928                           ; Clear objects allocated to BANK1 (208 bytes)
   929  001BCE  EE01  F000         	lfsr	0,__pbssBANK1
   930  001BD2  0ED0               	movlw	208
   931  001BD4                     clear_4:
   932  001BD4  6AEE               	clrf	postinc0,c
   933  001BD6  06E8               	decf	wreg,f,c
   934  001BD8  E1FD               	bnz	clear_4
   935                           
   936                           ; Clear objects allocated to BANK0 (69 bytes)
   937  001BDA  EE00  F0B1         	lfsr	0,__pbssBANK0
   938  001BDE  0E45               	movlw	69
   939  001BE0                     clear_5:
   940  001BE0  6AEE               	clrf	postinc0,c
   941  001BE2  06E8               	decf	wreg,f,c
   942  001BE4  E1FD               	bnz	clear_5
   943                           
   944                           ; Clear objects allocated to COMRAM (22 bytes)
   945  001BE6  EE00  F02D         	lfsr	0,__pbssCOMRAM
   946  001BEA  0E16               	movlw	22
   947  001BEC                     clear_6:
   948  001BEC  6AEE               	clrf	postinc0,c
   949  001BEE  06E8               	decf	wreg,f,c
   950  001BF0  E1FD               	bnz	clear_6
   951  001BF2                     end_of_initialization:
   952                           	opt stack 0
   953  001BF2                     __end_of__initialization:
   954                           	opt stack 0
   955  001BF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   956  001BF4  6EF8               	movwf	tblptru,c
   957  001BF6  0100               	movlb	0
   958  001BF8  EFA4  F00A         	goto	_main	;jump to C main() function
   959                           tosu	equ	0xFFF
   960                           tosh	equ	0xFFE
   961                           tosl	equ	0xFFD
   962                           pclath	equ	0xFFA
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           prodh	equ	0xFF4
   968                           prodl	equ	0xFF3
   969                           intcon	equ	0xFF2
   970                           indf0	equ	0xFEF
   971                           postinc0	equ	0xFEE
   972                           fsr0h	equ	0xFEA
   973                           fsr0l	equ	0xFE9
   974                           wreg	equ	0xFE8
   975                           indf1	equ	0xFE7
   976                           postinc1	equ	0xFE6
   977                           postdec1	equ	0xFE5
   978                           fsr1h	equ	0xFE2
   979                           fsr1l	equ	0xFE1
   980                           indf2	equ	0xFDF
   981                           postinc2	equ	0xFDE
   982                           postdec2	equ	0xFDD
   983                           fsr2h	equ	0xFDA
   984                           fsr2l	equ	0xFD9
   985                           status	equ	0xFD8
   986                           
   987                           	psect	bssCOMRAM
   988  00002D                     __pbssCOMRAM:
   989                           	opt stack 0
   990  00002D                     _event_miss:
   991                           	opt stack 0
   992  00002D                     	ds	8
   993  000035                     _pool:
   994                           	opt stack 0
   995  000035                     	ds	8
   996  00003D                     _g_STATUS:
   997                           	opt stack 0
   998  00003D                     	ds	2
   999  00003F                     _g_analog1:
  1000                           	opt stack 0
  1001  00003F                     	ds	2
  1002  000041                     _g_analog2:
  1003                           	opt stack 0
  1004  000041                     	ds	2
  1005                           tosu	equ	0xFFF
  1006                           tosh	equ	0xFFE
  1007                           tosl	equ	0xFFD
  1008                           pclath	equ	0xFFA
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           prodh	equ	0xFF4
  1014                           prodl	equ	0xFF3
  1015                           intcon	equ	0xFF2
  1016                           indf0	equ	0xFEF
  1017                           postinc0	equ	0xFEE
  1018                           fsr0h	equ	0xFEA
  1019                           fsr0l	equ	0xFE9
  1020                           wreg	equ	0xFE8
  1021                           indf1	equ	0xFE7
  1022                           postinc1	equ	0xFE6
  1023                           postdec1	equ	0xFE5
  1024                           fsr1h	equ	0xFE2
  1025                           fsr1l	equ	0xFE1
  1026                           indf2	equ	0xFDF
  1027                           postinc2	equ	0xFDE
  1028                           postdec2	equ	0xFDD
  1029                           fsr2h	equ	0xFDA
  1030                           fsr2l	equ	0xFD9
  1031                           status	equ	0xFD8
  1032                           
  1033                           	psect	bssBANK0
  1034  0000B1                     __pbssBANK0:
  1035                           	opt stack 0
  1036  0000B1                     _events:
  1037                           	opt stack 0
  1038  0000B1                     	ds	16
  1039  0000C1                     _g_analog0:
  1040                           	opt stack 0
  1041  0000C1                     	ds	2
  1042  0000C3                     _u16_value:
  1043                           	opt stack 0
  1044  0000C3                     	ds	2
  1045  0000C5                     _ok:
  1046                           	opt stack 0
  1047  0000C5                     	ds	1
  1048  0000C6                     _parameter_type:
  1049                           	opt stack 0
  1050  0000C6                     	ds	1
  1051  0000C7                     _this_alarm:
  1052                           	opt stack 0
  1053  0000C7                     	ds	1
  1054  0000C8                     _this_warning:
  1055                           	opt stack 0
  1056  0000C8                     	ds	1
  1057  0000C9                     detection_task@alarm_cla:
  1058                           	opt stack 0
  1059  0000C9                     	ds	1
  1060  0000CA                     detection_task@alarm_wav:
  1061                           	opt stack 0
  1062  0000CA                     	ds	1
  1063  0000CB                     _cla_detector:
  1064                           	opt stack 0
  1065  0000CB                     	ds	21
  1066  0000E0                     _g_CONFIG:
  1067                           	opt stack 0
  1068  0000E0                     	ds	20
  1069  0000F4                     _command_id:
  1070                           	opt stack 0
  1071  0000F4                     	ds	1
  1072  0000F5                     _parameter_id:
  1073                           	opt stack 0
  1074  0000F5                     	ds	1
  1075                           tosu	equ	0xFFF
  1076                           tosh	equ	0xFFE
  1077                           tosl	equ	0xFFD
  1078                           pclath	equ	0xFFA
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           prodh	equ	0xFF4
  1084                           prodl	equ	0xFF3
  1085                           intcon	equ	0xFF2
  1086                           indf0	equ	0xFEF
  1087                           postinc0	equ	0xFEE
  1088                           fsr0h	equ	0xFEA
  1089                           fsr0l	equ	0xFE9
  1090                           wreg	equ	0xFE8
  1091                           indf1	equ	0xFE7
  1092                           postinc1	equ	0xFE6
  1093                           postdec1	equ	0xFE5
  1094                           fsr1h	equ	0xFE2
  1095                           fsr1l	equ	0xFE1
  1096                           indf2	equ	0xFDF
  1097                           postinc2	equ	0xFDE
  1098                           postdec2	equ	0xFDD
  1099                           fsr2h	equ	0xFDA
  1100                           fsr2l	equ	0xFD9
  1101                           status	equ	0xFD8
  1102                           
  1103                           	psect	bssBANK1
  1104  000100                     __pbssBANK1:
  1105                           	opt stack 0
  1106  000100                     _g_tx_buffer:
  1107                           	opt stack 0
  1108  000100                     	ds	107
  1109  00016B                     _pd_detector:
  1110                           	opt stack 0
  1111  00016B                     	ds	101
  1112                           tosu	equ	0xFFF
  1113                           tosh	equ	0xFFE
  1114                           tosl	equ	0xFFD
  1115                           pclath	equ	0xFFA
  1116                           tblptru	equ	0xFF8
  1117                           tblptrh	equ	0xFF7
  1118                           tblptrl	equ	0xFF6
  1119                           tablat	equ	0xFF5
  1120                           prodh	equ	0xFF4
  1121                           prodl	equ	0xFF3
  1122                           intcon	equ	0xFF2
  1123                           indf0	equ	0xFEF
  1124                           postinc0	equ	0xFEE
  1125                           fsr0h	equ	0xFEA
  1126                           fsr0l	equ	0xFE9
  1127                           wreg	equ	0xFE8
  1128                           indf1	equ	0xFE7
  1129                           postinc1	equ	0xFE6
  1130                           postdec1	equ	0xFE5
  1131                           fsr1h	equ	0xFE2
  1132                           fsr1l	equ	0xFE1
  1133                           indf2	equ	0xFDF
  1134                           postinc2	equ	0xFDE
  1135                           postdec2	equ	0xFDD
  1136                           fsr2h	equ	0xFDA
  1137                           fsr2l	equ	0xFD9
  1138                           status	equ	0xFD8
  1139                           
  1140                           	psect	bssBANK2
  1141  000200                     __pbssBANK2:
  1142                           	opt stack 0
  1143  000200                     _parameter_value:
  1144                           	opt stack 0
  1145  000200                     	ds	127
  1146  00027F                     _g_rx_buffer:
  1147                           	opt stack 0
  1148  00027F                     	ds	107
  1149                           tosu	equ	0xFFF
  1150                           tosh	equ	0xFFE
  1151                           tosl	equ	0xFFD
  1152                           pclath	equ	0xFFA
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           prodh	equ	0xFF4
  1158                           prodl	equ	0xFF3
  1159                           intcon	equ	0xFF2
  1160                           indf0	equ	0xFEF
  1161                           postinc0	equ	0xFEE
  1162                           fsr0h	equ	0xFEA
  1163                           fsr0l	equ	0xFE9
  1164                           wreg	equ	0xFE8
  1165                           indf1	equ	0xFE7
  1166                           postinc1	equ	0xFE6
  1167                           postdec1	equ	0xFE5
  1168                           fsr1h	equ	0xFE2
  1169                           fsr1l	equ	0xFE1
  1170                           indf2	equ	0xFDF
  1171                           postinc2	equ	0xFDE
  1172                           postdec2	equ	0xFDD
  1173                           fsr2h	equ	0xFDA
  1174                           fsr2l	equ	0xFD9
  1175                           status	equ	0xFD8
  1176                           
  1177                           	psect	bssBANK3
  1178  000300                     __pbssBANK3:
  1179                           	opt stack 0
  1180  000300                     _parameter_text:
  1181                           	opt stack 0
  1182  000300                     	ds	127
  1183  00037F                     _serialport_buffer:
  1184                           	opt stack 0
  1185  00037F                     	ds	100
  1186                           tosu	equ	0xFFF
  1187                           tosh	equ	0xFFE
  1188                           tosl	equ	0xFFD
  1189                           pclath	equ	0xFFA
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           intcon	equ	0xFF2
  1197                           indf0	equ	0xFEF
  1198                           postinc0	equ	0xFEE
  1199                           fsr0h	equ	0xFEA
  1200                           fsr0l	equ	0xFE9
  1201                           wreg	equ	0xFE8
  1202                           indf1	equ	0xFE7
  1203                           postinc1	equ	0xFE6
  1204                           postdec1	equ	0xFE5
  1205                           fsr1h	equ	0xFE2
  1206                           fsr1l	equ	0xFE1
  1207                           indf2	equ	0xFDF
  1208                           postinc2	equ	0xFDE
  1209                           postdec2	equ	0xFDD
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8
  1213                           
  1214                           	psect	bssBANK4
  1215  000400                     __pbssBANK4:
  1216                           	opt stack 0
  1217  000400                     	ds	80
  1218  000450                     _meas_buffer:
  1219                           	opt stack 0
  1220  000450                     	ds	107
  1221                           tosu	equ	0xFFF
  1222                           tosh	equ	0xFFE
  1223                           tosl	equ	0xFFD
  1224                           pclath	equ	0xFFA
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           tblptrl	equ	0xFF6
  1228                           tablat	equ	0xFF5
  1229                           prodh	equ	0xFF4
  1230                           prodl	equ	0xFF3
  1231                           intcon	equ	0xFF2
  1232                           indf0	equ	0xFEF
  1233                           postinc0	equ	0xFEE
  1234                           fsr0h	equ	0xFEA
  1235                           fsr0l	equ	0xFE9
  1236                           wreg	equ	0xFE8
  1237                           indf1	equ	0xFE7
  1238                           postinc1	equ	0xFE6
  1239                           postdec1	equ	0xFE5
  1240                           fsr1h	equ	0xFE2
  1241                           fsr1l	equ	0xFE1
  1242                           indf2	equ	0xFDF
  1243                           postinc2	equ	0xFDE
  1244                           postdec2	equ	0xFDD
  1245                           fsr2h	equ	0xFDA
  1246                           fsr2l	equ	0xFD9
  1247                           status	equ	0xFD8
  1248                           
  1249                           	psect	bssBANK5
  1250  000500                     __pbssBANK5:
  1251                           	opt stack 0
  1252  000500                     _this_buf:
  1253                           	opt stack 0
  1254  000500                     	ds	127
  1255                           tosu	equ	0xFFF
  1256                           tosh	equ	0xFFE
  1257                           tosl	equ	0xFFD
  1258                           pclath	equ	0xFFA
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           prodh	equ	0xFF4
  1264                           prodl	equ	0xFF3
  1265                           intcon	equ	0xFF2
  1266                           indf0	equ	0xFEF
  1267                           postinc0	equ	0xFEE
  1268                           fsr0h	equ	0xFEA
  1269                           fsr0l	equ	0xFE9
  1270                           wreg	equ	0xFE8
  1271                           indf1	equ	0xFE7
  1272                           postinc1	equ	0xFE6
  1273                           postdec1	equ	0xFE5
  1274                           fsr1h	equ	0xFE2
  1275                           fsr1l	equ	0xFE1
  1276                           indf2	equ	0xFDF
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           fsr2h	equ	0xFDA
  1280                           fsr2l	equ	0xFD9
  1281                           status	equ	0xFD8
  1282                           
  1283                           	psect	cstackBANK1
  1284  0001D0                     __pcstackBANK1:
  1285                           	opt stack 0
  1286  0001D0                     ?_syntax_string:
  1287                           	opt stack 0
  1288  0001D0                     syntax_string@pstr:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x0
  1292  0001D0                     	ds	2
  1293  0001D2                     syntax_string@str_len:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x2
  1297  0001D2                     	ds	2
  1298  0001D4                     syntax_string@result:
  1299                           	opt stack 0
  1300                           
  1301                           ; 1 bytes @ 0x4
  1302  0001D4                     	ds	1
  1303  0001D5                     syntax_string@pos:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x5
  1307  0001D5                     	ds	1
  1308  0001D6                     syntax_string@pchain:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x6
  1312  0001D6                     	ds	2
  1313  0001D8                     syntax_string@chains:
  1314                           	opt stack 0
  1315                           
  1316                           ; 1 bytes @ 0x8
  1317  0001D8                     	ds	1
  1318  0001D9                     serialport_task@byte:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x9
  1322  0001D9                     	ds	1
  1323  0001DA                     serialport_task@size:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0xA
  1327  0001DA                     	ds	2
  1328  0001DC                     main@event_old:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0xC
  1332  0001DC                     	ds	1
  1333  0001DD                     main@event_priority:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0xD
  1337  0001DD                     	ds	1
  1338  0001DE                     main@i:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0xE
  1342  0001DE                     	ds	1
  1343                           tosu	equ	0xFFF
  1344                           tosh	equ	0xFFE
  1345                           tosl	equ	0xFFD
  1346                           pclath	equ	0xFFA
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           prodh	equ	0xFF4
  1352                           prodl	equ	0xFF3
  1353                           intcon	equ	0xFF2
  1354                           indf0	equ	0xFEF
  1355                           postinc0	equ	0xFEE
  1356                           fsr0h	equ	0xFEA
  1357                           fsr0l	equ	0xFE9
  1358                           wreg	equ	0xFE8
  1359                           indf1	equ	0xFE7
  1360                           postinc1	equ	0xFE6
  1361                           postdec1	equ	0xFE5
  1362                           fsr1h	equ	0xFE2
  1363                           fsr1l	equ	0xFE1
  1364                           indf2	equ	0xFDF
  1365                           postinc2	equ	0xFDE
  1366                           postdec2	equ	0xFDD
  1367                           fsr2h	equ	0xFDA
  1368                           fsr2l	equ	0xFD9
  1369                           status	equ	0xFD8
  1370                           
  1371                           	psect	cstackBANK0
  1372  000060                     __pcstackBANK0:
  1373                           	opt stack 0
  1374  000060                     ??interrupts@isr_high:
  1375                           
  1376                           ; 0 bytes @ 0x0
  1377  000060                     	ds	8
  1378  000068                     ?_uart_set_baudrate:
  1379                           	opt stack 0
  1380  000068                     ?_delay_ms:
  1381                           	opt stack 0
  1382  000068                     ??_adc_read:
  1383  000068                     ?_rd_buffer_get:
  1384                           	opt stack 0
  1385  000068                     ?_rd_buffer_init:
  1386                           	opt stack 0
  1387  000068                     ?_rd_buffer_put:
  1388                           	opt stack 0
  1389  000068                     ?_cla_add_value:
  1390                           	opt stack 0
  1391  000068                     ?___lbmod:
  1392                           	opt stack 0
  1393  000068                     ?_rd_buffer_cnt:
  1394                           	opt stack 0
  1395  000068                     ?_string_utils_copy:
  1396                           	opt stack 0
  1397  000068                     ?_string_utils_split:
  1398                           	opt stack 0
  1399  000068                     ?_string_utils_strchr:
  1400                           	opt stack 0
  1401  000068                     ?_syntax_as_integer:
  1402                           	opt stack 0
  1403  000068                     ?___awdiv:
  1404                           	opt stack 0
  1405  000068                     ?___awmod:
  1406                           	opt stack 0
  1407  000068                     ?___lwdiv:
  1408                           	opt stack 0
  1409  000068                     ?___wmul:
  1410                           	opt stack 0
  1411  000068                     ?___ftpack:
  1412                           	opt stack 0
  1413  000068                     sysclk_setup_intosc@frequency:
  1414                           	opt stack 0
  1415  000068                     uart_putc@byte:
  1416                           	opt stack 0
  1417  000068                     _string_utils_is_upper_case$747:
  1418                           	opt stack 0
  1419  000068                     _string_utils_is_symbol$753:
  1420                           	opt stack 0
  1421  000068                     _string_utils_is_digit$783:
  1422                           	opt stack 0
  1423  000068                     symb_from_hex_to_bin@symb:
  1424                           	opt stack 0
  1425  000068                     potentiometer_set@value:
  1426                           	opt stack 0
  1427  000068                     ___lbmod@divisor:
  1428                           	opt stack 0
  1429  000068                     delay_ms@delay:
  1430                           	opt stack 0
  1431  000068                     rd_buffer_init@pbuffer:
  1432                           	opt stack 0
  1433  000068                     rd_buffer_cnt@pbuffer:
  1434                           	opt stack 0
  1435  000068                     rd_buffer_get@pbuffer:
  1436                           	opt stack 0
  1437  000068                     rd_buffer_put@pbuffer:
  1438                           	opt stack 0
  1439  000068                     string_utils_copy@pdst:
  1440                           	opt stack 0
  1441  000068                     string_utils_split@pbuf:
  1442                           	opt stack 0
  1443  000068                     string_utils_strchr@pbuf:
  1444                           	opt stack 0
  1445  000068                     cla_add_value@val:
  1446                           	opt stack 0
  1447  000068                     ___awdiv@dividend:
  1448                           	opt stack 0
  1449  000068                     ___awmod@dividend:
  1450                           	opt stack 0
  1451  000068                     ___lwdiv@dividend:
  1452                           	opt stack 0
  1453  000068                     ___wmul@multiplier:
  1454                           	opt stack 0
  1455  000068                     ___ftpack@arg:
  1456                           	opt stack 0
  1457                           
  1458                           ; 3 bytes @ 0x8
  1459  000068                     	ds	1
  1460  000069                     ?_uart_puts:
  1461                           	opt stack 0
  1462  000069                     adc_read@adc_number:
  1463                           	opt stack 0
  1464  000069                     string_utils_is_upper_case@symb:
  1465                           	opt stack 0
  1466  000069                     string_utils_is_symbol@symb:
  1467                           	opt stack 0
  1468  000069                     string_utils_is_digit@symb:
  1469                           	opt stack 0
  1470  000069                     ___lbmod@dividend:
  1471                           	opt stack 0
  1472  000069                     uart_puts@pstr:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x9
  1476  000069                     	ds	1
  1477  00006A                     ??_rd_buffer_cnt:
  1478  00006A                     ?_string_utils_strncmp:
  1479                           	opt stack 0
  1480  00006A                     ?_string_utils_strlen:
  1481                           	opt stack 0
  1482  00006A                     string_utils_strchr@delimeter:
  1483                           	opt stack 0
  1484  00006A                     ___lbmod@counter:
  1485                           	opt stack 0
  1486  00006A                     rd_buffer_init@size:
  1487                           	opt stack 0
  1488  00006A                     rd_buffer_get@prec:
  1489                           	opt stack 0
  1490  00006A                     rd_buffer_put@prec:
  1491                           	opt stack 0
  1492  00006A                     string_utils_strlen@pstr:
  1493                           	opt stack 0
  1494  00006A                     string_utils_copy@psrc:
  1495                           	opt stack 0
  1496  00006A                     string_utils_split@pstr:
  1497                           	opt stack 0
  1498  00006A                     string_utils_strncmp@pstr1:
  1499                           	opt stack 0
  1500  00006A                     cla_add_value@zero:
  1501                           	opt stack 0
  1502  00006A                     ___awdiv@divisor:
  1503                           	opt stack 0
  1504  00006A                     ___awmod@divisor:
  1505                           	opt stack 0
  1506  00006A                     ___lwdiv@divisor:
  1507                           	opt stack 0
  1508  00006A                     ___wmul@multiplicand:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0xA
  1512  00006A                     	ds	1
  1513  00006B                     ___ftpack@exp:
  1514                           	opt stack 0
  1515  00006B                     ___lbmod@rem:
  1516                           	opt stack 0
  1517  00006B                     uart_puts@size:
  1518                           	opt stack 0
  1519  00006B                     string_utils_strchr@result:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0xB
  1523  00006B                     	ds	1
  1524  00006C                     ??_rd_buffer_get:
  1525  00006C                     ??_rd_buffer_init:
  1526  00006C                     ??_rd_buffer_put:
  1527  00006C                     ??_cla_add_value:
  1528  00006C                     ___awdiv@counter:
  1529                           	opt stack 0
  1530  00006C                     ___awmod@counter:
  1531                           	opt stack 0
  1532  00006C                     ___ftpack@sign:
  1533                           	opt stack 0
  1534  00006C                     ___lwdiv@counter:
  1535                           	opt stack 0
  1536  00006C                     string_utils_strlen@i:
  1537                           	opt stack 0
  1538  00006C                     string_utils_copy@maxlen:
  1539                           	opt stack 0
  1540  00006C                     string_utils_split@len:
  1541                           	opt stack 0
  1542  00006C                     string_utils_strncmp@pstr2:
  1543                           	opt stack 0
  1544  00006C                     ___wmul@product:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0xC
  1548  00006C                     	ds	1
  1549  00006D                     ??___ftpack:
  1550  00006D                     ___awdiv@sign:
  1551                           	opt stack 0
  1552  00006D                     ___awmod@sign:
  1553                           	opt stack 0
  1554  00006D                     string_utils_strchr@pos:
  1555                           	opt stack 0
  1556  00006D                     ___lwdiv@quotient:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0xD
  1560  00006D                     	ds	1
  1561  00006E                     ?_string_utils_from_hex:
  1562                           	opt stack 0
  1563  00006E                     ?_string_utils_atoi:
  1564                           	opt stack 0
  1565  00006E                     rd_buffer_init@result:
  1566                           	opt stack 0
  1567  00006E                     string_utils_split@delimeter:
  1568                           	opt stack 0
  1569  00006E                     rd_buffer_cnt@sz:
  1570                           	opt stack 0
  1571  00006E                     rd_buffer_get@last:
  1572                           	opt stack 0
  1573  00006E                     string_utils_copy@result:
  1574                           	opt stack 0
  1575  00006E                     string_utils_strncmp@len:
  1576                           	opt stack 0
  1577  00006E                     string_utils_from_hex@pdata:
  1578                           	opt stack 0
  1579  00006E                     ___awdiv@quotient:
  1580                           	opt stack 0
  1581  00006E                     string_utils_atoi@c:
  1582                           	opt stack 0
  1583                           
  1584                           ; 3 bytes @ 0xE
  1585  00006E                     	ds	1
  1586  00006F                     ??_serialport_startup:
  1587  00006F                     ?___lwmod:
  1588                           	opt stack 0
  1589  00006F                     string_utils_split@i:
  1590                           	opt stack 0
  1591  00006F                     ___lwmod@dividend:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0xF
  1595  00006F                     	ds	1
  1596  000070                     ?_pd_add_value:
  1597                           	opt stack 0
  1598  000070                     ?___ftmul:
  1599                           	opt stack 0
  1600  000070                     ?___lwtoft:
  1601                           	opt stack 0
  1602  000070                     rd_buffer_get@result:
  1603                           	opt stack 0
  1604  000070                     serialport_startup@result:
  1605                           	opt stack 0
  1606  000070                     string_utils_strncmp@case_sensitive:
  1607                           	opt stack 0
  1608  000070                     string_utils_from_hex@phex_str:
  1609                           	opt stack 0
  1610  000070                     _cla_add_value$964:
  1611                           	opt stack 0
  1612  000070                     pd_add_value@d:
  1613                           	opt stack 0
  1614  000070                     ___lwtoft@c:
  1615                           	opt stack 0
  1616  000070                     ___ftmul@f1:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x10
  1620  000070                     	ds	1
  1621  000071                     ??_string_utils_strncmp:
  1622  000071                     ??_string_utils_atoi:
  1623  000071                     startup@result:
  1624                           	opt stack 0
  1625  000071                     rd_buffer_get@first:
  1626                           	opt stack 0
  1627  000071                     string_utils_split@chains:
  1628                           	opt stack 0
  1629  000071                     ___lwmod@divisor:
  1630                           	opt stack 0
  1631                           
  1632                           ; 2 bytes @ 0x11
  1633  000071                     	ds	1
  1634  000072                     ??_string_utils_from_hex:
  1635  000072                     rd_buffer_put@mes_rec:
  1636                           	opt stack 0
  1637  000072                     _cla_add_value$965:
  1638                           	opt stack 0
  1639  000072                     pd_add_value@val:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x12
  1643  000072                     	ds	1
  1644  000073                     ?_rd_buffer_readline:
  1645                           	opt stack 0
  1646  000073                     string_utils_split@prev:
  1647                           	opt stack 0
  1648  000073                     string_utils_strncmp@result:
  1649                           	opt stack 0
  1650  000073                     ___lwmod@counter:
  1651                           	opt stack 0
  1652  000073                     rd_buffer_readline@pbuffer:
  1653                           	opt stack 0
  1654  000073                     ___ftmul@f2:
  1655                           	opt stack 0
  1656                           
  1657                           ; 3 bytes @ 0x13
  1658  000073                     	ds	1
  1659  000074                     ??_pd_add_value:
  1660  000074                     string_utils_split@symb:
  1661                           	opt stack 0
  1662  000074                     cla_add_value@d:
  1663                           	opt stack 0
  1664  000074                     rd_buffer_put@sz:
  1665                           	opt stack 0
  1666  000074                     string_utils_strncmp@pos:
  1667                           	opt stack 0
  1668  000074                     string_utils_atoi@sign:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x14
  1672  000074                     	ds	1
  1673  000075                     rd_buffer_readline@pdata:
  1674                           	opt stack 0
  1675  000075                     string_utils_from_hex@len:
  1676                           	opt stack 0
  1677                           
  1678                           ; 2 bytes @ 0x15
  1679  000075                     	ds	1
  1680  000076                     ??___ftmul:
  1681  000076                     string_utils_strncmp@symb1:
  1682                           	opt stack 0
  1683  000076                     rd_buffer_put@ind:
  1684                           	opt stack 0
  1685  000076                     string_utils_atoi@value:
  1686                           	opt stack 0
  1687                           
  1688                           ; 2 bytes @ 0x16
  1689  000076                     	ds	1
  1690  000077                     string_utils_strncmp@symb2:
  1691                           	opt stack 0
  1692  000077                     rd_buffer_readline@psize:
  1693                           	opt stack 0
  1694  000077                     string_utils_from_hex@j:
  1695                           	opt stack 0
  1696                           
  1697                           ; 2 bytes @ 0x17
  1698  000077                     	ds	1
  1699  000078                     ?_serialport_write:
  1700                           	opt stack 0
  1701  000078                     putch@byte:
  1702                           	opt stack 0
  1703  000078                     serialport_write@pstr:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x18
  1707  000078                     	ds	1
  1708  000079                     ?_printf:
  1709                           	opt stack 0
  1710  000079                     rd_buffer_readline@ch:
  1711                           	opt stack 0
  1712  000079                     string_utils_from_hex@i:
  1713                           	opt stack 0
  1714  000079                     printf@f:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x19
  1718  000079                     	ds	1
  1719  00007A                     _pd_add_value$1078:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x1A
  1723  00007A                     	ds	1
  1724  00007B                     ___ftmul@exp:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0x1B
  1728  00007B                     	ds	1
  1729  00007C                     _pd_add_value$1079:
  1730                           	opt stack 0
  1731  00007C                     ___ftmul@f3_as_product:
  1732                           	opt stack 0
  1733                           
  1734                           ; 3 bytes @ 0x1C
  1735  00007C                     	ds	1
  1736  00007D                     ??_printf:
  1737                           
  1738                           ; 0 bytes @ 0x1D
  1739  00007D                     	ds	1
  1740  00007E                     _pd_add_value$1080:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x1E
  1744  00007E                     	ds	1
  1745  00007F                     printf@ap:
  1746                           	opt stack 0
  1747  00007F                     ___ftmul@cntr:
  1748                           	opt stack 0
  1749                           
  1750                           ; 1 bytes @ 0x1F
  1751  00007F                     	ds	1
  1752  000080                     printf@flag:
  1753                           	opt stack 0
  1754  000080                     ___ftmul@sign:
  1755                           	opt stack 0
  1756  000080                     _pd_add_value$1081:
  1757                           	opt stack 0
  1758                           
  1759                           ; 2 bytes @ 0x20
  1760  000080                     	ds	1
  1761  000081                     ?___ftadd:
  1762                           	opt stack 0
  1763  000081                     ?___asftmul:
  1764                           	opt stack 0
  1765  000081                     printf@prec:
  1766                           	opt stack 0
  1767  000081                     ___ftadd@f1:
  1768                           	opt stack 0
  1769  000081                     ___asftmul@f2:
  1770                           	opt stack 0
  1771                           
  1772                           ; 3 bytes @ 0x21
  1773  000081                     	ds	1
  1774  000082                     _pd_add_value$1082:
  1775                           	opt stack 0
  1776  000082                     printf@_val:
  1777                           	opt stack 0
  1778                           
  1779                           ; 5 bytes @ 0x22
  1780  000082                     	ds	2
  1781  000084                     ___asftmul@f1p:
  1782                           	opt stack 0
  1783  000084                     pd_add_value@tmp:
  1784                           	opt stack 0
  1785  000084                     ___ftadd@f2:
  1786                           	opt stack 0
  1787                           
  1788                           ; 3 bytes @ 0x24
  1789  000084                     	ds	2
  1790  000086                     pd_add_value@i:
  1791                           	opt stack 0
  1792                           
  1793                           ; 1 bytes @ 0x26
  1794  000086                     	ds	1
  1795  000087                     ??___ftadd:
  1796  000087                     printf@c:
  1797                           	opt stack 0
  1798  000087                     detection_task@zero:
  1799                           	opt stack 0
  1800                           
  1801                           ; 3 bytes @ 0x27
  1802  000087                     	ds	1
  1803  000088                     ?_on_parameter_found:
  1804                           	opt stack 0
  1805  000088                     on_parameter_found@cmd_id:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x28
  1809  000088                     	ds	1
  1810  000089                     on_parameter_found@p_id:
  1811                           	opt stack 0
  1812                           
  1813                           ; 1 bytes @ 0x29
  1814  000089                     	ds	1
  1815  00008A                     
  1816                           ; 3 bytes @ 0x2A
  1817  00008A                     	ds	2
  1818  00008C                     ___ftadd@sign:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0x2C
  1822  00008C                     	ds	1
  1823  00008D                     on_parameter_found@operation:
  1824                           	opt stack 0
  1825  00008D                     ___ftadd@exp2:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0x2D
  1829  00008D                     	ds	1
  1830  00008E                     ___ftadd@exp1:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x2E
  1834  00008E                     	ds	1
  1835  00008F                     ?_string_utils_atof:
  1836                           	opt stack 0
  1837  00008F                     string_utils_atof@s:
  1838                           	opt stack 0
  1839                           
  1840                           ; 3 bytes @ 0x2F
  1841  00008F                     	ds	3
  1842  000092                     ??_string_utils_atof:
  1843                           
  1844                           ; 0 bytes @ 0x32
  1845  000092                     	ds	2
  1846  000094                     string_utils_atof@sign:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x34
  1850  000094                     	ds	2
  1851  000096                     string_utils_atof@i:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0x36
  1855  000096                     	ds	2
  1856  000098                     string_utils_atof@e:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x38
  1860  000098                     	ds	2
  1861  00009A                     string_utils_atof@a:
  1862                           	opt stack 0
  1863                           
  1864                           ; 3 bytes @ 0x3A
  1865  00009A                     	ds	3
  1866  00009D                     string_utils_atof@c:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x3D
  1870  00009D                     	ds	2
  1871  00009F                     ?_this_parse_item:
  1872                           	opt stack 0
  1873  00009F                     this_parse_item@pstr:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x3F
  1877  00009F                     	ds	2
  1878  0000A1                     this_parse_item@pitem:
  1879                           	opt stack 0
  1880                           
  1881                           ; 1 bytes @ 0x41
  1882  0000A1                     	ds	1
  1883  0000A2                     ??_this_parse_item:
  1884                           
  1885                           ; 0 bytes @ 0x42
  1886  0000A2                     	ds	2
  1887  0000A4                     this_parse_item@result:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x44
  1891  0000A4                     	ds	1
  1892  0000A5                     this_parse_item@pvar:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x45
  1896  0000A5                     	ds	2
  1897  0000A7                     this_parse_item@str_len:
  1898                           	opt stack 0
  1899                           
  1900                           ; 2 bytes @ 0x47
  1901  0000A7                     	ds	2
  1902  0000A9                     this_parse_item@pval:
  1903                           	opt stack 0
  1904                           
  1905                           ; 3 bytes @ 0x49
  1906  0000A9                     	ds	3
  1907  0000AC                     this_parse_item@i:
  1908                           	opt stack 0
  1909                           
  1910                           ; 1 bytes @ 0x4C
  1911  0000AC                     	ds	1
  1912  0000AD                     this_parse_item@var_len:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x4D
  1916  0000AD                     	ds	2
  1917  0000AF                     ??_syntax_string:
  1918                           
  1919                           ; 0 bytes @ 0x4F
  1920  0000AF                     	ds	1
  1921  0000B0                     ??_main:
  1922                           
  1923                           ; 0 bytes @ 0x50
  1924  0000B0                     	ds	1
  1925                           tosu	equ	0xFFF
  1926                           tosh	equ	0xFFE
  1927                           tosl	equ	0xFFD
  1928                           pclath	equ	0xFFA
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           prodh	equ	0xFF4
  1934                           prodl	equ	0xFF3
  1935                           intcon	equ	0xFF2
  1936                           indf0	equ	0xFEF
  1937                           postinc0	equ	0xFEE
  1938                           fsr0h	equ	0xFEA
  1939                           fsr0l	equ	0xFE9
  1940                           wreg	equ	0xFE8
  1941                           indf1	equ	0xFE7
  1942                           postinc1	equ	0xFE6
  1943                           postdec1	equ	0xFE5
  1944                           fsr1h	equ	0xFE2
  1945                           fsr1l	equ	0xFE1
  1946                           indf2	equ	0xFDF
  1947                           postinc2	equ	0xFDE
  1948                           postdec2	equ	0xFDD
  1949                           fsr2h	equ	0xFDA
  1950                           fsr2l	equ	0xFD9
  1951                           status	equ	0xFD8
  1952                           
  1953                           	psect	cstackCOMRAM
  1954  000001                     __pcstackCOMRAM:
  1955                           	opt stack 0
  1956  000001                     ?_syntax_get_text:
  1957                           	opt stack 0
  1958  000001                     
  1959                           ; 1 bytes @ 0x0
  1960  000001                     	ds	18
  1961  000013                     ??_isr_high:
  1962                           
  1963                           ; 0 bytes @ 0x12
  1964  000013                     	ds	8
  1965  00001B                     ??i2_adc_read:
  1966  00001B                     ?i2_rd_buffer_put:
  1967                           	opt stack 0
  1968  00001B                     _uart_error$232:
  1969                           	opt stack 0
  1970  00001B                     i2rd_buffer_put@pbuffer:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x1A
  1974  00001B                     	ds	1
  1975  00001C                     uart_getc@pbyte:
  1976                           	opt stack 0
  1977  00001C                     i2adc_read@adc_number:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x1B
  1981  00001C                     	ds	1
  1982  00001D                     uart_getc@result:
  1983                           	opt stack 0
  1984  00001D                     i2rd_buffer_put@prec:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0x1C
  1988  00001D                     	ds	2
  1989  00001F                     ??i2_rd_buffer_put:
  1990                           
  1991                           ; 0 bytes @ 0x1E
  1992  00001F                     	ds	6
  1993  000025                     i2rd_buffer_put@mes_rec:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x24
  1997  000025                     	ds	2
  1998  000027                     i2rd_buffer_put@sz:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x26
  2002  000027                     	ds	2
  2003  000029                     i2rd_buffer_put@ind:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x28
  2007  000029                     	ds	2
  2008  00002B                     ??_serialport_service:
  2009  00002B                     detection_obtain_analog_service@adc_data:
  2010                           	opt stack 0
  2011                           
  2012                           ; 1 bytes @ 0x2A
  2013  00002B                     	ds	1
  2014  00002C                     serialport_service@byte:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x2B
  2018  00002C                     	ds	1
  2019                           tosu	equ	0xFFF
  2020                           tosh	equ	0xFFE
  2021                           tosl	equ	0xFFD
  2022                           pclath	equ	0xFFA
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           prodh	equ	0xFF4
  2028                           prodl	equ	0xFF3
  2029                           intcon	equ	0xFF2
  2030                           indf0	equ	0xFEF
  2031                           postinc0	equ	0xFEE
  2032                           fsr0h	equ	0xFEA
  2033                           fsr0l	equ	0xFE9
  2034                           wreg	equ	0xFE8
  2035                           indf1	equ	0xFE7
  2036                           postinc1	equ	0xFE6
  2037                           postdec1	equ	0xFE5
  2038                           fsr1h	equ	0xFE2
  2039                           fsr1l	equ	0xFE1
  2040                           indf2	equ	0xFDF
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;;
  2048 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2049 ;;
  2050 ;; *************** function _main *****************
  2051 ;; Defined at:
  2052 ;;		line 20 in file "src/main.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  i               1   14[BANK1 ] unsigned char 
  2057 ;;  event_priori    1   13[BANK1 ] char 
  2058 ;;  event_old       1   12[BANK1 ] char 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  2  1007[COMRAM] int 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2068 ;;      Params:         0       0       0       0       0       0       0
  2069 ;;      Locals:         0       0       3       0       0       0       0
  2070 ;;      Temps:          0       1       0       0       0       0       0
  2071 ;;      Totals:         0       1       3       0       0       0       0
  2072 ;;Total ram usage:        4 bytes
  2073 ;; Hardware stack levels required when called:   12
  2074 ;; This function calls:
  2075 ;;		_delay_ms
  2076 ;;		_startup
  2077 ;;		_detection_task
  2078 ;;		_serialport_task
  2079 ;; This function is called by:
  2080 ;;		Startup code after reset
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text0
  2085  001548                     __ptext0:
  2086                           	opt stack 0
  2087  001548                     _main:
  2088                           	opt stack 19
  2089                           
  2090                           ;main.c: 21: while(startup() != RESULT_SUCCESS)
  2091  001548  D006               	goto	l5791
  2092  00154A                     l5789:
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 22: {
  2096                           ;main.c: 23: delay_ms(1000);
  2097  00154A  0E03               	movlw	3
  2098  00154C  6F69               	movwf	(?_delay_ms+1)& (0+255),b
  2099  00154E  0EE8               	movlw	232
  2100  001550  6F68               	movwf	?_delay_ms& (0+255),b
  2101  001552  ECC5  F010         	call	_delay_ms	;wreg free
  2102  001556                     l5791:
  2103  001556  EC0E  F00F         	call	_startup	;wreg free
  2104  00155A  6FB0               	movwf	??_main& (0+255),b
  2105  00155C  05B0               	decf	??_main& (0+255),w,b
  2106  00155E  E1F5               	bnz	l5789
  2107                           
  2108                           ; BSR set to: 0
  2109                           
  2110                           ;main.c: 24: };
  2111                           ;main.c: 26: do{INTCONbits.GIEH=(1); INTCONbits.GIEL=(1);}while(0);;
  2112  001560  8EF2               	bsf	intcon,7,c	;volatile
  2113  001562  8CF2               	bsf	intcon,6,c	;volatile
  2114  001564                     l1014:
  2115  001564  0101               	movlb	1	; () banked
  2116  001566  69DC               	setf	main@event_old& (0+255),b
  2117  001568  69DD               	setf	main@event_priority& (0+255),b
  2118  00156A  6BDE               	clrf	main@i& (0+255),b
  2119  00156C                     l5797:
  2120                           
  2121                           ; BSR set to: 1
  2122  00156C  51DE               	movf	main@i& (0+255),w,b
  2123  00156E  0F35               	addlw	low _pool	;volatile
  2124  001570  6ED9               	movwf	fsr2l,c
  2125  001572  6ADA               	clrf	fsr2h,c
  2126  001574  0E01               	movlw	1
  2127  001576  62DF               	cpfseq	indf2,c
  2128  001578  D011               	goto	l5809
  2129                           
  2130                           ; BSR set to: 1
  2131  00157A  51DE               	movf	main@i& (0+255),w,b
  2132  00157C  0F2D               	addlw	low _event_miss	;volatile
  2133  00157E  6ED9               	movwf	fsr2l,c
  2134  001580  6ADA               	clrf	fsr2h,c
  2135  001582  50DF               	movf	indf2,w,c
  2136  001584  E103               	bnz	l5803
  2137                           
  2138                           ; BSR set to: 1
  2139  001586  C1DE  F1DC         	movff	main@i,main@event_old
  2140  00158A  D005               	goto	l5805
  2141  00158C                     l5803:
  2142                           
  2143                           ; BSR set to: 1
  2144  00158C  51DE               	movf	main@i& (0+255),w,b
  2145  00158E  0F2D               	addlw	low _event_miss	;volatile
  2146  001590  6ED9               	movwf	fsr2l,c
  2147  001592  6ADA               	clrf	fsr2h,c
  2148  001594  06DF               	decf	indf2,f,c
  2149  001596                     l5805:
  2150                           
  2151                           ; BSR set to: 1
  2152  001596  BFDD               	btfsc	main@event_priority& (0+255),7,b
  2153                           
  2154                           ; BSR set to: 1
  2155  001598  C1DE  F1DD         	movff	main@i,main@event_priority
  2156  00159C                     l5809:
  2157                           
  2158                           ; BSR set to: 1
  2159  00159C  2BDE               	incf	main@i& (0+255),f,b
  2160                           
  2161                           ; BSR set to: 1
  2162  00159E  0E07               	movlw	7
  2163  0015A0  65DE               	cpfsgt	main@i& (0+255),b
  2164  0015A2  D7E4               	goto	l5797
  2165                           
  2166                           ; BSR set to: 1
  2167  0015A4  BFDC               	btfsc	main@event_old& (0+255),7,b
  2168  0015A6  D011               	goto	l1021
  2169                           
  2170                           ; BSR set to: 1
  2171  0015A8  51DC               	movf	main@event_old& (0+255),w,b
  2172  0015AA  D827               	call	PL64	;call to abstracted procedure
  2173  0015AC  D801               	call	u5878
  2174  0015AE  D00A               	goto	u5879
  2175  0015B0                     u5878:
  2176  0015B0  0005               	push	
  2177  0015B2  6EFA               	movwf	pclath,c
  2178  0015B4  50DE               	movf	postinc2,w,c
  2179  0015B6  6EFD               	movwf	tosl,c
  2180  0015B8  50DE               	movf	postinc2,w,c
  2181  0015BA  6EFE               	movwf	tosh,c
  2182  0015BC  50F8               	movf	tblptru,w,c
  2183  0015BE  6EFF               	movwf	tosu,c
  2184  0015C0  50FA               	movf	pclath,w,c
  2185  0015C2  0012               	return		;indir
  2186  0015C4                     u5879:
  2187                           
  2188                           ; BSR set to: 0
  2189  0015C4  0101               	movlb	1	; () banked
  2190  0015C6  51DC               	movf	main@event_old& (0+255),w,b
  2191  0015C8  D012               	goto	L1
  2192  0015CA                     l1021:
  2193                           
  2194                           ; BSR set to: 1
  2195  0015CA  BFDD               	btfsc	main@event_priority& (0+255),7,b
  2196  0015CC  D014               	goto	l1024
  2197                           
  2198                           ; BSR set to: 1
  2199  0015CE  51DD               	movf	main@event_priority& (0+255),w,b
  2200  0015D0  D814               	call	PL64	;call to abstracted procedure
  2201  0015D2  D801               	call	u5898
  2202  0015D4  D00A               	goto	u5899
  2203  0015D6                     u5898:
  2204  0015D6  0005               	push	
  2205  0015D8  6EFA               	movwf	pclath,c
  2206  0015DA  50DE               	movf	postinc2,w,c
  2207  0015DC  6EFD               	movwf	tosl,c
  2208  0015DE  50DE               	movf	postinc2,w,c
  2209  0015E0  6EFE               	movwf	tosh,c
  2210  0015E2  50F8               	movf	tblptru,w,c
  2211  0015E4  6EFF               	movwf	tosu,c
  2212  0015E6  50FA               	movf	pclath,w,c
  2213  0015E8  0012               	return		;indir
  2214  0015EA                     u5899:
  2215                           
  2216                           ; BSR set to: 0
  2217  0015EA  0101               	movlb	1	; () banked
  2218  0015EC  51DD               	movf	main@event_priority& (0+255),w,b
  2219  0015EE                     L1:
  2220  0015EE  0F35               	addlw	low _pool	;volatile
  2221  0015F0  6ED9               	movwf	fsr2l,c
  2222  0015F2  6ADA               	clrf	fsr2h,c
  2223  0015F4  6ADF               	clrf	indf2,c
  2224  0015F6                     l1024:
  2225                           
  2226                           ; BSR set to: 1
  2227  0015F6  0004               	clrwdt		;# 
  2228  0015F8  D7B5               	goto	l1014
  2229  0015FA                     PL64:
  2230                           	opt stack 19
  2231  0015FA  0D02               	mullw	2
  2232  0015FC  50F3               	movf	prodl,w,c
  2233  0015FE  0100               	movlb	0	; () banked
  2234  001600  0FB1               	addlw	low _events	;volatile
  2235  001602  6ED9               	movwf	fsr2l,c
  2236  001604  6ADA               	clrf	fsr2h,c
  2237  001606  0012               	return	
  2238  001608                     __end_ofPL64:
  2239                           	opt stack 0
  2240                           tosu	equ	0xFFF
  2241                           tosh	equ	0xFFE
  2242                           tosl	equ	0xFFD
  2243                           pclath	equ	0xFFA
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           prodh	equ	0xFF4
  2249                           prodl	equ	0xFF3
  2250                           intcon	equ	0xFF2
  2251                           indf0	equ	0xFEF
  2252                           postinc0	equ	0xFEE
  2253                           fsr0h	equ	0xFEA
  2254                           fsr0l	equ	0xFE9
  2255                           wreg	equ	0xFE8
  2256                           indf1	equ	0xFE7
  2257                           postinc1	equ	0xFE6
  2258                           postdec1	equ	0xFE5
  2259                           fsr1h	equ	0xFE2
  2260                           fsr1l	equ	0xFE1
  2261                           indf2	equ	0xFDF
  2262                           postinc2	equ	0xFDE
  2263                           postdec2	equ	0xFDD
  2264                           fsr2h	equ	0xFDA
  2265                           fsr2l	equ	0xFD9
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _delay_ms *****************
  2269 ;; Defined at:
  2270 ;;		line 18 in file "src/drivers/delay.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  delay           2    8[BANK0 ] unsigned int 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;		None
  2275 ;; Return value:  Size  Location     Type
  2276 ;;		None               void
  2277 ;; Registers used:
  2278 ;;		wreg, status,2, status,0
  2279 ;; Tracked objects:
  2280 ;;		On entry : F/0
  2281 ;;		On exit  : F/0
  2282 ;;		Unchanged: FFFFFFF0/0
  2283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2284 ;;      Params:         0       2       0       0       0       0       0
  2285 ;;      Locals:         0       0       0       0       0       0       0
  2286 ;;      Temps:          0       0       0       0       0       0       0
  2287 ;;      Totals:         0       2       0       0       0       0       0
  2288 ;;Total ram usage:        2 bytes
  2289 ;; Hardware stack levels used:    1
  2290 ;; Hardware stack levels required when called:    5
  2291 ;; This function calls:
  2292 ;;		Nothing
  2293 ;; This function is called by:
  2294 ;;		_main
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text1
  2299  00218A                     __ptext1:
  2300                           	opt stack 0
  2301  00218A                     __end_of_main:
  2302                           	opt stack 0
  2303  00218A                     _delay_ms:
  2304                           	opt stack 25
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;delay.c: 19: this_delay_timer_ms = delay;
  2308  00218A  C068  F0F6         	movff	delay_ms@delay,_this_delay_timer_ms	;volatile
  2309  00218E  C069  F0F7         	movff	delay_ms@delay+1,_this_delay_timer_ms+1	;volatile
  2310  002192                     l4877:
  2311                           
  2312                           ; BSR set to: 0
  2313  002192  51F7               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
  2314  002194  11F6               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
  2315  002196  B4D8               	btfsc	status,2,c
  2316  002198  0012               	return	
  2317  00219A  D7FB               	goto	l4877
  2318  00219C                     __end_of_delay_ms:
  2319                           	opt stack 0
  2320                           tosu	equ	0xFFF
  2321                           tosh	equ	0xFFE
  2322                           tosl	equ	0xFFD
  2323                           pclath	equ	0xFFA
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           indf0	equ	0xFEF
  2332                           postinc0	equ	0xFEE
  2333                           fsr0h	equ	0xFEA
  2334                           fsr0l	equ	0xFE9
  2335                           wreg	equ	0xFE8
  2336                           indf1	equ	0xFE7
  2337                           postinc1	equ	0xFE6
  2338                           postdec1	equ	0xFE5
  2339                           fsr1h	equ	0xFE2
  2340                           fsr1l	equ	0xFE1
  2341                           indf2	equ	0xFDF
  2342                           postinc2	equ	0xFDE
  2343                           postdec2	equ	0xFDD
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function _detection_task *****************
  2349 ;; Defined at:
  2350 ;;		line 86 in file "src/modules/detection.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;  zero            3   39[BANK0 ] m
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2359 ;; Tracked objects:
  2360 ;;		On entry : F/0
  2361 ;;		On exit  : F/0
  2362 ;;		Unchanged: FFFFFFF0/0
  2363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2364 ;;      Params:         0       0       0       0       0       0       0
  2365 ;;      Locals:         0       3       0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0       0       0
  2367 ;;      Totals:         0       3       0       0       0       0       0
  2368 ;;Total ram usage:        3 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    7
  2371 ;; This function calls:
  2372 ;;		_pd_add_value
  2373 ;;		_cla_add_value
  2374 ;; This function is called by:
  2375 ;;		_startup
  2376 ;;		_main
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text2
  2381  0019E2                     __ptext2:
  2382                           	opt stack 0
  2383  0019E2                     _detection_task:
  2384                           	opt stack 23
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;detection.c: 87: static CHAR alarm_cla;
  2388                           ;detection.c: 88: static CHAR alarm_wav;
  2389                           ;detection.c: 89: INT24 zero;
  2390                           ;detection.c: 91: alarm_wav = (CHAR)pd_add_value(&pd_detector, (INT24)g_analog0);
  2391                           
  2392                           ; BSR set to: 0
  2393  0019E2  0E01               	movlw	high _pd_detector	;volatile
  2394  0019E4  0100               	movlb	0	; () banked
  2395  0019E6  6F71               	movwf	(?_pd_add_value+1)& (0+255),b
  2396  0019E8  0E6B               	movlw	low _pd_detector	;volatile
  2397  0019EA  6F70               	movwf	?_pd_add_value& (0+255),b
  2398  0019EC  C0C1  F072         	movff	_g_analog0,?_pd_add_value+2	;volatile
  2399  0019F0  C0C2  F073         	movff	_g_analog0+1,?_pd_add_value+3	;volatile
  2400  0019F4  EC7A  F000         	call	_pd_add_value	;wreg free
  2401  0019F8  6FCA               	movwf	detection_task@alarm_wav& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;detection.c: 92: zero = pd_detector.ref_v;
  2405  0019FA  C1BF  F087         	movff	_pd_detector+84,detection_task@zero	;volatile
  2406  0019FE  0100               	movlb	0	; () banked
  2407  001A00  C1C0  F088         	movff	_pd_detector+85,detection_task@zero+1	;volatile
  2408  001A04  6B89               	clrf	(detection_task@zero+2)& (0+255),b
  2409  001A06  BF88               	btfsc	(detection_task@zero+1)& (0+255),7,b
  2410  001A08  0789               	decf	(detection_task@zero+2)& (0+255),f,b
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;detection.c: 93: alarm_cla = (CHAR)cla_add_value(&cla_detector, (INT24)g_analog0, zero);
  2414  001A0A  C0C1  F068         	movff	_g_analog0,?_cla_add_value	;volatile
  2415  001A0E  C0C2  F069         	movff	_g_analog0+1,?_cla_add_value+1	;volatile
  2416  001A12  C087  F06A         	movff	detection_task@zero,?_cla_add_value+2
  2417  001A16  C088  F06B         	movff	detection_task@zero+1,?_cla_add_value+3
  2418  001A1A  0ECB               	movlw	_cla_detector& (0+255)	;volatile
  2419  001A1C  EC23  F004         	call	_cla_add_value
  2420  001A20  6FC9               	movwf	detection_task@alarm_cla& (0+255),b
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;detection.c: 94: this_warning = cla_detector.status.over_trig;
  2424  001A22  0E00               	movlw	0
  2425  001A24  B5D9               	btfsc	(_cla_detector+14)& (0+255),2,b	;volatile
  2426  001A26  0E01               	movlw	1
  2427  001A28  6FC8               	movwf	_this_warning& (0+255),b	;volatile
  2428                           
  2429                           ;detection.c: 96: switch (g_CONFIG.det_mode)
  2430  001A2A  D008               	goto	l5687
  2431  001A2C                     l808:
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;detection.c: 102: this_alarm = FALSE;
  2435  001A2C  6BC7               	clrf	_this_alarm& (0+255),b	;volatile
  2436                           
  2437                           ;detection.c: 103: break;
  2438  001A2E  D00D               	goto	l5689
  2439  001A30                     l810:
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;detection.c: 107: this_alarm = alarm_cla;
  2443  001A30  C0C9  F0C7         	movff	detection_task@alarm_cla,_this_alarm	;volatile
  2444                           
  2445                           ;detection.c: 108: break;
  2446  001A34  D00A               	goto	l5689
  2447  001A36                     l811:
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;detection.c: 115: this_alarm= alarm_wav;
  2451  001A36  C0CA  F0C7         	movff	detection_task@alarm_wav,_this_alarm	;volatile
  2452                           
  2453                           ;detection.c: 116: break;
  2454  001A3A  D007               	goto	l5689
  2455  001A3C                     l5687:
  2456                           
  2457                           ; BSR set to: 0
  2458  001A3C  51E7               	movf	(_g_CONFIG+7)& (0+255),w,b	;volatile
  2459                           
  2460                           ; Switch size 1, requested type "space"
  2461                           ; Number of cases is 3, Range of values is 0 to 2
  2462                           ; switch strategies available:
  2463                           ; Name         Instructions Cycles
  2464                           ; simple_byte           10     6 (average)
  2465                           ;	Chosen strategy is simple_byte
  2466  001A3E  E0F6               	bz	l808
  2467  001A40  0A01               	xorlw	1	; case 1
  2468  001A42  E0F6               	bz	l810
  2469  001A44  0A03               	xorlw	3	; case 2
  2470  001A46  E0F7               	bz	l811
  2471  001A48  D7F1               	goto	l808
  2472  001A4A                     l5689:
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;detection.c: 124: if(this_alarm) STATUS |= (1<<0);
  2476  001A4A  51C7               	movf	_this_alarm& (0+255),w,b	;volatile
  2477  001A4C  A4D8               	btfss	status,2,c
  2478                           
  2479                           ; BSR set to: 0
  2480  001A4E  80D8               	bsf	status,0,c	;volatile
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;detection.c: 125: if(this_warning) STATUS |= (1<<1);
  2484  001A50  51C8               	movf	_this_warning& (0+255),w,b	;volatile
  2485  001A52  A4D8               	btfss	status,2,c
  2486                           
  2487                           ; BSR set to: 0
  2488  001A54  82D8               	bsf	status,1,c	;volatile
  2489                           
  2490                           ; BSR set to: 0
  2491  001A56  0012               	return	
  2492  001A58                     __end_of_detection_task:
  2493                           	opt stack 0
  2494                           tosu	equ	0xFFF
  2495                           tosh	equ	0xFFE
  2496                           tosl	equ	0xFFD
  2497                           pclath	equ	0xFFA
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           prodh	equ	0xFF4
  2503                           prodl	equ	0xFF3
  2504                           intcon	equ	0xFF2
  2505                           indf0	equ	0xFEF
  2506                           postinc0	equ	0xFEE
  2507                           fsr0h	equ	0xFEA
  2508                           fsr0l	equ	0xFE9
  2509                           wreg	equ	0xFE8
  2510                           indf1	equ	0xFE7
  2511                           postinc1	equ	0xFE6
  2512                           postdec1	equ	0xFE5
  2513                           fsr1h	equ	0xFE2
  2514                           fsr1l	equ	0xFE1
  2515                           indf2	equ	0xFDF
  2516                           postinc2	equ	0xFDE
  2517                           postdec2	equ	0xFDD
  2518                           fsr2h	equ	0xFDA
  2519                           fsr2l	equ	0xFD9
  2520                           status	equ	0xFD8
  2521                           
  2522 ;; *************** function _serialport_task *****************
  2523 ;; Defined at:
  2524 ;;		line 38 in file "src/modules/serialport.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;  size            2   10[BANK1 ] int 
  2529 ;;  byte            1    9[BANK1 ] unsigned char 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;		None               void
  2532 ;; Registers used:
  2533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : F/0
  2536 ;;		On exit  : F/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2539 ;;      Params:         0       0       0       0       0       0       0
  2540 ;;      Locals:         0       0       3       0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0
  2542 ;;      Totals:         0       0       3       0       0       0       0
  2543 ;;Total ram usage:        3 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:   11
  2546 ;; This function calls:
  2547 ;;		_syntax_string
  2548 ;;		_rd_buffer_readline
  2549 ;;		_rd_buffer_get
  2550 ;;		_uart_putc
  2551 ;;		_rd_buffer_cnt
  2552 ;; This function is called by:
  2553 ;;		_startup
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text3
  2559  0018F0                     __ptext3:
  2560                           	opt stack 0
  2561  0018F0                     _serialport_task:
  2562                           	opt stack 19
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;serialport.c: 39: SIZE size;
  2566                           ;serialport.c: 40: UINT8 byte;
  2567                           ;serialport.c: 41: while (rd_buffer_readline(&g_rx_buffer, &serialport_buffer, &size)) {
  2568                           
  2569                           ; BSR set to: 0
  2570  0018F0  D00B               	goto	l5055
  2571  0018F2                     l5053:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;serialport.c: 42: syntax_string(serialport_buffer, size);
  2575  0018F2  0E03               	movlw	high _serialport_buffer
  2576  0018F4  0101               	movlb	1	; () banked
  2577  0018F6  6FD1               	movwf	(?_syntax_string+1)& (0+255),b
  2578  0018F8  0E7F               	movlw	low _serialport_buffer
  2579  0018FA  6FD0               	movwf	?_syntax_string& (0+255),b
  2580  0018FC  C1DA  F1D2         	movff	serialport_task@size,?_syntax_string+2
  2581  001900  C1DB  F1D3         	movff	serialport_task@size+1,?_syntax_string+3
  2582  001904  EC9C  F007         	call	_syntax_string	;wreg free
  2583  001908                     l5055:
  2584  001908  0E02               	movlw	high _g_rx_buffer
  2585  00190A  0100               	movlb	0	; () banked
  2586  00190C  6F74               	movwf	(?_rd_buffer_readline+1)& (0+255),b
  2587  00190E  0E7F               	movlw	low _g_rx_buffer
  2588  001910  6F73               	movwf	?_rd_buffer_readline& (0+255),b
  2589  001912  0E03               	movlw	high _serialport_buffer
  2590  001914  6F76               	movwf	(?_rd_buffer_readline+3)& (0+255),b
  2591  001916  0E7F               	movlw	low _serialport_buffer
  2592  001918  6F75               	movwf	(?_rd_buffer_readline+2)& (0+255),b
  2593  00191A  0E01               	movlw	high serialport_task@size
  2594  00191C  6F78               	movwf	(?_rd_buffer_readline+5)& (0+255),b
  2595  00191E  0EDA               	movlw	low serialport_task@size
  2596  001920  6F77               	movwf	(?_rd_buffer_readline+4)& (0+255),b
  2597  001922  EC66  F00D         	call	_rd_buffer_readline	;wreg free
  2598  001926  0900               	iorlw	0
  2599  001928  E010               	bz	l5061
  2600  00192A  D7E3               	goto	l5053
  2601  00192C                     l5057:
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;serialport.c: 46: rd_buffer_get(&g_tx_buffer, &byte);
  2605  00192C  0E01               	movlw	high _g_tx_buffer
  2606  00192E  0100               	movlb	0	; () banked
  2607  001930  6F69               	movwf	(?_rd_buffer_get+1)& (0+255),b
  2608  001932  0E00               	movlw	low _g_tx_buffer
  2609  001934  6F68               	movwf	?_rd_buffer_get& (0+255),b
  2610  001936  0E01               	movlw	high serialport_task@byte
  2611  001938  6F6B               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2612  00193A  0ED9               	movlw	low serialport_task@byte
  2613  00193C  6F6A               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2614  00193E  EC04  F00B         	call	_rd_buffer_get	;wreg free
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;serialport.c: 47: uart_putc(byte);
  2618  001942  0101               	movlb	1	; () banked
  2619  001944  51D9               	movf	serialport_task@byte& (0+255),w,b
  2620  001946  ECCE  F010         	call	_uart_putc
  2621  00194A                     l5061:
  2622  00194A  0E01               	movlw	high _g_tx_buffer
  2623  00194C  0100               	movlb	0	; () banked
  2624  00194E  6F69               	movwf	(?_rd_buffer_cnt+1)& (0+255),b
  2625  001950  0E00               	movlw	low _g_tx_buffer
  2626  001952  6F68               	movwf	?_rd_buffer_cnt& (0+255),b
  2627  001954  ECFE  F00D         	call	_rd_buffer_cnt	;wreg free
  2628  001958  5169               	movf	(?_rd_buffer_cnt+1)& (0+255),w,b
  2629  00195A  0A80               	xorlw	128
  2630  00195C  0F80               	addlw	-128
  2631  00195E  0E01               	movlw	1
  2632  001960  B4D8               	btfsc	status,2,c
  2633  001962  5D68               	subwf	?_rd_buffer_cnt& (0+255),w,b
  2634  001964  A0D8               	btfss	status,0,c
  2635  001966  0012               	return	
  2636  001968  D7E1               	goto	l5057
  2637  00196A                     __end_of_serialport_task:
  2638                           	opt stack 0
  2639                           tosu	equ	0xFFF
  2640                           tosh	equ	0xFFE
  2641                           tosl	equ	0xFFD
  2642                           pclath	equ	0xFFA
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           indf0	equ	0xFEF
  2651                           postinc0	equ	0xFEE
  2652                           fsr0h	equ	0xFEA
  2653                           fsr0l	equ	0xFE9
  2654                           wreg	equ	0xFE8
  2655                           indf1	equ	0xFE7
  2656                           postinc1	equ	0xFE6
  2657                           postdec1	equ	0xFE5
  2658                           fsr1h	equ	0xFE2
  2659                           fsr1l	equ	0xFE1
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           fsr2h	equ	0xFDA
  2664                           fsr2l	equ	0xFD9
  2665                           status	equ	0xFD8
  2666                           
  2667 ;; *************** function _rd_buffer_readline *****************
  2668 ;; Defined at:
  2669 ;;		line 38 in file "src/modules/rd_buffer.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  pbuffer         2   19[BANK0 ] PTR struct .
  2672 ;;		 -> g_rx_buffer(107), 
  2673 ;;  pdata           2   21[BANK0 ] PTR unsigned char 
  2674 ;;		 -> serialport_buffer(100), 
  2675 ;;  psize           2   23[BANK0 ] PTR int 
  2676 ;;		 -> serialport_task@size(2), 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  ch              1   25[BANK0 ] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      unsigned char 
  2681 ;; Registers used:
  2682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : F/0
  2685 ;;		On exit  : F/0
  2686 ;;		Unchanged: FFFFFFF0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2688 ;;      Params:         0       6       0       0       0       0       0
  2689 ;;      Locals:         0       1       0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0
  2691 ;;      Totals:         0       7       0       0       0       0       0
  2692 ;;Total ram usage:        7 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    6
  2695 ;; This function calls:
  2696 ;;		_rd_buffer_get
  2697 ;; This function is called by:
  2698 ;;		_serialport_task
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text4
  2703  001ACC                     __ptext4:
  2704                           	opt stack 0
  2705  001ACC                     _rd_buffer_readline:
  2706                           	opt stack 23
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;rd_buffer.c: 39: *psize=0;
  2710                           
  2711                           ; BSR set to: 0
  2712  001ACC  C077  FFD9         	movff	rd_buffer_readline@psize,fsr2l
  2713  001AD0  C078  FFDA         	movff	rd_buffer_readline@psize+1,fsr2h
  2714  001AD4  6ADE               	clrf	postinc2,c
  2715  001AD6  6ADD               	clrf	postdec2,c
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;rd_buffer.c: 40: if( pdata )
  2719  001AD8  5176               	movf	(rd_buffer_readline@pdata+1)& (0+255),w,b
  2720  001ADA  1175               	iorwf	rd_buffer_readline@pdata& (0+255),w,b
  2721  001ADC  E11F               	bnz	l4975
  2722  001ADE  0C00               	retlw	0
  2723  001AE0                     l4963:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;rd_buffer.c: 44: {
  2727                           ;rd_buffer.c: 45: if(ch=='\n' || ch=='\r')
  2728  001AE0  5179               	movf	rd_buffer_readline@ch& (0+255),w,b
  2729  001AE2  0A0A               	xorlw	10
  2730  001AE4  E003               	bz	l4967
  2731                           
  2732                           ; BSR set to: 0
  2733  001AE6  5179               	movf	rd_buffer_readline@ch& (0+255),w,b
  2734  001AE8  0A0D               	xorlw	13
  2735  001AEA  E109               	bnz	l4969
  2736  001AEC                     l4967:
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;rd_buffer.c: 46: {
  2740                           ;rd_buffer.c: 47: *(++pdata) = '\0';
  2741  001AEC  4B75               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2742  001AEE  2B76               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2743  001AF0  C075  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2744  001AF4  C076  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2745  001AF8  0E00               	movlw	0
  2746  001AFA  6EDF               	movwf	indf2,c
  2747                           
  2748                           ;rd_buffer.c: 48: break;
  2749  001AFC  0C01               	retlw	1
  2750  001AFE                     l4969:
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;rd_buffer.c: 49: }
  2754                           ;rd_buffer.c: 50: *pdata++ = ch;
  2755  001AFE  C075  FFD9         	movff	rd_buffer_readline@pdata,fsr2l
  2756  001B02  C076  FFDA         	movff	rd_buffer_readline@pdata+1,fsr2h
  2757  001B06  C079  FFDF         	movff	rd_buffer_readline@ch,indf2
  2758                           
  2759                           ; BSR set to: 0
  2760  001B0A  4B75               	infsnz	rd_buffer_readline@pdata& (0+255),f,b
  2761  001B0C  2B76               	incf	(rd_buffer_readline@pdata+1)& (0+255),f,b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;rd_buffer.c: 51: (*psize)++;
  2765  001B0E  C077  FFD9         	movff	rd_buffer_readline@psize,fsr2l
  2766  001B12  C078  FFDA         	movff	rd_buffer_readline@psize+1,fsr2h
  2767  001B16  2ADE               	incf	postinc2,f,c
  2768  001B18  0E00               	movlw	0
  2769  001B1A  22DD               	addwfc	postdec2,f,c
  2770  001B1C                     l4975:
  2771                           
  2772                           ; BSR set to: 0
  2773  001B1C  C073  F068         	movff	rd_buffer_readline@pbuffer,?_rd_buffer_get
  2774  001B20  C074  F069         	movff	rd_buffer_readline@pbuffer+1,?_rd_buffer_get+1
  2775  001B24  0E00               	movlw	high rd_buffer_readline@ch
  2776  001B26  6F6B               	movwf	(?_rd_buffer_get+3)& (0+255),b
  2777  001B28  0E79               	movlw	low rd_buffer_readline@ch
  2778  001B2A  6F6A               	movwf	(?_rd_buffer_get+2)& (0+255),b
  2779  001B2C  EC04  F00B         	call	_rd_buffer_get	;wreg free
  2780  001B30  0900               	iorlw	0
  2781  001B32  E1D6               	bnz	l4963
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;rd_buffer.c: 52: }
  2785                           ;rd_buffer.c: 53: return TRUE;
  2786  001B34  0C01               	retlw	1
  2787  001B36                     __end_of_rd_buffer_readline:
  2788                           	opt stack 0
  2789                           tosu	equ	0xFFF
  2790                           tosh	equ	0xFFE
  2791                           tosl	equ	0xFFD
  2792                           pclath	equ	0xFFA
  2793                           tblptru	equ	0xFF8
  2794                           tblptrh	equ	0xFF7
  2795                           tblptrl	equ	0xFF6
  2796                           tablat	equ	0xFF5
  2797                           prodh	equ	0xFF4
  2798                           prodl	equ	0xFF3
  2799                           intcon	equ	0xFF2
  2800                           indf0	equ	0xFEF
  2801                           postinc0	equ	0xFEE
  2802                           fsr0h	equ	0xFEA
  2803                           fsr0l	equ	0xFE9
  2804                           wreg	equ	0xFE8
  2805                           indf1	equ	0xFE7
  2806                           postinc1	equ	0xFE6
  2807                           postdec1	equ	0xFE5
  2808                           fsr1h	equ	0xFE2
  2809                           fsr1l	equ	0xFE1
  2810                           indf2	equ	0xFDF
  2811                           postinc2	equ	0xFDE
  2812                           postdec2	equ	0xFDD
  2813                           fsr2h	equ	0xFDA
  2814                           fsr2l	equ	0xFD9
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _rd_buffer_get *****************
  2818 ;; Defined at:
  2819 ;;		line 125 in file "src/modules/rd_buffer.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  pbuffer         2    8[BANK0 ] PTR struct .
  2822 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  2823 ;;  prec            2   10[BANK0 ] PTR unsigned char 
  2824 ;;		 -> serialport_task@byte(1), rd_buffer_readline@ch(1), 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  first           2   17[BANK0 ] int 
  2827 ;;  last            2   14[BANK0 ] int 
  2828 ;;  result          1   16[BANK0 ] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      unsigned char 
  2831 ;; Registers used:
  2832 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2833 ;; Tracked objects:
  2834 ;;		On entry : F/0
  2835 ;;		On exit  : F/0
  2836 ;;		Unchanged: FFFFFFF0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2838 ;;      Params:         0       4       0       0       0       0       0
  2839 ;;      Locals:         0       5       0       0       0       0       0
  2840 ;;      Temps:          0       2       0       0       0       0       0
  2841 ;;      Totals:         0      11       0       0       0       0       0
  2842 ;;Total ram usage:       11 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    5
  2845 ;; This function calls:
  2846 ;;		Nothing
  2847 ;; This function is called by:
  2848 ;;		_rd_buffer_readline
  2849 ;;		_serialport_task
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text5
  2854  001608                     __ptext5:
  2855                           	opt stack 0
  2856  001608                     _rd_buffer_get:
  2857                           	opt stack 24
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;rd_buffer.c: 126: CHAR result = FALSE;
  2861                           
  2862                           ; BSR set to: 0
  2863  001608  6B70               	clrf	rd_buffer_get@result& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;rd_buffer.c: 127: INT16 first = pbuffer->head.first;
  2867  00160A  EE20 F002          	lfsr	2,2
  2868  00160E  5168               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2869  001610  26D9               	addwf	fsr2l,f,c
  2870  001612  5169               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2871  001614  22DA               	addwfc	fsr2h,f,c
  2872  001616  CFDE F071          	movff	postinc2,rd_buffer_get@first
  2873  00161A  CFDD F072          	movff	postdec2,rd_buffer_get@first+1
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;rd_buffer.c: 128: INT16 last = pbuffer->head.last;
  2877  00161E  C068  FFD9         	movff	rd_buffer_get@pbuffer,fsr2l
  2878  001622  C069  FFDA         	movff	rd_buffer_get@pbuffer+1,fsr2h
  2879  001626  CFDE F06E          	movff	postinc2,rd_buffer_get@last
  2880  00162A  CFDD F06F          	movff	postdec2,rd_buffer_get@last+1
  2881                           
  2882                           ;rd_buffer.c: 129: if(first != last) {
  2883  00162E  516F               	movf	(rd_buffer_get@last+1)& (0+255),w,b
  2884  001630  1972               	xorwf	(rd_buffer_get@first+1)& (0+255),w,b
  2885  001632  E102               	bnz	u4595
  2886  001634  516E               	movf	rd_buffer_get@last& (0+255),w,b
  2887  001636  1971               	xorwf	rd_buffer_get@first& (0+255),w,b
  2888  001638                     u4595:
  2889  001638  E039               	bz	l5003
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;rd_buffer.c: 130: (*prec) = pbuffer->list[first ];
  2893  00163A  C068  F06C         	movff	rd_buffer_get@pbuffer,??_rd_buffer_get
  2894  00163E  C069  F06D         	movff	rd_buffer_get@pbuffer+1,??_rd_buffer_get+1
  2895  001642  5171               	movf	rd_buffer_get@first& (0+255),w,b
  2896  001644  276C               	addwf	??_rd_buffer_get& (0+255),f,b
  2897  001646  5172               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2898  001648  236D               	addwfc	(??_rd_buffer_get+1)& (0+255),f,b
  2899  00164A  0E06               	movlw	6
  2900  00164C  256C               	addwf	??_rd_buffer_get& (0+255),w,b
  2901  00164E  6ED9               	movwf	fsr2l,c
  2902  001650  0E00               	movlw	0
  2903  001652  216D               	addwfc	(??_rd_buffer_get+1)& (0+255),w,b
  2904  001654  6EDA               	movwf	fsr2h,c
  2905  001656  C06A  FFE1         	movff	rd_buffer_get@prec,fsr1l
  2906  00165A  C06B  FFE2         	movff	rd_buffer_get@prec+1,fsr1h
  2907  00165E  CFDF FFE7          	movff	indf2,indf1
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;rd_buffer.c: 131: first ++;
  2911  001662  4B71               	infsnz	rd_buffer_get@first& (0+255),f,b
  2912  001664  2B72               	incf	(rd_buffer_get@first+1)& (0+255),f,b
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;rd_buffer.c: 132: pbuffer->head.first = first ;
  2916  001666  EE20 F002          	lfsr	2,2
  2917  00166A  5168               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2918  00166C  26D9               	addwf	fsr2l,f,c
  2919  00166E  5169               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2920  001670  22DA               	addwfc	fsr2h,f,c
  2921  001672  C071  FFDE         	movff	rd_buffer_get@first,postinc2
  2922  001676  C072  FFDD         	movff	rd_buffer_get@first+1,postdec2
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;rd_buffer.c: 133: if(first == pbuffer->head.size){
  2926  00167A  EE20 F004          	lfsr	2,4
  2927  00167E  5168               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2928  001680  26D9               	addwf	fsr2l,f,c
  2929  001682  5169               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2930  001684  22DA               	addwfc	fsr2h,f,c
  2931  001686  52DE               	movf	postinc2,f,c
  2932  001688  5172               	movf	(rd_buffer_get@first+1)& (0+255),w,b
  2933  00168A  18DD               	xorwf	postdec2,w,c
  2934  00168C  C071  FFE8         	movff	rd_buffer_get@first,wreg
  2935  001690  B4D8               	btfsc	status,2,c
  2936  001692  18DF               	xorwf	indf2,w,c
  2937  001694  E109               	bnz	l5001
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;rd_buffer.c: 134: pbuffer->head.first = 0;
  2941  001696  EE20 F002          	lfsr	2,2
  2942  00169A  5168               	movf	rd_buffer_get@pbuffer& (0+255),w,b
  2943  00169C  26D9               	addwf	fsr2l,f,c
  2944  00169E  5169               	movf	(rd_buffer_get@pbuffer+1)& (0+255),w,b
  2945  0016A0  22DA               	addwfc	fsr2h,f,c
  2946  0016A2  0E00               	movlw	0
  2947  0016A4  6EDE               	movwf	postinc2,c
  2948  0016A6  6EDD               	movwf	postdec2,c
  2949  0016A8                     l5001:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;rd_buffer.c: 135: }
  2953                           ;rd_buffer.c: 136: result = TRUE;
  2954  0016A8  0E01               	movlw	1
  2955  0016AA  6F70               	movwf	rd_buffer_get@result& (0+255),b
  2956  0016AC                     l5003:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;rd_buffer.c: 137: }
  2960                           ;rd_buffer.c: 138: return result;
  2961  0016AC  5170               	movf	rd_buffer_get@result& (0+255),w,b
  2962                           
  2963                           ; BSR set to: 0
  2964  0016AE  0012               	return	
  2965  0016B0                     __end_of_rd_buffer_get:
  2966                           	opt stack 0
  2967                           tosu	equ	0xFFF
  2968                           tosh	equ	0xFFE
  2969                           tosl	equ	0xFFD
  2970                           pclath	equ	0xFFA
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           indf0	equ	0xFEF
  2979                           postinc0	equ	0xFEE
  2980                           fsr0h	equ	0xFEA
  2981                           fsr0l	equ	0xFE9
  2982                           wreg	equ	0xFE8
  2983                           indf1	equ	0xFE7
  2984                           postinc1	equ	0xFE6
  2985                           postdec1	equ	0xFE5
  2986                           fsr1h	equ	0xFE2
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           postdec2	equ	0xFDD
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _rd_buffer_cnt *****************
  2996 ;; Defined at:
  2997 ;;		line 66 in file "src/modules/rd_buffer.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  pbuffer         2    8[BANK0 ] PTR struct .
  3000 ;;		 -> g_tx_buffer(107), 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  sz              2   14[BANK0 ] int 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2    8[BANK0 ] int 
  3005 ;; Registers used:
  3006 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : F/0
  3009 ;;		On exit  : F/0
  3010 ;;		Unchanged: FFFFFFF0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3012 ;;      Params:         0       2       0       0       0       0       0
  3013 ;;      Locals:         0       2       0       0       0       0       0
  3014 ;;      Temps:          0       4       0       0       0       0       0
  3015 ;;      Totals:         0       8       0       0       0       0       0
  3016 ;;Total ram usage:        8 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    5
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_serialport_task
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text6
  3027  001BFC                     __ptext6:
  3028                           	opt stack 0
  3029  001BFC                     _rd_buffer_cnt:
  3030                           	opt stack 24
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;rd_buffer.c: 67: SIZE sz;
  3034                           ;rd_buffer.c: 68: sz = pbuffer->head.last - pbuffer->head.first;
  3035                           
  3036                           ; BSR set to: 0
  3037  001BFC  EE20 F002          	lfsr	2,2
  3038  001C00  5168               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  3039  001C02  26D9               	addwf	fsr2l,f,c
  3040  001C04  5169               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  3041  001C06  22DA               	addwfc	fsr2h,f,c
  3042  001C08  CFDE F06A          	movff	postinc2,??_rd_buffer_cnt
  3043  001C0C  CFDD F06B          	movff	postdec2,??_rd_buffer_cnt+1
  3044  001C10  C068  FFD9         	movff	rd_buffer_cnt@pbuffer,fsr2l
  3045  001C14  C069  FFDA         	movff	rd_buffer_cnt@pbuffer+1,fsr2h
  3046  001C18  CFDE F06C          	movff	postinc2,??_rd_buffer_cnt+2
  3047  001C1C  CFDD F06D          	movff	postdec2,??_rd_buffer_cnt+3
  3048  001C20  516A               	movf	??_rd_buffer_cnt& (0+255),w,b
  3049  001C22  5D6C               	subwf	(??_rd_buffer_cnt+2)& (0+255),w,b
  3050  001C24  6F6E               	movwf	rd_buffer_cnt@sz& (0+255),b
  3051  001C26  516B               	movf	(??_rd_buffer_cnt+1)& (0+255),w,b
  3052  001C28  596D               	subwfb	(??_rd_buffer_cnt+3)& (0+255),w,b
  3053  001C2A  6F6F               	movwf	(rd_buffer_cnt@sz+1)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;rd_buffer.c: 69: if(sz < 0) {
  3057  001C2C  AF6F               	btfss	(rd_buffer_cnt@sz+1)& (0+255),7,b
  3058  001C2E  D00A               	goto	l5013
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;rd_buffer.c: 70: sz += pbuffer->head.size;
  3062  001C30  EE20 F004          	lfsr	2,4
  3063  001C34  5168               	movf	rd_buffer_cnt@pbuffer& (0+255),w,b
  3064  001C36  26D9               	addwf	fsr2l,f,c
  3065  001C38  5169               	movf	(rd_buffer_cnt@pbuffer+1)& (0+255),w,b
  3066  001C3A  22DA               	addwfc	fsr2h,f,c
  3067  001C3C  50DE               	movf	postinc2,w,c
  3068  001C3E  276E               	addwf	rd_buffer_cnt@sz& (0+255),f,b
  3069  001C40  50DD               	movf	postdec2,w,c
  3070  001C42  236F               	addwfc	(rd_buffer_cnt@sz+1)& (0+255),f,b
  3071  001C44                     l5013:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;rd_buffer.c: 71: }
  3075                           ;rd_buffer.c: 72: return sz;
  3076  001C44  C06E  F068         	movff	rd_buffer_cnt@sz,?_rd_buffer_cnt
  3077  001C48  C06F  F069         	movff	rd_buffer_cnt@sz+1,?_rd_buffer_cnt+1
  3078                           
  3079                           ; BSR set to: 0
  3080  001C4C  0012               	return	
  3081  001C4E                     __end_of_rd_buffer_cnt:
  3082                           	opt stack 0
  3083                           tosu	equ	0xFFF
  3084                           tosh	equ	0xFFE
  3085                           tosl	equ	0xFFD
  3086                           pclath	equ	0xFFA
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           intcon	equ	0xFF2
  3094                           indf0	equ	0xFEF
  3095                           postinc0	equ	0xFEE
  3096                           fsr0h	equ	0xFEA
  3097                           fsr0l	equ	0xFE9
  3098                           wreg	equ	0xFE8
  3099                           indf1	equ	0xFE7
  3100                           postinc1	equ	0xFE6
  3101                           postdec1	equ	0xFE5
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           fsr2h	equ	0xFDA
  3108                           fsr2l	equ	0xFD9
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _syntax_string *****************
  3112 ;; Defined at:
  3113 ;;		line 117 in file "src/modules/syntax.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  pstr            2    0[BANK1 ] PTR const unsigned char 
  3116 ;;		 -> serialport_buffer(100), 
  3117 ;;  str_len         2    2[BANK1 ] int 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  pchain          2    6[BANK1 ] PTR unsigned char 
  3120 ;;		 -> this_buf(127), 
  3121 ;;  pos             1    5[BANK1 ] char 
  3122 ;;  chains          1    8[BANK1 ] char 
  3123 ;;  result          1    4[BANK1 ] char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      char 
  3126 ;; Registers used:
  3127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : F/1
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3133 ;;      Params:         0       0       4       0       0       0       0
  3134 ;;      Locals:         0       0       5       0       0       0       0
  3135 ;;      Temps:          0       1       0       0       0       0       0
  3136 ;;      Totals:         0       1       9       0       0       0       0
  3137 ;;Total ram usage:       10 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:   10
  3140 ;; This function calls:
  3141 ;;		_string_utils_split
  3142 ;;		_this_parse_item
  3143 ;;		_on_parameter_found
  3144 ;;		_string_utils_strlen
  3145 ;; This function is called by:
  3146 ;;		_serialport_task
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text7
  3151  000F38                     __ptext7:
  3152                           	opt stack 0
  3153  000F38                     _syntax_string:
  3154                           	opt stack 19
  3155                           
  3156                           ; BSR set to: 1
  3157                           ;syntax.c: 118: INT8 chains;
  3158                           ;syntax.c: 119: INT8 result = 0;
  3159                           
  3160                           ; BSR set to: 0
  3161  000F38  6BD4               	clrf	syntax_string@result& (0+255),b
  3162                           
  3163                           ; BSR set to: 1
  3164                           ;syntax.c: 120: chains = (INT8) string_utils_split(this_buf, pstr, str_len, '\0');
  3165  000F3A  0E05               	movlw	high _this_buf
  3166  000F3C  0100               	movlb	0	; () banked
  3167  000F3E  6F69               	movwf	(?_string_utils_split+1)& (0+255),b
  3168  000F40  0E00               	movlw	low _this_buf
  3169  000F42  6F68               	movwf	?_string_utils_split& (0+255),b
  3170  000F44  C1D0  F06A         	movff	syntax_string@pstr,?_string_utils_split+2
  3171  000F48  C1D1  F06B         	movff	syntax_string@pstr+1,?_string_utils_split+3
  3172  000F4C  C1D2  F06C         	movff	syntax_string@str_len,?_string_utils_split+4
  3173  000F50  C1D3  F06D         	movff	syntax_string@str_len+1,?_string_utils_split+5
  3174  000F54  0E00               	movlw	0
  3175  000F56  6B6E               	clrf	(?_string_utils_split+6)& (0+255),b
  3176  000F58  EC36  F00C         	call	_string_utils_split	;wreg free
  3177  000F5C  5168               	movf	?_string_utils_split& (0+255),w,b
  3178  000F5E  0101               	movlb	1	; () banked
  3179  000F60  6FD8               	movwf	syntax_string@chains& (0+255),b
  3180                           
  3181                           ; BSR set to: 1
  3182                           ;syntax.c: 121: command_id = -1;
  3183  000F62  0100               	movlb	0	; () banked
  3184  000F64  69F4               	setf	_command_id& (0+255),b
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;syntax.c: 122: parameter_id = -1;
  3188  000F66  69F5               	setf	_parameter_id& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;syntax.c: 123: parameter_value[0] = '\0';
  3192  000F68  0102               	movlb	2	; () banked
  3193  000F6A  6B00               	clrf	_parameter_value& (0+255),b
  3194                           
  3195                           ; BSR set to: 2
  3196                           ;syntax.c: 124: parameter_text[0] = '\0';
  3197  000F6C  0103               	movlb	3	; () banked
  3198  000F6E  6B00               	clrf	_parameter_text& (0+255),b
  3199                           
  3200                           ; BSR set to: 3
  3201                           ;syntax.c: 125: if (chains >= 1) {
  3202  000F70  0101               	movlb	1	; () banked
  3203  000F72  51D8               	movf	syntax_string@chains& (0+255),w,b
  3204  000F74  0A80               	xorlw	128
  3205  000F76  0F7F               	addlw	-129
  3206  000F78  E35B               	bnc	l5099
  3207                           
  3208                           ; BSR set to: 1
  3209                           ;syntax.c: 126: INT8 pos = 0;
  3210  000F7A  6BD5               	clrf	syntax_string@pos& (0+255),b
  3211                           
  3212                           ;syntax.c: 127: char *pchain;
  3213                           ;syntax.c: 128: result = chains;
  3214  000F7C  C1D8  F1D4         	movff	syntax_string@chains,syntax_string@result
  3215                           
  3216                           ;syntax.c: 129: while (chains--) {
  3217  000F80  D053               	goto	l5097
  3218  000F82                     l5079:
  3219                           
  3220                           ; BSR set to: 1
  3221                           ;syntax.c: 130: pchain = &this_buf[pos];
  3222  000F82  0E00               	movlw	low _this_buf
  3223  000F84  0101               	movlb	1	; () banked
  3224  000F86  25D5               	addwf	syntax_string@pos& (0+255),w,b
  3225  000F88  6FD6               	movwf	syntax_string@pchain& (0+255),b
  3226  000F8A  6BD7               	clrf	(syntax_string@pchain+1)& (0+255),b
  3227  000F8C  0E05               	movlw	high _this_buf
  3228  000F8E  23D7               	addwfc	(syntax_string@pchain+1)& (0+255),f,b
  3229                           
  3230                           ; BSR set to: 1
  3231                           ;syntax.c: 131: if (pos == 0) {
  3232  000F90  67D5               	tstfsz	syntax_string@pos& (0+255),b
  3233  000F92  D018               	goto	l5089
  3234                           
  3235                           ; BSR set to: 1
  3236                           ;syntax.c: 133: if (!this_parse_item(pchain, &command_id)) {
  3237  000F94  C1D6  F09F         	movff	syntax_string@pchain,?_this_parse_item
  3238  000F98  C1D7  F0A0         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3239  000F9C  0100               	movlb	0	; () banked
  3240  000F9E  0EF4               	movlw	low _command_id
  3241  000FA0  6FA1               	movwf	(?_this_parse_item+2)& (0+255),b
  3242  000FA2  EC28  F005         	call	_this_parse_item	;wreg free
  3243  000FA6  0900               	iorlw	0
  3244  000FA8  E103               	bnz	l5087
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;syntax.c: 134: result = 0;
  3248  000FAA  0101               	movlb	1	; () banked
  3249  000FAC  6BD4               	clrf	syntax_string@result& (0+255),b
  3250                           
  3251                           ;syntax.c: 135: break;
  3252  000FAE  D040               	goto	l5099
  3253  000FB0                     l5087:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;syntax.c: 136: }
  3257                           ;syntax.c: 137: on_parameter_found(PARSER_START, command_id, -1, (void*) (0));
  3258  000FB0  C0F4  F088         	movff	_command_id,?_on_parameter_found
  3259  000FB4  6989               	setf	(?_on_parameter_found+1)& (0+255),b
  3260  000FB6  6B8A               	clrf	(?_on_parameter_found+2)& (0+255),b
  3261  000FB8  6B8B               	clrf	(?_on_parameter_found+3)& (0+255),b
  3262  000FBA  6B8C               	clrf	(?_on_parameter_found+4)& (0+255),b
  3263  000FBC  0E01               	movlw	1
  3264  000FBE  EC0E  F006         	call	_on_parameter_found
  3265                           
  3266                           ;syntax.c: 138: } else {
  3267  000FC2  D028               	goto	l5095
  3268  000FC4                     l5089:
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;syntax.c: 140: if (this_parse_item(pchain, &parameter_id) == TRUE) {
  3272  000FC4  C1D6  F09F         	movff	syntax_string@pchain,?_this_parse_item
  3273  000FC8  C1D7  F0A0         	movff	syntax_string@pchain+1,?_this_parse_item+1
  3274  000FCC  0100               	movlb	0	; () banked
  3275  000FCE  0EF5               	movlw	low _parameter_id
  3276  000FD0  6FA1               	movwf	(?_this_parse_item+2)& (0+255),b
  3277  000FD2  EC28  F005         	call	_this_parse_item	;wreg free
  3278  000FD6  6FAF               	movwf	??_syntax_string& (0+255),b
  3279  000FD8  05AF               	decf	??_syntax_string& (0+255),w,b
  3280  000FDA  E10F               	bnz	l5093
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;syntax.c: 141: on_parameter_found(PARSER_PARAMETER, command_id, parameter_id, (void*) p
      +                          arameter_value);
  3284  000FDC  C0F4  F088         	movff	_command_id,?_on_parameter_found
  3285  000FE0  C0F5  F089         	movff	_parameter_id,?_on_parameter_found+1
  3286  000FE4  0E00               	movlw	low _parameter_value
  3287  000FE6  0100               	movlb	0	; () banked
  3288  000FE8  6F8A               	movwf	(?_on_parameter_found+2)& (0+255),b
  3289  000FEA  0E02               	movlw	high _parameter_value
  3290  000FEC  6F8B               	movwf	(?_on_parameter_found+3)& (0+255),b
  3291  000FEE  0E20               	movlw	32
  3292  000FF0  6F8C               	movwf	(?_on_parameter_found+4)& (0+255),b
  3293  000FF2  0E00               	movlw	0
  3294  000FF4  EC0E  F006         	call	_on_parameter_found
  3295                           
  3296                           ;syntax.c: 142: }
  3297  000FF8  D00D               	goto	l5095
  3298  000FFA                     l5093:
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;syntax.c: 143: else {
  3302                           ;syntax.c: 144: on_parameter_found(PARSER_PARAMETER, command_id, -1, (void*) parameter_t
      +                          ext);
  3303  000FFA  C0F4  F088         	movff	_command_id,?_on_parameter_found
  3304  000FFE  6989               	setf	(?_on_parameter_found+1)& (0+255),b
  3305  001000  0E00               	movlw	low _parameter_text
  3306  001002  0100               	movlb	0	; () banked
  3307  001004  6F8A               	movwf	(?_on_parameter_found+2)& (0+255),b
  3308  001006  0E03               	movlw	high _parameter_text
  3309  001008  6F8B               	movwf	(?_on_parameter_found+3)& (0+255),b
  3310  00100A  0E20               	movlw	32
  3311  00100C  6F8C               	movwf	(?_on_parameter_found+4)& (0+255),b
  3312  00100E  0E00               	movlw	0
  3313  001010  EC0E  F006         	call	_on_parameter_found
  3314  001014                     l5095:
  3315                           
  3316                           ;syntax.c: 145: }
  3317                           ;syntax.c: 146: }
  3318                           ;syntax.c: 148: pos += string_utils_strlen(pchain) + 1;
  3319  001014  C1D6  F06A         	movff	syntax_string@pchain,?_string_utils_strlen
  3320  001018  C1D7  F06B         	movff	syntax_string@pchain+1,?_string_utils_strlen+1
  3321  00101C  0100               	movlb	0	; () banked
  3322  00101E  EC31  F00F         	call	_string_utils_strlen	;wreg free
  3323  001022  296A               	incf	?_string_utils_strlen& (0+255),w,b
  3324  001024  0101               	movlb	1	; () banked
  3325  001026  27D5               	addwf	syntax_string@pos& (0+255),f,b
  3326  001028                     l5097:
  3327                           
  3328                           ; BSR set to: 1
  3329  001028  07D8               	decf	syntax_string@chains& (0+255),f,b
  3330  00102A  0101               	movlb	1	; () banked
  3331  00102C  29D8               	incf	syntax_string@chains& (0+255),w,b
  3332  00102E  E1A9               	bnz	l5079
  3333  001030                     l5099:
  3334                           
  3335                           ; BSR set to: 1
  3336                           ;syntax.c: 149: }
  3337                           ;syntax.c: 150: }
  3338                           ;syntax.c: 151: if (result > 0) {
  3339  001030  51D4               	movf	syntax_string@result& (0+255),w,b
  3340  001032  0A80               	xorlw	128
  3341  001034  0F7F               	addlw	-129
  3342  001036  E30A               	bnc	l5103
  3343                           
  3344                           ; BSR set to: 1
  3345                           ;syntax.c: 152: on_parameter_found(PARSER_STOP, command_id, -1, (void*) (0));
  3346  001038  C0F4  F088         	movff	_command_id,?_on_parameter_found
  3347  00103C  0100               	movlb	0	; () banked
  3348  00103E  6989               	setf	(?_on_parameter_found+1)& (0+255),b
  3349  001040  6B8A               	clrf	(?_on_parameter_found+2)& (0+255),b
  3350  001042  6B8B               	clrf	(?_on_parameter_found+3)& (0+255),b
  3351  001044  6B8C               	clrf	(?_on_parameter_found+4)& (0+255),b
  3352  001046  0E02               	movlw	2
  3353  001048  EF0E  F006         	goto	_on_parameter_found
  3354  00104C                     l5103:
  3355                           
  3356                           ; BSR set to: 1
  3357                           ;syntax.c: 154: on_parameter_found(PARSER_ERROR, -1, -1, (void*) (0));
  3358  00104C  0100               	movlb	0	; () banked
  3359  00104E  6988               	setf	?_on_parameter_found& (0+255),b
  3360  001050  6989               	setf	(?_on_parameter_found+1)& (0+255),b
  3361  001052  6B8A               	clrf	(?_on_parameter_found+2)& (0+255),b
  3362  001054  6B8B               	clrf	(?_on_parameter_found+3)& (0+255),b
  3363  001056  6B8C               	clrf	(?_on_parameter_found+4)& (0+255),b
  3364  001058  0E03               	movlw	3
  3365  00105A  EF0E  F006         	goto	_on_parameter_found
  3366  00105E                     __end_of_syntax_string:
  3367                           	opt stack 0
  3368                           tosu	equ	0xFFF
  3369                           tosh	equ	0xFFE
  3370                           tosl	equ	0xFFD
  3371                           pclath	equ	0xFFA
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           indf0	equ	0xFEF
  3380                           postinc0	equ	0xFEE
  3381                           fsr0h	equ	0xFEA
  3382                           fsr0l	equ	0xFE9
  3383                           wreg	equ	0xFE8
  3384                           indf1	equ	0xFE7
  3385                           postinc1	equ	0xFE6
  3386                           postdec1	equ	0xFE5
  3387                           fsr1h	equ	0xFE2
  3388                           fsr1l	equ	0xFE1
  3389                           indf2	equ	0xFDF
  3390                           postinc2	equ	0xFDE
  3391                           postdec2	equ	0xFDD
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _string_utils_split *****************
  3397 ;; Defined at:
  3398 ;;		line 94 in file "src/modules/string_utils.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  pbuf            2    8[BANK0 ] PTR unsigned char 
  3401 ;;		 -> this_buf(127), 
  3402 ;;  pstr            2   10[BANK0 ] PTR const unsigned char 
  3403 ;;		 -> serialport_buffer(100), 
  3404 ;;  len             2   12[BANK0 ] int 
  3405 ;;  delimeter       1   14[BANK0 ] unsigned char 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;  symb            1   20[BANK0 ] unsigned char 
  3408 ;;  chains          2   17[BANK0 ] int 
  3409 ;;  i               2   15[BANK0 ] int 
  3410 ;;  prev            1   19[BANK0 ] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2    8[BANK0 ] int 
  3413 ;; Registers used:
  3414 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : F/0
  3417 ;;		On exit  : F/0
  3418 ;;		Unchanged: FFFFFFF0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3420 ;;      Params:         0       7       0       0       0       0       0
  3421 ;;      Locals:         0       6       0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0
  3423 ;;      Totals:         0      13       0       0       0       0       0
  3424 ;;Total ram usage:       13 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    5
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_syntax_string
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text8
  3435  00186C                     __ptext8:
  3436                           	opt stack 0
  3437  00186C                     _string_utils_split:
  3438                           	opt stack 23
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;string_utils.c: 95: INT16 i = 0;
  3442  00186C  6B6F               	clrf	string_utils_split@i& (0+255),b
  3443  00186E  6B70               	clrf	(string_utils_split@i+1)& (0+255),b
  3444                           
  3445                           ;string_utils.c: 96: INT16 chains = 0;
  3446  001870  6B71               	clrf	string_utils_split@chains& (0+255),b
  3447  001872  6B72               	clrf	(string_utils_split@chains+1)& (0+255),b
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;string_utils.c: 97: char prev = ' ';
  3451  001874  0E20               	movlw	32
  3452  001876  6F73               	movwf	string_utils_split@prev& (0+255),b
  3453  001878                     l5171:
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;string_utils.c: 99: {
  3457                           ;string_utils.c: 100: char symb = pstr[i];
  3458  001878  516F               	movf	string_utils_split@i& (0+255),w,b
  3459  00187A  256A               	addwf	string_utils_split@pstr& (0+255),w,b
  3460  00187C  6ED9               	movwf	fsr2l,c
  3461  00187E  5170               	movf	(string_utils_split@i+1)& (0+255),w,b
  3462  001880  216B               	addwfc	(string_utils_split@pstr+1)& (0+255),w,b
  3463  001882  6EDA               	movwf	fsr2h,c
  3464  001884  50DF               	movf	indf2,w,c
  3465  001886  6F74               	movwf	string_utils_split@symb& (0+255),b
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;string_utils.c: 101: if (symb == ' ' || len == 0)
  3469  001888  5174               	movf	string_utils_split@symb& (0+255),w,b
  3470  00188A  0A20               	xorlw	32
  3471  00188C  E003               	bz	l5177
  3472                           
  3473                           ; BSR set to: 0
  3474  00188E  516D               	movf	(string_utils_split@len+1)& (0+255),w,b
  3475  001890  116C               	iorwf	string_utils_split@len& (0+255),w,b
  3476  001892  E10E               	bnz	l5185
  3477  001894                     l5177:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;string_utils.c: 102: {
  3481                           ;string_utils.c: 103: if (prev != ' ')
  3482  001894  5173               	movf	string_utils_split@prev& (0+255),w,b
  3483  001896  0A20               	xorlw	32
  3484  001898  E013               	bz	l5189
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;string_utils.c: 104: {
  3488                           ;string_utils.c: 105: *pbuf = delimeter;
  3489  00189A  C068  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3490  00189E  C069  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3491  0018A2  C06E  FFDF         	movff	string_utils_split@delimeter,indf2
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;string_utils.c: 106: pbuf++;
  3495  0018A6  4B68               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3496  0018A8  2B69               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;string_utils.c: 107: chains++;
  3500  0018AA  4B71               	infsnz	string_utils_split@chains& (0+255),f,b
  3501  0018AC  2B72               	incf	(string_utils_split@chains+1)& (0+255),f,b
  3502  0018AE  D008               	goto	l5189
  3503  0018B0                     l5185:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;string_utils.c: 110: else
  3507                           ;string_utils.c: 111: {
  3508                           ;string_utils.c: 112: *pbuf++ = symb;
  3509  0018B0  C068  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3510  0018B4  C069  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3511  0018B8  C074  FFDF         	movff	string_utils_split@symb,indf2
  3512                           
  3513                           ; BSR set to: 0
  3514  0018BC  4B68               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3515  0018BE  2B69               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3516  0018C0                     l5189:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;string_utils.c: 113: }
  3520                           ;string_utils.c: 114: if (len == 0)
  3521  0018C0  516D               	movf	(string_utils_split@len+1)& (0+255),w,b
  3522  0018C2  116C               	iorwf	string_utils_split@len& (0+255),w,b
  3523  0018C4  E008               	bz	l5199
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;string_utils.c: 118: else
  3527                           ;string_utils.c: 119: {
  3528                           ;string_utils.c: 120: len--;
  3529  0018C6  076C               	decf	string_utils_split@len& (0+255),f,b
  3530  0018C8  A0D8               	btfss	status,0,c
  3531  0018CA  076D               	decf	(string_utils_split@len+1)& (0+255),f,b
  3532                           
  3533                           ;string_utils.c: 121: i++;
  3534  0018CC  4B6F               	infsnz	string_utils_split@i& (0+255),f,b
  3535  0018CE  2B70               	incf	(string_utils_split@i+1)& (0+255),f,b
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;string_utils.c: 122: prev = symb;
  3539  0018D0  C074  F073         	movff	string_utils_split@symb,string_utils_split@prev
  3540  0018D4  D7D1               	goto	l5171
  3541  0018D6                     l5199:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;string_utils.c: 123: }
  3545                           ;string_utils.c: 124: }
  3546                           ;string_utils.c: 125: *pbuf++ = delimeter;
  3547  0018D6  C068  FFD9         	movff	string_utils_split@pbuf,fsr2l
  3548  0018DA  C069  FFDA         	movff	string_utils_split@pbuf+1,fsr2h
  3549  0018DE  C06E  FFDF         	movff	string_utils_split@delimeter,indf2
  3550                           
  3551                           ; BSR set to: 0
  3552  0018E2  4B68               	infsnz	string_utils_split@pbuf& (0+255),f,b
  3553  0018E4  2B69               	incf	(string_utils_split@pbuf+1)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;string_utils.c: 126: return chains;
  3557  0018E6  C071  F068         	movff	string_utils_split@chains,?_string_utils_split
  3558  0018EA  C072  F069         	movff	string_utils_split@chains+1,?_string_utils_split+1
  3559                           
  3560                           ; BSR set to: 0
  3561  0018EE  0012               	return	
  3562  0018F0                     __end_of_string_utils_split:
  3563                           	opt stack 0
  3564                           tosu	equ	0xFFF
  3565                           tosh	equ	0xFFE
  3566                           tosl	equ	0xFFD
  3567                           pclath	equ	0xFFA
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           indf0	equ	0xFEF
  3576                           postinc0	equ	0xFEE
  3577                           fsr0h	equ	0xFEA
  3578                           fsr0l	equ	0xFE9
  3579                           wreg	equ	0xFE8
  3580                           indf1	equ	0xFE7
  3581                           postinc1	equ	0xFE6
  3582                           postdec1	equ	0xFE5
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           indf2	equ	0xFDF
  3586                           postinc2	equ	0xFDE
  3587                           postdec2	equ	0xFDD
  3588                           fsr2h	equ	0xFDA
  3589                           fsr2l	equ	0xFD9
  3590                           status	equ	0xFD8
  3591                           
  3592 ;; *************** function _this_parse_item *****************
  3593 ;; Defined at:
  3594 ;;		line 42 in file "src/modules/syntax.c"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  pstr            2   63[BANK0 ] PTR const unsigned char 
  3597 ;;		 -> this_buf(127), 
  3598 ;;  pitem           1   65[BANK0 ] PTR char 
  3599 ;;		 -> parameter_id(1), command_id(1), 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  pval            3   73[BANK0 ] PTR const unsigned char 
  3602 ;;		 -> this_buf(127), ROM(32767), 
  3603 ;;  var_len         2   77[BANK0 ] int 
  3604 ;;  str_len         2   71[BANK0 ] int 
  3605 ;;  pvar            2   69[BANK0 ] PTR const unsigned char 
  3606 ;;		 -> this_buf(127), 
  3607 ;;  i               1   76[BANK0 ] char 
  3608 ;;  result          1   68[BANK0 ] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      unsigned char 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : F/0
  3615 ;;		On exit  : F/0
  3616 ;;		Unchanged: FFFFFFF0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3618 ;;      Params:         0       3       0       0       0       0       0
  3619 ;;      Locals:         0      11       0       0       0       0       0
  3620 ;;      Temps:          0       2       0       0       0       0       0
  3621 ;;      Totals:         0      16       0       0       0       0       0
  3622 ;;Total ram usage:       16 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    9
  3625 ;; This function calls:
  3626 ;;		_string_utils_strlen
  3627 ;;		_string_utils_strchr
  3628 ;;		_string_utils_copy
  3629 ;;		_string_utils_strncmp
  3630 ;;		_string_utils_atoi
  3631 ;;		_string_utils_atof
  3632 ;;		_string_utils_from_hex
  3633 ;; This function is called by:
  3634 ;;		_syntax_string
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text9
  3639  000A50                     __ptext9:
  3640                           	opt stack 0
  3641  000A50                     _this_parse_item:
  3642                           	opt stack 19
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;syntax.c: 43: CHAR result = FALSE;
  3646                           
  3647                           ; BSR set to: 0
  3648  000A50  6BA4               	clrf	this_parse_item@result& (0+255),b
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;syntax.c: 44: if (pstr != (0)) {
  3652  000A52  51A0               	movf	(this_parse_item@pstr+1)& (0+255),w,b
  3653  000A54  119F               	iorwf	this_parse_item@pstr& (0+255),w,b
  3654  000A56  E101 D0D5          	bz	l5459
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;syntax.c: 45: const char *pvar = pstr;
  3658  000A5A  C09F  F0A5         	movff	this_parse_item@pstr,this_parse_item@pvar
  3659  000A5E  C0A0  F0A6         	movff	this_parse_item@pstr+1,this_parse_item@pvar+1
  3660                           
  3661                           ;syntax.c: 46: const char *pval = (0);
  3662  000A62  6BA9               	clrf	this_parse_item@pval& (0+255),b
  3663  000A64  6BAA               	clrf	(this_parse_item@pval+1)& (0+255),b
  3664  000A66  6BAB               	clrf	(this_parse_item@pval+2)& (0+255),b
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;syntax.c: 49: SIZE str_len = string_utils_strlen(pstr);
  3668  000A68  C09F  F06A         	movff	this_parse_item@pstr,?_string_utils_strlen
  3669  000A6C  C0A0  F06B         	movff	this_parse_item@pstr+1,?_string_utils_strlen+1
  3670  000A70  EC31  F00F         	call	_string_utils_strlen	;wreg free
  3671  000A74  C06A  F0A7         	movff	?_string_utils_strlen,this_parse_item@str_len
  3672  000A78  C06B  F0A8         	movff	?_string_utils_strlen+1,this_parse_item@str_len+1
  3673                           
  3674                           ;syntax.c: 51: var_len = string_utils_strchr(pstr, '=');
  3675  000A7C  C09F  F068         	movff	this_parse_item@pstr,?_string_utils_strchr
  3676  000A80  C0A0  F069         	movff	this_parse_item@pstr+1,?_string_utils_strchr+1
  3677  000A84  0E3D               	movlw	61
  3678  000A86  6F6A               	movwf	(?_string_utils_strchr+2)& (0+255),b
  3679  000A88  EC27  F00E         	call	_string_utils_strchr	;wreg free
  3680  000A8C  C068  F0AD         	movff	?_string_utils_strchr,this_parse_item@var_len
  3681  000A90  C069  F0AE         	movff	?_string_utils_strchr+1,this_parse_item@var_len+1
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;syntax.c: 53: if (var_len >= 0 && var_len < str_len) {
  3685  000A94  BFAE               	btfsc	(this_parse_item@var_len+1)& (0+255),7,b
  3686  000A96  D01B               	goto	l625
  3687                           
  3688                           ; BSR set to: 0
  3689  000A98  51AE               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3690  000A9A  0A80               	xorlw	128
  3691  000A9C  6FA2               	movwf	??_this_parse_item& (0+255),b
  3692  000A9E  51A7               	movf	this_parse_item@str_len& (0+255),w,b
  3693  000AA0  5DAD               	subwf	this_parse_item@var_len& (0+255),w,b
  3694  000AA2  51A8               	movf	(this_parse_item@str_len+1)& (0+255),w,b
  3695  000AA4  0A80               	xorlw	128
  3696  000AA6  59A2               	subwfb	??_this_parse_item& (0+255),w,b
  3697  000AA8  E212               	bc	l625
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;syntax.c: 54: pval = &pstr[ var_len + 1 ];
  3701  000AAA  C09F  F0A2         	movff	this_parse_item@pstr,??_this_parse_item
  3702  000AAE  C0A0  F0A3         	movff	this_parse_item@pstr+1,??_this_parse_item+1
  3703  000AB2  51AD               	movf	this_parse_item@var_len& (0+255),w,b
  3704  000AB4  27A2               	addwf	??_this_parse_item& (0+255),f,b
  3705  000AB6  51AE               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3706  000AB8  23A3               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3707  000ABA  2BA2               	incf	??_this_parse_item& (0+255),f,b
  3708  000ABC  0E00               	movlw	0
  3709  000ABE  23A3               	addwfc	(??_this_parse_item+1)& (0+255),f,b
  3710  000AC0  51A2               	movf	??_this_parse_item& (0+255),w,b
  3711  000AC2  6FA9               	movwf	this_parse_item@pval& (0+255),b
  3712  000AC4  51A3               	movf	(??_this_parse_item+1)& (0+255),w,b
  3713  000AC6  6FAA               	movwf	(this_parse_item@pval+1)& (0+255),b
  3714  000AC8  0E20               	movlw	32
  3715  000ACA  6FAB               	movwf	(this_parse_item@pval+2)& (0+255),b
  3716                           
  3717                           ;syntax.c: 55: } else {
  3718  000ACC  D004               	goto	l5421
  3719  000ACE                     l625:
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;syntax.c: 57: var_len = str_len;
  3723  000ACE  C0A7  F0AD         	movff	this_parse_item@str_len,this_parse_item@var_len
  3724  000AD2  C0A8  F0AE         	movff	this_parse_item@str_len+1,this_parse_item@var_len+1
  3725  000AD6                     l5421:
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;syntax.c: 58: }
  3729                           ;syntax.c: 60: string_utils_copy(parameter_text, pvar, var_len);
  3730  000AD6  0E03               	movlw	high _parameter_text
  3731  000AD8  0100               	movlb	0	; () banked
  3732  000ADA  6F69               	movwf	(?_string_utils_copy+1)& (0+255),b
  3733  000ADC  0E00               	movlw	low _parameter_text
  3734  000ADE  6F68               	movwf	?_string_utils_copy& (0+255),b
  3735  000AE0  C0A5  F06A         	movff	this_parse_item@pvar,?_string_utils_copy+2
  3736  000AE4  C0A6  F06B         	movff	this_parse_item@pvar+1,?_string_utils_copy+3
  3737  000AE8  C0AD  F06C         	movff	this_parse_item@var_len,?_string_utils_copy+4
  3738  000AEC  C0AE  F06D         	movff	this_parse_item@var_len+1,?_string_utils_copy+5
  3739  000AF0  EC50  F00E         	call	_string_utils_copy	;wreg free
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;syntax.c: 61: parameter_text[var_len] = '\0';
  3743  000AF4  0E00               	movlw	low _parameter_text
  3744  000AF6  0100               	movlb	0	; () banked
  3745  000AF8  25AD               	addwf	this_parse_item@var_len& (0+255),w,b
  3746  000AFA  6ED9               	movwf	fsr2l,c
  3747  000AFC  0E03               	movlw	high _parameter_text
  3748  000AFE  21AE               	addwfc	(this_parse_item@var_len+1)& (0+255),w,b
  3749  000B00  6EDA               	movwf	fsr2h,c
  3750  000B02  6ADF               	clrf	indf2,c
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;syntax.c: 62: for (i = 0; i < SYNTAX_COUNT; i++) {
  3754  000B04  6BAC               	clrf	this_parse_item@i& (0+255),b
  3755  000B06                     l5431:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;syntax.c: 63: if (syntax_data[i].name_len == var_len
  3759                           ;syntax.c: 64: && string_utils_strncmp(syntax_data[i].name, pvar, var_len, FALSE)) {
  3760  000B06  51AC               	movf	this_parse_item@i& (0+255),w,b
  3761  000B08  0D17               	mullw	23
  3762  000B0A  0E14               	movlw	20
  3763  000B0C  D87D               	call	PL24	;call to abstracted procedure
  3764  000B0E  0008               	tblrd		*
  3765  000B10  50F5               	movf	tablat,w,c
  3766  000B12  6FA2               	movwf	??_this_parse_item& (0+255),b
  3767  000B14  6BA3               	clrf	(??_this_parse_item+1)& (0+255),b
  3768  000B16  BFA2               	btfsc	??_this_parse_item& (0+255),7,b
  3769  000B18  07A3               	decf	(??_this_parse_item+1)& (0+255),f,b
  3770  000B1A  51AE               	movf	(this_parse_item@var_len+1)& (0+255),w,b
  3771  000B1C  19A3               	xorwf	(??_this_parse_item+1)& (0+255),w,b
  3772  000B1E  E102               	bnz	u5365
  3773  000B20  51AD               	movf	this_parse_item@var_len& (0+255),w,b
  3774  000B22  19A2               	xorwf	??_this_parse_item& (0+255),w,b
  3775  000B24                     u5365:
  3776  000B24  E16A               	bnz	l5455
  3777                           
  3778                           ; BSR set to: 0
  3779  000B26  51AC               	movf	this_parse_item@i& (0+255),w,b
  3780  000B28  0D17               	mullw	23
  3781  000B2A  0E72               	movlw	low syntax@syntax_data
  3782  000B2C  24F3               	addwf	prodl,w,c
  3783  000B2E  6F6A               	movwf	?_string_utils_strncmp& (0+255),b
  3784  000B30  0E7D               	movlw	high syntax@syntax_data
  3785  000B32  20F4               	addwfc	prodh,w,c
  3786  000B34  6F6B               	movwf	(?_string_utils_strncmp+1)& (0+255),b
  3787  000B36  C0A5  F06C         	movff	this_parse_item@pvar,?_string_utils_strncmp+2
  3788  000B3A  C0A6  F06D         	movff	this_parse_item@pvar+1,?_string_utils_strncmp+3
  3789  000B3E  C0AD  F06E         	movff	this_parse_item@var_len,?_string_utils_strncmp+4
  3790  000B42  C0AE  F06F         	movff	this_parse_item@var_len+1,?_string_utils_strncmp+5
  3791  000B46  0E00               	movlw	0
  3792  000B48  6B70               	clrf	(?_string_utils_strncmp+6)& (0+255),b
  3793  000B4A  EC58  F00B         	call	_string_utils_strncmp	;wreg free
  3794  000B4E  0900               	iorlw	0
  3795  000B50  E054               	bz	l5455
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;syntax.c: 65: if (pitem) *pitem = syntax_data[i].id;
  3799  000B52  51A1               	movf	this_parse_item@pitem& (0+255),w,b
  3800  000B54  E00A               	bz	l5439
  3801                           
  3802                           ; BSR set to: 0
  3803  000B56  51AC               	movf	this_parse_item@i& (0+255),w,b
  3804  000B58  0D17               	mullw	23
  3805  000B5A  0E15               	movlw	21
  3806  000B5C  D855               	call	PL24	;call to abstracted procedure
  3807  000B5E  51A1               	movf	this_parse_item@pitem& (0+255),w,b
  3808  000B60  6ED9               	movwf	fsr2l,c
  3809  000B62  6ADA               	clrf	fsr2h,c
  3810  000B64  0008               	tblrd		*
  3811  000B66  CFF5 FFDF          	movff	tablat,indf2
  3812  000B6A                     l5439:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;syntax.c: 66: if (pval)
  3816  000B6A  51A9               	movf	this_parse_item@pval& (0+255),w,b
  3817  000B6C  11AA               	iorwf	(this_parse_item@pval+1)& (0+255),w,b
  3818  000B6E  11AB               	iorwf	(this_parse_item@pval+2)& (0+255),w,b
  3819  000B70  E040               	bz	l5453
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;syntax.c: 67: {
  3823                           ;syntax.c: 69: parameter_type = syntax_data[i].type;
  3824  000B72  51AC               	movf	this_parse_item@i& (0+255),w,b
  3825  000B74  0D17               	mullw	23
  3826  000B76  0E16               	movlw	22
  3827  000B78  D847               	call	PL24	;call to abstracted procedure
  3828  000B7A  0008               	tblrd		*
  3829  000B7C  CFF5 F0C6          	movff	tablat,_parameter_type
  3830                           
  3831                           ;syntax.c: 70: switch (parameter_type) {
  3832  000B80  D02C               	goto	l5451
  3833  000B82                     l5443:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;syntax.c: 78: case PARSER_TYPE_INTEGER:
  3837                           ;syntax.c: 79: *((INT16*) parameter_value) = string_utils_atoi(pval);
  3838  000B82  C0A9  F06E         	movff	this_parse_item@pval,?_string_utils_atoi
  3839  000B86  C0AA  F06F         	movff	this_parse_item@pval+1,?_string_utils_atoi+1
  3840  000B8A  C0AB  F070         	movff	this_parse_item@pval+2,?_string_utils_atoi+2
  3841  000B8E  EC2F  F008         	call	_string_utils_atoi	;wreg free
  3842  000B92  C06E  F200         	movff	?_string_utils_atoi,_parameter_value
  3843  000B96  C06F  F201         	movff	?_string_utils_atoi+1,_parameter_value+1
  3844                           
  3845                           ;syntax.c: 80: break;
  3846  000B9A  D02B               	goto	l5453
  3847  000B9C                     l5445:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;syntax.c: 84: {
  3851                           ;syntax.c: 85: *((double*) parameter_value) = (double) string_utils_atof((char*) pval);
  3852  000B9C  C0A9  F08F         	movff	this_parse_item@pval,?_string_utils_atof
  3853  000BA0  C0AA  F090         	movff	this_parse_item@pval+1,?_string_utils_atof+1
  3854  000BA4  C0AB  F091         	movff	this_parse_item@pval+2,?_string_utils_atof+2
  3855  000BA8  EC05  F003         	call	_string_utils_atof	;wreg free
  3856  000BAC  C08F  F200         	movff	?_string_utils_atof,_parameter_value
  3857  000BB0  C090  F201         	movff	?_string_utils_atof+1,_parameter_value+1
  3858  000BB4  C091  F202         	movff	?_string_utils_atof+2,_parameter_value+2
  3859                           
  3860                           ;syntax.c: 86: }
  3861                           ;syntax.c: 87: break;
  3862  000BB8  D01C               	goto	l5453
  3863  000BBA                     l5447:
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;syntax.c: 90: {
  3867                           ;syntax.c: 91: string_utils_from_hex(parameter_value, parameter_value);
  3868  000BBA  0E02               	movlw	high _parameter_value
  3869  000BBC  0100               	movlb	0	; () banked
  3870  000BBE  6F6F               	movwf	(?_string_utils_from_hex+1)& (0+255),b
  3871  000BC0  0E00               	movlw	low _parameter_value
  3872  000BC2  6F6E               	movwf	?_string_utils_from_hex& (0+255),b
  3873  000BC4  0E02               	movlw	high _parameter_value
  3874  000BC6  6F71               	movwf	(?_string_utils_from_hex+3)& (0+255),b
  3875  000BC8  0E00               	movlw	low _parameter_value
  3876  000BCA  6F70               	movwf	(?_string_utils_from_hex+2)& (0+255),b
  3877  000BCC  ECA3  F00B         	call	_string_utils_from_hex	;wreg free
  3878                           
  3879                           ;syntax.c: 92: }
  3880                           ;syntax.c: 93: break;
  3881  000BD0  D010               	goto	l5453
  3882  000BD2                     l639:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;syntax.c: 96: *((INT16*) parameter_value) = 0u;
  3886  000BD2  0102               	movlb	2	; () banked
  3887  000BD4  6B00               	clrf	_parameter_value& (0+255),b
  3888  000BD6  6B01               	clrf	(_parameter_value+1)& (0+255),b
  3889                           
  3890                           ;syntax.c: 97: break;
  3891  000BD8  D00C               	goto	l5453
  3892  000BDA                     l5451:
  3893                           
  3894                           ; BSR set to: 0
  3895  000BDA  51C6               	movf	_parameter_type& (0+255),w,b
  3896                           
  3897                           ; Switch size 1, requested type "space"
  3898                           ; Number of cases is 5, Range of values is 1 to 6
  3899                           ; switch strategies available:
  3900                           ; Name         Instructions Cycles
  3901                           ; simple_byte           16     9 (average)
  3902                           ;	Chosen strategy is simple_byte
  3903  000BDC  0A01               	xorlw	1	; case 1
  3904  000BDE  E009               	bz	l5453
  3905  000BE0  0A03               	xorlw	3	; case 2
  3906  000BE2  E0EB               	bz	l5447
  3907  000BE4  0A01               	xorlw	1	; case 3
  3908  000BE6  E0CD               	bz	l5443
  3909  000BE8  0A06               	xorlw	6	; case 5
  3910  000BEA  E0CB               	bz	l5443
  3911  000BEC  0A03               	xorlw	3	; case 6
  3912  000BEE  E0D6               	bz	l5445
  3913  000BF0  D7F0               	goto	l639
  3914  000BF2                     l5453:
  3915                           
  3916                           ;syntax.c: 99: }
  3917                           ;syntax.c: 100: result = TRUE;
  3918  000BF2  0E01               	movlw	1
  3919  000BF4  0100               	movlb	0	; () banked
  3920  000BF6  6FA4               	movwf	this_parse_item@result& (0+255),b
  3921                           
  3922                           ;syntax.c: 101: break;
  3923  000BF8  D005               	goto	l5459
  3924  000BFA                     l5455:
  3925                           
  3926                           ; BSR set to: 0
  3927  000BFA  2BAC               	incf	this_parse_item@i& (0+255),f,b
  3928                           
  3929                           ; BSR set to: 0
  3930  000BFC  51AC               	movf	this_parse_item@i& (0+255),w,b
  3931  000BFE  0A80               	xorlw	128
  3932  000C00  0F65               	addlw	-155
  3933  000C02  E381               	bnc	l5431
  3934  000C04                     l5459:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;syntax.c: 102: }
  3938                           ;syntax.c: 103: }
  3939                           ;syntax.c: 104: }
  3940                           ;syntax.c: 105: return result;
  3941  000C04  51A4               	movf	this_parse_item@result& (0+255),w,b
  3942                           
  3943                           ; BSR set to: 0
  3944  000C06  0012               	return	
  3945  000C08                     __end_of_this_parse_item:
  3946                           	opt stack 0
  3947  000C08                     PL24:
  3948                           	opt stack 19
  3949  000C08  26F3               	addwf	prodl,f,c
  3950  000C0A  0E00               	movlw	0
  3951  000C0C  22F4               	addwfc	prodh,f,c
  3952  000C0E  0E72               	movlw	low syntax@syntax_data
  3953  000C10  24F3               	addwf	prodl,w,c
  3954  000C12  6EF6               	movwf	tblptrl,c
  3955  000C14  0E7D               	movlw	high syntax@syntax_data
  3956  000C16  20F4               	addwfc	prodh,w,c
  3957  000C18  6EF7               	movwf	tblptrh,c
  3958  000C1A  0012               	return	
  3959  000C1C                     __end_ofPL24:
  3960                           	opt stack 0
  3961                           tosu	equ	0xFFF
  3962                           tosh	equ	0xFFE
  3963                           tosl	equ	0xFFD
  3964                           pclath	equ	0xFFA
  3965                           tblptru	equ	0xFF8
  3966                           tblptrh	equ	0xFF7
  3967                           tblptrl	equ	0xFF6
  3968                           tablat	equ	0xFF5
  3969                           prodh	equ	0xFF4
  3970                           prodl	equ	0xFF3
  3971                           intcon	equ	0xFF2
  3972                           indf0	equ	0xFEF
  3973                           postinc0	equ	0xFEE
  3974                           fsr0h	equ	0xFEA
  3975                           fsr0l	equ	0xFE9
  3976                           wreg	equ	0xFE8
  3977                           indf1	equ	0xFE7
  3978                           postinc1	equ	0xFE6
  3979                           postdec1	equ	0xFE5
  3980                           fsr1h	equ	0xFE2
  3981                           fsr1l	equ	0xFE1
  3982                           indf2	equ	0xFDF
  3983                           postinc2	equ	0xFDE
  3984                           postdec2	equ	0xFDD
  3985                           fsr2h	equ	0xFDA
  3986                           fsr2l	equ	0xFD9
  3987                           status	equ	0xFD8
  3988                           
  3989 ;; *************** function _string_utils_copy *****************
  3990 ;; Defined at:
  3991 ;;		line 67 in file "src/modules/string_utils.c"
  3992 ;; Parameters:    Size  Location     Type
  3993 ;;  pdst            2    8[BANK0 ] PTR unsigned char 
  3994 ;;		 -> parameter_text(127), 
  3995 ;;  psrc            2   10[BANK0 ] PTR const unsigned char 
  3996 ;;		 -> this_buf(127), 
  3997 ;;  maxlen          2   12[BANK0 ] int 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  result          2   14[BANK0 ] int 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  2    8[BANK0 ] int 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4004 ;; Tracked objects:
  4005 ;;		On entry : F/0
  4006 ;;		On exit  : F/0
  4007 ;;		Unchanged: FFFFFFF0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4009 ;;      Params:         0       6       0       0       0       0       0
  4010 ;;      Locals:         0       2       0       0       0       0       0
  4011 ;;      Temps:          0       0       0       0       0       0       0
  4012 ;;      Totals:         0       8       0       0       0       0       0
  4013 ;;Total ram usage:        8 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    5
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_this_parse_item
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text10
  4024  001CA0                     __ptext10:
  4025                           	opt stack 0
  4026  001CA0                     _string_utils_copy:
  4027                           	opt stack 22
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;string_utils.c: 68: INT16 result = -1;
  4031                           
  4032                           ; BSR set to: 0
  4033  001CA0  696E               	setf	string_utils_copy@result& (0+255),b
  4034  001CA2  696F               	setf	(string_utils_copy@result+1)& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;string_utils.c: 69: if (psrc != (0))
  4038  001CA4  516B               	movf	(string_utils_copy@psrc+1)& (0+255),w,b
  4039  001CA6  116A               	iorwf	string_utils_copy@psrc& (0+255),w,b
  4040  001CA8  B4D8               	btfsc	status,2,c
  4041  001CAA  0012               	return	
  4042  001CAC  D010               	goto	l5159
  4043  001CAE                     l5151:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;string_utils.c: 72: {
  4047                           ;string_utils.c: 73: result++;
  4048  001CAE  4B6E               	infsnz	string_utils_copy@result& (0+255),f,b
  4049  001CB0  2B6F               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;string_utils.c: 74: *pdst++ = *psrc++;
  4053  001CB2  C06A  FFD9         	movff	string_utils_copy@psrc,fsr2l
  4054  001CB6  C06B  FFDA         	movff	string_utils_copy@psrc+1,fsr2h
  4055  001CBA  C068  FFE1         	movff	string_utils_copy@pdst,fsr1l
  4056  001CBE  C069  FFE2         	movff	string_utils_copy@pdst+1,fsr1h
  4057  001CC2  CFDF FFE7          	movff	indf2,indf1
  4058                           
  4059                           ; BSR set to: 0
  4060  001CC6  4B6A               	infsnz	string_utils_copy@psrc& (0+255),f,b
  4061  001CC8  2B6B               	incf	(string_utils_copy@psrc+1)& (0+255),f,b
  4062                           
  4063                           ; BSR set to: 0
  4064  001CCA  4B68               	infsnz	string_utils_copy@pdst& (0+255),f,b
  4065  001CCC  2B69               	incf	(string_utils_copy@pdst+1)& (0+255),f,b
  4066  001CCE                     l5159:
  4067                           
  4068                           ; BSR set to: 0
  4069  001CCE  C06A  FFD9         	movff	string_utils_copy@psrc,fsr2l
  4070  001CD2  C06B  FFDA         	movff	string_utils_copy@psrc+1,fsr2h
  4071  001CD6  50DF               	movf	indf2,w,c
  4072  001CD8  E008               	bz	l5163
  4073                           
  4074                           ; BSR set to: 0
  4075  001CDA  076C               	decf	string_utils_copy@maxlen& (0+255),f,b
  4076  001CDC  A0D8               	btfss	status,0,c
  4077  001CDE  076D               	decf	(string_utils_copy@maxlen+1)& (0+255),f,b
  4078  001CE0  0100               	movlb	0	; () banked
  4079  001CE2  296C               	incf	string_utils_copy@maxlen& (0+255),w,b
  4080  001CE4  B4D8               	btfsc	status,2,c
  4081  001CE6  296D               	incf	(string_utils_copy@maxlen+1)& (0+255),w,b
  4082  001CE8  E1E2               	bnz	l5151
  4083  001CEA                     l5163:
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;string_utils.c: 75: }
  4087                           ;string_utils.c: 76: result++;
  4088  001CEA  4B6E               	infsnz	string_utils_copy@result& (0+255),f,b
  4089  001CEC  2B6F               	incf	(string_utils_copy@result+1)& (0+255),f,b
  4090                           
  4091                           ; BSR set to: 0
  4092  001CEE  0012               	return	
  4093  001CF0                     __end_of_string_utils_copy:
  4094                           	opt stack 0
  4095                           tosu	equ	0xFFF
  4096                           tosh	equ	0xFFE
  4097                           tosl	equ	0xFFD
  4098                           pclath	equ	0xFFA
  4099                           tblptru	equ	0xFF8
  4100                           tblptrh	equ	0xFF7
  4101                           tblptrl	equ	0xFF6
  4102                           tablat	equ	0xFF5
  4103                           prodh	equ	0xFF4
  4104                           prodl	equ	0xFF3
  4105                           intcon	equ	0xFF2
  4106                           indf0	equ	0xFEF
  4107                           postinc0	equ	0xFEE
  4108                           fsr0h	equ	0xFEA
  4109                           fsr0l	equ	0xFE9
  4110                           wreg	equ	0xFE8
  4111                           indf1	equ	0xFE7
  4112                           postinc1	equ	0xFE6
  4113                           postdec1	equ	0xFE5
  4114                           fsr1h	equ	0xFE2
  4115                           fsr1l	equ	0xFE1
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8
  4122                           
  4123 ;; *************** function _string_utils_strchr *****************
  4124 ;; Defined at:
  4125 ;;		line 140 in file "src/modules/string_utils.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  pbuf            2    8[BANK0 ] PTR const unsigned char 
  4128 ;;		 -> this_buf(127), 
  4129 ;;  delimeter       1   10[BANK0 ] unsigned char 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  pos             2   13[BANK0 ] int 
  4132 ;;  result          2   11[BANK0 ] int 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  2    8[BANK0 ] int 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4137 ;; Tracked objects:
  4138 ;;		On entry : F/0
  4139 ;;		On exit  : F/0
  4140 ;;		Unchanged: FFFFFFF0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4142 ;;      Params:         0       3       0       0       0       0       0
  4143 ;;      Locals:         0       4       0       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0
  4145 ;;      Totals:         0       7       0       0       0       0       0
  4146 ;;Total ram usage:        7 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    5
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_this_parse_item
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           	psect	text11
  4157  001C4E                     __ptext11:
  4158                           	opt stack 0
  4159  001C4E                     _string_utils_strchr:
  4160                           	opt stack 22
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;string_utils.c: 141: INT16 result = -1;
  4164                           
  4165                           ; BSR set to: 0
  4166  001C4E  696B               	setf	string_utils_strchr@result& (0+255),b
  4167  001C50  696C               	setf	(string_utils_strchr@result+1)& (0+255),b
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;string_utils.c: 142: if (pbuf != (0))
  4171  001C52  5169               	movf	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4172  001C54  1168               	iorwf	string_utils_strchr@pbuf& (0+255),w,b
  4173  001C56  E018               	bz	l426
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;string_utils.c: 143: {
  4177                           ;string_utils.c: 144: INT16 pos;
  4178                           ;string_utils.c: 145: for (pos = 0; (pos < (1000)) && pbuf[pos]; pos++)
  4179  001C58  6B6D               	clrf	string_utils_strchr@pos& (0+255),b
  4180  001C5A  6B6E               	clrf	(string_utils_strchr@pos+1)& (0+255),b
  4181  001C5C  D00B               	goto	l5219
  4182  001C5E                     l5213:
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;string_utils.c: 146: {
  4186                           ;string_utils.c: 147: if (pbuf[pos] == delimeter)
  4187  001C5E  D819               	call	PL66	;call to abstracted procedure
  4188  001C60  516A               	movf	string_utils_strchr@delimeter& (0+255),w,b
  4189  001C62  62DF               	cpfseq	indf2,c
  4190  001C64  D005               	goto	l5217
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;string_utils.c: 148: {
  4194                           ;string_utils.c: 149: result = pos;
  4195  001C66  C06D  F06B         	movff	string_utils_strchr@pos,string_utils_strchr@result
  4196  001C6A  C06E  F06C         	movff	string_utils_strchr@pos+1,string_utils_strchr@result+1
  4197                           
  4198                           ;string_utils.c: 150: break;
  4199  001C6E  D00C               	goto	l426
  4200  001C70                     l5217:
  4201                           
  4202                           ; BSR set to: 0
  4203  001C70  4B6D               	infsnz	string_utils_strchr@pos& (0+255),f,b
  4204  001C72  2B6E               	incf	(string_utils_strchr@pos+1)& (0+255),f,b
  4205  001C74                     l5219:
  4206                           
  4207                           ; BSR set to: 0
  4208  001C74  516E               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4209  001C76  0A80               	xorlw	128
  4210  001C78  0F7D               	addlw	-131
  4211  001C7A  0EE8               	movlw	232
  4212  001C7C  B4D8               	btfsc	status,2,c
  4213  001C7E  5D6D               	subwf	string_utils_strchr@pos& (0+255),w,b
  4214  001C80  E203               	bc	l426
  4215                           
  4216                           ; BSR set to: 0
  4217  001C82  D807               	call	PL66	;call to abstracted procedure
  4218  001C84  50DF               	movf	indf2,w,c
  4219  001C86  E1EB               	bnz	l5213
  4220  001C88                     l426:
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;string_utils.c: 151: }
  4224                           ;string_utils.c: 152: }
  4225                           ;string_utils.c: 153: }
  4226                           ;string_utils.c: 154: return result;
  4227  001C88  C06B  F068         	movff	string_utils_strchr@result,?_string_utils_strchr
  4228  001C8C  C06C  F069         	movff	string_utils_strchr@result+1,?_string_utils_strchr+1
  4229                           
  4230                           ; BSR set to: 0
  4231  001C90  0012               	return	
  4232  001C92                     __end_of_string_utils_strchr:
  4233                           	opt stack 0
  4234  001C92                     PL66:
  4235                           	opt stack 22
  4236  001C92  516D               	movf	string_utils_strchr@pos& (0+255),w,b
  4237  001C94  2568               	addwf	string_utils_strchr@pbuf& (0+255),w,b
  4238  001C96  6ED9               	movwf	fsr2l,c
  4239  001C98  516E               	movf	(string_utils_strchr@pos+1)& (0+255),w,b
  4240  001C9A  2169               	addwfc	(string_utils_strchr@pbuf+1)& (0+255),w,b
  4241  001C9C  6EDA               	movwf	fsr2h,c
  4242  001C9E  0012               	return	
  4243  001CA0                     __end_ofPL66:
  4244                           	opt stack 0
  4245                           tosu	equ	0xFFF
  4246                           tosh	equ	0xFFE
  4247                           tosl	equ	0xFFD
  4248                           pclath	equ	0xFFA
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           indf0	equ	0xFEF
  4257                           postinc0	equ	0xFEE
  4258                           fsr0h	equ	0xFEA
  4259                           fsr0l	equ	0xFE9
  4260                           wreg	equ	0xFE8
  4261                           indf1	equ	0xFE7
  4262                           postinc1	equ	0xFE6
  4263                           postdec1	equ	0xFE5
  4264                           fsr1h	equ	0xFE2
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _string_utils_strncmp *****************
  4274 ;; Defined at:
  4275 ;;		line 292 in file "src/modules/string_utils.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;  pstr1           2   10[BANK0 ] PTR const unsigned char 
  4278 ;;		 -> syntax@syntax_data(621), 
  4279 ;;  pstr2           2   12[BANK0 ] PTR const unsigned char 
  4280 ;;		 -> this_buf(127), 
  4281 ;;  len             2   14[BANK0 ] int 
  4282 ;;  case_sensiti    1   16[BANK0 ] unsigned char 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  symb2           1   23[BANK0 ] unsigned char 
  4285 ;;  symb1           1   22[BANK0 ] unsigned char 
  4286 ;;  pos             2   20[BANK0 ] int 
  4287 ;;  result          1   19[BANK0 ] unsigned char 
  4288 ;; Return value:  Size  Location     Type
  4289 ;;                  1    wreg      unsigned char 
  4290 ;; Registers used:
  4291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4292 ;; Tracked objects:
  4293 ;;		On entry : F/0
  4294 ;;		On exit  : F/0
  4295 ;;		Unchanged: FFFFFFF0/0
  4296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4297 ;;      Params:         0       7       0       0       0       0       0
  4298 ;;      Locals:         0       5       0       0       0       0       0
  4299 ;;      Temps:          0       2       0       0       0       0       0
  4300 ;;      Totals:         0      14       0       0       0       0       0
  4301 ;;Total ram usage:       14 bytes
  4302 ;; Hardware stack levels used:    1
  4303 ;; Hardware stack levels required when called:    6
  4304 ;; This function calls:
  4305 ;;		_string_utils_is_upper_case
  4306 ;; This function is called by:
  4307 ;;		_this_parse_item
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text12
  4312  0016B0                     __ptext12:
  4313                           	opt stack 0
  4314  0016B0                     _string_utils_strncmp:
  4315                           	opt stack 21
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;string_utils.c: 293: CHAR result = FALSE;
  4319                           
  4320                           ; BSR set to: 0
  4321  0016B0  6B73               	clrf	string_utils_strncmp@result& (0+255),b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;string_utils.c: 294: if (pstr1 != (0) && pstr2 != (0) )
  4325  0016B2  516B               	movf	(string_utils_strncmp@pstr1+1)& (0+255),w,b
  4326  0016B4  116A               	iorwf	string_utils_strncmp@pstr1& (0+255),w,b
  4327  0016B6  E045               	bz	l5267
  4328                           
  4329                           ; BSR set to: 0
  4330  0016B8  516D               	movf	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  4331  0016BA  116C               	iorwf	string_utils_strncmp@pstr2& (0+255),w,b
  4332  0016BC  E042               	bz	l5267
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;string_utils.c: 295: {
  4336                           ;string_utils.c: 296: INT16 pos = 0;
  4337  0016BE  6B74               	clrf	string_utils_strncmp@pos& (0+255),b
  4338  0016C0  6B75               	clrf	(string_utils_strncmp@pos+1)& (0+255),b
  4339                           
  4340                           ;string_utils.c: 297: while ( len-- )
  4341  0016C2  D037               	goto	l5265
  4342  0016C4                     l5241:
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;string_utils.c: 298: {
  4346                           ;string_utils.c: 299: char symb1 = pstr1[pos];
  4347  0016C4  C06A  F071         	movff	string_utils_strncmp@pstr1,??_string_utils_strncmp
  4348  0016C8  C06B  F072         	movff	string_utils_strncmp@pstr1+1,??_string_utils_strncmp+1
  4349  0016CC  5174               	movf	string_utils_strncmp@pos& (0+255),w,b
  4350  0016CE  2771               	addwf	??_string_utils_strncmp& (0+255),f,b
  4351  0016D0  5175               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  4352  0016D2  2372               	addwfc	(??_string_utils_strncmp+1)& (0+255),f,b
  4353  0016D4  C071  FFF6         	movff	??_string_utils_strncmp,tblptrl
  4354  0016D8  C072  FFF7         	movff	??_string_utils_strncmp+1,tblptrh
  4355  0016DC  0008               	tblrd		*
  4356  0016DE  CFF5 F076          	movff	tablat,string_utils_strncmp@symb1
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;string_utils.c: 300: char symb2 = pstr2[pos];
  4360  0016E2  5174               	movf	string_utils_strncmp@pos& (0+255),w,b
  4361  0016E4  256C               	addwf	string_utils_strncmp@pstr2& (0+255),w,b
  4362  0016E6  6ED9               	movwf	fsr2l,c
  4363  0016E8  5175               	movf	(string_utils_strncmp@pos+1)& (0+255),w,b
  4364  0016EA  216D               	addwfc	(string_utils_strncmp@pstr2+1)& (0+255),w,b
  4365  0016EC  6EDA               	movwf	fsr2h,c
  4366  0016EE  50DF               	movf	indf2,w,c
  4367  0016F0  6F77               	movwf	string_utils_strncmp@symb2& (0+255),b
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;string_utils.c: 302: if ( !case_sensitive )
  4371  0016F2  6770               	tstfsz	string_utils_strncmp@case_sensitive& (0+255),b
  4372  0016F4  D00E               	goto	l5255
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;string_utils.c: 303: {
  4376                           ;string_utils.c: 304: if ( string_utils_is_upper_case(symb1) )
  4377  0016F6  5176               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4378  0016F8  EC93  F010         	call	_string_utils_is_upper_case
  4379  0016FC  0900               	iorlw	0
  4380  0016FE  E002               	bz	l5251
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;string_utils.c: 305: {
  4384                           ;string_utils.c: 306: symb1 = (symb1+('a' - 'A'));
  4385  001700  0E20               	movlw	32
  4386  001702  2776               	addwf	string_utils_strncmp@symb1& (0+255),f,b
  4387  001704                     l5251:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;string_utils.c: 307: }
  4391                           ;string_utils.c: 308: if ( string_utils_is_upper_case(symb2) )
  4392  001704  5177               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4393  001706  EC93  F010         	call	_string_utils_is_upper_case
  4394  00170A  0900               	iorlw	0
  4395  00170C  E002               	bz	l5255
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;string_utils.c: 309: {
  4399                           ;string_utils.c: 310: symb2 = (symb2+('a' - 'A'));
  4400  00170E  0E20               	movlw	32
  4401  001710  2777               	addwf	string_utils_strncmp@symb2& (0+255),f,b
  4402  001712                     l5255:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;string_utils.c: 311: }
  4406                           ;string_utils.c: 312: }
  4407                           ;string_utils.c: 313: if (symb1 == symb2 || symb1 == '?' || symb2 == '?')
  4408  001712  5176               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4409  001714  1977               	xorwf	string_utils_strncmp@symb2& (0+255),w,b
  4410  001716  E006               	bz	l5261
  4411                           
  4412                           ; BSR set to: 0
  4413  001718  5176               	movf	string_utils_strncmp@symb1& (0+255),w,b
  4414  00171A  0A3F               	xorlw	63
  4415  00171C  E003               	bz	l5261
  4416                           
  4417                           ; BSR set to: 0
  4418  00171E  5177               	movf	string_utils_strncmp@symb2& (0+255),w,b
  4419  001720  0A3F               	xorlw	63
  4420  001722  E103               	bnz	l485
  4421  001724                     l5261:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;string_utils.c: 314: {
  4425                           ;string_utils.c: 315: result = TRUE;
  4426  001724  0E01               	movlw	1
  4427  001726  6F73               	movwf	string_utils_strncmp@result& (0+255),b
  4428                           
  4429                           ;string_utils.c: 316: }
  4430  001728  D002               	goto	l5263
  4431  00172A                     l485:
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;string_utils.c: 317: else
  4435                           ;string_utils.c: 318: {
  4436                           ;string_utils.c: 319: result = FALSE;
  4437  00172A  6B73               	clrf	string_utils_strncmp@result& (0+255),b
  4438                           
  4439                           ;string_utils.c: 320: break;
  4440  00172C  D00A               	goto	l5267
  4441  00172E                     l5263:
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;string_utils.c: 321: }
  4445                           ;string_utils.c: 322: pos++;
  4446  00172E  4B74               	infsnz	string_utils_strncmp@pos& (0+255),f,b
  4447  001730  2B75               	incf	(string_utils_strncmp@pos+1)& (0+255),f,b
  4448  001732                     l5265:
  4449                           
  4450                           ; BSR set to: 0
  4451  001732  076E               	decf	string_utils_strncmp@len& (0+255),f,b
  4452  001734  A0D8               	btfss	status,0,c
  4453  001736  076F               	decf	(string_utils_strncmp@len+1)& (0+255),f,b
  4454  001738  0100               	movlb	0	; () banked
  4455  00173A  296E               	incf	string_utils_strncmp@len& (0+255),w,b
  4456  00173C  B4D8               	btfsc	status,2,c
  4457  00173E  296F               	incf	(string_utils_strncmp@len+1)& (0+255),w,b
  4458  001740  E1C1               	bnz	l5241
  4459  001742                     l5267:
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;string_utils.c: 323: }
  4463                           ;string_utils.c: 324: }
  4464                           ;string_utils.c: 325: return result;
  4465  001742  5173               	movf	string_utils_strncmp@result& (0+255),w,b
  4466                           
  4467                           ; BSR set to: 0
  4468  001744  0012               	return	
  4469  001746                     __end_of_string_utils_strncmp:
  4470                           	opt stack 0
  4471                           tosu	equ	0xFFF
  4472                           tosh	equ	0xFFE
  4473                           tosl	equ	0xFFD
  4474                           pclath	equ	0xFFA
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           intcon	equ	0xFF2
  4482                           indf0	equ	0xFEF
  4483                           postinc0	equ	0xFEE
  4484                           fsr0h	equ	0xFEA
  4485                           fsr0l	equ	0xFE9
  4486                           wreg	equ	0xFE8
  4487                           indf1	equ	0xFE7
  4488                           postinc1	equ	0xFE6
  4489                           postdec1	equ	0xFE5
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           postinc2	equ	0xFDE
  4494                           postdec2	equ	0xFDD
  4495                           fsr2h	equ	0xFDA
  4496                           fsr2l	equ	0xFD9
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function _string_utils_is_upper_case *****************
  4500 ;; Defined at:
  4501 ;;		line 167 in file "src/modules/string_utils.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  symb            1    wreg     unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  symb            1    9[BANK0 ] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      unsigned char 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : F/0
  4512 ;;		On exit  : F/0
  4513 ;;		Unchanged: FFFFFFF0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4515 ;;      Params:         0       0       0       0       0       0       0
  4516 ;;      Locals:         0       2       0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0
  4518 ;;      Totals:         0       2       0       0       0       0       0
  4519 ;;Total ram usage:        2 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    5
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_string_utils_strncmp
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text13
  4530  002126                     __ptext13:
  4531                           	opt stack 0
  4532  002126                     _string_utils_is_upper_case:
  4533                           	opt stack 21
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;string_utils_is_upper_case@symb stored from wreg
  4537  002126  CFE8 F069          	movff	wreg,string_utils_is_upper_case@symb
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;string_utils.c: 168: return (symb >= 'A') && (symb <= 'Z');
  4541  00212A  6B68               	clrf	_string_utils_is_upper_case$747& (0+255),b
  4542                           
  4543                           ; BSR set to: 0
  4544  00212C  0E40               	movlw	64
  4545  00212E  6569               	cpfsgt	string_utils_is_upper_case@symb& (0+255),b
  4546  002130  D005               	goto	l437
  4547                           
  4548                           ; BSR set to: 0
  4549  002132  0E5B               	movlw	91
  4550  002134  6169               	cpfslt	string_utils_is_upper_case@symb& (0+255),b
  4551  002136  D002               	goto	l437
  4552                           
  4553                           ; BSR set to: 0
  4554  002138  0E01               	movlw	1
  4555  00213A  6F68               	movwf	_string_utils_is_upper_case$747& (0+255),b
  4556  00213C                     l437:
  4557                           
  4558                           ; BSR set to: 0
  4559  00213C  5168               	movf	_string_utils_is_upper_case$747& (0+255),w,b
  4560                           
  4561                           ; BSR set to: 0
  4562  00213E  0012               	return	
  4563  002140                     __end_of_string_utils_is_upper_case:
  4564                           	opt stack 0
  4565                           tosu	equ	0xFFF
  4566                           tosh	equ	0xFFE
  4567                           tosl	equ	0xFFD
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           indf0	equ	0xFEF
  4577                           postinc0	equ	0xFEE
  4578                           fsr0h	equ	0xFEA
  4579                           fsr0l	equ	0xFE9
  4580                           wreg	equ	0xFE8
  4581                           indf1	equ	0xFE7
  4582                           postinc1	equ	0xFE6
  4583                           postdec1	equ	0xFE5
  4584                           fsr1h	equ	0xFE2
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _string_utils_from_hex *****************
  4594 ;; Defined at:
  4595 ;;		line 400 in file "src/modules/string_utils.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  pdata           2   14[BANK0 ] PTR unsigned char 
  4598 ;;		 -> parameter_value(127), 
  4599 ;;  phex_str        2   16[BANK0 ] PTR const unsigned char 
  4600 ;;		 -> parameter_value(127), 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  i               2   25[BANK0 ] int 
  4603 ;;  j               2   23[BANK0 ] int 
  4604 ;;  len             2   21[BANK0 ] int 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  2   14[BANK0 ] int 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : F/0
  4611 ;;		On exit  : F/0
  4612 ;;		Unchanged: FFFFFFF0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4614 ;;      Params:         0       4       0       0       0       0       0
  4615 ;;      Locals:         0       6       0       0       0       0       0
  4616 ;;      Temps:          0       3       0       0       0       0       0
  4617 ;;      Totals:         0      13       0       0       0       0       0
  4618 ;;Total ram usage:       13 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    7
  4621 ;; This function calls:
  4622 ;;		_string_utils_strlen
  4623 ;;		_symb_from_hex_to_bin
  4624 ;; This function is called by:
  4625 ;;		_this_parse_item
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text14
  4630  001746                     __ptext14:
  4631                           	opt stack 0
  4632  001746                     _string_utils_from_hex:
  4633                           	opt stack 20
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;string_utils.c: 401: INT16 i = 0;
  4637                           
  4638                           ; BSR set to: 0
  4639  001746  6B79               	clrf	string_utils_from_hex@i& (0+255),b
  4640  001748  6B7A               	clrf	(string_utils_from_hex@i+1)& (0+255),b
  4641                           
  4642                           ;string_utils.c: 402: INT16 j = 0;
  4643  00174A  6B77               	clrf	string_utils_from_hex@j& (0+255),b
  4644  00174C  6B78               	clrf	(string_utils_from_hex@j+1)& (0+255),b
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;string_utils.c: 403: INT16 len = string_utils_strlen(phex_str);
  4648  00174E  C070  F06A         	movff	string_utils_from_hex@phex_str,?_string_utils_strlen
  4649  001752  C071  F06B         	movff	string_utils_from_hex@phex_str+1,?_string_utils_strlen+1
  4650  001756  EC31  F00F         	call	_string_utils_strlen	;wreg free
  4651  00175A  C06A  F075         	movff	?_string_utils_strlen,string_utils_from_hex@len
  4652  00175E  C06B  F076         	movff	?_string_utils_strlen+1,string_utils_from_hex@len+1
  4653                           
  4654                           ;string_utils.c: 404: while (i < (len - 1))
  4655  001762  D02A               	goto	l5313
  4656  001764                     l5307:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;string_utils.c: 405: {
  4660                           ;string_utils.c: 406: pdata[j] = symb_from_hex_to_bin(phex_str[i]) * 16
  4661                           ;string_utils.c: 407: + symb_from_hex_to_bin(phex_str[i + 1]);
  4662  001764  5177               	movf	string_utils_from_hex@j& (0+255),w,b
  4663  001766  256E               	addwf	string_utils_from_hex@pdata& (0+255),w,b
  4664  001768  6ED9               	movwf	fsr2l,c
  4665  00176A  5178               	movf	(string_utils_from_hex@j+1)& (0+255),w,b
  4666  00176C  216F               	addwfc	(string_utils_from_hex@pdata+1)& (0+255),w,b
  4667  00176E  6EDA               	movwf	fsr2h,c
  4668  001770  C070  F072         	movff	string_utils_from_hex@phex_str,??_string_utils_from_hex
  4669  001774  C071  F073         	movff	string_utils_from_hex@phex_str+1,??_string_utils_from_hex+1
  4670  001778  5179               	movf	string_utils_from_hex@i& (0+255),w,b
  4671  00177A  2772               	addwf	??_string_utils_from_hex& (0+255),f,b
  4672  00177C  517A               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4673  00177E  2373               	addwfc	(??_string_utils_from_hex+1)& (0+255),f,b
  4674  001780  2972               	incf	??_string_utils_from_hex& (0+255),w,b
  4675  001782  6EE1               	movwf	fsr1l,c
  4676  001784  0E00               	movlw	0
  4677  001786  2173               	addwfc	(??_string_utils_from_hex+1)& (0+255),w,b
  4678  001788  6EE2               	movwf	fsr1h,c
  4679  00178A  50E7               	movf	indf1,w,c
  4680  00178C  EC2C  F00D         	call	_symb_from_hex_to_bin
  4681  001790  6F74               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4682  001792  5179               	movf	string_utils_from_hex@i& (0+255),w,b
  4683  001794  2570               	addwf	string_utils_from_hex@phex_str& (0+255),w,b
  4684  001796  6EE1               	movwf	fsr1l,c
  4685  001798  517A               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4686  00179A  2171               	addwfc	(string_utils_from_hex@phex_str+1)& (0+255),w,b
  4687  00179C  6EE2               	movwf	fsr1h,c
  4688  00179E  50E7               	movf	indf1,w,c
  4689  0017A0  EC2C  F00D         	call	_symb_from_hex_to_bin
  4690  0017A4  0D10               	mullw	16
  4691  0017A6  50F3               	movf	prodl,w,c
  4692  0017A8  2574               	addwf	(??_string_utils_from_hex+2)& (0+255),w,b
  4693  0017AA  6EDF               	movwf	indf2,c
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;string_utils.c: 408: i += 2; j++;
  4697  0017AC  0E02               	movlw	2
  4698  0017AE  2779               	addwf	string_utils_from_hex@i& (0+255),f,b
  4699  0017B0  0E00               	movlw	0
  4700  0017B2  237A               	addwfc	(string_utils_from_hex@i+1)& (0+255),f,b
  4701                           
  4702                           ; BSR set to: 0
  4703  0017B4  4B77               	infsnz	string_utils_from_hex@j& (0+255),f,b
  4704  0017B6  2B78               	incf	(string_utils_from_hex@j+1)& (0+255),f,b
  4705  0017B8                     l5313:
  4706                           
  4707                           ; BSR set to: 0
  4708  0017B8  0EFF               	movlw	255
  4709  0017BA  2575               	addwf	string_utils_from_hex@len& (0+255),w,b
  4710  0017BC  6F72               	movwf	??_string_utils_from_hex& (0+255),b
  4711  0017BE  0EFF               	movlw	255
  4712  0017C0  2176               	addwfc	(string_utils_from_hex@len+1)& (0+255),w,b
  4713  0017C2  6F73               	movwf	(??_string_utils_from_hex+1)& (0+255),b
  4714  0017C4  517A               	movf	(string_utils_from_hex@i+1)& (0+255),w,b
  4715  0017C6  0A80               	xorlw	128
  4716  0017C8  6F74               	movwf	(??_string_utils_from_hex+2)& (0+255),b
  4717  0017CA  5172               	movf	??_string_utils_from_hex& (0+255),w,b
  4718  0017CC  5D79               	subwf	string_utils_from_hex@i& (0+255),w,b
  4719  0017CE  5173               	movf	(??_string_utils_from_hex+1)& (0+255),w,b
  4720  0017D0  0A80               	xorlw	128
  4721  0017D2  5974               	subwfb	(??_string_utils_from_hex+2)& (0+255),w,b
  4722  0017D4  B0D8               	btfsc	status,0,c
  4723  0017D6  0012               	return	
  4724  0017D8  D7C5               	goto	l5307
  4725  0017DA                     __end_of_string_utils_from_hex:
  4726                           	opt stack 0
  4727                           tosu	equ	0xFFF
  4728                           tosh	equ	0xFFE
  4729                           tosl	equ	0xFFD
  4730                           pclath	equ	0xFFA
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodh	equ	0xFF4
  4736                           prodl	equ	0xFF3
  4737                           intcon	equ	0xFF2
  4738                           indf0	equ	0xFEF
  4739                           postinc0	equ	0xFEE
  4740                           fsr0h	equ	0xFEA
  4741                           fsr0l	equ	0xFE9
  4742                           wreg	equ	0xFE8
  4743                           indf1	equ	0xFE7
  4744                           postinc1	equ	0xFE6
  4745                           postdec1	equ	0xFE5
  4746                           fsr1h	equ	0xFE2
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _string_utils_strlen *****************
  4756 ;; Defined at:
  4757 ;;		line 12 in file "src/modules/string_utils.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  pstr            2   10[BANK0 ] PTR const unsigned char 
  4760 ;;		 -> this_buf(127), parameter_value(127), 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;  i               2   12[BANK0 ] int 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  2   10[BANK0 ] int 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : F/0
  4770 ;;		Unchanged: FFFFFFF0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4772 ;;      Params:         0       2       0       0       0       0       0
  4773 ;;      Locals:         0       2       0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0
  4775 ;;      Totals:         0       4       0       0       0       0       0
  4776 ;;Total ram usage:        4 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    6
  4779 ;; This function calls:
  4780 ;;		_string_utils_is_symbol
  4781 ;; This function is called by:
  4782 ;;		_string_utils_from_hex
  4783 ;;		_this_parse_item
  4784 ;;		_syntax_string
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text15
  4789  001E62                     __ptext15:
  4790                           	opt stack 0
  4791  001E62                     _string_utils_strlen:
  4792                           	opt stack 22
  4793                           
  4794                           ;string_utils.c: 13: INT16 i = 0;
  4795                           
  4796                           ; BSR set to: 0
  4797  001E62  0100               	movlb	0	; () banked
  4798  001E64  6B6C               	clrf	string_utils_strlen@i& (0+255),b
  4799  001E66  6B6D               	clrf	(string_utils_strlen@i+1)& (0+255),b
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;string_utils.c: 14: if (pstr)
  4803  001E68  516B               	movf	(string_utils_strlen@pstr+1)& (0+255),w,b
  4804  001E6A  116A               	iorwf	string_utils_strlen@pstr& (0+255),w,b
  4805  001E6C  E014               	bz	l389
  4806  001E6E                     l5127:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;string_utils.c: 17: {
  4810                           ;string_utils.c: 18: if (! string_utils_is_symbol(pstr[i]))
  4811  001E6E  516C               	movf	string_utils_strlen@i& (0+255),w,b
  4812  001E70  256A               	addwf	string_utils_strlen@pstr& (0+255),w,b
  4813  001E72  6ED9               	movwf	fsr2l,c
  4814  001E74  516D               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4815  001E76  216B               	addwfc	(string_utils_strlen@pstr+1)& (0+255),w,b
  4816  001E78  6EDA               	movwf	fsr2h,c
  4817  001E7A  50DF               	movf	indf2,w,c
  4818  001E7C  ECA0  F010         	call	_string_utils_is_symbol
  4819  001E80  0900               	iorlw	0
  4820  001E82  E009               	bz	l389
  4821                           
  4822                           ; BSR set to: 0
  4823  001E84  4B6C               	infsnz	string_utils_strlen@i& (0+255),f,b
  4824  001E86  2B6D               	incf	(string_utils_strlen@i+1)& (0+255),f,b
  4825                           
  4826                           ; BSR set to: 0
  4827  001E88  516D               	movf	(string_utils_strlen@i+1)& (0+255),w,b
  4828  001E8A  0A80               	xorlw	128
  4829  001E8C  0F7D               	addlw	-131
  4830  001E8E  0EE8               	movlw	232
  4831  001E90  B4D8               	btfsc	status,2,c
  4832  001E92  5D6C               	subwf	string_utils_strlen@i& (0+255),w,b
  4833  001E94  E3EC               	bnc	l5127
  4834  001E96                     l389:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;string_utils.c: 21: }
  4838                           ;string_utils.c: 22: }
  4839                           ;string_utils.c: 23: }
  4840                           ;string_utils.c: 24: return i;
  4841  001E96  C06C  F06A         	movff	string_utils_strlen@i,?_string_utils_strlen
  4842  001E9A  C06D  F06B         	movff	string_utils_strlen@i+1,?_string_utils_strlen+1
  4843                           
  4844                           ; BSR set to: 0
  4845  001E9E  0012               	return	
  4846  001EA0                     __end_of_string_utils_strlen:
  4847                           	opt stack 0
  4848                           tosu	equ	0xFFF
  4849                           tosh	equ	0xFFE
  4850                           tosl	equ	0xFFD
  4851                           pclath	equ	0xFFA
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           indf0	equ	0xFEF
  4860                           postinc0	equ	0xFEE
  4861                           fsr0h	equ	0xFEA
  4862                           fsr0l	equ	0xFE9
  4863                           wreg	equ	0xFE8
  4864                           indf1	equ	0xFE7
  4865                           postinc1	equ	0xFE6
  4866                           postdec1	equ	0xFE5
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _string_utils_is_symbol *****************
  4877 ;; Defined at:
  4878 ;;		line 194 in file "src/modules/string_utils.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  symb            1    wreg     unsigned char 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;  symb            1    9[BANK0 ] unsigned char 
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      unsigned char 
  4885 ;; Registers used:
  4886 ;;		wreg, status,2
  4887 ;; Tracked objects:
  4888 ;;		On entry : F/0
  4889 ;;		On exit  : F/0
  4890 ;;		Unchanged: FFFFFFF0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4892 ;;      Params:         0       0       0       0       0       0       0
  4893 ;;      Locals:         0       2       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0
  4895 ;;      Totals:         0       2       0       0       0       0       0
  4896 ;;Total ram usage:        2 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    5
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_string_utils_strlen
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text16
  4907  002140                     __ptext16:
  4908                           	opt stack 0
  4909  002140                     _string_utils_is_symbol:
  4910                           	opt stack 22
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;string_utils_is_symbol@symb stored from wreg
  4914  002140  CFE8 F069          	movff	wreg,string_utils_is_symbol@symb
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;string_utils.c: 195: return (symb >= ' ') && (symb <= '~');
  4918  002144  6B68               	clrf	_string_utils_is_symbol$753& (0+255),b
  4919                           
  4920                           ; BSR set to: 0
  4921  002146  0E1F               	movlw	31
  4922  002148  6569               	cpfsgt	string_utils_is_symbol@symb& (0+255),b
  4923  00214A  D005               	goto	l447
  4924                           
  4925                           ; BSR set to: 0
  4926  00214C  0E7F               	movlw	127
  4927  00214E  6169               	cpfslt	string_utils_is_symbol@symb& (0+255),b
  4928  002150  D002               	goto	l447
  4929                           
  4930                           ; BSR set to: 0
  4931  002152  0E01               	movlw	1
  4932  002154  6F68               	movwf	_string_utils_is_symbol$753& (0+255),b
  4933  002156                     l447:
  4934                           
  4935                           ; BSR set to: 0
  4936  002156  5168               	movf	_string_utils_is_symbol$753& (0+255),w,b
  4937                           
  4938                           ; BSR set to: 0
  4939  002158  0012               	return	
  4940  00215A                     __end_of_string_utils_is_symbol:
  4941                           	opt stack 0
  4942                           tosu	equ	0xFFF
  4943                           tosh	equ	0xFFE
  4944                           tosl	equ	0xFFD
  4945                           pclath	equ	0xFFA
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           indf0	equ	0xFEF
  4954                           postinc0	equ	0xFEE
  4955                           fsr0h	equ	0xFEA
  4956                           fsr0l	equ	0xFE9
  4957                           wreg	equ	0xFE8
  4958                           indf1	equ	0xFE7
  4959                           postinc1	equ	0xFE6
  4960                           postdec1	equ	0xFE5
  4961                           fsr1h	equ	0xFE2
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _symb_from_hex_to_bin *****************
  4971 ;; Defined at:
  4972 ;;		line 334 in file "src/modules/string_utils.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  symb            1    wreg     unsigned char 
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;  symb            1    8[BANK0 ] unsigned char 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      unsigned char 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2, status,0
  4981 ;; Tracked objects:
  4982 ;;		On entry : F/0
  4983 ;;		On exit  : F/0
  4984 ;;		Unchanged: FFFFFFF0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4986 ;;      Params:         0       0       0       0       0       0       0
  4987 ;;      Locals:         0       1       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0
  4989 ;;      Totals:         0       1       0       0       0       0       0
  4990 ;;Total ram usage:        1 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    5
  4993 ;; This function calls:
  4994 ;;		Nothing
  4995 ;; This function is called by:
  4996 ;;		_string_utils_from_hex
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text17
  5001  001A58                     __ptext17:
  5002                           	opt stack 0
  5003  001A58                     _symb_from_hex_to_bin:
  5004                           	opt stack 21
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;symb_from_hex_to_bin@symb stored from wreg
  5008  001A58  CFE8 F068          	movff	wreg,symb_from_hex_to_bin@symb
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;string_utils.c: 335: switch (symb)
  5012  001A5C  D009               	goto	l5297
  5013  001A5E                     l5283:
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;string_utils.c: 338: case '1':
  5017                           ;string_utils.c: 339: case '2':
  5018                           ;string_utils.c: 340: case '3':
  5019                           ;string_utils.c: 341: case '4':
  5020                           ;string_utils.c: 342: case '5':
  5021                           ;string_utils.c: 343: case '6':
  5022                           ;string_utils.c: 344: case '7':
  5023                           ;string_utils.c: 345: case '8':
  5024                           ;string_utils.c: 346: case '9':
  5025                           ;string_utils.c: 347: return (UINT8)(symb - '0');
  5026  001A5E  5168               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5027  001A60  0FD0               	addlw	208
  5028  001A62  0012               	return	
  5029  001A64                     l5287:
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;string_utils.c: 349: case 'b':
  5033                           ;string_utils.c: 350: case 'c':
  5034                           ;string_utils.c: 351: case 'd':
  5035                           ;string_utils.c: 352: case 'e':
  5036                           ;string_utils.c: 353: case 'f':
  5037                           ;string_utils.c: 354: return (UINT8)(symb - 'a') + 10;
  5038  001A64  5168               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5039  001A66  0FA9               	addlw	169
  5040  001A68  0012               	return	
  5041  001A6A                     l5291:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;string_utils.c: 356: case 'B':
  5045                           ;string_utils.c: 357: case 'C':
  5046                           ;string_utils.c: 358: case 'D':
  5047                           ;string_utils.c: 359: case 'E':
  5048                           ;string_utils.c: 360: case 'F':
  5049                           ;string_utils.c: 361: return (UINT8)(symb - 'A') + 10;
  5050  001A6A  5168               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5051  001A6C  0FC9               	addlw	201
  5052  001A6E  0012               	return	
  5053  001A70                     l5297:
  5054                           
  5055                           ; BSR set to: 0
  5056  001A70  5168               	movf	symb_from_hex_to_bin@symb& (0+255),w,b
  5057                           
  5058                           ; Switch size 1, requested type "space"
  5059                           ; Number of cases is 22, Range of values is 48 to 102
  5060                           ; switch strategies available:
  5061                           ; Name         Instructions Cycles
  5062                           ; simple_byte           67    34 (average)
  5063                           ;	Chosen strategy is simple_byte
  5064  001A72  0A30               	xorlw	48	; case 48
  5065  001A74  E0F4               	bz	l5283
  5066  001A76  0A01               	xorlw	1	; case 49
  5067  001A78  E0F2               	bz	l5283
  5068  001A7A  0A03               	xorlw	3	; case 50
  5069  001A7C  E0F0               	bz	l5283
  5070  001A7E  0A01               	xorlw	1	; case 51
  5071  001A80  E0EE               	bz	l5283
  5072  001A82  0A07               	xorlw	7	; case 52
  5073  001A84  E0EC               	bz	l5283
  5074  001A86  0A01               	xorlw	1	; case 53
  5075  001A88  E0EA               	bz	l5283
  5076  001A8A  0A03               	xorlw	3	; case 54
  5077  001A8C  E0E8               	bz	l5283
  5078  001A8E  0A01               	xorlw	1	; case 55
  5079  001A90  E0E6               	bz	l5283
  5080  001A92  0A0F               	xorlw	15	; case 56
  5081  001A94  E0E4               	bz	l5283
  5082  001A96  0A01               	xorlw	1	; case 57
  5083  001A98  E0E2               	bz	l5283
  5084  001A9A  0A78               	xorlw	120	; case 65
  5085  001A9C  E0E6               	bz	l5291
  5086  001A9E  0A03               	xorlw	3	; case 66
  5087  001AA0  E0E4               	bz	l5291
  5088  001AA2  0A01               	xorlw	1	; case 67
  5089  001AA4  E0E2               	bz	l5291
  5090  001AA6  0A07               	xorlw	7	; case 68
  5091  001AA8  E0E0               	bz	l5291
  5092  001AAA  0A01               	xorlw	1	; case 69
  5093  001AAC  E0DE               	bz	l5291
  5094  001AAE  0A03               	xorlw	3	; case 70
  5095  001AB0  E0DC               	bz	l5291
  5096  001AB2  0A27               	xorlw	39	; case 97
  5097  001AB4  E0D7               	bz	l5287
  5098  001AB6  0A03               	xorlw	3	; case 98
  5099  001AB8  E0D5               	bz	l5287
  5100  001ABA  0A01               	xorlw	1	; case 99
  5101  001ABC  E0D3               	bz	l5287
  5102  001ABE  0A07               	xorlw	7	; case 100
  5103  001AC0  E0D1               	bz	l5287
  5104  001AC2  0A01               	xorlw	1	; case 101
  5105  001AC4  E0CF               	bz	l5287
  5106  001AC6  0A03               	xorlw	3	; case 102
  5107  001AC8  E0CD               	bz	l5287
  5108                           
  5109                           ; BSR set to: 0
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;string_utils.c: 363: return 0;
  5113  001ACA  0C00               	retlw	0
  5114  001ACC                     __end_of_symb_from_hex_to_bin:
  5115                           	opt stack 0
  5116                           tosu	equ	0xFFF
  5117                           tosh	equ	0xFFE
  5118                           tosl	equ	0xFFD
  5119                           pclath	equ	0xFFA
  5120                           tblptru	equ	0xFF8
  5121                           tblptrh	equ	0xFF7
  5122                           tblptrl	equ	0xFF6
  5123                           tablat	equ	0xFF5
  5124                           prodh	equ	0xFF4
  5125                           prodl	equ	0xFF3
  5126                           intcon	equ	0xFF2
  5127                           indf0	equ	0xFEF
  5128                           postinc0	equ	0xFEE
  5129                           fsr0h	equ	0xFEA
  5130                           fsr0l	equ	0xFE9
  5131                           wreg	equ	0xFE8
  5132                           indf1	equ	0xFE7
  5133                           postinc1	equ	0xFE6
  5134                           postdec1	equ	0xFE5
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function _string_utils_atoi *****************
  5145 ;; Defined at:
  5146 ;;		line 414 in file "src/modules/string_utils.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  c               3   14[BANK0 ] PTR const unsigned char 
  5149 ;;		 -> this_buf(127), ROM(32767), 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  value           2   22[BANK0 ] int 
  5152 ;;  sign            2   20[BANK0 ] int 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  2   14[BANK0 ] int 
  5155 ;; Registers used:
  5156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : F/0
  5159 ;;		On exit  : F/0
  5160 ;;		Unchanged: FFFFFFF0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         0       3       0       0       0       0       0
  5163 ;;      Locals:         0       4       0       0       0       0       0
  5164 ;;      Temps:          0       3       0       0       0       0       0
  5165 ;;      Totals:         0      10       0       0       0       0       0
  5166 ;;Total ram usage:       10 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; Hardware stack levels required when called:    6
  5169 ;; This function calls:
  5170 ;;		___wmul
  5171 ;;		_string_utils_is_digit
  5172 ;; This function is called by:
  5173 ;;		_this_parse_item
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text18
  5178  00105E                     __ptext18:
  5179                           	opt stack 0
  5180  00105E                     _string_utils_atoi:
  5181                           	opt stack 21
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;string_utils.c: 415: INT16 value = 0;
  5185                           
  5186                           ; BSR set to: 0
  5187  00105E  6B76               	clrf	string_utils_atoi@value& (0+255),b
  5188  001060  6B77               	clrf	(string_utils_atoi@value+1)& (0+255),b
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;string_utils.c: 416: int sign = 1;
  5192  001062  6B75               	clrf	(string_utils_atoi@sign+1)& (0+255),b
  5193  001064  0E01               	movlw	1
  5194  001066  6F74               	movwf	string_utils_atoi@sign& (0+255),b
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;string_utils.c: 417: if( *c == '+' || *c == '-' )
  5198  001068  C06E  FFF6         	movff	string_utils_atoi@c,tblptrl
  5199  00106C  C06F  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5200  001070  C070  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5201  001074  BAF8               	btfsc	tblptru,5,c
  5202  001076  D003               	bra	u5077
  5203  001078  0008               	tblrd		*
  5204  00107A  50F5               	movf	tablat,w,c
  5205  00107C  D001               	bra	u5070
  5206  00107E                     u5077:
  5207  00107E  D86D               	call	PL10	;call to abstracted procedure
  5208  001080                     u5070:
  5209  001080  0A2B               	xorlw	43
  5210  001082  E00E               	bz	l5323
  5211  001084  C06E  FFF6         	movff	string_utils_atoi@c,tblptrl
  5212  001088  C06F  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5213  00108C  C070  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5214  001090  BAF8               	btfsc	tblptru,5,c
  5215  001092  D003               	bra	u5097
  5216  001094  0008               	tblrd		*
  5217  001096  50F5               	movf	tablat,w,c
  5218  001098  D001               	bra	u5090
  5219  00109A                     u5097:
  5220  00109A  D85F               	call	PL10	;call to abstracted procedure
  5221  00109C                     u5090:
  5222  00109C  0A2D               	xorlw	45
  5223  00109E  E13D               	bnz	l557
  5224  0010A0                     l5323:
  5225                           
  5226                           ;string_utils.c: 418: {
  5227                           ;string_utils.c: 419: if( *c == '-' ) sign = -1;
  5228  0010A0  C06E  FFF6         	movff	string_utils_atoi@c,tblptrl
  5229  0010A4  C06F  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5230  0010A8  C070  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5231  0010AC  BAF8               	btfsc	tblptru,5,c
  5232  0010AE  D003               	bra	u5117
  5233  0010B0  0008               	tblrd		*
  5234  0010B2  50F5               	movf	tablat,w,c
  5235  0010B4  D001               	bra	u5110
  5236  0010B6                     u5117:
  5237  0010B6  D851               	call	PL10	;call to abstracted procedure
  5238  0010B8                     u5110:
  5239  0010B8  0A2D               	xorlw	45
  5240  0010BA  E103               	bnz	l5327
  5241  0010BC  0100               	movlb	0	; () banked
  5242  0010BE  6974               	setf	string_utils_atoi@sign& (0+255),b
  5243  0010C0  6975               	setf	(string_utils_atoi@sign+1)& (0+255),b
  5244  0010C2                     l5327:
  5245                           
  5246                           ;string_utils.c: 420: c++;
  5247  0010C2  0100               	movlb	0	; () banked
  5248  0010C4  2B6E               	incf	string_utils_atoi@c& (0+255),f,b
  5249  0010C6  0E00               	movlw	0
  5250  0010C8  236F               	addwfc	(string_utils_atoi@c+1)& (0+255),f,b
  5251  0010CA  2370               	addwfc	(string_utils_atoi@c+2)& (0+255),f,b
  5252  0010CC  D026               	goto	l557
  5253  0010CE                     l5329:
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;string_utils.c: 423: {
  5257                           ;string_utils.c: 424: value *= 10;
  5258  0010CE  C076  F068         	movff	string_utils_atoi@value,?___wmul
  5259  0010D2  C077  F069         	movff	string_utils_atoi@value+1,?___wmul+1
  5260  0010D6  6B6B               	clrf	(?___wmul+3)& (0+255),b
  5261  0010D8  0E0A               	movlw	10
  5262  0010DA  6F6A               	movwf	(?___wmul+2)& (0+255),b
  5263  0010DC  EC15  F010         	call	___wmul	;wreg free
  5264  0010E0  C068  F076         	movff	?___wmul,string_utils_atoi@value
  5265  0010E4  C069  F077         	movff	?___wmul+1,string_utils_atoi@value+1
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;string_utils.c: 425: value += (int) (*c-'0');
  5269  0010E8  C06E  FFF6         	movff	string_utils_atoi@c,tblptrl
  5270  0010EC  C06F  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5271  0010F0  C070  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5272  0010F4  BAF8               	btfsc	tblptru,5,c
  5273  0010F6  D003               	bra	u5137
  5274  0010F8  0008               	tblrd		*
  5275  0010FA  50F5               	movf	tablat,w,c
  5276  0010FC  D001               	bra	u5130
  5277  0010FE                     u5137:
  5278  0010FE  D82D               	call	PL10	;call to abstracted procedure
  5279  001100                     u5130:
  5280  001100  0100               	movlb	0	; () banked
  5281  001102  6F71               	movwf	??_string_utils_atoi& (0+255),b
  5282  001104  0ED0               	movlw	208
  5283  001106  2571               	addwf	??_string_utils_atoi& (0+255),w,b
  5284  001108  6F72               	movwf	(??_string_utils_atoi+1)& (0+255),b
  5285  00110A  6B73               	clrf	(??_string_utils_atoi+2)& (0+255),b
  5286  00110C  0EFF               	movlw	255
  5287  00110E  2373               	addwfc	(??_string_utils_atoi+2)& (0+255),f,b
  5288  001110  5172               	movf	(??_string_utils_atoi+1)& (0+255),w,b
  5289  001112  2776               	addwf	string_utils_atoi@value& (0+255),f,b
  5290  001114  5173               	movf	(??_string_utils_atoi+2)& (0+255),w,b
  5291  001116  2377               	addwfc	(string_utils_atoi@value+1)& (0+255),f,b
  5292  001118  D7D4               	goto	l5327
  5293  00111A                     l557:
  5294  00111A  0100               	movlb	0	; () banked
  5295  00111C  C06E  FFF6         	movff	string_utils_atoi@c,tblptrl
  5296  001120  C06F  FFF7         	movff	string_utils_atoi@c+1,tblptrh
  5297  001124  C070  FFF8         	movff	string_utils_atoi@c+2,tblptru
  5298  001128  BAF8               	btfsc	tblptru,5,c
  5299  00112A  D003               	bra	u5147
  5300  00112C  0008               	tblrd		*
  5301  00112E  50F5               	movf	tablat,w,c
  5302  001130  D001               	bra	u5140
  5303  001132                     u5147:
  5304  001132  D813               	call	PL10	;call to abstracted procedure
  5305  001134                     u5140:
  5306  001134  EC85  F010         	call	_string_utils_is_digit
  5307  001138  0900               	iorlw	0
  5308  00113A  E1C9               	bnz	l5329
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;string_utils.c: 427: }
  5312                           ;string_utils.c: 428: return (value * sign);
  5313  00113C  C076  F068         	movff	string_utils_atoi@value,?___wmul
  5314  001140  C077  F069         	movff	string_utils_atoi@value+1,?___wmul+1
  5315  001144  C074  F06A         	movff	string_utils_atoi@sign,?___wmul+2
  5316  001148  C075  F06B         	movff	string_utils_atoi@sign+1,?___wmul+3
  5317  00114C  EC15  F010         	call	___wmul	;wreg free
  5318  001150  C068  F06E         	movff	?___wmul,?_string_utils_atoi
  5319  001154  C069  F06F         	movff	?___wmul+1,?_string_utils_atoi+1
  5320                           
  5321                           ; BSR set to: 0
  5322  001158  0012               	return	
  5323  00115A                     __end_of_string_utils_atoi:
  5324                           	opt stack 0
  5325  00115A                     PL10:
  5326                           	opt stack 19
  5327  00115A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5328  00115E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5329  001162  50EF               	movf	indf0,w,c
  5330  001164  0012               	return	
  5331  001166                     __end_ofPL10:
  5332                           	opt stack 0
  5333                           tosu	equ	0xFFF
  5334                           tosh	equ	0xFFE
  5335                           tosl	equ	0xFFD
  5336                           pclath	equ	0xFFA
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           indf0	equ	0xFEF
  5345                           postinc0	equ	0xFEE
  5346                           fsr0h	equ	0xFEA
  5347                           fsr0l	equ	0xFE9
  5348                           wreg	equ	0xFE8
  5349                           indf1	equ	0xFE7
  5350                           postinc1	equ	0xFE6
  5351                           postdec1	equ	0xFE5
  5352                           fsr1h	equ	0xFE2
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _string_utils_atof *****************
  5362 ;; Defined at:
  5363 ;;		line 432 in file "src/modules/string_utils.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  s               3   47[BANK0 ] PTR const unsigned char 
  5366 ;;		 -> this_buf(127), ROM(32767), 
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;  i               2   54[BANK0 ] int 
  5369 ;;  sign            2   52[BANK0 ] int 
  5370 ;;  a               3   58[BANK0 ] float 
  5371 ;;  c               2   61[BANK0 ] int 
  5372 ;;  e               2   56[BANK0 ] int 
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  3   47[BANK0 ] float 
  5375 ;; Registers used:
  5376 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : F/0
  5379 ;;		On exit  : F/0
  5380 ;;		Unchanged: FFFFFFF0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5382 ;;      Params:         0       3       0       0       0       0       0
  5383 ;;      Locals:         0      11       0       0       0       0       0
  5384 ;;      Temps:          0       2       0       0       0       0       0
  5385 ;;      Totals:         0      16       0       0       0       0       0
  5386 ;;Total ram usage:       16 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    8
  5389 ;; This function calls:
  5390 ;;		___ftmul
  5391 ;;		___lwtoft
  5392 ;;		___ftadd
  5393 ;;		_string_utils_is_digit
  5394 ;;		___wmul
  5395 ;;		___asftmul
  5396 ;; This function is called by:
  5397 ;;		_this_parse_item
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text19
  5402  00060A                     __ptext19:
  5403                           	opt stack 0
  5404  00060A                     _string_utils_atof:
  5405                           	opt stack 19
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;string_utils.c: 433: FLOAT a = 0.0;
  5409                           
  5410                           ; BSR set to: 0
  5411  00060A  6B9A               	clrf	string_utils_atof@a& (0+255),b
  5412  00060C  6B9B               	clrf	(string_utils_atof@a+1)& (0+255),b
  5413  00060E  6B9C               	clrf	(string_utils_atof@a+2)& (0+255),b
  5414                           
  5415                           ;string_utils.c: 434: int e = 0;
  5416  000610  6B98               	clrf	string_utils_atof@e& (0+255),b
  5417  000612  6B99               	clrf	(string_utils_atof@e+1)& (0+255),b
  5418                           
  5419                           ;string_utils.c: 435: int c;
  5420                           ;string_utils.c: 436: while ((c = *s++) != '\0' && string_utils_is_digit(c)) {
  5421  000614  D014               	goto	l5343
  5422  000616                     l5341:
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;string_utils.c: 437: a = a*10.0 + (c - '0');
  5426  000616  D8F8               	call	PL34	;call to abstracted procedure
  5427  000618  ECB0  F009         	call	___ftmul	;wreg free
  5428  00061C  D8E0               	call	PL28	;call to abstracted procedure
  5429  00061E  EC54  F010         	call	___lwtoft	;wreg free
  5430  000622  C070  F084         	movff	?___lwtoft,?___ftadd+3
  5431  000626  C071  F085         	movff	?___lwtoft+1,?___ftadd+4
  5432  00062A  C072  F086         	movff	?___lwtoft+2,?___ftadd+5
  5433  00062E  ECE2  F006         	call	___ftadd	;wreg free
  5434  000632  C081  F09A         	movff	?___ftadd,string_utils_atof@a
  5435  000636  C082  F09B         	movff	?___ftadd+1,string_utils_atof@a+1
  5436  00063A  C083  F09C         	movff	?___ftadd+2,string_utils_atof@a+2
  5437  00063E                     l5343:
  5438                           
  5439                           ; BSR set to: 0
  5440  00063E  C08F  FFF6         	movff	string_utils_atof@s,tblptrl
  5441  000642  D8F8               	call	PL54	;call to abstracted procedure
  5442  000644  BAF8               	btfsc	tblptru,5,c
  5443  000646  D003               	bra	u5167
  5444  000648  0008               	tblrd		*
  5445  00064A  50F5               	movf	tablat,w,c
  5446  00064C  D002               	bra	u5160
  5447  00064E                     u5167:
  5448  00064E  ECAD  F008         	call	PL10	;call to abstracted procedure
  5449  000652                     u5160:
  5450  000652  D8E6               	call	PL48	;call to abstracted procedure
  5451  000654  E005               	bz	l5347
  5452                           
  5453                           ; BSR set to: 0
  5454  000656  519D               	movf	string_utils_atof@c& (0+255),w,b
  5455  000658  EC85  F010         	call	_string_utils_is_digit
  5456  00065C  0900               	iorlw	0
  5457  00065E  E1DB               	bnz	l5341
  5458  000660                     l5347:
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;string_utils.c: 438: }
  5462                           ;string_utils.c: 439: if (c == '.') {
  5463  000660  519D               	movf	string_utils_atof@c& (0+255),w,b
  5464  000662  0A2E               	xorlw	46
  5465  000664  119E               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5466  000666  E018               	bz	l5355
  5467  000668  D028               	goto	l5359
  5468  00066A                     l5351:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;string_utils.c: 441: a = a*10.0 + (c - '0');
  5472  00066A  D8CE               	call	PL34	;call to abstracted procedure
  5473  00066C  ECB0  F009         	call	___ftmul	;wreg free
  5474  000670  D8B6               	call	PL28	;call to abstracted procedure
  5475  000672  EC54  F010         	call	___lwtoft	;wreg free
  5476  000676  C070  F084         	movff	?___lwtoft,?___ftadd+3
  5477  00067A  C071  F085         	movff	?___lwtoft+1,?___ftadd+4
  5478  00067E  C072  F086         	movff	?___lwtoft+2,?___ftadd+5
  5479  000682  ECE2  F006         	call	___ftadd	;wreg free
  5480  000686  C081  F09A         	movff	?___ftadd,string_utils_atof@a
  5481  00068A  C082  F09B         	movff	?___ftadd+1,string_utils_atof@a+1
  5482  00068E  C083  F09C         	movff	?___ftadd+2,string_utils_atof@a+2
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;string_utils.c: 442: e = e-1;
  5486  000692  0798               	decf	string_utils_atof@e& (0+255),f,b
  5487  000694  A0D8               	btfss	status,0,c
  5488  000696  0799               	decf	(string_utils_atof@e+1)& (0+255),f,b
  5489  000698                     l5355:
  5490                           
  5491                           ; BSR set to: 0
  5492  000698  C08F  FFF6         	movff	string_utils_atof@s,tblptrl
  5493  00069C  D8CB               	call	PL54	;call to abstracted procedure
  5494  00069E  BAF8               	btfsc	tblptru,5,c
  5495  0006A0  D003               	bra	u5207
  5496  0006A2  0008               	tblrd		*
  5497  0006A4  50F5               	movf	tablat,w,c
  5498  0006A6  D002               	bra	u5200
  5499  0006A8                     u5207:
  5500  0006A8  ECAD  F008         	call	PL10	;call to abstracted procedure
  5501  0006AC                     u5200:
  5502  0006AC  D8B9               	call	PL48	;call to abstracted procedure
  5503  0006AE  E005               	bz	l5359
  5504                           
  5505                           ; BSR set to: 0
  5506  0006B0  519D               	movf	string_utils_atof@c& (0+255),w,b
  5507  0006B2  EC85  F010         	call	_string_utils_is_digit
  5508  0006B6  0900               	iorlw	0
  5509  0006B8  E1D8               	bnz	l5351
  5510  0006BA                     l5359:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;string_utils.c: 443: }
  5514                           ;string_utils.c: 444: }
  5515                           ;string_utils.c: 445: if (c == 'e' || c == 'E') {
  5516  0006BA  519D               	movf	string_utils_atof@c& (0+255),w,b
  5517  0006BC  0A65               	xorlw	101
  5518  0006BE  119E               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5519  0006C0  E004               	bz	l5363
  5520                           
  5521                           ; BSR set to: 0
  5522  0006C2  519D               	movf	string_utils_atof@c& (0+255),w,b
  5523  0006C4  0A45               	xorlw	69
  5524  0006C6  119E               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5525  0006C8  E16E               	bnz	l5399
  5526  0006CA                     l5363:
  5527                           
  5528                           ; BSR set to: 0
  5529                           ;string_utils.c: 446: int sign = 1;
  5530  0006CA  6B95               	clrf	(string_utils_atof@sign+1)& (0+255),b
  5531  0006CC  0E01               	movlw	1
  5532  0006CE  6F94               	movwf	string_utils_atof@sign& (0+255),b
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;string_utils.c: 447: int i = 0;
  5536  0006D0  6B96               	clrf	string_utils_atof@i& (0+255),b
  5537  0006D2  6B97               	clrf	(string_utils_atof@i+1)& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;string_utils.c: 448: c = *s++;
  5541  0006D4  C08F  FFF6         	movff	string_utils_atof@s,tblptrl
  5542  0006D8  C090  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5543  0006DC  C091  FFF8         	movff	string_utils_atof@s+2,tblptru
  5544  0006E0  BAF8               	btfsc	tblptru,5,c
  5545  0006E2  D003               	bra	u5257
  5546  0006E4  0008               	tblrd		*
  5547  0006E6  50F5               	movf	tablat,w,c
  5548  0006E8  D002               	bra	u5250
  5549  0006EA                     u5257:
  5550  0006EA  ECAD  F008         	call	PL10	;call to abstracted procedure
  5551  0006EE                     u5250:
  5552                           
  5553                           ; BSR set to: 0
  5554  0006EE  D884               	call	PL30	;call to abstracted procedure
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;string_utils.c: 449: if (c == '+')
  5558  0006F0  519D               	movf	string_utils_atof@c& (0+255),w,b
  5559  0006F2  0A2B               	xorlw	43
  5560  0006F4  119E               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5561  0006F6  E10F               	bnz	l5377
  5562  0006F8                     l5373:
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;string_utils.c: 450: c = *s++;
  5566  0006F8  C08F  FFF6         	movff	string_utils_atof@s,tblptrl
  5567  0006FC  C090  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5568  000700  C091  FFF8         	movff	string_utils_atof@s+2,tblptru
  5569  000704  BAF8               	btfsc	tblptru,5,c
  5570  000706  D003               	bra	u5277
  5571  000708  0008               	tblrd		*
  5572  00070A  50F5               	movf	tablat,w,c
  5573  00070C  D002               	bra	u5270
  5574  00070E                     u5277:
  5575  00070E  ECAD  F008         	call	PL10	;call to abstracted procedure
  5576  000712                     u5270:
  5577                           
  5578                           ; BSR set to: 0
  5579  000712  D872               	call	PL30	;call to abstracted procedure
  5580  000714  D029               	goto	l5391
  5581  000716                     l5377:
  5582                           
  5583                           ; BSR set to: 0
  5584                           ;string_utils.c: 451: else if (c == '-') {
  5585  000716  519D               	movf	string_utils_atof@c& (0+255),w,b
  5586  000718  0A2D               	xorlw	45
  5587  00071A  119E               	iorwf	(string_utils_atof@c+1)& (0+255),w,b
  5588  00071C  E125               	bnz	l5391
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;string_utils.c: 452: c = *s++;
  5592  00071E  C08F  FFF6         	movff	string_utils_atof@s,tblptrl
  5593  000722  C090  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5594  000726  C091  FFF8         	movff	string_utils_atof@s+2,tblptru
  5595  00072A  BAF8               	btfsc	tblptru,5,c
  5596  00072C  D003               	bra	u5297
  5597  00072E  0008               	tblrd		*
  5598  000730  50F5               	movf	tablat,w,c
  5599  000732  D002               	bra	u5290
  5600  000734                     u5297:
  5601  000734  ECAD  F008         	call	PL10	;call to abstracted procedure
  5602  000738                     u5290:
  5603                           
  5604                           ; BSR set to: 0
  5605  000738  D85F               	call	PL30	;call to abstracted procedure
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;string_utils.c: 453: sign = -1;
  5609  00073A  6994               	setf	string_utils_atof@sign& (0+255),b
  5610  00073C  6995               	setf	(string_utils_atof@sign+1)& (0+255),b
  5611  00073E  D014               	goto	l5391
  5612  000740                     l5385:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;string_utils.c: 456: i = i*10 + (c - '0');
  5616  000740  C096  F068         	movff	string_utils_atof@i,?___wmul
  5617  000744  C097  F069         	movff	string_utils_atof@i+1,?___wmul+1
  5618  000748  6B6B               	clrf	(?___wmul+3)& (0+255),b
  5619  00074A  0E0A               	movlw	10
  5620  00074C  6F6A               	movwf	(?___wmul+2)& (0+255),b
  5621  00074E  EC15  F010         	call	___wmul	;wreg free
  5622  000752  519D               	movf	string_utils_atof@c& (0+255),w,b
  5623  000754  2768               	addwf	?___wmul& (0+255),f,b
  5624  000756  519E               	movf	(string_utils_atof@c+1)& (0+255),w,b
  5625  000758  2369               	addwfc	(?___wmul+1)& (0+255),f,b
  5626  00075A  0ED0               	movlw	208
  5627  00075C  2468               	addwf	?___wmul,w,c
  5628  00075E  6F96               	movwf	string_utils_atof@i& (0+255),b
  5629  000760  0EFF               	movlw	255
  5630  000762  2069               	addwfc	?___wmul+1,w,c
  5631  000764  6F97               	movwf	(string_utils_atof@i+1)& (0+255),b
  5632  000766  D7C8               	goto	l5373
  5633  000768                     l5391:
  5634                           
  5635                           ; BSR set to: 0
  5636  000768  519D               	movf	string_utils_atof@c& (0+255),w,b
  5637  00076A  EC85  F010         	call	_string_utils_is_digit
  5638  00076E  0900               	iorlw	0
  5639  000770  E1E7               	bnz	l5385
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;string_utils.c: 458: }
  5643                           ;string_utils.c: 459: e += i*sign;
  5644  000772  C096  F068         	movff	string_utils_atof@i,?___wmul
  5645  000776  C097  F069         	movff	string_utils_atof@i+1,?___wmul+1
  5646  00077A  C094  F06A         	movff	string_utils_atof@sign,?___wmul+2
  5647  00077E  C095  F06B         	movff	string_utils_atof@sign+1,?___wmul+3
  5648  000782  EC15  F010         	call	___wmul	;wreg free
  5649  000786  5168               	movf	?___wmul& (0+255),w,b
  5650  000788  2798               	addwf	string_utils_atof@e& (0+255),f,b
  5651  00078A  5169               	movf	(?___wmul+1)& (0+255),w,b
  5652  00078C  2399               	addwfc	(string_utils_atof@e+1)& (0+255),f,b
  5653  00078E  D00B               	goto	l5399
  5654  000790                     l5395:
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;string_utils.c: 462: a *= 10.0;
  5658  000790  6B81               	clrf	?___asftmul& (0+255),b
  5659  000792  0E20               	movlw	32
  5660  000794  6F82               	movwf	(?___asftmul+1)& (0+255),b
  5661  000796  0E41               	movlw	65
  5662  000798  6F83               	movwf	(?___asftmul+2)& (0+255),b
  5663  00079A  0E9A               	movlw	string_utils_atof@a& (0+255)
  5664  00079C  EC6F  F00F         	call	___asftmul
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;string_utils.c: 463: e--;
  5668  0007A0  0798               	decf	string_utils_atof@e& (0+255),f,b
  5669  0007A2  A0D8               	btfss	status,0,c
  5670  0007A4  0799               	decf	(string_utils_atof@e+1)& (0+255),f,b
  5671  0007A6                     l5399:
  5672                           
  5673                           ; BSR set to: 0
  5674  0007A6  5199               	movf	(string_utils_atof@e+1)& (0+255),w,b
  5675  0007A8  0A80               	xorlw	128
  5676  0007AA  0F80               	addlw	-128
  5677  0007AC  0E01               	movlw	1
  5678  0007AE  B4D8               	btfsc	status,2,c
  5679  0007B0  5D98               	subwf	string_utils_atof@e& (0+255),w,b
  5680  0007B2  E30C               	bnc	l5405
  5681  0007B4  D7ED               	goto	l5395
  5682  0007B6                     l5401:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;string_utils.c: 466: a *= 0.1;
  5686  0007B6  0ECD               	movlw	205
  5687  0007B8  6F81               	movwf	?___asftmul& (0+255),b
  5688  0007BA  0ECC               	movlw	204
  5689  0007BC  6F82               	movwf	(?___asftmul+1)& (0+255),b
  5690  0007BE  0E3D               	movlw	61
  5691  0007C0  6F83               	movwf	(?___asftmul+2)& (0+255),b
  5692  0007C2  0E9A               	movlw	string_utils_atof@a& (0+255)
  5693  0007C4  EC6F  F00F         	call	___asftmul
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;string_utils.c: 467: e++;
  5697  0007C8  4B98               	infsnz	string_utils_atof@e& (0+255),f,b
  5698  0007CA  2B99               	incf	(string_utils_atof@e+1)& (0+255),f,b
  5699  0007CC                     l5405:
  5700                           
  5701                           ; BSR set to: 0
  5702  0007CC  BF99               	btfsc	(string_utils_atof@e+1)& (0+255),7,b
  5703  0007CE  D7F3               	goto	l5401
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;string_utils.c: 468: }
  5707                           ;string_utils.c: 469: return a;
  5708  0007D0  C09A  F08F         	movff	string_utils_atof@a,?_string_utils_atof
  5709  0007D4  C09B  F090         	movff	string_utils_atof@a+1,?_string_utils_atof+1
  5710  0007D8  C09C  F091         	movff	string_utils_atof@a+2,?_string_utils_atof+2
  5711                           
  5712                           ; BSR set to: 0
  5713  0007DC  0012               	return	
  5714  0007DE                     __end_of_string_utils_atof:
  5715                           	opt stack 0
  5716  0007DE                     PL28:
  5717                           	opt stack 19
  5718  0007DE  C070  F081         	movff	?___ftmul,?___ftadd
  5719  0007E2  C071  F082         	movff	?___ftmul+1,?___ftadd+1
  5720  0007E6  C072  F083         	movff	?___ftmul+2,?___ftadd+2
  5721  0007EA  0ED0               	movlw	208
  5722  0007EC  259D               	addwf	string_utils_atof@c& (0+255),w,b
  5723  0007EE  6F70               	movwf	?___lwtoft& (0+255),b
  5724  0007F0  0EFF               	movlw	255
  5725  0007F2  219E               	addwfc	(string_utils_atof@c+1)& (0+255),w,b
  5726  0007F4  6F71               	movwf	(?___lwtoft+1)& (0+255),b
  5727  0007F6  0012               	return	
  5728  0007F8                     __end_ofPL28:
  5729                           	opt stack 0
  5730  0007F8                     PL30:
  5731                           	opt stack 19
  5732  0007F8  0100               	movlb	0	; () banked
  5733  0007FA  6F9D               	movwf	string_utils_atof@c& (0+255),b
  5734  0007FC  6B9E               	clrf	(string_utils_atof@c+1)& (0+255),b
  5735  0007FE  2B8F               	incf	string_utils_atof@s& (0+255),f,b
  5736  000800  0E00               	movlw	0
  5737  000802  2390               	addwfc	(string_utils_atof@s+1)& (0+255),f,b
  5738  000804  2391               	addwfc	(string_utils_atof@s+2)& (0+255),f,b
  5739  000806  0C00               	retlw	0
  5740  000808                     __end_ofPL30:
  5741                           	opt stack 0
  5742  000808                     PL34:
  5743                           	opt stack 19
  5744  000808  6B73               	clrf	(?___ftmul+3)& (0+255),b
  5745  00080A  0E20               	movlw	32
  5746  00080C  6F74               	movwf	(?___ftmul+4)& (0+255),b
  5747  00080E  0E41               	movlw	65
  5748  000810  6F75               	movwf	(?___ftmul+5)& (0+255),b
  5749  000812  C09A  F070         	movff	string_utils_atof@a,?___ftmul
  5750  000816  C09B  F071         	movff	string_utils_atof@a+1,?___ftmul+1
  5751  00081A  C09C  F072         	movff	string_utils_atof@a+2,?___ftmul+2
  5752  00081E  0C41               	retlw	65
  5753  000820                     __end_ofPL34:
  5754                           	opt stack 0
  5755  000820                     PL48:
  5756                           	opt stack 19
  5757  000820  0100               	movlb	0	; () banked
  5758  000822  6F9D               	movwf	string_utils_atof@c& (0+255),b
  5759  000824  6B9E               	clrf	(string_utils_atof@c+1)& (0+255),b
  5760  000826  C09D  F092         	movff	string_utils_atof@c,??_string_utils_atof
  5761  00082A  C09E  F093         	movff	string_utils_atof@c+1,??_string_utils_atof+1
  5762  00082E  5193               	movf	(??_string_utils_atof+1)& (0+255),w,b
  5763  000830  1192               	iorwf	??_string_utils_atof& (0+255),w,b
  5764  000832  0012               	return	
  5765  000834                     __end_ofPL48:
  5766                           	opt stack 0
  5767  000834                     PL54:
  5768                           	opt stack 19
  5769  000834  C090  FFF7         	movff	string_utils_atof@s+1,tblptrh
  5770  000838  C091  FFF8         	movff	string_utils_atof@s+2,tblptru
  5771  00083C  2B8F               	incf	string_utils_atof@s& (0+255),f,b
  5772  00083E  0E00               	movlw	0
  5773  000840  2390               	addwfc	(string_utils_atof@s+1)& (0+255),f,b
  5774  000842  2391               	addwfc	(string_utils_atof@s+2)& (0+255),f,b
  5775  000844  0C00               	retlw	0
  5776  000846                     __end_ofPL54:
  5777                           	opt stack 0
  5778                           tosu	equ	0xFFF
  5779                           tosh	equ	0xFFE
  5780                           tosl	equ	0xFFD
  5781                           pclath	equ	0xFFA
  5782                           tblptru	equ	0xFF8
  5783                           tblptrh	equ	0xFF7
  5784                           tblptrl	equ	0xFF6
  5785                           tablat	equ	0xFF5
  5786                           prodh	equ	0xFF4
  5787                           prodl	equ	0xFF3
  5788                           intcon	equ	0xFF2
  5789                           indf0	equ	0xFEF
  5790                           postinc0	equ	0xFEE
  5791                           fsr0h	equ	0xFEA
  5792                           fsr0l	equ	0xFE9
  5793                           wreg	equ	0xFE8
  5794                           indf1	equ	0xFE7
  5795                           postinc1	equ	0xFE6
  5796                           postdec1	equ	0xFE5
  5797                           fsr1h	equ	0xFE2
  5798                           fsr1l	equ	0xFE1
  5799                           indf2	equ	0xFDF
  5800                           postinc2	equ	0xFDE
  5801                           postdec2	equ	0xFDD
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function _string_utils_is_digit *****************
  5807 ;; Defined at:
  5808 ;;		line 329 in file "src/modules/string_utils.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  symb            1    wreg     unsigned char 
  5811 ;; Auto vars:     Size  Location     Type
  5812 ;;  symb            1    9[BANK0 ] unsigned char 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      unsigned char 
  5815 ;; Registers used:
  5816 ;;		wreg, status,2
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : F/0
  5820 ;;		Unchanged: FFFFFFF0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5822 ;;      Params:         0       0       0       0       0       0       0
  5823 ;;      Locals:         0       2       0       0       0       0       0
  5824 ;;      Temps:          0       0       0       0       0       0       0
  5825 ;;      Totals:         0       2       0       0       0       0       0
  5826 ;;Total ram usage:        2 bytes
  5827 ;; Hardware stack levels used:    1
  5828 ;; Hardware stack levels required when called:    5
  5829 ;; This function calls:
  5830 ;;		Nothing
  5831 ;; This function is called by:
  5832 ;;		_string_utils_atoi
  5833 ;;		_string_utils_atof
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text20
  5838  00210A                     __ptext20:
  5839                           	opt stack 0
  5840  00210A                     _string_utils_is_digit:
  5841                           	opt stack 21
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;string_utils_is_digit@symb stored from wreg
  5845  00210A  CFE8 F069          	movff	wreg,string_utils_is_digit@symb
  5846                           
  5847                           ;string_utils.c: 330: return (symb >= '0' && symb <= '9');
  5848  00210E  0100               	movlb	0	; () banked
  5849  002110  6B68               	clrf	_string_utils_is_digit$783& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852  002112  0E2F               	movlw	47
  5853  002114  6569               	cpfsgt	string_utils_is_digit@symb& (0+255),b
  5854  002116  D005               	goto	l494
  5855                           
  5856                           ; BSR set to: 0
  5857  002118  0E3A               	movlw	58
  5858  00211A  6169               	cpfslt	string_utils_is_digit@symb& (0+255),b
  5859  00211C  D002               	goto	l494
  5860                           
  5861                           ; BSR set to: 0
  5862  00211E  0E01               	movlw	1
  5863  002120  6F68               	movwf	_string_utils_is_digit$783& (0+255),b
  5864  002122                     l494:
  5865                           
  5866                           ; BSR set to: 0
  5867  002122  5168               	movf	_string_utils_is_digit$783& (0+255),w,b
  5868                           
  5869                           ; BSR set to: 0
  5870  002124  0012               	return	
  5871  002126                     __end_of_string_utils_is_digit:
  5872                           	opt stack 0
  5873                           tosu	equ	0xFFF
  5874                           tosh	equ	0xFFE
  5875                           tosl	equ	0xFFD
  5876                           pclath	equ	0xFFA
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           indf0	equ	0xFEF
  5885                           postinc0	equ	0xFEE
  5886                           fsr0h	equ	0xFEA
  5887                           fsr0l	equ	0xFE9
  5888                           wreg	equ	0xFE8
  5889                           indf1	equ	0xFE7
  5890                           postinc1	equ	0xFE6
  5891                           postdec1	equ	0xFE5
  5892                           fsr1h	equ	0xFE2
  5893                           fsr1l	equ	0xFE1
  5894                           indf2	equ	0xFDF
  5895                           postinc2	equ	0xFDE
  5896                           postdec2	equ	0xFDD
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901 ;; *************** function _on_parameter_found *****************
  5902 ;; Defined at:
  5903 ;;		line 17 in file "src/modules/on_parameter_found.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  operation       1    wreg     enum E4382
  5906 ;;  cmd_id          1   40[BANK0 ] char 
  5907 ;;  p_id            1   41[BANK0 ] char 
  5908 ;;  p               3   42[BANK0 ] PTR const void 
  5909 ;;		 -> parameter_value(127), parameter_text(127), ROM(32767), 
  5910 ;; Auto vars:     Size  Location     Type
  5911 ;;  operation       1   45[BANK0 ] enum E4382
  5912 ;; Return value:  Size  Location     Type
  5913 ;;		None               void
  5914 ;; Registers used:
  5915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5916 ;; Tracked objects:
  5917 ;;		On entry : F/0
  5918 ;;		On exit  : 0/0
  5919 ;;		Unchanged: 0/0
  5920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5921 ;;      Params:         0       5       0       0       0       0       0
  5922 ;;      Locals:         0       1       0       0       0       0       0
  5923 ;;      Temps:          0       0       0       0       0       0       0
  5924 ;;      Totals:         0       6       0       0       0       0       0
  5925 ;;Total ram usage:        6 bytes
  5926 ;; Hardware stack levels used:    1
  5927 ;; Hardware stack levels required when called:    8
  5928 ;; This function calls:
  5929 ;;		_syntax_as_integer
  5930 ;;		_potentiometer_set
  5931 ;;		_detection_profile_set
  5932 ;;		_detection_defaults_set
  5933 ;;		_syntax_get_text
  5934 ;;		_serialport_write
  5935 ;;		_adc_read
  5936 ;;		_printf
  5937 ;; This function is called by:
  5938 ;;		_syntax_string
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text21
  5943  000C1C                     __ptext21:
  5944                           	opt stack 0
  5945  000C1C                     _on_parameter_found:
  5946                           	opt stack 20
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;on_parameter_found@operation stored from wreg
  5950  000C1C  CFE8 F08D          	movff	wreg,on_parameter_found@operation
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;on_parameter_found.c: 20: if (operation == PARSER_PARAMETER) {
  5954  000C20  678D               	tstfsz	on_parameter_found@operation& (0+255),b
  5955  000C22  D0C4               	goto	l5515
  5956                           
  5957                           ; BSR set to: 0
  5958                           ;on_parameter_found.c: 21: ok = FALSE;
  5959  000C24  6BC5               	clrf	_ok& (0+255),b
  5960                           
  5961                           ;on_parameter_found.c: 22: switch (cmd_id) {
  5962  000C26  D0BB               	goto	l5513
  5963  000C28                     l5467:
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;on_parameter_found.c: 30: u16_value = syntax_as_integer();
  5967  000C28  EC08  F011         	call	_syntax_as_integer	;wreg free
  5968  000C2C  C068  F0C3         	movff	?_syntax_as_integer,_u16_value
  5969  000C30  C069  F0C4         	movff	?_syntax_as_integer+1,_u16_value+1
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;on_parameter_found.c: 31: ok =potentiometer_set(u16_value);
  5973  000C34  51C3               	movf	_u16_value& (0+255),w,b
  5974  000C36  ECBA  F010         	call	_potentiometer_set
  5975  000C3A  D008               	goto	L3
  5976  000C3C                     l5471:
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;on_parameter_found.c: 39: ok = detection_profile_set(syntax_as_integer());
  5980  000C3C  EC08  F011         	call	_syntax_as_integer	;wreg free
  5981  000C40  5168               	movf	?_syntax_as_integer& (0+255),w,b
  5982  000C42  EC1B  F011         	call	_detection_profile_set
  5983  000C46  D002               	goto	L3
  5984  000C48                     l5473:
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;on_parameter_found.c: 70: ok = detection_defaults_set();
  5988  000C48  EC1C  F011         	call	_detection_defaults_set	;wreg free
  5989  000C4C                     L3:
  5990  000C4C  6FC5               	movwf	_ok& (0+255),b
  5991                           
  5992                           ;on_parameter_found.c: 71: break;
  5993  000C4E  D020               	goto	l5479
  5994  000C50                     l5477:
  5995                           
  5996                           ; BSR set to: 0
  5997  000C50  5189               	movf	on_parameter_found@p_id& (0+255),w,b
  5998                           
  5999                           ; Switch size 1, requested type "space"
  6000                           ; Number of cases is 16, Range of values is 4 to 26
  6001                           ; switch strategies available:
  6002                           ; Name         Instructions Cycles
  6003                           ; simple_byte           49    25 (average)
  6004                           ;	Chosen strategy is simple_byte
  6005  000C52  0A04               	xorlw	4	; case 4
  6006  000C54  E01D               	bz	l5479
  6007  000C56  0A03               	xorlw	3	; case 7
  6008  000C58  E0E7               	bz	l5467
  6009  000C5A  0A0A               	xorlw	10	; case 13
  6010  000C5C  E0F5               	bz	l5473
  6011  000C5E  0A03               	xorlw	3	; case 14
  6012  000C60  E017               	bz	l5479
  6013  000C62  0A01               	xorlw	1	; case 15
  6014  000C64  E0EB               	bz	l5471
  6015  000C66  0A1F               	xorlw	31	; case 16
  6016  000C68  E013               	bz	l5479
  6017  000C6A  0A01               	xorlw	1	; case 17
  6018  000C6C  E011               	bz	l5479
  6019  000C6E  0A03               	xorlw	3	; case 18
  6020  000C70  E00F               	bz	l5479
  6021  000C72  0A01               	xorlw	1	; case 19
  6022  000C74  E00D               	bz	l5479
  6023  000C76  0A07               	xorlw	7	; case 20
  6024  000C78  E00B               	bz	l5479
  6025  000C7A  0A01               	xorlw	1	; case 21
  6026  000C7C  E009               	bz	l5479
  6027  000C7E  0A03               	xorlw	3	; case 22
  6028  000C80  E007               	bz	l5479
  6029  000C82  0A01               	xorlw	1	; case 23
  6030  000C84  E005               	bz	l5479
  6031  000C86  0A0F               	xorlw	15	; case 24
  6032  000C88  A4D8               	btfss	status,2,c
  6033  000C8A  0A01               	xorlw	1	; case 25
  6034  000C8C  A4D8               	btfss	status,2,c
  6035  000C8E  0A03               	xorlw	3	; case 26
  6036  000C90                     l5479:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;on_parameter_found.c: 82: serialport_write(syntax_get_text());
  6040  000C90  EC02  F011         	call	_syntax_get_text	;wreg free
  6041  000C94  C001  F078         	movff	?_syntax_get_text,?_serialport_write
  6042  000C98  C002  F079         	movff	?_syntax_get_text+1,?_serialport_write+1
  6043  000C9C  0100               	movlb	0	; () banked
  6044  000C9E  EC9F  F00E         	call	_serialport_write	;wreg free
  6045                           
  6046                           ;on_parameter_found.c: 83: if (ok) {
  6047  000CA2  0100               	movlb	0	; () banked
  6048  000CA4  51C5               	movf	_ok& (0+255),w,b
  6049  000CA6  E004               	bz	l5485
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;on_parameter_found.c: 84: serialport_write(":ok ");
  6053  000CA8  0E7F               	movlw	high STR_28
  6054  000CAA  6F79               	movwf	(?_serialport_write+1)& (0+255),b
  6055  000CAC  0EF5               	movlw	low STR_28
  6056  000CAE  D001               	goto	L4
  6057  000CB0                     l5485:
  6058  000CB0  D072               	goto	L5
  6059  000CB2                     L4:
  6060  000CB2  6F78               	movwf	?_serialport_write& (0+255),b
  6061  000CB4  EFAD  F00E         	goto	l5113	;wreg free
  6062  000CB8                     l883:
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;on_parameter_found.c: 92: ok = FALSE;
  6066  000CB8  6BC5               	clrf	_ok& (0+255),b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;on_parameter_found.c: 93: serialport_write(syntax_get_text());
  6070  000CBA  EC02  F011         	call	_syntax_get_text	;wreg free
  6071  000CBE  C001  F078         	movff	?_syntax_get_text,?_serialport_write
  6072  000CC2  C002  F079         	movff	?_syntax_get_text+1,?_serialport_write+1
  6073  000CC6  0100               	movlb	0	; () banked
  6074  000CC8  EC9F  F00E         	call	_serialport_write	;wreg free
  6075                           
  6076                           ;on_parameter_found.c: 94: switch (p_id) {
  6077  000CCC  D033               	goto	l5507
  6078  000CCE                     l5489:
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;on_parameter_found.c: 97: printf("=%d\n", adc_read(1));
  6082  000CCE  0E7F               	movlw	high STR_30
  6083  000CD0  6F7A               	movwf	(?_printf+1)& (0+255),b
  6084  000CD2  0EEB               	movlw	low STR_30
  6085  000CD4  6F79               	movwf	?_printf& (0+255),b
  6086  000CD6  0E01               	movlw	1
  6087  000CD8  EC8D  F00F         	call	_adc_read
  6088  000CDC  0100               	movlb	0	; () banked
  6089  000CDE  6F7B               	movwf	(?_printf+2)& (0+255),b
  6090  000CE0  6B7C               	clrf	(?_printf+3)& (0+255),b
  6091  000CE2  EC2D  F00A         	call	_printf	;wreg free
  6092  000CE6                     l5491:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;on_parameter_found.c: 98: ok = TRUE;
  6096  000CE6  0E01               	movlw	1
  6097  000CE8  6FC5               	movwf	_ok& (0+255),b
  6098                           
  6099                           ;on_parameter_found.c: 99: break;
  6100  000CEA  D053               	goto	l886
  6101  000CEC                     l5493:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;on_parameter_found.c: 101: printf("=%d", adc_read(1));
  6105  000CEC  0E7F               	movlw	high STR_31
  6106  000CEE  6F7A               	movwf	(?_printf+1)& (0+255),b
  6107  000CF0  0EFA               	movlw	low STR_31
  6108  000CF2  6F79               	movwf	?_printf& (0+255),b
  6109  000CF4  0E01               	movlw	1
  6110  000CF6  EC8D  F00F         	call	_adc_read
  6111  000CFA  0100               	movlb	0	; () banked
  6112  000CFC  6F7B               	movwf	(?_printf+2)& (0+255),b
  6113  000CFE  6B7C               	clrf	(?_printf+3)& (0+255),b
  6114  000D00  EC2D  F00A         	call	_printf	;wreg free
  6115  000D04  D7F0               	goto	l5491
  6116  000D06                     l5497:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;on_parameter_found.c: 105: printf("=%d\n", adc_read(2));
  6120  000D06  0E7F               	movlw	high STR_30
  6121  000D08  6F7A               	movwf	(?_printf+1)& (0+255),b
  6122  000D0A  0EEB               	movlw	low STR_30
  6123  000D0C  6F79               	movwf	?_printf& (0+255),b
  6124  000D0E  0E02               	movlw	2
  6125  000D10  EC8D  F00F         	call	_adc_read
  6126  000D14  0100               	movlb	0	; () banked
  6127  000D16  6F7B               	movwf	(?_printf+2)& (0+255),b
  6128  000D18  6B7C               	clrf	(?_printf+3)& (0+255),b
  6129  000D1A  EC2D  F00A         	call	_printf	;wreg free
  6130  000D1E  D7E3               	goto	l5491
  6131  000D20                     l5501:
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;on_parameter_found.c: 109: printf("=%d", (g_CONFIG.potentiometer));
  6135  000D20  0E7F               	movlw	high STR_31
  6136  000D22  6F7A               	movwf	(?_printf+1)& (0+255),b
  6137  000D24  0EFA               	movlw	low STR_31
  6138  000D26  6F79               	movwf	?_printf& (0+255),b
  6139  000D28  C0E3  F07B         	movff	_g_CONFIG+3,?_printf+2	;volatile
  6140  000D2C  6B7C               	clrf	(?_printf+3)& (0+255),b
  6141  000D2E  EC2D  F00A         	call	_printf	;wreg free
  6142  000D32  D7D9               	goto	l5491
  6143  000D34                     l5507:
  6144  000D34  0100               	movlb	0	; () banked
  6145  000D36  5189               	movf	on_parameter_found@p_id& (0+255),w,b
  6146                           
  6147                           ; Switch size 1, requested type "space"
  6148                           ; Number of cases is 23, Range of values is 4 to 26
  6149                           ; switch strategies available:
  6150                           ; Name         Instructions Cycles
  6151                           ; simple_byte           70    36 (average)
  6152                           ;	Chosen strategy is simple_byte
  6153  000D38  0A04               	xorlw	4	; case 4
  6154  000D3A  E0C9               	bz	l5489
  6155  000D3C  0A01               	xorlw	1	; case 5
  6156  000D3E  E0D6               	bz	l5493
  6157  000D40  0A03               	xorlw	3	; case 6
  6158  000D42  E0E1               	bz	l5497
  6159  000D44  0A01               	xorlw	1	; case 7
  6160  000D46  E0EC               	bz	l5501
  6161  000D48  0A0F               	xorlw	15	; case 8
  6162  000D4A  E023               	bz	l886
  6163  000D4C  0A01               	xorlw	1	; case 9
  6164  000D4E  E021               	bz	l886
  6165  000D50  0A03               	xorlw	3	; case 10
  6166  000D52  E01F               	bz	l886
  6167  000D54  0A01               	xorlw	1	; case 11
  6168  000D56  E01D               	bz	l886
  6169  000D58  0A07               	xorlw	7	; case 12
  6170  000D5A  E01B               	bz	l886
  6171  000D5C  0A01               	xorlw	1	; case 13
  6172  000D5E  E019               	bz	l886
  6173  000D60  0A03               	xorlw	3	; case 14
  6174  000D62  E017               	bz	l886
  6175  000D64  0A01               	xorlw	1	; case 15
  6176  000D66  E015               	bz	l886
  6177  000D68  0A1F               	xorlw	31	; case 16
  6178  000D6A  E013               	bz	l886
  6179  000D6C  0A01               	xorlw	1	; case 17
  6180  000D6E  E011               	bz	l886
  6181  000D70  0A03               	xorlw	3	; case 18
  6182  000D72  E00F               	bz	l886
  6183  000D74  0A01               	xorlw	1	; case 19
  6184  000D76  E00D               	bz	l886
  6185  000D78  0A07               	xorlw	7	; case 20
  6186  000D7A  E00B               	bz	l886
  6187  000D7C  0A01               	xorlw	1	; case 21
  6188  000D7E  E009               	bz	l886
  6189  000D80  0A03               	xorlw	3	; case 22
  6190  000D82  E007               	bz	l886
  6191  000D84  0A01               	xorlw	1	; case 23
  6192  000D86  E005               	bz	l886
  6193  000D88  0A0F               	xorlw	15	; case 24
  6194  000D8A  A4D8               	btfss	status,2,c
  6195  000D8C  0A01               	xorlw	1	; case 25
  6196  000D8E  A4D8               	btfss	status,2,c
  6197  000D90  0A03               	xorlw	3	; case 26
  6198  000D92                     l886:
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;on_parameter_found.c: 151: if (!ok) {
  6202  000D92  67C5               	tstfsz	_ok& (0+255),b
  6203  000D94  0012               	return	
  6204  000D96                     L5:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;on_parameter_found.c: 152: serialport_write(":err ");
  6208  000D96  0E7F               	movlw	high STR_29
  6209  000D98  6F79               	movwf	(?_serialport_write+1)& (0+255),b
  6210  000D9A  0EE5               	movlw	low STR_29
  6211  000D9C  D78A               	goto	L4
  6212  000D9E                     l5513:
  6213                           
  6214                           ; BSR set to: 0
  6215  000D9E  5188               	movf	on_parameter_found@cmd_id& (0+255),w,b
  6216                           
  6217                           ; Switch size 1, requested type "space"
  6218                           ; Number of cases is 2, Range of values is 0 to 1
  6219                           ; switch strategies available:
  6220                           ; Name         Instructions Cycles
  6221                           ; simple_byte            7     4 (average)
  6222                           ;	Chosen strategy is simple_byte
  6223  000DA0  E101 D756          	bz	l5477
  6224  000DA4  0A01               	xorlw	1	; case 1
  6225  000DA6  A4D8               	btfss	status,2,c
  6226  000DA8  0012               	return	
  6227  000DAA  D786               	goto	l883
  6228  000DAC                     l5515:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;on_parameter_found.c: 160: else if (operation == PARSER_STOP) {
  6232  000DAC  518D               	movf	on_parameter_found@operation& (0+255),w,b
  6233  000DAE  0A02               	xorlw	2
  6234  000DB0  B4D8               	btfsc	status,2,c
  6235  000DB2  0012               	return	
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;on_parameter_found.c: 166: else if (operation == PARSER_ERROR) {
  6239  000DB4  518D               	movf	on_parameter_found@operation& (0+255),w,b
  6240  000DB6  0A03               	xorlw	3
  6241  000DB8  A4D8               	btfss	status,2,c
  6242  000DBA  0012               	return	
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;on_parameter_found.c: 167: serialport_write("err\n");
  6246  000DBC  0E7F               	movlw	high STR_35
  6247  000DBE  6F79               	movwf	(?_serialport_write+1)& (0+255),b
  6248  000DC0  0EF0               	movlw	low STR_35
  6249  000DC2  D777               	goto	L4
  6250  000DC4                     __end_of_on_parameter_found:
  6251                           	opt stack 0
  6252                           tosu	equ	0xFFF
  6253                           tosh	equ	0xFFE
  6254                           tosl	equ	0xFFD
  6255                           pclath	equ	0xFFA
  6256                           tblptru	equ	0xFF8
  6257                           tblptrh	equ	0xFF7
  6258                           tblptrl	equ	0xFF6
  6259                           tablat	equ	0xFF5
  6260                           prodh	equ	0xFF4
  6261                           prodl	equ	0xFF3
  6262                           intcon	equ	0xFF2
  6263                           indf0	equ	0xFEF
  6264                           postinc0	equ	0xFEE
  6265                           fsr0h	equ	0xFEA
  6266                           fsr0l	equ	0xFE9
  6267                           wreg	equ	0xFE8
  6268                           indf1	equ	0xFE7
  6269                           postinc1	equ	0xFE6
  6270                           postdec1	equ	0xFE5
  6271                           fsr1h	equ	0xFE2
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _adc_read *****************
  6281 ;; Defined at:
  6282 ;;		line 22 in file "src/drivers/adc.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  adc_number      1    wreg     unsigned char 
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  adc_number      1    9[BANK0 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      unsigned char 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0
  6291 ;; Tracked objects:
  6292 ;;		On entry : F/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6296 ;;      Params:         0       0       0       0       0       0       0
  6297 ;;      Locals:         0       1       0       0       0       0       0
  6298 ;;      Temps:          0       1       0       0       0       0       0
  6299 ;;      Totals:         0       2       0       0       0       0       0
  6300 ;;Total ram usage:        2 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    5
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_on_parameter_found
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text22
  6311  001F1A                     __ptext22:
  6312                           	opt stack 0
  6313  001F1A                     _adc_read:
  6314                           	opt stack 22
  6315                           
  6316                           ;adc_read@adc_number stored from wreg
  6317  001F1A  CFE8 F069          	movff	wreg,adc_read@adc_number
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;adc.c: 23: if(ADCON0bits.CHS != adc_number)
  6321  001F1E  30C2               	rrcf	4034,w,c	;volatile
  6322  001F20  32E8               	rrcf	wreg,f,c
  6323  001F22  0B0F               	andlw	15
  6324  001F24  1969               	xorwf	adc_read@adc_number& (0+255),w,b
  6325  001F26  E010               	bz	l4925
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;adc.c: 24: {
  6329                           ;adc.c: 25: ADCON0bits.CHS = adc_number;
  6330  001F28  C069  F068         	movff	adc_read@adc_number,??_adc_read
  6331  001F2C  4768               	rlncf	??_adc_read& (0+255),f,b
  6332  001F2E  4768               	rlncf	??_adc_read& (0+255),f,b
  6333  001F30  50C2               	movf	4034,w,c	;volatile
  6334  001F32  1968               	xorwf	??_adc_read& (0+255),w,b
  6335  001F34  0BC3               	andlw	-61
  6336  001F36  1968               	xorwf	??_adc_read& (0+255),w,b
  6337  001F38  6EC2               	movwf	4034,c	;volatile
  6338  001F3A  F000               	nop		;# 
  6339  001F3C  F000               	nop		;# 
  6340  001F3E  F000               	nop		;# 
  6341  001F40  F000               	nop		;# 
  6342  001F42  F000               	nop		;# 
  6343  001F44  F000               	nop		;# 
  6344  001F46  F000               	nop		;# 
  6345  001F48                     l4925:
  6346                           
  6347                           ;adc.c: 27: }
  6348                           ;adc.c: 28: ADCON0bits.GO_nDONE = TRUE;
  6349  001F48  82C2               	bsf	4034,1,c	;volatile
  6350  001F4A                     l164:
  6351  001F4A  B2C2               	btfsc	4034,1,c	;volatile
  6352  001F4C  D7FE               	goto	l164
  6353                           
  6354                           ;adc.c: 30: ADIF = FALSE;
  6355  001F4E  9C9E               	bcf	3998,6,c	;volatile
  6356                           
  6357                           ;adc.c: 31: return ADRESL;
  6358  001F50  50C3               	movf	4035,w,c	;volatile
  6359  001F52  0012               	return	
  6360  001F54                     __end_of_adc_read:
  6361                           	opt stack 0
  6362                           tosu	equ	0xFFF
  6363                           tosh	equ	0xFFE
  6364                           tosl	equ	0xFFD
  6365                           pclath	equ	0xFFA
  6366                           tblptru	equ	0xFF8
  6367                           tblptrh	equ	0xFF7
  6368                           tblptrl	equ	0xFF6
  6369                           tablat	equ	0xFF5
  6370                           prodh	equ	0xFF4
  6371                           prodl	equ	0xFF3
  6372                           intcon	equ	0xFF2
  6373                           indf0	equ	0xFEF
  6374                           postinc0	equ	0xFEE
  6375                           fsr0h	equ	0xFEA
  6376                           fsr0l	equ	0xFE9
  6377                           wreg	equ	0xFE8
  6378                           indf1	equ	0xFE7
  6379                           postinc1	equ	0xFE6
  6380                           postdec1	equ	0xFE5
  6381                           fsr1h	equ	0xFE2
  6382                           fsr1l	equ	0xFE1
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _serialport_write *****************
  6391 ;; Defined at:
  6392 ;;		line 52 in file "src/modules/serialport.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;  pstr            2   24[BANK0 ] PTR const unsigned char 
  6395 ;;		 -> STR_35(5), STR_34(6), STR_29(6), STR_28(5), 
  6396 ;;		 -> parameter_text(127), 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;		None               void
  6401 ;; Registers used:
  6402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6403 ;; Tracked objects:
  6404 ;;		On entry : C/3
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: FFFFFFF0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6408 ;;      Params:         0       2       0       0       0       0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0
  6411 ;;      Totals:         0       2       0       0       0       0       0
  6412 ;;Total ram usage:        2 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    6
  6415 ;; This function calls:
  6416 ;;		_rd_buffer_put
  6417 ;; This function is called by:
  6418 ;;		_on_parameter_found
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text23
  6423  001D3E                     __ptext23:
  6424                           	opt stack 0
  6425  001D3E                     _serialport_write:
  6426                           	opt stack 21
  6427                           
  6428                           ;serialport.c: 53: while (pstr && *pstr)
  6429  001D3E  D00D               	goto	l5113
  6430  001D40                     l5109:
  6431                           
  6432                           ;serialport.c: 54: {
  6433                           ;serialport.c: 55: rd_buffer_put(&g_tx_buffer, (UINT8*)pstr);
  6434  001D40  0E01               	movlw	high _g_tx_buffer
  6435  001D42  0100               	movlb	0	; () banked
  6436  001D44  6F69               	movwf	(?_rd_buffer_put+1)& (0+255),b
  6437  001D46  0E00               	movlw	low _g_tx_buffer
  6438  001D48  6F68               	movwf	?_rd_buffer_put& (0+255),b
  6439  001D4A  C078  F06A         	movff	serialport_write@pstr,?_rd_buffer_put+2
  6440  001D4E  C079  F06B         	movff	serialport_write@pstr+1,?_rd_buffer_put+3
  6441  001D52  ECB3  F008         	call	_rd_buffer_put	;wreg free
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;serialport.c: 56: pstr++;
  6445  001D56  4B78               	infsnz	serialport_write@pstr& (0+255),f,b
  6446  001D58  2B79               	incf	(serialport_write@pstr+1)& (0+255),f,b
  6447  001D5A                     l5113:
  6448  001D5A  0100               	movlb	0	; () banked
  6449  001D5C  5179               	movf	(serialport_write@pstr+1)& (0+255),w,b
  6450  001D5E  1178               	iorwf	serialport_write@pstr& (0+255),w,b
  6451  001D60  B4D8               	btfsc	status,2,c
  6452  001D62  0012               	return	
  6453                           
  6454                           ; BSR set to: 0
  6455  001D64  5178               	movf	serialport_write@pstr& (0+255),w,b
  6456  001D66  6EF6               	movwf	tblptrl,c
  6457  001D68  6EE9               	movwf	fsr0l,c
  6458  001D6A  0E05               	movlw	(high __ramtop+-1)
  6459  001D6C  6EEA               	movwf	fsr0h,c
  6460  001D6E  5179               	movf	(serialport_write@pstr+1)& (0+255),w,b
  6461  001D70  64EA               	cpfsgt	fsr0h,c
  6462  001D72  D003               	bra	u4757
  6463  001D74  6EEA               	movwf	fsr0h,c
  6464  001D76  50EF               	movf	indf0,w,c
  6465  001D78  D003               	bra	u4750
  6466  001D7A                     u4757:
  6467  001D7A  6EF7               	movwf	tblptrh,c
  6468  001D7C  0008               	tblrd		*
  6469  001D7E  50F5               	movf	tablat,w,c
  6470  001D80                     u4750:
  6471  001D80  0900               	iorlw	0
  6472  001D82  B4D8               	btfsc	status,2,c
  6473  001D84  0012               	return	
  6474  001D86  D7DC               	goto	l5109
  6475  001D88                     __end_of_serialport_write:
  6476                           	opt stack 0
  6477                           tosu	equ	0xFFF
  6478                           tosh	equ	0xFFE
  6479                           tosl	equ	0xFFD
  6480                           pclath	equ	0xFFA
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           indf0	equ	0xFEF
  6489                           postinc0	equ	0xFEE
  6490                           fsr0h	equ	0xFEA
  6491                           fsr0l	equ	0xFE9
  6492                           wreg	equ	0xFE8
  6493                           indf1	equ	0xFE7
  6494                           postinc1	equ	0xFE6
  6495                           postdec1	equ	0xFE5
  6496                           fsr1h	equ	0xFE2
  6497                           fsr1l	equ	0xFE1
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _syntax_get_text *****************
  6506 ;; Defined at:
  6507 ;;		line 169 in file "src/modules/syntax.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;		None
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;		None
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  2    wreg      PTR const unsigned char 
  6514 ;; Registers used:
  6515 ;;		wreg, status,2
  6516 ;; Tracked objects:
  6517 ;;		On entry : F/0
  6518 ;;		On exit  : F/3
  6519 ;;		Unchanged: FFFFFFF0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         0       0       0       0       0       0       0
  6522 ;;      Locals:         0       0       0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0
  6524 ;;      Totals:         0       0       0       0       0       0       0
  6525 ;;Total ram usage:        0 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    5
  6528 ;; This function calls:
  6529 ;;		Nothing
  6530 ;; This function is called by:
  6531 ;;		_on_parameter_found
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text24
  6536  002204                     __ptext24:
  6537                           	opt stack 0
  6538  002204                     _syntax_get_text:
  6539                           	opt stack 22
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;syntax.c: 170: return parameter_text;
  6543  002204  0103               	movlb	3	; () banked
  6544  002206  0E03               	movlw	high _parameter_text
  6545  002208  6E02               	movwf	?_syntax_get_text+1,c
  6546  00220A  0E00               	movlw	low _parameter_text
  6547  00220C  6E01               	movwf	?_syntax_get_text,c
  6548                           
  6549                           ; BSR set to: 3
  6550  00220E  0012               	return	
  6551  002210                     __end_of_syntax_get_text:
  6552                           	opt stack 0
  6553                           tosu	equ	0xFFF
  6554                           tosh	equ	0xFFE
  6555                           tosl	equ	0xFFD
  6556                           pclath	equ	0xFFA
  6557                           tblptru	equ	0xFF8
  6558                           tblptrh	equ	0xFF7
  6559                           tblptrl	equ	0xFF6
  6560                           tablat	equ	0xFF5
  6561                           prodh	equ	0xFF4
  6562                           prodl	equ	0xFF3
  6563                           intcon	equ	0xFF2
  6564                           indf0	equ	0xFEF
  6565                           postinc0	equ	0xFEE
  6566                           fsr0h	equ	0xFEA
  6567                           fsr0l	equ	0xFE9
  6568                           wreg	equ	0xFE8
  6569                           indf1	equ	0xFE7
  6570                           postinc1	equ	0xFE6
  6571                           postdec1	equ	0xFE5
  6572                           fsr1h	equ	0xFE2
  6573                           fsr1l	equ	0xFE1
  6574                           indf2	equ	0xFDF
  6575                           postinc2	equ	0xFDE
  6576                           postdec2	equ	0xFDD
  6577                           fsr2h	equ	0xFDA
  6578                           fsr2l	equ	0xFD9
  6579                           status	equ	0xFD8
  6580                           
  6581 ;; *************** function _syntax_as_integer *****************
  6582 ;; Defined at:
  6583 ;;		line 174 in file "src/modules/syntax.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  2    8[BANK0 ] int 
  6590 ;; Registers used:
  6591 ;;		None
  6592 ;; Tracked objects:
  6593 ;;		On entry : F/0
  6594 ;;		On exit  : F/0
  6595 ;;		Unchanged: FFFFFFF0/0
  6596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6597 ;;      Params:         0       2       0       0       0       0       0
  6598 ;;      Locals:         0       0       0       0       0       0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0
  6600 ;;      Totals:         0       2       0       0       0       0       0
  6601 ;;Total ram usage:        2 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    5
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_on_parameter_found
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           	psect	text25
  6612  002210                     __ptext25:
  6613                           	opt stack 0
  6614  002210                     _syntax_as_integer:
  6615                           	opt stack 22
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;syntax.c: 175: return *((INT16*) parameter_value);
  6619                           
  6620                           ; BSR set to: 3
  6621  002210  C200  F068         	movff	_parameter_value,?_syntax_as_integer
  6622  002214  C201  F069         	movff	_parameter_value+1,?_syntax_as_integer+1
  6623                           
  6624                           ; BSR set to: 0
  6625  002218  0012               	return	
  6626  00221A                     __end_of_syntax_as_integer:
  6627                           	opt stack 0
  6628                           tosu	equ	0xFFF
  6629                           tosh	equ	0xFFE
  6630                           tosl	equ	0xFFD
  6631                           pclath	equ	0xFFA
  6632                           tblptru	equ	0xFF8
  6633                           tblptrh	equ	0xFF7
  6634                           tblptrl	equ	0xFF6
  6635                           tablat	equ	0xFF5
  6636                           prodh	equ	0xFF4
  6637                           prodl	equ	0xFF3
  6638                           intcon	equ	0xFF2
  6639                           indf0	equ	0xFEF
  6640                           postinc0	equ	0xFEE
  6641                           fsr0h	equ	0xFEA
  6642                           fsr0l	equ	0xFE9
  6643                           wreg	equ	0xFE8
  6644                           indf1	equ	0xFE7
  6645                           postinc1	equ	0xFE6
  6646                           postdec1	equ	0xFE5
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _detection_profile_set *****************
  6657 ;; Defined at:
  6658 ;;		line 20 in file "src/modules/detection.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;  profile_numb    1    wreg     unsigned char 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  profile_numb    1    0[COMRAM] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      unsigned char 
  6665 ;; Registers used:
  6666 ;;		wreg
  6667 ;; Tracked objects:
  6668 ;;		On entry : F/0
  6669 ;;		On exit  : F/0
  6670 ;;		Unchanged: FFFFFFF0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6672 ;;      Params:         0       0       0       0       0       0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0
  6675 ;;      Totals:         0       0       0       0       0       0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    5
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_on_parameter_found
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text26
  6687  002236                     __ptext26:
  6688                           	opt stack 0
  6689  002236                     _detection_profile_set:
  6690                           	opt stack 22
  6691                           
  6692                           ; BSR set to: 0
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;detection.c: 22: return TRUE;
  6696                           
  6697                           ; BSR set to: 0
  6698  002236  0C01               	retlw	1
  6699  002238                     __end_of_detection_profile_set:
  6700                           	opt stack 0
  6701                           tosu	equ	0xFFF
  6702                           tosh	equ	0xFFE
  6703                           tosl	equ	0xFFD
  6704                           pclath	equ	0xFFA
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           indf0	equ	0xFEF
  6713                           postinc0	equ	0xFEE
  6714                           fsr0h	equ	0xFEA
  6715                           fsr0l	equ	0xFE9
  6716                           wreg	equ	0xFE8
  6717                           indf1	equ	0xFE7
  6718                           postinc1	equ	0xFE6
  6719                           postdec1	equ	0xFE5
  6720                           fsr1h	equ	0xFE2
  6721                           fsr1l	equ	0xFE1
  6722                           indf2	equ	0xFDF
  6723                           postinc2	equ	0xFDE
  6724                           postdec2	equ	0xFDD
  6725                           fsr2h	equ	0xFDA
  6726                           fsr2l	equ	0xFD9
  6727                           status	equ	0xFD8
  6728                           
  6729 ;; *************** function _cla_add_value *****************
  6730 ;; Defined at:
  6731 ;;		line 33 in file "src/modules/classic_detector.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;  d               1    wreg     PTR volatile struct .
  6734 ;;		 -> cla_detector(21), 
  6735 ;;  val             2    8[BANK0 ] int 
  6736 ;;  zero            2   10[BANK0 ] int 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  d               1   20[BANK0 ] PTR volatile struct .
  6739 ;;		 -> cla_detector(21), 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  1    wreg      unsigned char 
  6742 ;; Registers used:
  6743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6744 ;; Tracked objects:
  6745 ;;		On entry : F/0
  6746 ;;		On exit  : F/0
  6747 ;;		Unchanged: FFFFFFF0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6749 ;;      Params:         0       4       0       0       0       0       0
  6750 ;;      Locals:         0       5       0       0       0       0       0
  6751 ;;      Temps:          0       4       0       0       0       0       0
  6752 ;;      Totals:         0      13       0       0       0       0       0
  6753 ;;Total ram usage:       13 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    5
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_detection_task
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text27
  6764  000846                     __ptext27:
  6765                           	opt stack 0
  6766  000846                     _cla_add_value:
  6767                           	opt stack 24
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;cla_add_value@d stored from wreg
  6771  000846  CFE8 F074          	movff	wreg,cla_add_value@d
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;classic_detector.c: 34: d->cur_v = ((val- zero)<0?(-(val- zero)):(val- zero));
  6775  00084A  516A               	movf	cla_add_value@zero& (0+255),w,b
  6776  00084C  5D68               	subwf	cla_add_value@val& (0+255),w,b
  6777  00084E  516B               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6778  000850  5969               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  6779  000852  0B80               	andlw	128
  6780  000854  E107               	bnz	l5533
  6781                           
  6782                           ; BSR set to: 0
  6783  000856  516A               	movf	cla_add_value@zero& (0+255),w,b
  6784  000858  5D68               	subwf	cla_add_value@val& (0+255),w,b
  6785  00085A  6F70               	movwf	_cla_add_value$964& (0+255),b
  6786  00085C  516B               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6787  00085E  5969               	subwfb	(cla_add_value@val+1)& (0+255),w,b
  6788  000860  6F71               	movwf	(_cla_add_value$964+1)& (0+255),b
  6789  000862  D010               	goto	l5535
  6790  000864                     l5533:
  6791                           
  6792                           ; BSR set to: 0
  6793  000864  C068  F06C         	movff	cla_add_value@val,??_cla_add_value
  6794  000868  C069  F06D         	movff	cla_add_value@val+1,??_cla_add_value+1
  6795  00086C  516A               	movf	cla_add_value@zero& (0+255),w,b
  6796  00086E  5F6C               	subwf	??_cla_add_value& (0+255),f,b
  6797  000870  516B               	movf	(cla_add_value@zero+1)& (0+255),w,b
  6798  000872  5B6D               	subwfb	(??_cla_add_value+1)& (0+255),f,b
  6799  000874  1F6C               	comf	??_cla_add_value& (0+255),f,b
  6800  000876  1F6D               	comf	(??_cla_add_value+1)& (0+255),f,b
  6801  000878  4B6C               	infsnz	??_cla_add_value& (0+255),f,b
  6802  00087A  2B6D               	incf	(??_cla_add_value+1)& (0+255),f,b
  6803  00087C  C06C  F070         	movff	??_cla_add_value,_cla_add_value$964
  6804  000880  C06D  F071         	movff	??_cla_add_value+1,_cla_add_value$964+1
  6805  000884                     l5535:
  6806                           
  6807                           ; BSR set to: 0
  6808  000884  5174               	movf	cla_add_value@d& (0+255),w,b
  6809  000886  6ED9               	movwf	fsr2l,c
  6810  000888  6ADA               	clrf	fsr2h,c
  6811  00088A  C070  FFDE         	movff	_cla_add_value$964,postinc2
  6812  00088E  C071  FFDD         	movff	_cla_add_value$964+1,postdec2
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;classic_detector.c: 35: d->over_trig_value = (d->cur_v > d->config.sig_trig) ? (d->cur_
      +                          v - d->config.sig_trig):0;
  6816  000892  5174               	movf	cla_add_value@d& (0+255),w,b
  6817  000894  6ED9               	movwf	fsr2l,c
  6818  000896  6ADA               	clrf	fsr2h,c
  6819  000898  5174               	movf	cla_add_value@d& (0+255),w,b
  6820  00089A  6EE1               	movwf	fsr1l,c
  6821  00089C  6AE2               	clrf	fsr1h,c
  6822  00089E  0E13               	movlw	19
  6823  0008A0  D8A6               	call	PL14	;call to abstracted procedure
  6824  0008A2  E102               	bnz	u5475
  6825  0008A4  50DF               	movf	indf2,w,c
  6826  0008A6  5CE7               	subwf	indf1,w,c
  6827  0008A8                     u5475:
  6828  0008A8  E303               	bnc	l5541
  6829                           
  6830                           ; BSR set to: 0
  6831  0008AA  6B72               	clrf	_cla_add_value$965& (0+255),b	;volatile
  6832  0008AC  6B73               	clrf	(_cla_add_value$965+1)& (0+255),b	;volatile
  6833  0008AE  D017               	goto	l685
  6834  0008B0                     l5541:
  6835                           
  6836                           ; BSR set to: 0
  6837  0008B0  5174               	movf	cla_add_value@d& (0+255),w,b
  6838  0008B2  6ED9               	movwf	fsr2l,c
  6839  0008B4  6ADA               	clrf	fsr2h,c
  6840  0008B6  0E13               	movlw	19
  6841  0008B8  26D9               	addwf	fsr2l,f,c
  6842  0008BA  6ADA               	clrf	fsr2h,c
  6843  0008BC  CFDE F06C          	movff	postinc2,??_cla_add_value
  6844  0008C0  CFDD F06D          	movff	postdec2,??_cla_add_value+1
  6845  0008C4  5174               	movf	cla_add_value@d& (0+255),w,b
  6846  0008C6  6ED9               	movwf	fsr2l,c
  6847  0008C8  6ADA               	clrf	fsr2h,c
  6848  0008CA  CFDE F06E          	movff	postinc2,??_cla_add_value+2
  6849  0008CE  CFDD F06F          	movff	postdec2,??_cla_add_value+3
  6850  0008D2  516C               	movf	??_cla_add_value& (0+255),w,b
  6851  0008D4  5D6E               	subwf	(??_cla_add_value+2)& (0+255),w,b
  6852  0008D6  6F72               	movwf	_cla_add_value$965& (0+255),b	;volatile
  6853  0008D8  516D               	movf	(??_cla_add_value+1)& (0+255),w,b
  6854  0008DA  596F               	subwfb	(??_cla_add_value+3)& (0+255),w,b
  6855  0008DC  6F73               	movwf	(_cla_add_value$965+1)& (0+255),b	;volatile
  6856  0008DE                     l685:
  6857                           
  6858                           ; BSR set to: 0
  6859  0008DE  D8B1               	call	PL42	;call to abstracted procedure
  6860  0008E0  C072  FFDE         	movff	_cla_add_value$965,postinc2	;volatile
  6861  0008E4  C073  FFDD         	movff	_cla_add_value$965+1,postdec2	;volatile
  6862                           
  6863                           ;classic_detector.c: 36: if (d->status.over_trig)
  6864  0008E8  D88D               	call	PL16	;call to abstracted procedure
  6865  0008EA  50DF               	movf	indf2,w,c
  6866  0008EC  6F6C               	movwf	??_cla_add_value& (0+255),b
  6867  0008EE  A56C               	btfss	??_cla_add_value& (0+255),2,b
  6868  0008F0  D05D               	goto	l5563
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;classic_detector.c: 37: {
  6872                           ;classic_detector.c: 38: d->sig_count++;
  6873  0008F2  5174               	movf	cla_add_value@d& (0+255),w,b
  6874  0008F4  6ED9               	movwf	fsr2l,c
  6875  0008F6  6ADA               	clrf	fsr2h,c
  6876  0008F8  0E08               	movlw	8
  6877  0008FA  26D9               	addwf	fsr2l,f,c
  6878  0008FC  6ADA               	clrf	fsr2h,c
  6879  0008FE  2ADE               	incf	postinc2,f,c
  6880  000900  0E00               	movlw	0
  6881  000902  22DD               	addwfc	postdec2,f,c
  6882                           
  6883                           ;classic_detector.c: 39: d->sig_sum += d->over_trig_value;
  6884  000904  D89E               	call	PL42	;call to abstracted procedure
  6885  000906  CFDE F06C          	movff	postinc2,??_cla_add_value
  6886  00090A  CFDD F06D          	movff	postdec2,??_cla_add_value+1
  6887  00090E  D881               	call	PL18	;call to abstracted procedure
  6888  000910  516C               	movf	??_cla_add_value& (0+255),w,b
  6889  000912  26DE               	addwf	postinc2,f,c
  6890  000914  516D               	movf	(??_cla_add_value+1)& (0+255),w,b
  6891  000916  22DD               	addwfc	postdec2,f,c
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;classic_detector.c: 40: if (d->sig_sum > d->config.sig_sum_trig && d->status.alarm == F
      +                          ALSE)
  6895  000918  D87C               	call	PL18	;call to abstracted procedure
  6896  00091A  5174               	movf	cla_add_value@d& (0+255),w,b
  6897  00091C  6EE1               	movwf	fsr1l,c
  6898  00091E  6AE2               	clrf	fsr1h,c
  6899  000920  0E11               	movlw	17
  6900  000922  D865               	call	PL14	;call to abstracted procedure
  6901  000924  E102               	bnz	u5495
  6902  000926  50DF               	movf	indf2,w,c
  6903  000928  5CE7               	subwf	indf1,w,c
  6904  00092A                     u5495:
  6905  00092A  E231               	bc	l5559
  6906                           
  6907                           ; BSR set to: 0
  6908  00092C  D86B               	call	PL16	;call to abstracted procedure
  6909  00092E  50DF               	movf	indf2,w,c
  6910  000930  6F6C               	movwf	??_cla_add_value& (0+255),b
  6911  000932  B16C               	btfsc	??_cla_add_value& (0+255),0,b
  6912  000934  D02C               	goto	l5559
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;classic_detector.c: 41: {
  6916                           ;classic_detector.c: 42: d->status.over_trig = FALSE;
  6917  000936  5174               	movf	cla_add_value@d& (0+255),w,b
  6918  000938  6ED9               	movwf	fsr2l,c
  6919  00093A  6ADA               	clrf	fsr2h,c
  6920  00093C  0E0E               	movlw	14
  6921  00093E  26D9               	addwf	fsr2l,f,c
  6922  000940  6ADA               	clrf	fsr2h,c
  6923  000942  0EFB               	movlw	-5
  6924  000944  16DF               	andwf	223,f,c
  6925                           
  6926                           ;classic_detector.c: 43: d->status.alarm=TRUE;
  6927  000946  D85E               	call	PL16	;call to abstracted procedure
  6928  000948  0E01               	movlw	1
  6929  00094A  12DF               	iorwf	223,f,c
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;classic_detector.c: 44: d->last_sig_count = d->sig_count;
  6933  00094C  5174               	movf	cla_add_value@d& (0+255),w,b
  6934  00094E  D870               	call	PL22	;call to abstracted procedure
  6935  000950  0E0C               	movlw	12
  6936  000952  26E1               	addwf	fsr1l,f,c
  6937  000954  6AE2               	clrf	fsr1h,c
  6938  000956  CFDE FFE6          	movff	postinc2,postinc1
  6939  00095A  CFDD FFE5          	movff	postdec2,postdec1
  6940                           
  6941                           ; BSR set to: 0
  6942                           ;classic_detector.c: 45: d->last_sig_sum = d->sig_sum;
  6943  00095E  D859               	call	PL18	;call to abstracted procedure
  6944  000960  5174               	movf	cla_add_value@d& (0+255),w,b
  6945  000962  6EE1               	movwf	fsr1l,c
  6946  000964  6AE2               	clrf	fsr1h,c
  6947  000966  0E0A               	movlw	10
  6948  000968  26E1               	addwf	fsr1l,f,c
  6949  00096A  6AE2               	clrf	fsr1h,c
  6950  00096C  CFDE FFE6          	movff	postinc2,postinc1
  6951  000970  CFDD FFE5          	movff	postdec2,postdec1
  6952                           
  6953                           ;classic_detector.c: 46: d->sig_count = 0;
  6954  000974  5174               	movf	cla_add_value@d& (0+255),w,b
  6955  000976  6ED9               	movwf	fsr2l,c
  6956  000978  6ADA               	clrf	fsr2h,c
  6957  00097A  0E08               	movlw	8
  6958  00097C  26D9               	addwf	fsr2l,f,c
  6959  00097E  6ADA               	clrf	fsr2h,c
  6960  000980  6ADE               	clrf	postinc2,c
  6961  000982  6ADD               	clrf	postdec2,c
  6962                           
  6963                           ;classic_detector.c: 47: d->sig_sum = 0;
  6964  000984  D846               	call	PL18	;call to abstracted procedure
  6965  000986  0E00               	movlw	0
  6966  000988  6EDE               	movwf	postinc2,c
  6967  00098A  6EDD               	movwf	postdec2,c
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;classic_detector.c: 48: return TRUE;
  6971  00098C  0C01               	retlw	1
  6972  00098E                     l5559:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;classic_detector.c: 49: }
  6976                           ;classic_detector.c: 51: if (d->sig_count > d->config.sig_max_count)
  6977  00098E  5174               	movf	cla_add_value@d& (0+255),w,b
  6978  000990  D84F               	call	PL22	;call to abstracted procedure
  6979  000992  0E0F               	movlw	15
  6980  000994  D82C               	call	PL14	;call to abstracted procedure
  6981  000996  E102               	bnz	u5515
  6982  000998  50DF               	movf	indf2,w,c
  6983  00099A  5CE7               	subwf	indf1,w,c
  6984  00099C                     u5515:
  6985  00099C  E227               	bc	l5567
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;classic_detector.c: 52: {
  6989                           ;classic_detector.c: 53: d->status.over_trig = FALSE;
  6990  00099E  D832               	call	PL16	;call to abstracted procedure
  6991  0009A0  0EFB               	movlw	-5
  6992  0009A2  16DF               	andwf	223,f,c
  6993                           
  6994                           ;classic_detector.c: 54: d->status.alarm = FALSE;
  6995  0009A4  D82F               	call	PL16	;call to abstracted procedure
  6996  0009A6  0EFE               	movlw	-2
  6997  0009A8  16DF               	andwf	223,f,c
  6998  0009AA  0C00               	retlw	0
  6999  0009AC                     l5563:
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;classic_detector.c: 59: else if (d->over_trig_value > d->config.sig_trig)
  7003  0009AC  D84A               	call	PL42	;call to abstracted procedure
  7004  0009AE  5174               	movf	cla_add_value@d& (0+255),w,b
  7005  0009B0  6EE1               	movwf	fsr1l,c
  7006  0009B2  6AE2               	clrf	fsr1h,c
  7007  0009B4  0E13               	movlw	19
  7008  0009B6  D81B               	call	PL14	;call to abstracted procedure
  7009  0009B8  E102               	bnz	u5525
  7010  0009BA  50DF               	movf	indf2,w,c
  7011  0009BC  5CE7               	subwf	indf1,w,c
  7012  0009BE                     u5525:
  7013  0009BE  E216               	bc	l5567
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;classic_detector.c: 60: {
  7017                           ;classic_detector.c: 61: d->status.over_trig = TRUE;
  7018  0009C0  D821               	call	PL16	;call to abstracted procedure
  7019  0009C2  0E04               	movlw	4
  7020  0009C4  12DF               	iorwf	223,f,c
  7021                           
  7022                           ;classic_detector.c: 62: d->status.alarm = FALSE;
  7023  0009C6  D81E               	call	PL16	;call to abstracted procedure
  7024  0009C8  0EFE               	movlw	-2
  7025  0009CA  16DF               	andwf	223,f,c
  7026                           
  7027                           ;classic_detector.c: 63: d->last_sig_count = 0;
  7028  0009CC  5174               	movf	cla_add_value@d& (0+255),w,b
  7029  0009CE  6ED9               	movwf	fsr2l,c
  7030  0009D0  6ADA               	clrf	fsr2h,c
  7031  0009D2  0E0C               	movlw	12
  7032                           
  7033                           ;classic_detector.c: 64: d->last_sig_sum = 0;
  7034  0009D4  D825               	call	PL20	;call to abstracted procedure
  7035  0009D6  0E0A               	movlw	10
  7036                           
  7037                           ;classic_detector.c: 65: d->sig_count = 0;
  7038  0009D8  D823               	call	PL20	;call to abstracted procedure
  7039  0009DA  0E08               	movlw	8
  7040  0009DC  26D9               	addwf	fsr2l,f,c
  7041  0009DE  6ADA               	clrf	fsr2h,c
  7042  0009E0  6ADE               	clrf	postinc2,c
  7043  0009E2  6ADD               	clrf	postdec2,c
  7044                           
  7045                           ;classic_detector.c: 66: d->sig_sum = 0;
  7046  0009E4  D816               	call	PL18	;call to abstracted procedure
  7047  0009E6  0E00               	movlw	0
  7048  0009E8  6EDE               	movwf	postinc2,c
  7049  0009EA  6EDD               	movwf	postdec2,c
  7050  0009EC                     l5567:
  7051                           
  7052                           ; BSR set to: 0
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;classic_detector.c: 67: }
  7056                           ;classic_detector.c: 68: return FALSE;
  7057  0009EC  0C00               	retlw	0
  7058  0009EE                     __end_of_cla_add_value:
  7059                           	opt stack 0
  7060  0009EE                     PL14:
  7061                           	opt stack 24
  7062  0009EE  26E1               	addwf	fsr1l,f,c
  7063  0009F0  6AE2               	clrf	fsr1h,c
  7064  0009F2  52E6               	movf	postinc1,f,c
  7065  0009F4  52DE               	movf	postinc2,f,c
  7066  0009F6  50E5               	movf	postdec1,w,c
  7067  0009F8  0A80               	xorlw	128
  7068  0009FA  6F6C               	movwf	??_cla_add_value& (0+255),b
  7069  0009FC  50DD               	movf	postdec2,w,c
  7070  0009FE  0A80               	xorlw	128
  7071  000A00  5D6C               	subwf	??_cla_add_value& (0+255),w,b
  7072  000A02  0012               	return	
  7073  000A04                     __end_ofPL14:
  7074                           	opt stack 0
  7075  000A04                     PL16:
  7076                           	opt stack 24
  7077  000A04  5174               	movf	cla_add_value@d& (0+255),w,b
  7078  000A06  6ED9               	movwf	fsr2l,c
  7079  000A08  6ADA               	clrf	fsr2h,c
  7080  000A0A  0E0E               	movlw	14
  7081  000A0C  26D9               	addwf	fsr2l,f,c
  7082  000A0E  6ADA               	clrf	fsr2h,c
  7083  000A10  0012               	return	
  7084  000A12                     __end_ofPL16:
  7085                           	opt stack 0
  7086  000A12                     PL18:
  7087                           	opt stack 24
  7088  000A12  5174               	movf	cla_add_value@d& (0+255),w,b
  7089  000A14  6ED9               	movwf	fsr2l,c
  7090  000A16  6ADA               	clrf	fsr2h,c
  7091  000A18  0E06               	movlw	6
  7092  000A1A  26D9               	addwf	fsr2l,f,c
  7093  000A1C  6ADA               	clrf	fsr2h,c
  7094  000A1E  0012               	return	
  7095  000A20                     __end_ofPL18:
  7096                           	opt stack 0
  7097  000A20                     PL20:
  7098                           	opt stack 24
  7099  000A20  26D9               	addwf	fsr2l,f,c
  7100  000A22  6ADA               	clrf	fsr2h,c
  7101  000A24  6ADE               	clrf	postinc2,c
  7102  000A26  6ADD               	clrf	postdec2,c
  7103  000A28  5174               	movf	cla_add_value@d& (0+255),w,b
  7104  000A2A  6ED9               	movwf	fsr2l,c
  7105  000A2C  6ADA               	clrf	fsr2h,c
  7106  000A2E  0012               	return	
  7107  000A30                     __end_ofPL20:
  7108                           	opt stack 0
  7109  000A30                     PL22:
  7110                           	opt stack 24
  7111  000A30  6ED9               	movwf	fsr2l,c
  7112  000A32  6ADA               	clrf	fsr2h,c
  7113  000A34  0E08               	movlw	8
  7114  000A36  26D9               	addwf	fsr2l,f,c
  7115  000A38  6ADA               	clrf	fsr2h,c
  7116  000A3A  5174               	movf	cla_add_value@d& (0+255),w,b
  7117  000A3C  6EE1               	movwf	fsr1l,c
  7118  000A3E  6AE2               	clrf	fsr1h,c
  7119  000A40  0012               	return	
  7120  000A42                     __end_ofPL22:
  7121                           	opt stack 0
  7122  000A42                     PL42:
  7123                           	opt stack 24
  7124  000A42  5174               	movf	cla_add_value@d& (0+255),w,b
  7125  000A44  6ED9               	movwf	fsr2l,c
  7126  000A46  6ADA               	clrf	fsr2h,c
  7127  000A48  0E04               	movlw	4
  7128  000A4A  26D9               	addwf	fsr2l,f,c
  7129  000A4C  6ADA               	clrf	fsr2h,c
  7130  000A4E  0012               	return	
  7131  000A50                     __end_ofPL42:
  7132                           	opt stack 0
  7133                           tosu	equ	0xFFF
  7134                           tosh	equ	0xFFE
  7135                           tosl	equ	0xFFD
  7136                           pclath	equ	0xFFA
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           prodh	equ	0xFF4
  7142                           prodl	equ	0xFF3
  7143                           intcon	equ	0xFF2
  7144                           indf0	equ	0xFEF
  7145                           postinc0	equ	0xFEE
  7146                           fsr0h	equ	0xFEA
  7147                           fsr0l	equ	0xFE9
  7148                           wreg	equ	0xFE8
  7149                           indf1	equ	0xFE7
  7150                           postinc1	equ	0xFE6
  7151                           postdec1	equ	0xFE5
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _pd_add_value *****************
  7162 ;; Defined at:
  7163 ;;		line 33 in file "src/modules/peak_detector.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  d               2   16[BANK0 ] PTR volatile struct .
  7166 ;;		 -> pd_detector(101), 
  7167 ;;  val             2   18[BANK0 ] int 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  tmp             2   36[BANK0 ] int 
  7170 ;;  i               1   38[BANK0 ] unsigned char 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      unsigned char 
  7173 ;; Registers used:
  7174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7175 ;; Tracked objects:
  7176 ;;		On entry : F/0
  7177 ;;		On exit  : F/0
  7178 ;;		Unchanged: FFFFFFF0/0
  7179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7180 ;;      Params:         0       4       0       0       0       0       0
  7181 ;;      Locals:         0      13       0       0       0       0       0
  7182 ;;      Temps:          0       6       0       0       0       0       0
  7183 ;;      Totals:         0      23       0       0       0       0       0
  7184 ;;Total ram usage:       23 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    6
  7187 ;; This function calls:
  7188 ;;		___lbmod
  7189 ;;		___awdiv
  7190 ;;		___wmul
  7191 ;;		___awmod
  7192 ;; This function is called by:
  7193 ;;		_detection_task
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text28
  7198  0000F4                     __ptext28:
  7199                           	opt stack 0
  7200  0000F4                     _pd_add_value:
  7201                           	opt stack 23
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;peak_detector.c: 34: IDX8 i;
  7205                           ;peak_detector.c: 35: INT16 tmp;
  7206                           ;peak_detector.c: 37: d->last_v_idx %= d->config.lval_cnt;
  7207                           
  7208                           ; BSR set to: 0
  7209  0000F4  EE20 F028          	lfsr	2,40
  7210  0000F8  5170               	movf	pd_add_value@d& (0+255),w,b
  7211  0000FA  26D9               	addwf	fsr2l,f,c
  7212  0000FC  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7213  0000FE  22DA               	addwfc	fsr2h,f,c
  7214  000100  EE10 F063          	lfsr	1,99
  7215  000104  5170               	movf	pd_add_value@d& (0+255),w,b
  7216  000106  26E1               	addwf	fsr1l,f,c
  7217  000108  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7218  00010A  22E2               	addwfc	fsr1h,f,c
  7219  00010C  50E7               	movf	indf1,w,c
  7220  00010E  6F68               	movwf	?___lbmod& (0+255),b
  7221  000110  EE10 F028          	lfsr	1,40
  7222  000114  5170               	movf	pd_add_value@d& (0+255),w,b
  7223  000116  26E1               	addwf	fsr1l,f,c
  7224  000118  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7225  00011A  22E2               	addwfc	fsr1h,f,c
  7226  00011C  50E7               	movf	indf1,w,c
  7227  00011E  EC2B  F010         	call	___lbmod
  7228  000122  6EDF               	movwf	indf2,c
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;peak_detector.c: 38: d->last_v_buf[d->last_v_idx] = (INT16) val;
  7232  000124  EE20 F028          	lfsr	2,40
  7233  000128  5170               	movf	pd_add_value@d& (0+255),w,b
  7234  00012A  26D9               	addwf	fsr2l,f,c
  7235  00012C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7236  00012E  22DA               	addwfc	fsr2h,f,c
  7237  000130  50DF               	movf	indf2,w,c
  7238  000132  DA4A               	call	PL60	;call to abstracted procedure
  7239  000134  C072  FFDE         	movff	pd_add_value@val,postinc2
  7240  000138  C073  FFDD         	movff	pd_add_value@val+1,postdec2
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;peak_detector.c: 39: d->last_v_idx++;
  7244  00013C  EE20 F028          	lfsr	2,40
  7245  000140  5170               	movf	pd_add_value@d& (0+255),w,b
  7246  000142  26D9               	addwf	fsr2l,f,c
  7247  000144  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7248  000146  22DA               	addwfc	fsr2h,f,c
  7249  000148  2ADF               	incf	indf2,f,c
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;peak_detector.c: 40: d->last_v = d->cur_v;
  7253  00014A  EE20 F058          	lfsr	2,88
  7254  00014E  5170               	movf	pd_add_value@d& (0+255),w,b
  7255  000150  26D9               	addwf	fsr2l,f,c
  7256  000152  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7257  000154  22DA               	addwfc	fsr2h,f,c
  7258  000156  EE10 F029          	lfsr	1,41
  7259                           
  7260                           ; BSR set to: 0
  7261                           ;peak_detector.c: 41: d->cur_v = d->next_v;
  7262  00015A  D9ED               	call	PL26	;call to abstracted procedure
  7263  00015C  EE10 F058          	lfsr	1,88
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;peak_detector.c: 42: d->next_v = val;
  7267  000160  D9EA               	call	PL26	;call to abstracted procedure
  7268  000162  C072  FFDE         	movff	pd_add_value@val,postinc2
  7269  000166  C073  FFDD         	movff	pd_add_value@val+1,postdec2
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;peak_detector.c: 44: tmp = 0;
  7273  00016A  6B84               	clrf	pd_add_value@tmp& (0+255),b
  7274  00016C  6B85               	clrf	(pd_add_value@tmp+1)& (0+255),b
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;peak_detector.c: 45: for (i = 0; i < d->config.lval_cnt; i++) {
  7278  00016E  6B86               	clrf	pd_add_value@i& (0+255),b
  7279  000170  D003               	goto	l5591
  7280  000172                     l5587:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;peak_detector.c: 46: tmp += d->last_v_buf[i];
  7284  000172  5186               	movf	pd_add_value@i& (0+255),w,b
  7285  000174  DA29               	call	PL60	;call to abstracted procedure
  7286                           
  7287                           ; BSR set to: 0
  7288  000176  DA3F               	call	PL72	;call to abstracted procedure
  7289  000178                     l5591:
  7290                           
  7291                           ; BSR set to: 0
  7292  000178  D9ED               	call	PL32	;call to abstracted procedure
  7293  00017A  5D86               	subwf	pd_add_value@i& (0+255),w,b
  7294  00017C  E3FA               	bnc	l5587
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;peak_detector.c: 47: }
  7298                           ;peak_detector.c: 48: d->avlv = tmp/d->config.lval_cnt;
  7299  00017E  C084  F068         	movff	pd_add_value@tmp,?___awdiv
  7300  000182  C085  F069         	movff	pd_add_value@tmp+1,?___awdiv+1
  7301  000186  D9E6               	call	PL32	;call to abstracted procedure
  7302  000188  6F6A               	movwf	(?___awdiv+2)& (0+255),b
  7303  00018A  6B6B               	clrf	(?___awdiv+3)& (0+255),b
  7304  00018C  ECB5  F00C         	call	___awdiv	;wreg free
  7305  000190  EE20 F056          	lfsr	2,86
  7306  000194  D9FD               	call	PL44	;call to abstracted procedure
  7307                           
  7308                           ;peak_detector.c: 50: d->wval = d->cur_v * d->cur_v - d->avlv * d->next_v;
  7309  000196  EE20 F058          	lfsr	2,88
  7310  00019A  5170               	movf	pd_add_value@d& (0+255),w,b
  7311  00019C  26D9               	addwf	fsr2l,f,c
  7312  00019E  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7313  0001A0  22DA               	addwfc	fsr2h,f,c
  7314  0001A2  CFDE F068          	movff	postinc2,?___wmul
  7315  0001A6  CFDD F069          	movff	postdec2,?___wmul+1
  7316  0001AA  EE20 F058          	lfsr	2,88
  7317  0001AE  5170               	movf	pd_add_value@d& (0+255),w,b
  7318  0001B0  26D9               	addwf	fsr2l,f,c
  7319  0001B2  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7320  0001B4  22DA               	addwfc	fsr2h,f,c
  7321  0001B6  CFDE F06A          	movff	postinc2,?___wmul+2
  7322  0001BA  CFDD F06B          	movff	postdec2,?___wmul+3
  7323  0001BE  EC15  F010         	call	___wmul	;wreg free
  7324  0001C2  C068  F074         	movff	?___wmul,??_pd_add_value
  7325  0001C6  C069  F075         	movff	?___wmul+1,??_pd_add_value+1
  7326  0001CA  EE20 F056          	lfsr	2,86
  7327  0001CE  5170               	movf	pd_add_value@d& (0+255),w,b
  7328  0001D0  26D9               	addwf	fsr2l,f,c
  7329  0001D2  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7330  0001D4  22DA               	addwfc	fsr2h,f,c
  7331  0001D6  CFDE F068          	movff	postinc2,?___wmul
  7332  0001DA  CFDD F069          	movff	postdec2,?___wmul+1
  7333  0001DE  EE20 F05A          	lfsr	2,90
  7334  0001E2  5170               	movf	pd_add_value@d& (0+255),w,b
  7335  0001E4  26D9               	addwf	fsr2l,f,c
  7336  0001E6  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7337  0001E8  22DA               	addwfc	fsr2h,f,c
  7338  0001EA  CFDE F06A          	movff	postinc2,?___wmul+2
  7339  0001EE  CFDD F06B          	movff	postdec2,?___wmul+3
  7340  0001F2  EC15  F010         	call	___wmul	;wreg free
  7341  0001F6  5168               	movf	?___wmul& (0+255),w,b
  7342  0001F8  5D74               	subwf	??_pd_add_value& (0+255),w,b
  7343  0001FA  6F76               	movwf	(??_pd_add_value+2)& (0+255),b
  7344  0001FC  5169               	movf	(?___wmul+1)& (0+255),w,b
  7345  0001FE  5975               	subwfb	(??_pd_add_value+1)& (0+255),w,b
  7346  000200  6F77               	movwf	(??_pd_add_value+3)& (0+255),b
  7347  000202  EE20 F05C          	lfsr	2,92
  7348  000206  5170               	movf	pd_add_value@d& (0+255),w,b
  7349  000208  26D9               	addwf	fsr2l,f,c
  7350  00020A  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7351  00020C  22DA               	addwfc	fsr2h,f,c
  7352  00020E  C076  FFDE         	movff	??_pd_add_value+2,postinc2
  7353  000212  C077  FFDD         	movff	??_pd_add_value+3,postdec2
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;peak_detector.c: 52: if ((((d->wval)<0?(-(d->wval)):(d->wval))) > d->config.wtrigger) {
  7357  000216  D976               	call	PL8	;call to abstracted procedure
  7358  000218  BF75               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  7359  00021A  D00B               	goto	l5599
  7360                           
  7361                           ; BSR set to: 0
  7362  00021C  EE20 F05C          	lfsr	2,92
  7363  000220  5170               	movf	pd_add_value@d& (0+255),w,b
  7364  000222  26D9               	addwf	fsr2l,f,c
  7365  000224  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7366  000226  22DA               	addwfc	fsr2h,f,c
  7367  000228  CFDE F07A          	movff	postinc2,_pd_add_value$1078	;volatile
  7368  00022C  CFDD F07B          	movff	postdec2,_pd_add_value$1078+1	;volatile
  7369  000230  D00B               	goto	l721
  7370  000232                     l5599:
  7371                           
  7372                           ; BSR set to: 0
  7373  000232  EE20 F05C          	lfsr	2,92
  7374  000236  5170               	movf	pd_add_value@d& (0+255),w,b
  7375  000238  26D9               	addwf	fsr2l,f,c
  7376  00023A  D95B               	call	PL6	;call to abstracted procedure
  7377  00023C  4B74               	infsnz	??_pd_add_value& (0+255),f,b
  7378  00023E  2B75               	incf	(??_pd_add_value+1)& (0+255),f,b
  7379  000240  C074  F07A         	movff	??_pd_add_value,_pd_add_value$1078	;volatile
  7380  000244  C075  F07B         	movff	??_pd_add_value+1,_pd_add_value$1078+1	;volatile
  7381  000248                     l721:
  7382                           
  7383                           ; BSR set to: 0
  7384  000248  EE20 F05F          	lfsr	2,95
  7385  00024C  5170               	movf	pd_add_value@d& (0+255),w,b
  7386  00024E  26D9               	addwf	fsr2l,f,c
  7387  000250  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7388  000252  22DA               	addwfc	fsr2h,f,c
  7389  000254  CFDE F074          	movff	postinc2,??_pd_add_value
  7390  000258  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7391  00025C  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7392  00025E  0A80               	xorlw	128
  7393  000260  6F76               	movwf	(??_pd_add_value+2)& (0+255),b
  7394  000262  517A               	movf	_pd_add_value$1078& (0+255),w,b	;volatile
  7395  000264  5D74               	subwf	??_pd_add_value& (0+255),w,b
  7396  000266  517B               	movf	(_pd_add_value$1078+1)& (0+255),w,b	;volatile
  7397  000268  0A80               	xorlw	128
  7398  00026A  5976               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  7399  00026C  E216               	bc	l5611
  7400                           
  7401                           ; BSR set to: 0
  7402                           ;peak_detector.c: 53: if (!d->status.alarm && !d->status.firststart) {
  7403  00026E  D9A3               	call	PL56	;call to abstracted procedure
  7404  000270  B174               	btfsc	??_pd_add_value& (0+255),0,b
  7405  000272  D013               	goto	l5611
  7406                           
  7407                           ; BSR set to: 0
  7408  000274  EE20 F05E          	lfsr	2,94
  7409  000278  5170               	movf	pd_add_value@d& (0+255),w,b
  7410  00027A  26D9               	addwf	fsr2l,f,c
  7411  00027C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7412  00027E  22DA               	addwfc	fsr2h,f,c
  7413  000280  50DF               	movf	indf2,w,c
  7414  000282  6F74               	movwf	??_pd_add_value& (0+255),b
  7415  000284  B574               	btfsc	??_pd_add_value& (0+255),2,b
  7416  000286  D009               	goto	l5611
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;peak_detector.c: 54: d->status.alarm = 1;
  7420  000288  EE20 F05E          	lfsr	2,94
  7421  00028C  5170               	movf	pd_add_value@d& (0+255),w,b
  7422  00028E  26D9               	addwf	fsr2l,f,c
  7423  000290  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7424  000292  22DA               	addwfc	fsr2h,f,c
  7425  000294  0E01               	movlw	1
  7426  000296  12DF               	iorwf	223,f,c
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;peak_detector.c: 55: return TRUE;
  7430  000298  0C01               	retlw	1
  7431  00029A                     l5611:
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;peak_detector.c: 56: }
  7435                           ;peak_detector.c: 57: }
  7436                           ;peak_detector.c: 58: if (d->status.alarm && (((d->wval)<0?(-(d->wval)):(d->wval))) < (1
      +                          000)
  7437                           ;peak_detector.c: 59: && ((d->cur_v - d->ref_v)<0?(-(d->cur_v - d->ref_v)):(d->cur_v - d
      +                          ->ref_v)) < d->config.tolerance
  7438                           ;peak_detector.c: 60: && ((d->next_v - d->ref_v)<0?(-(d->next_v - d->ref_v)):(d->next_v 
      +                          - d->ref_v)) < d->config.tolerance) {
  7439  00029A  D98D               	call	PL56	;call to abstracted procedure
  7440  00029C  A174               	btfss	??_pd_add_value& (0+255),0,b
  7441  00029E  D09B               	goto	l724
  7442                           
  7443                           ; BSR set to: 0
  7444  0002A0  EE20 F05C          	lfsr	2,92
  7445  0002A4  5170               	movf	pd_add_value@d& (0+255),w,b
  7446  0002A6  26D9               	addwf	fsr2l,f,c
  7447  0002A8  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7448  0002AA  22DA               	addwfc	fsr2h,f,c
  7449  0002AC  CFDE F074          	movff	postinc2,??_pd_add_value
  7450  0002B0  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7451  0002B4  BF75               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  7452  0002B6  D00B               	goto	l5617
  7453                           
  7454                           ; BSR set to: 0
  7455  0002B8  EE20 F05C          	lfsr	2,92
  7456  0002BC  5170               	movf	pd_add_value@d& (0+255),w,b
  7457  0002BE  26D9               	addwf	fsr2l,f,c
  7458  0002C0  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7459  0002C2  22DA               	addwfc	fsr2h,f,c
  7460  0002C4  CFDE F07C          	movff	postinc2,_pd_add_value$1079	;volatile
  7461  0002C8  CFDD F07D          	movff	postdec2,_pd_add_value$1079+1	;volatile
  7462  0002CC  D00B               	goto	l5619
  7463  0002CE                     l5617:
  7464                           
  7465                           ; BSR set to: 0
  7466  0002CE  EE20 F05C          	lfsr	2,92
  7467  0002D2  5170               	movf	pd_add_value@d& (0+255),w,b
  7468  0002D4  26D9               	addwf	fsr2l,f,c
  7469  0002D6  D90D               	call	PL6	;call to abstracted procedure
  7470  0002D8  4B74               	infsnz	??_pd_add_value& (0+255),f,b
  7471  0002DA  2B75               	incf	(??_pd_add_value+1)& (0+255),f,b
  7472  0002DC  C074  F07C         	movff	??_pd_add_value,_pd_add_value$1079	;volatile
  7473  0002E0  C075  F07D         	movff	??_pd_add_value+1,_pd_add_value$1079+1	;volatile
  7474  0002E4                     l5619:
  7475                           
  7476                           ; BSR set to: 0
  7477  0002E4  517D               	movf	(_pd_add_value$1079+1)& (0+255),w,b	;volatile
  7478  0002E6  0A80               	xorlw	128
  7479  0002E8  0F7D               	addlw	-131
  7480  0002EA  0EE8               	movlw	232
  7481  0002EC  B4D8               	btfsc	status,2,c
  7482  0002EE  5D7C               	subwf	_pd_add_value$1079& (0+255),w,b	;volatile
  7483  0002F0  E272               	bc	l724
  7484                           
  7485                           ; BSR set to: 0
  7486  0002F2  EE20 F054          	lfsr	2,84
  7487  0002F6  5170               	movf	pd_add_value@d& (0+255),w,b
  7488  0002F8  D8DE               	call	PL2	;call to abstracted procedure
  7489  0002FA  6F78               	movwf	(??_pd_add_value+4)& (0+255),b
  7490  0002FC  D982               	call	PL82	;call to abstracted procedure
  7491  0002FE  BF79               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  7492  000300  D009               	goto	l5625
  7493                           
  7494                           ; BSR set to: 0
  7495  000302  EE20 F054          	lfsr	2,84
  7496  000306  5170               	movf	pd_add_value@d& (0+255),w,b
  7497  000308  D8D6               	call	PL2	;call to abstracted procedure
  7498  00030A  6F7E               	movwf	_pd_add_value$1080& (0+255),b	;volatile
  7499  00030C  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7500  00030E  5977               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7501  000310  6F7F               	movwf	(_pd_add_value$1080+1)& (0+255),b	;volatile
  7502  000312  D00B               	goto	l732
  7503  000314                     l5625:
  7504                           
  7505                           ; BSR set to: 0
  7506  000314  EE20 F054          	lfsr	2,84
  7507  000318  5170               	movf	pd_add_value@d& (0+255),w,b
  7508  00031A  D8CD               	call	PL2	;call to abstracted procedure
  7509  00031C  D965               	call	PL70	;call to abstracted procedure
  7510  00031E  4B78               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  7511  000320  2B79               	incf	(??_pd_add_value+5)& (0+255),f,b
  7512  000322  C078  F07E         	movff	??_pd_add_value+4,_pd_add_value$1080	;volatile
  7513  000326  C079  F07F         	movff	??_pd_add_value+5,_pd_add_value$1080+1	;volatile
  7514  00032A                     l732:
  7515                           
  7516                           ; BSR set to: 0
  7517  00032A  D91C               	call	PL38	;call to abstracted procedure
  7518  00032C  517F               	movf	(_pd_add_value$1080+1)& (0+255),w,b	;volatile
  7519  00032E  0A80               	xorlw	128
  7520  000330  6F76               	movwf	(??_pd_add_value+2)& (0+255),b
  7521  000332  5174               	movf	??_pd_add_value& (0+255),w,b
  7522  000334  5D7E               	subwf	_pd_add_value$1080& (0+255),w,b	;volatile
  7523  000336  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7524  000338  0A80               	xorlw	128
  7525  00033A  5976               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  7526  00033C  E24C               	bc	l724
  7527                           
  7528                           ; BSR set to: 0
  7529  00033E  D8ED               	call	PL12	;call to abstracted procedure
  7530  000340  D8CE               	call	PL4	;call to abstracted procedure
  7531  000342  6F78               	movwf	(??_pd_add_value+4)& (0+255),b
  7532  000344  D95E               	call	PL82	;call to abstracted procedure
  7533  000346  BF79               	btfsc	(??_pd_add_value+5)& (0+255),7,b
  7534  000348  D013               	goto	l5631
  7535                           
  7536                           ; BSR set to: 0
  7537  00034A  EE20 F054          	lfsr	2,84
  7538  00034E  5170               	movf	pd_add_value@d& (0+255),w,b
  7539  000350  26D9               	addwf	fsr2l,f,c
  7540  000352  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7541  000354  22DA               	addwfc	fsr2h,f,c
  7542  000356  CFDE F074          	movff	postinc2,??_pd_add_value
  7543  00035A  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7544  00035E  EE20 F05A          	lfsr	2,90
  7545  000362  5170               	movf	pd_add_value@d& (0+255),w,b
  7546  000364  D8BC               	call	PL4	;call to abstracted procedure
  7547  000366  6F80               	movwf	_pd_add_value$1081& (0+255),b	;volatile
  7548  000368  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7549  00036A  5977               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7550  00036C  6F81               	movwf	(_pd_add_value$1081+1)& (0+255),b	;volatile
  7551  00036E  D009               	goto	l736
  7552  000370                     l5631:
  7553                           
  7554                           ; BSR set to: 0
  7555  000370  D8D4               	call	PL12	;call to abstracted procedure
  7556  000372  D8B5               	call	PL4	;call to abstracted procedure
  7557  000374  D939               	call	PL70	;call to abstracted procedure
  7558  000376  4B78               	infsnz	(??_pd_add_value+4)& (0+255),f,b
  7559  000378  2B79               	incf	(??_pd_add_value+5)& (0+255),f,b
  7560  00037A  C078  F080         	movff	??_pd_add_value+4,_pd_add_value$1081	;volatile
  7561  00037E  C079  F081         	movff	??_pd_add_value+5,_pd_add_value$1081+1	;volatile
  7562  000382                     l736:
  7563                           
  7564                           ; BSR set to: 0
  7565  000382  D8F0               	call	PL38	;call to abstracted procedure
  7566  000384  5181               	movf	(_pd_add_value$1081+1)& (0+255),w,b	;volatile
  7567  000386  0A80               	xorlw	128
  7568  000388  6F76               	movwf	(??_pd_add_value+2)& (0+255),b
  7569  00038A  5174               	movf	??_pd_add_value& (0+255),w,b
  7570  00038C  5D80               	subwf	_pd_add_value$1081& (0+255),w,b	;volatile
  7571  00038E  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7572  000390  0A80               	xorlw	128
  7573  000392  5976               	subwfb	(??_pd_add_value+2)& (0+255),w,b
  7574  000394  E220               	bc	l724
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;peak_detector.c: 62: for (i = 0; i < d->config.lval_cnt; i++) {
  7578  000396  6B86               	clrf	pd_add_value@i& (0+255),b
  7579  000398  D013               	goto	l5639
  7580  00039A                     l5635:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;peak_detector.c: 63: d->last_v_buf[i] = d->cur_v;
  7584  00039A  EE20 F058          	lfsr	2,88
  7585  00039E  5170               	movf	pd_add_value@d& (0+255),w,b
  7586  0003A0  26D9               	addwf	fsr2l,f,c
  7587  0003A2  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7588  0003A4  22DA               	addwfc	fsr2h,f,c
  7589  0003A6  5186               	movf	pd_add_value@i& (0+255),w,b
  7590  0003A8  0D02               	mullw	2
  7591  0003AA  50F3               	movf	prodl,w,c
  7592  0003AC  2570               	addwf	pd_add_value@d& (0+255),w,b
  7593  0003AE  6EE1               	movwf	fsr1l,c
  7594  0003B0  50F4               	movf	prodh,w,c
  7595  0003B2  2171               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  7596  0003B4  6EE2               	movwf	fsr1h,c
  7597  0003B6  CFDE FFE6          	movff	postinc2,postinc1
  7598  0003BA  CFDD FFE5          	movff	postdec2,postdec1
  7599                           
  7600                           ; BSR set to: 0
  7601  0003BE  2B86               	incf	pd_add_value@i& (0+255),f,b
  7602  0003C0                     l5639:
  7603                           
  7604                           ; BSR set to: 0
  7605  0003C0  D8C9               	call	PL32	;call to abstracted procedure
  7606  0003C2  5D86               	subwf	pd_add_value@i& (0+255),w,b
  7607  0003C4  E3EA               	bnc	l5635
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;peak_detector.c: 64: }
  7611                           ;peak_detector.c: 65: d->status.alarm = FALSE;
  7612  0003C6  EE20 F05E          	lfsr	2,94
  7613  0003CA  5170               	movf	pd_add_value@d& (0+255),w,b
  7614  0003CC  26D9               	addwf	fsr2l,f,c
  7615  0003CE  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7616  0003D0  22DA               	addwfc	fsr2h,f,c
  7617  0003D2  0EFE               	movlw	-2
  7618  0003D4  16DF               	andwf	223,f,c
  7619  0003D6                     l724:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;peak_detector.c: 66: }
  7623                           ;peak_detector.c: 69: if (((d->wval)<0?(-(d->wval)):(d->wval)) < (10)) {
  7624  0003D6  D896               	call	PL8	;call to abstracted procedure
  7625  0003D8  BF75               	btfsc	(??_pd_add_value+1)& (0+255),7,b
  7626  0003DA  D00B               	goto	l5645
  7627                           
  7628                           ; BSR set to: 0
  7629  0003DC  EE20 F05C          	lfsr	2,92
  7630  0003E0  5170               	movf	pd_add_value@d& (0+255),w,b
  7631  0003E2  26D9               	addwf	fsr2l,f,c
  7632  0003E4  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7633  0003E6  22DA               	addwfc	fsr2h,f,c
  7634  0003E8  CFDE F082          	movff	postinc2,_pd_add_value$1082	;volatile
  7635  0003EC  CFDD F083          	movff	postdec2,_pd_add_value$1082+1	;volatile
  7636  0003F0  D00B               	goto	l5647
  7637  0003F2                     l5645:
  7638                           
  7639                           ; BSR set to: 0
  7640  0003F2  EE20 F05C          	lfsr	2,92
  7641  0003F6  5170               	movf	pd_add_value@d& (0+255),w,b
  7642  0003F8  26D9               	addwf	fsr2l,f,c
  7643  0003FA  D87B               	call	PL6	;call to abstracted procedure
  7644  0003FC  4B74               	infsnz	??_pd_add_value& (0+255),f,b
  7645  0003FE  2B75               	incf	(??_pd_add_value+1)& (0+255),f,b
  7646  000400  C074  F082         	movff	??_pd_add_value,_pd_add_value$1082	;volatile
  7647  000404  C075  F083         	movff	??_pd_add_value+1,_pd_add_value$1082+1	;volatile
  7648  000408                     l5647:
  7649                           
  7650                           ; BSR set to: 0
  7651  000408  5183               	movf	(_pd_add_value$1082+1)& (0+255),w,b	;volatile
  7652  00040A  0A80               	xorlw	128
  7653  00040C  0F80               	addlw	-128
  7654  00040E  0E0A               	movlw	10
  7655  000410  B4D8               	btfsc	status,2,c
  7656  000412  5D82               	subwf	_pd_add_value$1082& (0+255),w,b	;volatile
  7657  000414  E24F               	bc	l5669
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;peak_detector.c: 70: if (d->ref_v_idx == 9) {
  7661  000416  EE20 F053          	lfsr	2,83
  7662  00041A  5170               	movf	pd_add_value@d& (0+255),w,b
  7663  00041C  26D9               	addwf	fsr2l,f,c
  7664  00041E  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7665  000420  22DA               	addwfc	fsr2h,f,c
  7666  000422  0E09               	movlw	9
  7667  000424  62DF               	cpfseq	indf2,c
  7668  000426  D008               	goto	l5653
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;peak_detector.c: 71: d->status.firststart = FALSE;
  7672  000428  EE20 F05E          	lfsr	2,94
  7673  00042C  5170               	movf	pd_add_value@d& (0+255),w,b
  7674  00042E  26D9               	addwf	fsr2l,f,c
  7675  000430  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7676  000432  22DA               	addwfc	fsr2h,f,c
  7677  000434  0EFB               	movlw	-5
  7678  000436  16DF               	andwf	223,f,c
  7679  000438                     l5653:
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;peak_detector.c: 72: }
  7683                           ;peak_detector.c: 75: d->ref_v_buf[d->ref_v_idx] = d->cur_v;
  7684  000438  EE20 F058          	lfsr	2,88
  7685  00043C  5170               	movf	pd_add_value@d& (0+255),w,b
  7686  00043E  D89D               	call	PL40	;call to abstracted procedure
  7687  000440  D8B0               	call	PL46	;call to abstracted procedure
  7688  000442  6EE1               	movwf	fsr1l,c
  7689  000444  0E00               	movlw	0
  7690  000446  2175               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  7691  000448  6EE2               	movwf	fsr1h,c
  7692  00044A  CFDE FFE6          	movff	postinc2,postinc1
  7693  00044E  CFDD FFE5          	movff	postdec2,postdec1
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;peak_detector.c: 76: d->ref_v_idx = (d->ref_v_idx + 1) % d->config.rval_cnt;
  7697  000452  EE20 F053          	lfsr	2,83
  7698  000456  5170               	movf	pd_add_value@d& (0+255),w,b
  7699  000458  D890               	call	PL40	;call to abstracted procedure
  7700  00045A  6F74               	movwf	??_pd_add_value& (0+255),b
  7701  00045C  2974               	incf	??_pd_add_value& (0+255),w,b
  7702  00045E  6F68               	movwf	?___awmod& (0+255),b
  7703  000460  6B69               	clrf	(?___awmod+1)& (0+255),b
  7704  000462  0E00               	movlw	0
  7705  000464  2369               	addwfc	(?___awmod+1)& (0+255),f,b
  7706  000466  EE10 F064          	lfsr	1,100
  7707  00046A  5170               	movf	pd_add_value@d& (0+255),w,b
  7708  00046C  26E1               	addwf	fsr1l,f,c
  7709  00046E  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7710  000470  22E2               	addwfc	fsr1h,f,c
  7711  000472  50E7               	movf	indf1,w,c
  7712  000474  6F6A               	movwf	(?___awmod+2)& (0+255),b
  7713  000476  6B6B               	clrf	(?___awmod+3)& (0+255),b
  7714  000478  EC9B  F00D         	call	___awmod	;wreg free
  7715  00047C  5168               	movf	?___awmod& (0+255),w,b
  7716  00047E  6EDF               	movwf	indf2,c
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;peak_detector.c: 79: tmp = 0;
  7720  000480  6B84               	clrf	pd_add_value@tmp& (0+255),b
  7721  000482  6B85               	clrf	(pd_add_value@tmp+1)& (0+255),b
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;peak_detector.c: 80: for (i = 0; i < d->config.rval_cnt; i++) {
  7725  000484  6B86               	clrf	pd_add_value@i& (0+255),b
  7726  000486  D007               	goto	l5665
  7727  000488                     l5661:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;peak_detector.c: 81: tmp += d->ref_v_buf[i];
  7731  000488  5186               	movf	pd_add_value@i& (0+255),w,b
  7732  00048A  D88B               	call	PL46	;call to abstracted procedure
  7733  00048C  6ED9               	movwf	fsr2l,c
  7734  00048E  0E00               	movlw	0
  7735  000490  2175               	addwfc	(??_pd_add_value+1)& (0+255),w,b
  7736  000492  6EDA               	movwf	fsr2h,c
  7737                           
  7738                           ; BSR set to: 0
  7739  000494  D8B0               	call	PL72	;call to abstracted procedure
  7740  000496                     l5665:
  7741                           
  7742                           ; BSR set to: 0
  7743  000496  D8A0               	call	PL62	;call to abstracted procedure
  7744  000498  5D86               	subwf	pd_add_value@i& (0+255),w,b
  7745  00049A  E3F6               	bnc	l5661
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;peak_detector.c: 82: }
  7749                           ;peak_detector.c: 84: d->ref_v = tmp/d->config.rval_cnt;
  7750  00049C  C084  F068         	movff	pd_add_value@tmp,?___awdiv
  7751  0004A0  C085  F069         	movff	pd_add_value@tmp+1,?___awdiv+1
  7752  0004A4  D899               	call	PL62	;call to abstracted procedure
  7753  0004A6  6F6A               	movwf	(?___awdiv+2)& (0+255),b
  7754  0004A8  6B6B               	clrf	(?___awdiv+3)& (0+255),b
  7755  0004AA  ECB5  F00C         	call	___awdiv	;wreg free
  7756  0004AE  EE20 F054          	lfsr	2,84
  7757  0004B2  D86E               	call	PL44	;call to abstracted procedure
  7758  0004B4                     l5669:
  7759                           
  7760                           ; BSR set to: 0
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;peak_detector.c: 85: }
  7764                           ;peak_detector.c: 87: return FALSE;
  7765  0004B4  0C00               	retlw	0
  7766  0004B6                     __end_of_pd_add_value:
  7767                           	opt stack 0
  7768  0004B6                     PL2:
  7769                           	opt stack 23
  7770  0004B6  26D9               	addwf	fsr2l,f,c
  7771  0004B8  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7772  0004BA  22DA               	addwfc	fsr2h,f,c
  7773  0004BC  CFDE F074          	movff	postinc2,??_pd_add_value
  7774  0004C0  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7775  0004C4  EE20 F058          	lfsr	2,88
  7776  0004C8  5170               	movf	pd_add_value@d& (0+255),w,b
  7777  0004CA  26D9               	addwf	fsr2l,f,c
  7778  0004CC  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7779  0004CE  22DA               	addwfc	fsr2h,f,c
  7780  0004D0  CFDE F076          	movff	postinc2,??_pd_add_value+2
  7781  0004D4  CFDD F077          	movff	postdec2,??_pd_add_value+3
  7782  0004D8  5174               	movf	??_pd_add_value& (0+255),w,b
  7783  0004DA  5D76               	subwf	(??_pd_add_value+2)& (0+255),w,b
  7784  0004DC  0012               	return	
  7785  0004DE                     __end_ofPL2:
  7786                           	opt stack 0
  7787  0004DE                     PL4:
  7788                           	opt stack 23
  7789  0004DE  26D9               	addwf	fsr2l,f,c
  7790  0004E0  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7791  0004E2  22DA               	addwfc	fsr2h,f,c
  7792  0004E4  CFDE F076          	movff	postinc2,??_pd_add_value+2
  7793  0004E8  CFDD F077          	movff	postdec2,??_pd_add_value+3
  7794  0004EC  5174               	movf	??_pd_add_value& (0+255),w,b
  7795  0004EE  5D76               	subwf	(??_pd_add_value+2)& (0+255),w,b
  7796  0004F0  0012               	return	
  7797  0004F2                     __end_ofPL4:
  7798                           	opt stack 0
  7799  0004F2                     PL6:
  7800                           	opt stack 23
  7801  0004F2  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7802  0004F4  22DA               	addwfc	fsr2h,f,c
  7803  0004F6  CFDE F074          	movff	postinc2,??_pd_add_value
  7804  0004FA  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7805  0004FE  1F74               	comf	??_pd_add_value& (0+255),f,b
  7806  000500  1F75               	comf	(??_pd_add_value+1)& (0+255),f,b
  7807  000502  0012               	return	
  7808  000504                     __end_ofPL6:
  7809                           	opt stack 0
  7810  000504                     PL8:
  7811                           	opt stack 23
  7812  000504  EE20 F05C          	lfsr	2,92
  7813  000508  5170               	movf	pd_add_value@d& (0+255),w,b
  7814  00050A  26D9               	addwf	fsr2l,f,c
  7815  00050C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7816  00050E  22DA               	addwfc	fsr2h,f,c
  7817  000510  CFDE F074          	movff	postinc2,??_pd_add_value
  7818  000514  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7819  000518  0012               	return	
  7820  00051A                     __end_ofPL8:
  7821                           	opt stack 0
  7822  00051A                     PL12:
  7823                           	opt stack 23
  7824  00051A  EE20 F054          	lfsr	2,84
  7825  00051E  5170               	movf	pd_add_value@d& (0+255),w,b
  7826  000520  26D9               	addwf	fsr2l,f,c
  7827  000522  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7828  000524  22DA               	addwfc	fsr2h,f,c
  7829  000526  CFDE F074          	movff	postinc2,??_pd_add_value
  7830  00052A  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7831  00052E  EE20 F05A          	lfsr	2,90
  7832  000532  5170               	movf	pd_add_value@d& (0+255),w,b
  7833  000534  0012               	return	
  7834  000536                     __end_ofPL12:
  7835                           	opt stack 0
  7836  000536                     PL26:
  7837                           	opt stack 23
  7838  000536  5170               	movf	pd_add_value@d& (0+255),w,b
  7839  000538  26E1               	addwf	fsr1l,f,c
  7840  00053A  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7841  00053C  22E2               	addwfc	fsr1h,f,c
  7842  00053E  CFDE FFE6          	movff	postinc2,postinc1
  7843  000542  CFDD FFE5          	movff	postdec2,postdec1
  7844  000546  EE20 F05A          	lfsr	2,90
  7845  00054A  5170               	movf	pd_add_value@d& (0+255),w,b
  7846  00054C  26D9               	addwf	fsr2l,f,c
  7847  00054E  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7848  000550  22DA               	addwfc	fsr2h,f,c
  7849  000552  0012               	return	
  7850  000554                     __end_ofPL26:
  7851                           	opt stack 0
  7852  000554                     PL32:
  7853                           	opt stack 23
  7854  000554  EE20 F063          	lfsr	2,99
  7855  000558  5170               	movf	pd_add_value@d& (0+255),w,b
  7856  00055A  26D9               	addwf	fsr2l,f,c
  7857  00055C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7858  00055E  22DA               	addwfc	fsr2h,f,c
  7859  000560  50DF               	movf	indf2,w,c
  7860  000562  0012               	return	
  7861  000564                     __end_ofPL32:
  7862                           	opt stack 0
  7863  000564                     PL38:
  7864                           	opt stack 23
  7865  000564  EE20 F061          	lfsr	2,97
  7866  000568  5170               	movf	pd_add_value@d& (0+255),w,b
  7867  00056A  26D9               	addwf	fsr2l,f,c
  7868  00056C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7869  00056E  22DA               	addwfc	fsr2h,f,c
  7870  000570  CFDE F074          	movff	postinc2,??_pd_add_value
  7871  000574  CFDD F075          	movff	postdec2,??_pd_add_value+1
  7872  000578  0012               	return	
  7873  00057A                     __end_ofPL38:
  7874                           	opt stack 0
  7875  00057A                     PL40:
  7876                           	opt stack 23
  7877  00057A  26D9               	addwf	fsr2l,f,c
  7878  00057C  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7879  00057E  22DA               	addwfc	fsr2h,f,c
  7880  000580  EE10 F053          	lfsr	1,83
  7881  000584  5170               	movf	pd_add_value@d& (0+255),w,b
  7882  000586  26E1               	addwf	fsr1l,f,c
  7883  000588  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7884  00058A  22E2               	addwfc	fsr1h,f,c
  7885  00058C  50E7               	movf	indf1,w,c
  7886  00058E  0012               	return	
  7887  000590                     __end_ofPL40:
  7888                           	opt stack 0
  7889  000590                     PL44:
  7890                           	opt stack 23
  7891  000590  5170               	movf	pd_add_value@d& (0+255),w,b
  7892  000592  26D9               	addwf	fsr2l,f,c
  7893  000594  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7894  000596  22DA               	addwfc	fsr2h,f,c
  7895  000598  C068  FFDE         	movff	?___awdiv,postinc2
  7896  00059C  C069  FFDD         	movff	?___awdiv+1,postdec2
  7897  0005A0  0012               	return	
  7898  0005A2                     __end_ofPL44:
  7899                           	opt stack 0
  7900  0005A2                     PL46:
  7901                           	opt stack 23
  7902  0005A2  0D02               	mullw	2
  7903  0005A4  50F3               	movf	prodl,w,c
  7904  0005A6  2570               	addwf	pd_add_value@d& (0+255),w,b
  7905  0005A8  6F74               	movwf	??_pd_add_value& (0+255),b
  7906  0005AA  50F4               	movf	prodh,w,c
  7907  0005AC  2171               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  7908  0005AE  6F75               	movwf	(??_pd_add_value+1)& (0+255),b
  7909  0005B0  0E2B               	movlw	43
  7910  0005B2  2574               	addwf	??_pd_add_value& (0+255),w,b
  7911  0005B4  0012               	return	
  7912  0005B6                     __end_ofPL46:
  7913                           	opt stack 0
  7914  0005B6                     PL56:
  7915                           	opt stack 23
  7916  0005B6  EE20 F05E          	lfsr	2,94
  7917  0005BA  5170               	movf	pd_add_value@d& (0+255),w,b
  7918  0005BC  26D9               	addwf	fsr2l,f,c
  7919  0005BE  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7920  0005C0  22DA               	addwfc	fsr2h,f,c
  7921  0005C2  50DF               	movf	indf2,w,c
  7922  0005C4  6F74               	movwf	??_pd_add_value& (0+255),b
  7923  0005C6  0012               	return	
  7924  0005C8                     __end_ofPL56:
  7925                           	opt stack 0
  7926  0005C8                     PL60:
  7927                           	opt stack 23
  7928  0005C8  0D02               	mullw	2
  7929  0005CA  50F3               	movf	prodl,w,c
  7930  0005CC  2570               	addwf	pd_add_value@d& (0+255),w,b
  7931  0005CE  6ED9               	movwf	fsr2l,c
  7932  0005D0  50F4               	movf	prodh,w,c
  7933  0005D2  2171               	addwfc	(pd_add_value@d+1)& (0+255),w,b
  7934  0005D4  6EDA               	movwf	fsr2h,c
  7935  0005D6  0012               	return	
  7936  0005D8                     __end_ofPL60:
  7937                           	opt stack 0
  7938  0005D8                     PL62:
  7939                           	opt stack 23
  7940  0005D8  EE20 F064          	lfsr	2,100
  7941  0005DC  5170               	movf	pd_add_value@d& (0+255),w,b
  7942  0005DE  26D9               	addwf	fsr2l,f,c
  7943  0005E0  5171               	movf	(pd_add_value@d+1)& (0+255),w,b
  7944  0005E2  22DA               	addwfc	fsr2h,f,c
  7945  0005E4  50DF               	movf	indf2,w,c
  7946  0005E6  0012               	return	
  7947  0005E8                     __end_ofPL62:
  7948                           	opt stack 0
  7949  0005E8                     PL70:
  7950                           	opt stack 23
  7951  0005E8  6F78               	movwf	(??_pd_add_value+4)& (0+255),b
  7952  0005EA  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7953  0005EC  5977               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7954  0005EE  6F79               	movwf	(??_pd_add_value+5)& (0+255),b
  7955  0005F0  1F78               	comf	(??_pd_add_value+4)& (0+255),f,b
  7956  0005F2  1F79               	comf	(??_pd_add_value+5)& (0+255),f,b
  7957  0005F4  0012               	return	
  7958  0005F6                     __end_ofPL70:
  7959                           	opt stack 0
  7960  0005F6                     PL72:
  7961                           	opt stack 23
  7962  0005F6  50DE               	movf	postinc2,w,c
  7963  0005F8  2784               	addwf	pd_add_value@tmp& (0+255),f,b
  7964  0005FA  50DD               	movf	postdec2,w,c
  7965  0005FC  2385               	addwfc	(pd_add_value@tmp+1)& (0+255),f,b
  7966  0005FE  2B86               	incf	pd_add_value@i& (0+255),f,b
  7967  000600  0012               	return	
  7968  000602                     __end_ofPL72:
  7969                           	opt stack 0
  7970  000602                     PL82:
  7971                           	opt stack 23
  7972  000602  5175               	movf	(??_pd_add_value+1)& (0+255),w,b
  7973  000604  5977               	subwfb	(??_pd_add_value+3)& (0+255),w,b
  7974  000606  6F79               	movwf	(??_pd_add_value+5)& (0+255),b
  7975  000608  0012               	return	
  7976  00060A                     __end_ofPL82:
  7977                           	opt stack 0
  7978                           tosu	equ	0xFFF
  7979                           tosh	equ	0xFFE
  7980                           tosl	equ	0xFFD
  7981                           pclath	equ	0xFFA
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf1	equ	0xFE7
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _detection_defaults_set *****************
  8007 ;; Defined at:
  8008 ;;		line 149 in file "src/modules/detection.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;		None
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      unsigned char 
  8015 ;; Registers used:
  8016 ;;		wreg
  8017 ;; Tracked objects:
  8018 ;;		On entry : F/0
  8019 ;;		On exit  : F/0
  8020 ;;		Unchanged: FFFFFFF0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8022 ;;      Params:         0       0       0       0       0       0       0
  8023 ;;      Locals:         0       0       0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0
  8025 ;;      Totals:         0       0       0       0       0       0       0
  8026 ;;Total ram usage:        0 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    5
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_on_parameter_found
  8033 ;; This function uses a non-reentrant model
  8034 ;;
  8035                           
  8036                           	psect	text29
  8037  002238                     __ptext29:
  8038                           	opt stack 0
  8039  002238                     _detection_defaults_set:
  8040                           	opt stack 22
  8041                           
  8042                           ; BSR set to: 0
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;detection.c: 151: return TRUE;
  8046                           
  8047                           ; BSR set to: 0
  8048  002238  0C01               	retlw	1
  8049  00223A                     __end_of_detection_defaults_set:
  8050                           	opt stack 0
  8051                           tosu	equ	0xFFF
  8052                           tosh	equ	0xFFE
  8053                           tosl	equ	0xFFD
  8054                           pclath	equ	0xFFA
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodh	equ	0xFF4
  8060                           prodl	equ	0xFF3
  8061                           intcon	equ	0xFF2
  8062                           indf0	equ	0xFEF
  8063                           postinc0	equ	0xFEE
  8064                           fsr0h	equ	0xFEA
  8065                           fsr0l	equ	0xFE9
  8066                           wreg	equ	0xFE8
  8067                           indf1	equ	0xFE7
  8068                           postinc1	equ	0xFE6
  8069                           postdec1	equ	0xFE5
  8070                           fsr1h	equ	0xFE2
  8071                           fsr1l	equ	0xFE1
  8072                           indf2	equ	0xFDF
  8073                           postinc2	equ	0xFDE
  8074                           postdec2	equ	0xFDD
  8075                           fsr2h	equ	0xFDA
  8076                           fsr2l	equ	0xFD9
  8077                           status	equ	0xFD8
  8078                           
  8079 ;; *************** function _potentiometer_set *****************
  8080 ;; Defined at:
  8081 ;;		line 11 in file "src/modules/potentiometer.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;  value           1    wreg     unsigned char 
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;  value           1    8[BANK0 ] unsigned char 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  1    wreg      unsigned char 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0
  8090 ;; Tracked objects:
  8091 ;;		On entry : F/0
  8092 ;;		On exit  : F/0
  8093 ;;		Unchanged: FFFFFFF0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8095 ;;      Params:         0       0       0       0       0       0       0
  8096 ;;      Locals:         0       1       0       0       0       0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0
  8098 ;;      Totals:         0       1       0       0       0       0       0
  8099 ;;Total ram usage:        1 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    5
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		_on_parameter_found
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text30
  8110  002174                     __ptext30:
  8111                           	opt stack 0
  8112  002174                     _potentiometer_set:
  8113                           	opt stack 22
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;potentiometer_set@value stored from wreg
  8117  002174  CFE8 F068          	movff	wreg,potentiometer_set@value
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;potentiometer.c: 12: if (value < 16) {
  8121  002178  0E10               	movlw	16
  8122  00217A  6168               	cpfslt	potentiometer_set@value& (0+255),b
  8123  00217C  0C00               	retlw	0
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;potentiometer.c: 13: LATD = value&0x0f;
  8127  00217E  5168               	movf	potentiometer_set@value& (0+255),w,b
  8128  002180  0B0F               	andlw	15
  8129  002182  6E8C               	movwf	3980,c	;volatile
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;potentiometer.c: 14: g_CONFIG.potentiometer = value;
  8133  002184  C068  F0E3         	movff	potentiometer_set@value,_g_CONFIG+3	;volatile
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;potentiometer.c: 15: return TRUE;
  8137  002188  0C01               	retlw	1
  8138  00218A                     __end_of_potentiometer_set:
  8139                           	opt stack 0
  8140                           tosu	equ	0xFFF
  8141                           tosh	equ	0xFFE
  8142                           tosl	equ	0xFFD
  8143                           pclath	equ	0xFFA
  8144                           tblptru	equ	0xFF8
  8145                           tblptrh	equ	0xFF7
  8146                           tblptrl	equ	0xFF6
  8147                           tablat	equ	0xFF5
  8148                           prodh	equ	0xFF4
  8149                           prodl	equ	0xFF3
  8150                           intcon	equ	0xFF2
  8151                           indf0	equ	0xFEF
  8152                           postinc0	equ	0xFEE
  8153                           fsr0h	equ	0xFEA
  8154                           fsr0l	equ	0xFE9
  8155                           wreg	equ	0xFE8
  8156                           indf1	equ	0xFE7
  8157                           postinc1	equ	0xFE6
  8158                           postdec1	equ	0xFE5
  8159                           fsr1h	equ	0xFE2
  8160                           fsr1l	equ	0xFE1
  8161                           indf2	equ	0xFDF
  8162                           postinc2	equ	0xFDE
  8163                           postdec2	equ	0xFDD
  8164                           fsr2h	equ	0xFDA
  8165                           fsr2l	equ	0xFD9
  8166                           status	equ	0xFD8
  8167                           
  8168 ;; *************** function _printf *****************
  8169 ;; Defined at:
  8170 ;;		line 465 in file "C:\Program Files\Microchip\xc8\v1.12\sources\doprnt.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  f               2   25[BANK0 ] PTR const unsigned char 
  8173 ;;		 -> STR_33(4), STR_32(5), STR_31(4), STR_30(5), 
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;  _val            5   34[BANK0 ] struct .
  8176 ;;  c               1   39[BANK0 ] char 
  8177 ;;  prec            1   33[BANK0 ] char 
  8178 ;;  flag            1   32[BANK0 ] unsigned char 
  8179 ;;  ap              1   31[BANK0 ] PTR void [1]
  8180 ;;		 -> ?_printf(2), 
  8181 ;; Return value:  Size  Location     Type
  8182 ;;                  2   25[BANK0 ] int 
  8183 ;; Registers used:
  8184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8185 ;; Tracked objects:
  8186 ;;		On entry : F/0
  8187 ;;		On exit  : F/0
  8188 ;;		Unchanged: FFFFFFF0/0
  8189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8190 ;;      Params:         0       4       0       0       0       0       0
  8191 ;;      Locals:         0       9       0       0       0       0       0
  8192 ;;      Temps:          0       2       0       0       0       0       0
  8193 ;;      Totals:         0      15       0       0       0       0       0
  8194 ;;Total ram usage:       15 bytes
  8195 ;; Hardware stack levels used:    1
  8196 ;; Hardware stack levels required when called:    7
  8197 ;; This function calls:
  8198 ;;		_putch
  8199 ;;		___lwdiv
  8200 ;;		___lwmod
  8201 ;; This function is called by:
  8202 ;;		_on_parameter_found
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           	psect	text31
  8207  00145A                     __ptext31:
  8208                           	opt stack 0
  8209  00145A                     _printf:
  8210                           	opt stack 20
  8211                           
  8212                           ; BSR set to: 0
  8213                           ;doprnt.c: 466: va_list ap;
  8214                           ;doprnt.c: 499: signed char c;
  8215                           ;doprnt.c: 506: signed char prec;
  8216                           ;doprnt.c: 508: unsigned char flag;
  8217                           ;doprnt.c: 527: union {
  8218                           ;doprnt.c: 528: unsigned int _val;
  8219                           ;doprnt.c: 529: struct {
  8220                           ;doprnt.c: 530: const char * _cp;
  8221                           ;doprnt.c: 531: unsigned _len;
  8222                           ;doprnt.c: 532: } _str;
  8223                           ;doprnt.c: 533: } _val;
  8224                           ;doprnt.c: 542: *ap = __va_start();
  8225                           
  8226                           ; BSR set to: 0
  8227  00145A  0E7B               	movlw	low (?_printf+2)
  8228  00145C  6F7F               	movwf	printf@ap& (0+255),b
  8229                           
  8230                           ;doprnt.c: 545: while(c = *f++) {
  8231  00145E  D05C               	goto	l5761
  8232  001460                     l5717:
  8233                           
  8234                           ; BSR set to: 0
  8235                           ;doprnt.c: 547: if(c != '%')
  8236  001460  5187               	movf	printf@c& (0+255),w,b
  8237  001462  0A25               	xorlw	37
  8238  001464  E004               	bz	l1059
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;doprnt.c: 549: {
  8242                           ;doprnt.c: 550: (putch(c) );
  8243  001466  5187               	movf	printf@c& (0+255),w,b
  8244  001468  ECAD  F010         	call	_putch
  8245                           
  8246                           ;doprnt.c: 551: continue;
  8247  00146C  D055               	goto	l5761
  8248  00146E                     l1059:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;doprnt.c: 552: }
  8252                           ;doprnt.c: 557: flag = 0;
  8253  00146E  6B80               	clrf	printf@flag& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           
  8257                           ;doprnt.c: 644: switch(c = *f++) {
  8258  001470  D857               	call	PL36	;call to abstracted procedure
  8259  001472  5187               	movf	printf@c& (0+255),w,b
  8260                           
  8261                           ; Switch size 1, requested type "space"
  8262                           ; Number of cases is 3, Range of values is 0 to 105
  8263                           ; switch strategies available:
  8264                           ; Name         Instructions Cycles
  8265                           ; simple_byte           10     6 (average)
  8266                           ;	Chosen strategy is simple_byte
  8267  001474  B4D8               	btfsc	status,2,c
  8268  001476  0012               	return	
  8269  001478  0A64               	xorlw	100	; case 100
  8270  00147A  A4D8               	btfss	status,2,c
  8271  00147C  0A0D               	xorlw	13	; case 105
  8272  00147E  E14C               	bnz	l5761
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;doprnt.c: 1260: {
  8276                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8277  001480  517F               	movf	printf@ap& (0+255),w,b
  8278  001482  6ED9               	movwf	fsr2l,c
  8279  001484  6ADA               	clrf	fsr2h,c
  8280  001486  CFDE F082          	movff	postinc2,printf@_val
  8281  00148A  CFDD F083          	movff	postdec2,printf@_val+1
  8282                           
  8283                           ; BSR set to: 0
  8284  00148E  0E02               	movlw	2
  8285  001490  277F               	addwf	printf@ap& (0+255),f,b
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  8289  001492  AF83               	btfss	(printf@_val+1)& (0+255),7,b
  8290  001494  D006               	goto	l5735
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;doprnt.c: 1269: flag |= 0x03;
  8294  001496  0E03               	movlw	3
  8295  001498  1380               	iorwf	printf@flag& (0+255),f,b
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;doprnt.c: 1270: _val._val = -_val._val;
  8299  00149A  6D82               	negf	printf@_val& (0+255),b
  8300  00149C  1F83               	comf	(printf@_val+1)& (0+255),f,b
  8301  00149E  B0D8               	btfsc	status,0,c
  8302  0014A0  2B83               	incf	(printf@_val+1)& (0+255),f,b
  8303  0014A2                     l5735:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;doprnt.c: 1271: }
  8307                           ;doprnt.c: 1273: }
  8308                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8309  0014A2  0E01               	movlw	1
  8310  0014A4  6F87               	movwf	printf@c& (0+255),b
  8311  0014A6                     l5741:
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  8315  0014A6  5187               	movf	printf@c& (0+255),w,b
  8316  0014A8  D846               	call	PL50	;call to abstracted procedure
  8317  0014AA  CFF5 F07D          	movff	tablat,??_printf
  8318  0014AE  0009               	tblrd		*+
  8319  0014B0  CFF5 F07E          	movff	tablat,??_printf+1
  8320  0014B4  517D               	movf	??_printf& (0+255),w,b
  8321  0014B6  5D82               	subwf	printf@_val& (0+255),w,b
  8322  0014B8  517E               	movf	(??_printf+1)& (0+255),w,b
  8323  0014BA  5983               	subwfb	(printf@_val+1)& (0+255),w,b
  8324  0014BC  E304               	bnc	l5749
  8325                           
  8326                           ; BSR set to: 0
  8327  0014BE  2B87               	incf	printf@c& (0+255),f,b
  8328                           
  8329                           ; BSR set to: 0
  8330  0014C0  5187               	movf	printf@c& (0+255),w,b
  8331  0014C2  0A05               	xorlw	5
  8332  0014C4  E1F0               	bnz	l5741
  8333  0014C6                     l5749:
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;doprnt.c: 1429: {
  8337                           ;doprnt.c: 1445: if(flag & 0x03)
  8338  0014C6  5180               	movf	printf@flag& (0+255),w,b
  8339  0014C8  0B03               	andlw	3
  8340  0014CA  E003               	bz	l5753
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;doprnt.c: 1446: (putch('-') );
  8344  0014CC  0E2D               	movlw	45
  8345  0014CE  ECAD  F010         	call	_putch
  8346  0014D2                     l5753:
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;doprnt.c: 1476: }
  8350                           ;doprnt.c: 1479: prec = c;
  8351  0014D2  C087  F081         	movff	printf@c,printf@prec
  8352                           
  8353                           ;doprnt.c: 1481: while(prec--) {
  8354  0014D6  D01C               	goto	l5759
  8355  0014D8                     l5755:
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;doprnt.c: 1485: {
  8359                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  8360  0014D8  5181               	movf	printf@prec& (0+255),w,b
  8361  0014DA  D82D               	call	PL50	;call to abstracted procedure
  8362  0014DC  CFF5 F06A          	movff	tablat,?___lwdiv+2
  8363  0014E0  000A               	tblrd		*-
  8364  0014E2  CFF5 F06B          	movff	tablat,?___lwdiv+3
  8365  0014E6  C082  F068         	movff	printf@_val,?___lwdiv
  8366  0014EA  C083  F069         	movff	printf@_val+1,?___lwdiv+1
  8367  0014EE  ECE9  F00E         	call	___lwdiv	;wreg free
  8368  0014F2  C068  F06F         	movff	?___lwdiv,?___lwmod
  8369  0014F6  C069  F070         	movff	?___lwdiv+1,?___lwmod+1
  8370  0014FA  6B72               	clrf	(?___lwmod+3)& (0+255),b
  8371  0014FC  0E0A               	movlw	10
  8372  0014FE  6F71               	movwf	(?___lwmod+2)& (0+255),b
  8373  001500  EC50  F00F         	call	___lwmod	;wreg free
  8374  001504  516F               	movf	?___lwmod& (0+255),w,b
  8375  001506  0F30               	addlw	48
  8376  001508  6F87               	movwf	printf@c& (0+255),b
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;doprnt.c: 1530: }
  8380                           ;doprnt.c: 1531: (putch(c) );
  8381  00150A  5187               	movf	printf@c& (0+255),w,b
  8382  00150C  ECAD  F010         	call	_putch
  8383  001510                     l5759:
  8384                           
  8385                           ; BSR set to: 0
  8386  001510  0781               	decf	printf@prec& (0+255),f,b
  8387  001512  0100               	movlb	0	; () banked
  8388  001514  2981               	incf	printf@prec& (0+255),w,b
  8389  001516  E1E0               	bnz	l5755
  8390  001518                     l5761:
  8391                           
  8392                           ; BSR set to: 0
  8393  001518  D803               	call	PL36	;call to abstracted procedure
  8394  00151A  6787               	tstfsz	printf@c& (0+255),b
  8395  00151C  D7A1               	goto	l5717
  8396  00151E  0012               	return	
  8397  001520                     __end_of_printf:
  8398                           	opt stack 0
  8399  001520                     PL36:
  8400                           	opt stack 20
  8401  001520  C079  FFF6         	movff	printf@f,tblptrl
  8402  001524  C07A  FFF7         	movff	printf@f+1,tblptrh
  8403  001528  4B79               	infsnz	printf@f& (0+255),f,b
  8404  00152A  2B7A               	incf	(printf@f+1)& (0+255),f,b
  8405  00152C  0008               	tblrd		*
  8406  00152E  CFF5 F087          	movff	tablat,printf@c
  8407  001532  0100               	movlb	0	; () banked
  8408  001534  0012               	return	
  8409  001536                     __end_ofPL36:
  8410                           	opt stack 0
  8411  001536                     PL50:
  8412                           	opt stack 20
  8413  001536  0D02               	mullw	2
  8414  001538  0E68               	movlw	low _dpowers
  8415  00153A  24F3               	addwf	prodl,w,c
  8416  00153C  6EF6               	movwf	tblptrl,c
  8417  00153E  0E7D               	movlw	high _dpowers
  8418  001540  20F4               	addwfc	prodh,w,c
  8419  001542  6EF7               	movwf	tblptrh,c
  8420  001544  0009               	tblrd		*+
  8421  001546  0012               	return	
  8422  001548                     __end_ofPL50:
  8423                           	opt stack 0
  8424                           tosu	equ	0xFFF
  8425                           tosh	equ	0xFFE
  8426                           tosl	equ	0xFFD
  8427                           pclath	equ	0xFFA
  8428                           tblptru	equ	0xFF8
  8429                           tblptrh	equ	0xFF7
  8430                           tblptrl	equ	0xFF6
  8431                           tablat	equ	0xFF5
  8432                           prodh	equ	0xFF4
  8433                           prodl	equ	0xFF3
  8434                           intcon	equ	0xFF2
  8435                           indf0	equ	0xFEF
  8436                           postinc0	equ	0xFEE
  8437                           fsr0h	equ	0xFEA
  8438                           fsr0l	equ	0xFE9
  8439                           wreg	equ	0xFE8
  8440                           indf1	equ	0xFE7
  8441                           postinc1	equ	0xFE6
  8442                           postdec1	equ	0xFE5
  8443                           fsr1h	equ	0xFE2
  8444                           fsr1l	equ	0xFE1
  8445                           indf2	equ	0xFDF
  8446                           postinc2	equ	0xFDE
  8447                           postdec2	equ	0xFDD
  8448                           fsr2h	equ	0xFDA
  8449                           fsr2l	equ	0xFD9
  8450                           status	equ	0xFD8
  8451                           
  8452 ;; *************** function _putch *****************
  8453 ;; Defined at:
  8454 ;;		line 61 in file "src/modules/serialport.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;  byte            1    wreg     unsigned char 
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;  byte            1   24[BANK0 ] unsigned char 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;		None               void
  8461 ;; Registers used:
  8462 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : F/0
  8465 ;;		On exit  : F/0
  8466 ;;		Unchanged: FFFFFFF0/0
  8467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8468 ;;      Params:         0       0       0       0       0       0       0
  8469 ;;      Locals:         0       1       0       0       0       0       0
  8470 ;;      Temps:          0       0       0       0       0       0       0
  8471 ;;      Totals:         0       1       0       0       0       0       0
  8472 ;;Total ram usage:        1 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    6
  8475 ;; This function calls:
  8476 ;;		_rd_buffer_put
  8477 ;; This function is called by:
  8478 ;;		_printf
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           	psect	text32
  8483  00215A                     __ptext32:
  8484                           	opt stack 0
  8485  00215A                     _putch:
  8486                           	opt stack 20
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;putch@byte stored from wreg
  8490  00215A  CFE8 F078          	movff	wreg,putch@byte
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;serialport.c: 62: rd_buffer_put(&g_tx_buffer, &byte);
  8494  00215E  0E01               	movlw	high _g_tx_buffer
  8495  002160  0100               	movlb	0	; () banked
  8496  002162  6F69               	movwf	(?_rd_buffer_put+1)& (0+255),b
  8497  002164  0E00               	movlw	low _g_tx_buffer
  8498  002166  6F68               	movwf	?_rd_buffer_put& (0+255),b
  8499  002168  0E00               	movlw	high putch@byte
  8500  00216A  6F6B               	movwf	(?_rd_buffer_put+3)& (0+255),b
  8501  00216C  0E78               	movlw	low putch@byte
  8502  00216E  6F6A               	movwf	(?_rd_buffer_put+2)& (0+255),b
  8503  002170  EFB3  F008         	goto	_rd_buffer_put	;wreg free
  8504  002174                     __end_of_putch:
  8505                           	opt stack 0
  8506                           tosu	equ	0xFFF
  8507                           tosh	equ	0xFFE
  8508                           tosl	equ	0xFFD
  8509                           pclath	equ	0xFFA
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           intcon	equ	0xFF2
  8517                           indf0	equ	0xFEF
  8518                           postinc0	equ	0xFEE
  8519                           fsr0h	equ	0xFEA
  8520                           fsr0l	equ	0xFE9
  8521                           wreg	equ	0xFE8
  8522                           indf1	equ	0xFE7
  8523                           postinc1	equ	0xFE6
  8524                           postdec1	equ	0xFE5
  8525                           fsr1h	equ	0xFE2
  8526                           fsr1l	equ	0xFE1
  8527                           indf2	equ	0xFDF
  8528                           postinc2	equ	0xFDE
  8529                           postdec2	equ	0xFDD
  8530                           fsr2h	equ	0xFDA
  8531                           fsr2l	equ	0xFD9
  8532                           status	equ	0xFD8
  8533                           
  8534 ;; *************** function _rd_buffer_put *****************
  8535 ;; Defined at:
  8536 ;;		line 151 in file "src/modules/rd_buffer.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  pbuffer         2    8[BANK0 ] PTR struct .
  8539 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  8540 ;;  prec            2   10[BANK0 ] PTR unsigned char 
  8541 ;;		 -> STR_35(5), STR_34(6), STR_29(6), STR_28(5), 
  8542 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;  ind             2   22[BANK0 ] int 
  8545 ;;  mes_rec         2   18[BANK0 ] PTR volatile unsigned ch
  8546 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
  8547 ;;  sz              2   20[BANK0 ] int 
  8548 ;;  result          1    0        unsigned char 
  8549 ;; Return value:  Size  Location     Type
  8550 ;;                  1    wreg      unsigned char 
  8551 ;; Registers used:
  8552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  8553 ;; Tracked objects:
  8554 ;;		On entry : F/0
  8555 ;;		On exit  : F/0
  8556 ;;		Unchanged: FFFFFFF0/0
  8557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8558 ;;      Params:         0       4       0       0       0       0       0
  8559 ;;      Locals:         0       7       0       0       0       0       0
  8560 ;;      Temps:          0       5       0       0       0       0       0
  8561 ;;      Totals:         0      16       0       0       0       0       0
  8562 ;;Total ram usage:       16 bytes
  8563 ;; Hardware stack levels used:    1
  8564 ;; Hardware stack levels required when called:    5
  8565 ;; This function calls:
  8566 ;;		Nothing
  8567 ;; This function is called by:
  8568 ;;		_serialport_write
  8569 ;;		_putch
  8570 ;; This function uses a non-reentrant model
  8571 ;;
  8572                           
  8573                           	psect	text33
  8574  001166                     __ptext33:
  8575                           	opt stack 0
  8576  001166                     _rd_buffer_put:
  8577                           	opt stack 20
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;rd_buffer.c: 153: SIZE sz ;
  8581                           ;rd_buffer.c: 154: sz = pbuffer->head.last - pbuffer->head.first;
  8582                           
  8583                           ; BSR set to: 0
  8584                           
  8585                           ; BSR set to: 0
  8586  001166  EE20 F002          	lfsr	2,2
  8587  00116A  D873               	call	PL58	;call to abstracted procedure
  8588  00116C  C068  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  8589  001170  C069  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  8590  001174  CFDE F06E          	movff	postinc2,??_rd_buffer_put+2
  8591  001178  CFDD F06F          	movff	postdec2,??_rd_buffer_put+3
  8592  00117C  516C               	movf	??_rd_buffer_put& (0+255),w,b
  8593  00117E  5D6E               	subwf	(??_rd_buffer_put+2)& (0+255),w,b
  8594  001180  6F74               	movwf	rd_buffer_put@sz& (0+255),b
  8595  001182  516D               	movf	(??_rd_buffer_put+1)& (0+255),w,b
  8596  001184  596F               	subwfb	(??_rd_buffer_put+3)& (0+255),w,b
  8597  001186  6F75               	movwf	(rd_buffer_put@sz+1)& (0+255),b
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;rd_buffer.c: 156: if(sz < 0 ) {
  8601  001188  AF75               	btfss	(rd_buffer_put@sz+1)& (0+255),7,b
  8602  00118A  D00A               	goto	l221
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;rd_buffer.c: 157: sz += pbuffer->head.size;
  8606  00118C  EE20 F004          	lfsr	2,4
  8607  001190  5168               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8608  001192  26D9               	addwf	fsr2l,f,c
  8609  001194  5169               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8610  001196  22DA               	addwfc	fsr2h,f,c
  8611  001198  50DE               	movf	postinc2,w,c
  8612  00119A  2774               	addwf	rd_buffer_put@sz& (0+255),f,b
  8613  00119C  50DD               	movf	postdec2,w,c
  8614  00119E  2375               	addwfc	(rd_buffer_put@sz+1)& (0+255),f,b
  8615  0011A0                     l221:
  8616                           
  8617                           ; BSR set to: 0
  8618                           ;rd_buffer.c: 158: }
  8619                           ;rd_buffer.c: 159: if(sz < (pbuffer->head.size - 1))
  8620  0011A0  EE20 F004          	lfsr	2,4
  8621  0011A4  D856               	call	PL58	;call to abstracted procedure
  8622  0011A6  0EFF               	movlw	255
  8623  0011A8  256C               	addwf	??_rd_buffer_put& (0+255),w,b
  8624  0011AA  6F6E               	movwf	(??_rd_buffer_put+2)& (0+255),b
  8625  0011AC  0EFF               	movlw	255
  8626  0011AE  216D               	addwfc	(??_rd_buffer_put+1)& (0+255),w,b
  8627  0011B0  6F6F               	movwf	(??_rd_buffer_put+3)& (0+255),b
  8628  0011B2  5175               	movf	(rd_buffer_put@sz+1)& (0+255),w,b
  8629  0011B4  0A80               	xorlw	128
  8630  0011B6  6F70               	movwf	(??_rd_buffer_put+4)& (0+255),b
  8631  0011B8  516E               	movf	(??_rd_buffer_put+2)& (0+255),w,b
  8632  0011BA  5D74               	subwf	rd_buffer_put@sz& (0+255),w,b
  8633  0011BC  516F               	movf	(??_rd_buffer_put+3)& (0+255),w,b
  8634  0011BE  0A80               	xorlw	128
  8635  0011C0  5970               	subwfb	(??_rd_buffer_put+4)& (0+255),w,b
  8636  0011C2  B0D8               	btfsc	status,0,c
  8637  0011C4  0012               	return	
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;rd_buffer.c: 160: {
  8641                           ;rd_buffer.c: 161: INT ind = pbuffer->head.last;
  8642  0011C6  C068  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  8643  0011CA  C069  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  8644  0011CE  CFDE F076          	movff	postinc2,rd_buffer_put@ind
  8645  0011D2  CFDD F077          	movff	postdec2,rd_buffer_put@ind+1
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;rd_buffer.c: 162: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
  8649  0011D6  C068  F06C         	movff	rd_buffer_put@pbuffer,??_rd_buffer_put
  8650  0011DA  C069  F06D         	movff	rd_buffer_put@pbuffer+1,??_rd_buffer_put+1
  8651  0011DE  5176               	movf	rd_buffer_put@ind& (0+255),w,b
  8652  0011E0  276C               	addwf	??_rd_buffer_put& (0+255),f,b
  8653  0011E2  5177               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  8654  0011E4  236D               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  8655  0011E6  0E06               	movlw	6
  8656  0011E8  276C               	addwf	??_rd_buffer_put& (0+255),f,b
  8657  0011EA  0E00               	movlw	0
  8658  0011EC  236D               	addwfc	(??_rd_buffer_put+1)& (0+255),f,b
  8659  0011EE  C06C  F072         	movff	??_rd_buffer_put,rd_buffer_put@mes_rec
  8660  0011F2  C06D  F073         	movff	??_rd_buffer_put+1,rd_buffer_put@mes_rec+1
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;rd_buffer.c: 163: (*mes_rec) = (*prec);
  8664  0011F6  C06A  FFF6         	movff	rd_buffer_put@prec,tblptrl
  8665  0011FA  C06B  FFF7         	movff	rd_buffer_put@prec+1,tblptrh
  8666  0011FE  6AF8               	clrf	tblptru,c
  8667  001200  C072  FFD9         	movff	rd_buffer_put@mes_rec,fsr2l
  8668  001204  C073  FFDA         	movff	rd_buffer_put@mes_rec+1,fsr2h
  8669  001208  0E05               	movlw	(high __ramtop+-1)
  8670  00120A  64F7               	cpfsgt	tblptrh,c
  8671  00120C  D003               	bra	u4647
  8672  00120E  0008               	tblrd		*
  8673  001210  50F5               	movf	tablat,w,c
  8674  001212  D002               	bra	u4640
  8675  001214                     u4647:
  8676  001214  ECAD  F008         	call	PL10	;call to abstracted procedure
  8677  001218                     u4640:
  8678  001218  6EDF               	movwf	indf2,c
  8679                           
  8680                           ;rd_buffer.c: 164: ind++;
  8681  00121A  0100               	movlb	0	; () banked
  8682  00121C  4B76               	infsnz	rd_buffer_put@ind& (0+255),f,b
  8683  00121E  2B77               	incf	(rd_buffer_put@ind+1)& (0+255),f,b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;rd_buffer.c: 166: if(ind == pbuffer->head.size ) {
  8687  001220  EE20 F004          	lfsr	2,4
  8688  001224  5168               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8689  001226  26D9               	addwf	fsr2l,f,c
  8690  001228  5169               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8691  00122A  22DA               	addwfc	fsr2h,f,c
  8692  00122C  52DE               	movf	postinc2,f,c
  8693  00122E  5177               	movf	(rd_buffer_put@ind+1)& (0+255),w,b
  8694  001230  18DD               	xorwf	postdec2,w,c
  8695  001232  C076  FFE8         	movff	rd_buffer_put@ind,wreg
  8696  001236  B4D8               	btfsc	status,2,c
  8697  001238  18DF               	xorwf	indf2,w,c
  8698  00123A  E102               	bnz	l5037
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;rd_buffer.c: 167: ind = 0;
  8702  00123C  6B76               	clrf	rd_buffer_put@ind& (0+255),b
  8703  00123E  6B77               	clrf	(rd_buffer_put@ind+1)& (0+255),b
  8704  001240                     l5037:
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;rd_buffer.c: 168: }
  8708                           ;rd_buffer.c: 169: pbuffer->head.last = ind;
  8709  001240  C068  FFD9         	movff	rd_buffer_put@pbuffer,fsr2l
  8710  001244  C069  FFDA         	movff	rd_buffer_put@pbuffer+1,fsr2h
  8711  001248  C076  FFDE         	movff	rd_buffer_put@ind,postinc2
  8712  00124C  C077  FFDD         	movff	rd_buffer_put@ind+1,postdec2
  8713                           
  8714                           ; BSR set to: 0
  8715                           
  8716                           ; BSR set to: 0
  8717  001250  0012               	return	
  8718  001252                     __end_of_rd_buffer_put:
  8719                           	opt stack 0
  8720  001252                     PL58:
  8721                           	opt stack 20
  8722  001252  5168               	movf	rd_buffer_put@pbuffer& (0+255),w,b
  8723  001254  26D9               	addwf	fsr2l,f,c
  8724  001256  5169               	movf	(rd_buffer_put@pbuffer+1)& (0+255),w,b
  8725  001258  22DA               	addwfc	fsr2h,f,c
  8726  00125A  CFDE F06C          	movff	postinc2,??_rd_buffer_put
  8727  00125E  CFDD F06D          	movff	postdec2,??_rd_buffer_put+1
  8728  001262  0012               	return	
  8729  001264                     __end_ofPL58:
  8730                           	opt stack 0
  8731                           tosu	equ	0xFFF
  8732                           tosh	equ	0xFFE
  8733                           tosl	equ	0xFFD
  8734                           pclath	equ	0xFFA
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           indf0	equ	0xFEF
  8743                           postinc0	equ	0xFEE
  8744                           fsr0h	equ	0xFEA
  8745                           fsr0l	equ	0xFE9
  8746                           wreg	equ	0xFE8
  8747                           indf1	equ	0xFE7
  8748                           postinc1	equ	0xFE6
  8749                           postdec1	equ	0xFE5
  8750                           fsr1h	equ	0xFE2
  8751                           fsr1l	equ	0xFE1
  8752                           indf2	equ	0xFDF
  8753                           postinc2	equ	0xFDE
  8754                           postdec2	equ	0xFDD
  8755                           fsr2h	equ	0xFDA
  8756                           fsr2l	equ	0xFD9
  8757                           status	equ	0xFD8
  8758                           
  8759 ;; *************** function _startup *****************
  8760 ;; Defined at:
  8761 ;;		line 16 in file "src/startup/startup.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;  result          1   17[BANK0 ] enum E3389
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  1    wreg      enum E3389
  8768 ;; Registers used:
  8769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : F/0
  8773 ;;		Unchanged: FFFFFFF0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8775 ;;      Params:         0       0       0       0       0       0       0
  8776 ;;      Locals:         0       1       0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0
  8778 ;;      Totals:         0       1       0       0       0       0       0
  8779 ;;Total ram usage:        1 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    8
  8782 ;; This function calls:
  8783 ;;		_gpio_init
  8784 ;;		_sysclk_init
  8785 ;;		_adc_init
  8786 ;;		_uart_init
  8787 ;;		_uart_puts
  8788 ;;		_serialport_startup
  8789 ;; This function is called by:
  8790 ;;		_main
  8791 ;; This function uses a non-reentrant model
  8792 ;;
  8793                           
  8794                           	psect	text34
  8795  001E1C                     __ptext34:
  8796                           	opt stack 0
  8797  001E1C                     _startup:
  8798                           	opt stack 22
  8799                           
  8800                           ;startup.c: 17: ResultSuccess_t result = RESULT_FAIL;
  8801                           
  8802                           ; BSR set to: 0
  8803  001E1C  0100               	movlb	0	; () banked
  8804  001E1E  6B71               	clrf	startup@result& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;startup.c: 18: gpio_init();
  8808  001E20  ECE0  F010         	call	_gpio_init	;wreg free
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;startup.c: 19: sysclk_init();
  8812  001E24  EC15  F011         	call	_sysclk_init	;wreg free
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;startup.c: 20: adc_init();
  8816  001E28  ECD7  F010         	call	_adc_init	;wreg free
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;startup.c: 21: uart_init();
  8820  001E2C  EC66  F010         	call	_uart_init	;wreg free
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;startup.c: 22: events[(5)] = (PEVENT)serialport_task;
  8824  001E30  0E18               	movlw	high _serialport_task
  8825  001E32  6FBC               	movwf	(_events+11)& (0+255),b	;volatile
  8826  001E34  0EF0               	movlw	low _serialport_task
  8827  001E36  6FBB               	movwf	(_events+10)& (0+255),b	;volatile
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;startup.c: 23: events[(2)] = (PEVENT)detection_task;
  8831  001E38  0E19               	movlw	high _detection_task
  8832  001E3A  6FB6               	movwf	(_events+5)& (0+255),b	;volatile
  8833  001E3C  0EE2               	movlw	low _detection_task
  8834  001E3E  6FB5               	movwf	(_events+4)& (0+255),b	;volatile
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;startup.c: 25: uart_puts("hello",100);
  8838  001E40  0E7F               	movlw	high STR_36
  8839  001E42  6F6A               	movwf	(?_uart_puts+1)& (0+255),b
  8840  001E44  0EDF               	movlw	low STR_36
  8841  001E46  6F69               	movwf	?_uart_puts& (0+255),b
  8842  001E48  6B6C               	clrf	(?_uart_puts+3)& (0+255),b
  8843  001E4A  0E64               	movlw	100
  8844  001E4C  6F6B               	movwf	(?_uart_puts+2)& (0+255),b
  8845  001E4E  ECAA  F00F         	call	_uart_puts	;wreg free
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;startup.c: 27: if(!serialport_startup()) break;
  8849  001E52  ECE4  F00F         	call	_serialport_startup	;wreg free
  8850  001E56  0900               	iorlw	0
  8851  001E58  E002               	bz	l952
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;startup.c: 31: result = RESULT_SUCCESS;
  8855  001E5A  0E01               	movlw	1
  8856  001E5C  6F71               	movwf	startup@result& (0+255),b
  8857  001E5E                     l952:
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;startup.c: 32: }while(0);
  8861                           ;startup.c: 33: return result;
  8862  001E5E  5171               	movf	startup@result& (0+255),w,b
  8863                           
  8864                           ; BSR set to: 0
  8865  001E60  0012               	return	
  8866  001E62                     __end_of_startup:
  8867                           	opt stack 0
  8868                           tosu	equ	0xFFF
  8869                           tosh	equ	0xFFE
  8870                           tosl	equ	0xFFD
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           indf0	equ	0xFEF
  8880                           postinc0	equ	0xFEE
  8881                           fsr0h	equ	0xFEA
  8882                           fsr0l	equ	0xFE9
  8883                           wreg	equ	0xFE8
  8884                           indf1	equ	0xFE7
  8885                           postinc1	equ	0xFE6
  8886                           postdec1	equ	0xFE5
  8887                           fsr1h	equ	0xFE2
  8888                           fsr1l	equ	0xFE1
  8889                           indf2	equ	0xFDF
  8890                           postinc2	equ	0xFDE
  8891                           postdec2	equ	0xFDD
  8892                           fsr2h	equ	0xFDA
  8893                           fsr2l	equ	0xFD9
  8894                           status	equ	0xFD8
  8895                           
  8896 ;; *************** function _sysclk_init *****************
  8897 ;; Defined at:
  8898 ;;		line 7 in file "src/drivers/sysclk.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;		None
  8903 ;; Return value:  Size  Location     Type
  8904 ;;		None               void
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0, cstack
  8907 ;; Tracked objects:
  8908 ;;		On entry : F/0
  8909 ;;		On exit  : F/0
  8910 ;;		Unchanged: FFFFFFF0/0
  8911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8912 ;;      Params:         0       0       0       0       0       0       0
  8913 ;;      Locals:         0       0       0       0       0       0       0
  8914 ;;      Temps:          0       0       0       0       0       0       0
  8915 ;;      Totals:         0       0       0       0       0       0       0
  8916 ;;Total ram usage:        0 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    6
  8919 ;; This function calls:
  8920 ;;		_sysclk_setup_intosc
  8921 ;; This function is called by:
  8922 ;;		_startup
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text35
  8927  00222A                     __ptext35:
  8928                           	opt stack 0
  8929  00222A                     _sysclk_init:
  8930                           	opt stack 23
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;sysclk.c: 8: sysclk_setup_intosc(INTOSC_4MHZ);
  8934                           
  8935                           ; BSR set to: 0
  8936  00222A  0E05               	movlw	5
  8937  00222C  EFF2  F010         	goto	_sysclk_setup_intosc
  8938  002230                     __end_of_sysclk_init:
  8939                           	opt stack 0
  8940                           tosu	equ	0xFFF
  8941                           tosh	equ	0xFFE
  8942                           tosl	equ	0xFFD
  8943                           pclath	equ	0xFFA
  8944                           tblptru	equ	0xFF8
  8945                           tblptrh	equ	0xFF7
  8946                           tblptrl	equ	0xFF6
  8947                           tablat	equ	0xFF5
  8948                           prodh	equ	0xFF4
  8949                           prodl	equ	0xFF3
  8950                           intcon	equ	0xFF2
  8951                           indf0	equ	0xFEF
  8952                           postinc0	equ	0xFEE
  8953                           fsr0h	equ	0xFEA
  8954                           fsr0l	equ	0xFE9
  8955                           wreg	equ	0xFE8
  8956                           indf1	equ	0xFE7
  8957                           postinc1	equ	0xFE6
  8958                           postdec1	equ	0xFE5
  8959                           fsr1h	equ	0xFE2
  8960                           fsr1l	equ	0xFE1
  8961                           indf2	equ	0xFDF
  8962                           postinc2	equ	0xFDE
  8963                           postdec2	equ	0xFDD
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function _sysclk_setup_intosc *****************
  8969 ;; Defined at:
  8970 ;;		line 12 in file "src/drivers/sysclk.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  frequency       1    wreg     enum E1
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;  frequency       1    8[BANK0 ] enum E1
  8975 ;; Return value:  Size  Location     Type
  8976 ;;		None               void
  8977 ;; Registers used:
  8978 ;;		wreg, status,2, status,0
  8979 ;; Tracked objects:
  8980 ;;		On entry : F/0
  8981 ;;		On exit  : F/0
  8982 ;;		Unchanged: FFFFFFF0/0
  8983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8984 ;;      Params:         0       0       0       0       0       0       0
  8985 ;;      Locals:         0       1       0       0       0       0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0
  8987 ;;      Totals:         0       1       0       0       0       0       0
  8988 ;;Total ram usage:        1 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    5
  8991 ;; This function calls:
  8992 ;;		Nothing
  8993 ;; This function is called by:
  8994 ;;		_sysclk_init
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           	psect	text36
  8999  0021E4                     __ptext36:
  9000                           	opt stack 0
  9001  0021E4                     _sysclk_setup_intosc:
  9002                           	opt stack 23
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;sysclk_setup_intosc@frequency stored from wreg
  9006  0021E4  CFE8 F068          	movff	wreg,sysclk_setup_intosc@frequency
  9007                           
  9008                           ; BSR set to: 0
  9009                           ;sysclk.c: 13: OSCCON &= ~(0x07<<4);
  9010  0021E8  0E8F               	movlw	143
  9011  0021EA  16D3               	andwf	4051,f,c	;volatile
  9012                           
  9013                           ;sysclk.c: 14: OSCCON |= frequency<<4;
  9014  0021EC  3968               	swapf	sysclk_setup_intosc@frequency& (0+255),w,b
  9015  0021EE  0BF0               	andlw	240
  9016  0021F0  12D3               	iorwf	4051,f,c	;volatile
  9017                           
  9018                           ; BSR set to: 0
  9019  0021F2  0012               	return	
  9020  0021F4                     __end_of_sysclk_setup_intosc:
  9021                           	opt stack 0
  9022                           tosu	equ	0xFFF
  9023                           tosh	equ	0xFFE
  9024                           tosl	equ	0xFFD
  9025                           pclath	equ	0xFFA
  9026                           tblptru	equ	0xFF8
  9027                           tblptrh	equ	0xFF7
  9028                           tblptrl	equ	0xFF6
  9029                           tablat	equ	0xFF5
  9030                           prodh	equ	0xFF4
  9031                           prodl	equ	0xFF3
  9032                           intcon	equ	0xFF2
  9033                           indf0	equ	0xFEF
  9034                           postinc0	equ	0xFEE
  9035                           fsr0h	equ	0xFEA
  9036                           fsr0l	equ	0xFE9
  9037                           wreg	equ	0xFE8
  9038                           indf1	equ	0xFE7
  9039                           postinc1	equ	0xFE6
  9040                           postdec1	equ	0xFE5
  9041                           fsr1h	equ	0xFE2
  9042                           fsr1l	equ	0xFE1
  9043                           indf2	equ	0xFDF
  9044                           postinc2	equ	0xFDE
  9045                           postdec2	equ	0xFDD
  9046                           fsr2h	equ	0xFDA
  9047                           fsr2l	equ	0xFD9
  9048                           status	equ	0xFD8
  9049                           
  9050 ;; *************** function _uart_init *****************
  9051 ;; Defined at:
  9052 ;;		line 5 in file "src/drivers/uart.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;		None
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;		None
  9057 ;; Return value:  Size  Location     Type
  9058 ;;		None               void
  9059 ;; Registers used:
  9060 ;;		wreg, status,2, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : F/0
  9063 ;;		On exit  : F/0
  9064 ;;		Unchanged: FFFFFFF0/0
  9065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9066 ;;      Params:         0       0       0       0       0       0       0
  9067 ;;      Locals:         0       0       0       0       0       0       0
  9068 ;;      Temps:          0       0       0       0       0       0       0
  9069 ;;      Totals:         0       0       0       0       0       0       0
  9070 ;;Total ram usage:        0 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    6
  9073 ;; This function calls:
  9074 ;;		_uart_set_baudrate
  9075 ;; This function is called by:
  9076 ;;		_startup
  9077 ;; This function uses a non-reentrant model
  9078 ;;
  9079                           
  9080                           	psect	text37
  9081  0020CC                     __ptext37:
  9082                           	opt stack 0
  9083  0020CC                     _uart_init:
  9084                           	opt stack 23
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;uart.c: 6: TXSTA = 0b00100110;
  9088                           
  9089                           ; BSR set to: 0
  9090  0020CC  0E26               	movlw	38
  9091  0020CE  6EAC               	movwf	4012,c	;volatile
  9092                           
  9093                           ;uart.c: 7: RCSTA = 0b10010000;
  9094  0020D0  0E90               	movlw	144
  9095  0020D2  6EAB               	movwf	4011,c	;volatile
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;uart.c: 8: BAUDCTL = 0b00000000;
  9099  0020D4  6AB8               	clrf	4024,c	;volatile
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;uart.c: 9: BAUDCON = 0b00000000;
  9103  0020D6  6AB8               	clrf	4024,c	;volatile
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;uart.c: 10: uart_set_baudrate(19200);
  9107  0020D8  6B68               	clrf	?_uart_set_baudrate& (0+255),b
  9108  0020DA  0E4B               	movlw	75
  9109  0020DC  6F69               	movwf	(?_uart_set_baudrate+1)& (0+255),b
  9110  0020DE  0E00               	movlw	0
  9111  0020E0  6B6A               	clrf	(?_uart_set_baudrate+2)& (0+255),b
  9112  0020E2  EC18  F011         	call	_uart_set_baudrate	;wreg free
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;uart.c: 12: PIE1bits.RCIE=1;
  9116  0020E6  8A9D               	bsf	3997,5,c	;volatile
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;uart.c: 13: PIR1bits.RCIF=1;
  9120  0020E8  8A9E               	bsf	3998,5,c	;volatile
  9121                           
  9122                           ; BSR set to: 0
  9123  0020EA  0012               	return	
  9124  0020EC                     __end_of_uart_init:
  9125                           	opt stack 0
  9126                           tosu	equ	0xFFF
  9127                           tosh	equ	0xFFE
  9128                           tosl	equ	0xFFD
  9129                           pclath	equ	0xFFA
  9130                           tblptru	equ	0xFF8
  9131                           tblptrh	equ	0xFF7
  9132                           tblptrl	equ	0xFF6
  9133                           tablat	equ	0xFF5
  9134                           prodh	equ	0xFF4
  9135                           prodl	equ	0xFF3
  9136                           intcon	equ	0xFF2
  9137                           indf0	equ	0xFEF
  9138                           postinc0	equ	0xFEE
  9139                           fsr0h	equ	0xFEA
  9140                           fsr0l	equ	0xFE9
  9141                           wreg	equ	0xFE8
  9142                           indf1	equ	0xFE7
  9143                           postinc1	equ	0xFE6
  9144                           postdec1	equ	0xFE5
  9145                           fsr1h	equ	0xFE2
  9146                           fsr1l	equ	0xFE1
  9147                           indf2	equ	0xFDF
  9148                           postinc2	equ	0xFDE
  9149                           postdec2	equ	0xFDD
  9150                           fsr2h	equ	0xFDA
  9151                           fsr2l	equ	0xFD9
  9152                           status	equ	0xFD8
  9153                           
  9154 ;; *************** function _uart_set_baudrate *****************
  9155 ;; Defined at:
  9156 ;;		line 17 in file "src/drivers/uart.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  baudrate        3    8[BANK0 ] unsigned um
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;		None
  9161 ;; Return value:  Size  Location     Type
  9162 ;;		None               void
  9163 ;; Registers used:
  9164 ;;		wreg, status,2
  9165 ;; Tracked objects:
  9166 ;;		On entry : F/0
  9167 ;;		On exit  : F/0
  9168 ;;		Unchanged: FFFFFFF0/0
  9169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9170 ;;      Params:         0       3       0       0       0       0       0
  9171 ;;      Locals:         0       0       0       0       0       0       0
  9172 ;;      Temps:          0       0       0       0       0       0       0
  9173 ;;      Totals:         0       3       0       0       0       0       0
  9174 ;;Total ram usage:        3 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; Hardware stack levels required when called:    5
  9177 ;; This function calls:
  9178 ;;		Nothing
  9179 ;; This function is called by:
  9180 ;;		_uart_init
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           	psect	text38
  9185  002230                     __ptext38:
  9186                           	opt stack 0
  9187  002230                     _uart_set_baudrate:
  9188                           	opt stack 23
  9189                           
  9190                           ; BSR set to: 0
  9191                           ;uart.c: 19: SPBRG = 12;
  9192                           
  9193                           ; BSR set to: 0
  9194  002230  0E0C               	movlw	12
  9195  002232  6EAF               	movwf	4015,c	;volatile
  9196                           
  9197                           ; BSR set to: 0
  9198  002234  0C0C               	retlw	12
  9199  002236                     __end_of_uart_set_baudrate:
  9200                           	opt stack 0
  9201                           tosu	equ	0xFFF
  9202                           tosh	equ	0xFFE
  9203                           tosl	equ	0xFFD
  9204                           pclath	equ	0xFFA
  9205                           tblptru	equ	0xFF8
  9206                           tblptrh	equ	0xFF7
  9207                           tblptrl	equ	0xFF6
  9208                           tablat	equ	0xFF5
  9209                           prodh	equ	0xFF4
  9210                           prodl	equ	0xFF3
  9211                           intcon	equ	0xFF2
  9212                           indf0	equ	0xFEF
  9213                           postinc0	equ	0xFEE
  9214                           fsr0h	equ	0xFEA
  9215                           fsr0l	equ	0xFE9
  9216                           wreg	equ	0xFE8
  9217                           indf1	equ	0xFE7
  9218                           postinc1	equ	0xFE6
  9219                           postdec1	equ	0xFE5
  9220                           fsr1h	equ	0xFE2
  9221                           fsr1l	equ	0xFE1
  9222                           indf2	equ	0xFDF
  9223                           postinc2	equ	0xFDE
  9224                           postdec2	equ	0xFDD
  9225                           fsr2h	equ	0xFDA
  9226                           fsr2l	equ	0xFD9
  9227                           status	equ	0xFD8
  9228                           
  9229 ;; *************** function _uart_puts *****************
  9230 ;; Defined at:
  9231 ;;		line 31 in file "src/drivers/uart.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;  pstr            2    9[BANK0 ] PTR const unsigned char 
  9234 ;;		 -> STR_36(6), 
  9235 ;;  size            2   11[BANK0 ] int 
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;		None               void
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9242 ;; Tracked objects:
  9243 ;;		On entry : F/0
  9244 ;;		On exit  : F/0
  9245 ;;		Unchanged: FFFFFFF0/0
  9246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9247 ;;      Params:         0       4       0       0       0       0       0
  9248 ;;      Locals:         0       0       0       0       0       0       0
  9249 ;;      Temps:          0       0       0       0       0       0       0
  9250 ;;      Totals:         0       4       0       0       0       0       0
  9251 ;;Total ram usage:        4 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; Hardware stack levels required when called:    7
  9254 ;; This function calls:
  9255 ;;		_uart_putc
  9256 ;; This function is called by:
  9257 ;;		_startup
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           	psect	text39
  9262  001F54                     __ptext39:
  9263                           	opt stack 0
  9264  001F54                     _uart_puts:
  9265                           	opt stack 22
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;uart.c: 32: while(size-- && *pstr)
  9269                           
  9270                           ; BSR set to: 0
  9271  001F54  D00A               	goto	l4903
  9272  001F56                     l4899:
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;uart.c: 33: {
  9276                           ;uart.c: 34: uart_putc(*pstr);
  9277  001F56  C069  FFF6         	movff	uart_puts@pstr,tblptrl
  9278  001F5A  C06A  FFF7         	movff	uart_puts@pstr+1,tblptrh
  9279  001F5E  0008               	tblrd		*
  9280  001F60  50F5               	movf	tablat,w,c
  9281  001F62  ECCE  F010         	call	_uart_putc
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;uart.c: 35: pstr++;
  9285  001F66  4B69               	infsnz	uart_puts@pstr& (0+255),f,b
  9286  001F68  2B6A               	incf	(uart_puts@pstr+1)& (0+255),f,b
  9287  001F6A                     l4903:
  9288                           
  9289                           ; BSR set to: 0
  9290  001F6A  076B               	decf	uart_puts@size& (0+255),f,b
  9291  001F6C  A0D8               	btfss	status,0,c
  9292  001F6E  076C               	decf	(uart_puts@size+1)& (0+255),f,b
  9293  001F70  0100               	movlb	0	; () banked
  9294  001F72  296B               	incf	uart_puts@size& (0+255),w,b
  9295  001F74  B4D8               	btfsc	status,2,c
  9296  001F76  296C               	incf	(uart_puts@size+1)& (0+255),w,b
  9297  001F78  B4D8               	btfsc	status,2,c
  9298  001F7A  0012               	return	
  9299                           
  9300                           ; BSR set to: 0
  9301  001F7C  C069  FFF6         	movff	uart_puts@pstr,tblptrl
  9302  001F80  C06A  FFF7         	movff	uart_puts@pstr+1,tblptrh
  9303  001F84  0008               	tblrd		*
  9304  001F86  50F5               	movf	tablat,w,c
  9305  001F88  B4D8               	btfsc	status,2,c
  9306  001F8A  0012               	return	
  9307  001F8C  D7E4               	goto	l4899
  9308  001F8E                     __end_of_uart_puts:
  9309                           	opt stack 0
  9310                           tosu	equ	0xFFF
  9311                           tosh	equ	0xFFE
  9312                           tosl	equ	0xFFD
  9313                           pclath	equ	0xFFA
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           prodh	equ	0xFF4
  9319                           prodl	equ	0xFF3
  9320                           intcon	equ	0xFF2
  9321                           indf0	equ	0xFEF
  9322                           postinc0	equ	0xFEE
  9323                           fsr0h	equ	0xFEA
  9324                           fsr0l	equ	0xFE9
  9325                           wreg	equ	0xFE8
  9326                           indf1	equ	0xFE7
  9327                           postinc1	equ	0xFE6
  9328                           postdec1	equ	0xFE5
  9329                           fsr1h	equ	0xFE2
  9330                           fsr1l	equ	0xFE1
  9331                           indf2	equ	0xFDF
  9332                           postinc2	equ	0xFDE
  9333                           postdec2	equ	0xFDD
  9334                           fsr2h	equ	0xFDA
  9335                           fsr2l	equ	0xFD9
  9336                           status	equ	0xFD8
  9337                           
  9338 ;; *************** function _uart_putc *****************
  9339 ;; Defined at:
  9340 ;;		line 40 in file "src/drivers/uart.c"
  9341 ;; Parameters:    Size  Location     Type
  9342 ;;  byte            1    wreg     unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  byte            1    8[BANK0 ] unsigned char 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;		None               void
  9347 ;; Registers used:
  9348 ;;		wreg, status,2, cstack
  9349 ;; Tracked objects:
  9350 ;;		On entry : E/1
  9351 ;;		On exit  : E/1
  9352 ;;		Unchanged: FFFFFFF1/0
  9353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9354 ;;      Params:         0       0       0       0       0       0       0
  9355 ;;      Locals:         0       1       0       0       0       0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0
  9357 ;;      Totals:         0       1       0       0       0       0       0
  9358 ;;Total ram usage:        1 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    6
  9361 ;; This function calls:
  9362 ;;		_uart_byte_sent
  9363 ;; This function is called by:
  9364 ;;		_uart_puts
  9365 ;;		_serialport_task
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           	psect	text40
  9370  00219C                     __ptext40:
  9371                           	opt stack 0
  9372  00219C                     _uart_putc:
  9373                           	opt stack 23
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;uart_putc@byte stored from wreg
  9377  00219C  CFE8 F068          	movff	wreg,uart_putc@byte
  9378  0021A0                     l4909:
  9379  0021A0  EC0D  F011         	call	_uart_byte_sent	;wreg free
  9380  0021A4  0900               	iorlw	0
  9381  0021A6  E0FC               	bz	l4909
  9382                           
  9383                           ;uart.c: 42: TXREG = byte;
  9384  0021A8  C068  FFAD         	movff	uart_putc@byte,4013	;volatile
  9385  0021AC  0012               	return	
  9386  0021AE                     __end_of_uart_putc:
  9387                           	opt stack 0
  9388                           tosu	equ	0xFFF
  9389                           tosh	equ	0xFFE
  9390                           tosl	equ	0xFFD
  9391                           pclath	equ	0xFFA
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           prodh	equ	0xFF4
  9397                           prodl	equ	0xFF3
  9398                           intcon	equ	0xFF2
  9399                           indf0	equ	0xFEF
  9400                           postinc0	equ	0xFEE
  9401                           fsr0h	equ	0xFEA
  9402                           fsr0l	equ	0xFE9
  9403                           wreg	equ	0xFE8
  9404                           indf1	equ	0xFE7
  9405                           postinc1	equ	0xFE6
  9406                           postdec1	equ	0xFE5
  9407                           fsr1h	equ	0xFE2
  9408                           fsr1l	equ	0xFE1
  9409                           indf2	equ	0xFDF
  9410                           postinc2	equ	0xFDE
  9411                           postdec2	equ	0xFDD
  9412                           fsr2h	equ	0xFDA
  9413                           fsr2l	equ	0xFD9
  9414                           status	equ	0xFD8
  9415                           
  9416 ;; *************** function _uart_byte_sent *****************
  9417 ;; Defined at:
  9418 ;;		line 46 in file "src/drivers/uart.c"
  9419 ;; Parameters:    Size  Location     Type
  9420 ;;		None
  9421 ;; Auto vars:     Size  Location     Type
  9422 ;;		None
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  1    wreg      unsigned char 
  9425 ;; Registers used:
  9426 ;;		wreg
  9427 ;; Tracked objects:
  9428 ;;		On entry : E/1
  9429 ;;		On exit  : E/1
  9430 ;;		Unchanged: FFFFFFF1/0
  9431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9432 ;;      Params:         0       0       0       0       0       0       0
  9433 ;;      Locals:         0       0       0       0       0       0       0
  9434 ;;      Temps:          0       0       0       0       0       0       0
  9435 ;;      Totals:         0       0       0       0       0       0       0
  9436 ;;Total ram usage:        0 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    5
  9439 ;; This function calls:
  9440 ;;		Nothing
  9441 ;; This function is called by:
  9442 ;;		_uart_putc
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           	psect	text41
  9447  00221A                     __ptext41:
  9448                           	opt stack 0
  9449  00221A                     _uart_byte_sent:
  9450                           	opt stack 23
  9451                           
  9452                           ;uart.c: 47: return TXIF;
  9453  00221A  0E00               	movlw	0
  9454  00221C  B89E               	btfsc	3998,4,c	;volatile
  9455  00221E  0E01               	movlw	1
  9456  002220  0012               	return	
  9457  002222                     __end_of_uart_byte_sent:
  9458                           	opt stack 0
  9459                           tosu	equ	0xFFF
  9460                           tosh	equ	0xFFE
  9461                           tosl	equ	0xFFD
  9462                           pclath	equ	0xFFA
  9463                           tblptru	equ	0xFF8
  9464                           tblptrh	equ	0xFF7
  9465                           tblptrl	equ	0xFF6
  9466                           tablat	equ	0xFF5
  9467                           prodh	equ	0xFF4
  9468                           prodl	equ	0xFF3
  9469                           intcon	equ	0xFF2
  9470                           indf0	equ	0xFEF
  9471                           postinc0	equ	0xFEE
  9472                           fsr0h	equ	0xFEA
  9473                           fsr0l	equ	0xFE9
  9474                           wreg	equ	0xFE8
  9475                           indf1	equ	0xFE7
  9476                           postinc1	equ	0xFE6
  9477                           postdec1	equ	0xFE5
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           fsr2h	equ	0xFDA
  9484                           fsr2l	equ	0xFD9
  9485                           status	equ	0xFD8
  9486                           
  9487 ;; *************** function _adc_init *****************
  9488 ;; Defined at:
  9489 ;;		line 5 in file "src/drivers/adc.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;		None
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;		None               void
  9496 ;; Registers used:
  9497 ;;		wreg, status,2
  9498 ;; Tracked objects:
  9499 ;;		On entry : F/0
  9500 ;;		On exit  : F/0
  9501 ;;		Unchanged: FFFFFFF0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9503 ;;      Params:         0       0       0       0       0       0       0
  9504 ;;      Locals:         0       0       0       0       0       0       0
  9505 ;;      Temps:          0       0       0       0       0       0       0
  9506 ;;      Totals:         0       0       0       0       0       0       0
  9507 ;;Total ram usage:        0 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    5
  9510 ;; This function calls:
  9511 ;;		Nothing
  9512 ;; This function is called by:
  9513 ;;		_startup
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           	psect	text42
  9518  0021AE                     __ptext42:
  9519                           	opt stack 0
  9520  0021AE                     _adc_init:
  9521                           	opt stack 24
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;adc.c: 6: ADCON0 = 0b00000001;
  9525  0021AE  0E01               	movlw	1
  9526  0021B0  6EC2               	movwf	4034,c	;volatile
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;adc.c: 7: ADCON1 = 0b00000000;
  9530  0021B2  6AC1               	clrf	4033,c	;volatile
  9531                           
  9532                           ;adc.c: 8: ADCON2 = 0b00001000;
  9533  0021B4  0E08               	movlw	8
  9534  0021B6  6EC0               	movwf	4032,c	;volatile
  9535                           
  9536                           ;adc.c: 9: ANSEL = 0b01100011;
  9537  0021B8  0E63               	movlw	99
  9538  0021BA  6E7E               	movwf	3966,c	;volatile
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;adc.c: 10: ANSELH = 0;
  9542  0021BC  6A7F               	clrf	3967,c	;volatile
  9543                           
  9544                           ; BSR set to: 0
  9545  0021BE  0012               	return	
  9546  0021C0                     __end_of_adc_init:
  9547                           	opt stack 0
  9548                           tosu	equ	0xFFF
  9549                           tosh	equ	0xFFE
  9550                           tosl	equ	0xFFD
  9551                           pclath	equ	0xFFA
  9552                           tblptru	equ	0xFF8
  9553                           tblptrh	equ	0xFF7
  9554                           tblptrl	equ	0xFF6
  9555                           tablat	equ	0xFF5
  9556                           prodh	equ	0xFF4
  9557                           prodl	equ	0xFF3
  9558                           intcon	equ	0xFF2
  9559                           indf0	equ	0xFEF
  9560                           postinc0	equ	0xFEE
  9561                           fsr0h	equ	0xFEA
  9562                           fsr0l	equ	0xFE9
  9563                           wreg	equ	0xFE8
  9564                           indf1	equ	0xFE7
  9565                           postinc1	equ	0xFE6
  9566                           postdec1	equ	0xFE5
  9567                           fsr1h	equ	0xFE2
  9568                           fsr1l	equ	0xFE1
  9569                           indf2	equ	0xFDF
  9570                           postinc2	equ	0xFDE
  9571                           postdec2	equ	0xFDD
  9572                           fsr2h	equ	0xFDA
  9573                           fsr2l	equ	0xFD9
  9574                           status	equ	0xFD8
  9575                           
  9576 ;; *************** function _gpio_init *****************
  9577 ;; Defined at:
  9578 ;;		line 4 in file "src/drivers/gpio.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;		None
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;		None
  9583 ;; Return value:  Size  Location     Type
  9584 ;;		None               void
  9585 ;; Registers used:
  9586 ;;		wreg, status,2
  9587 ;; Tracked objects:
  9588 ;;		On entry : F/0
  9589 ;;		On exit  : F/0
  9590 ;;		Unchanged: FFFFFFF0/0
  9591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9592 ;;      Params:         0       0       0       0       0       0       0
  9593 ;;      Locals:         0       0       0       0       0       0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0
  9595 ;;      Totals:         0       0       0       0       0       0       0
  9596 ;;Total ram usage:        0 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    5
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_startup
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text43
  9607  0021C0                     __ptext43:
  9608                           	opt stack 0
  9609  0021C0                     _gpio_init:
  9610                           	opt stack 24
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;gpio.c: 7: TRISA=0xff;
  9614                           
  9615                           ; BSR set to: 0
  9616  0021C0  6892               	setf	3986,c	;volatile
  9617                           
  9618                           ;gpio.c: 8: TRISB=0xff;
  9619  0021C2  6893               	setf	3987,c	;volatile
  9620                           
  9621                           ;gpio.c: 9: ANSELH=0;
  9622  0021C4  6A7F               	clrf	3967,c	;volatile
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;gpio.c: 10: TRISC=0xc1;
  9626  0021C6  0EC1               	movlw	193
  9627  0021C8  6E94               	movwf	3988,c	;volatile
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;gpio.c: 11: TRISD=0x00;
  9631  0021CA  6A95               	clrf	3989,c	;volatile
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;gpio.c: 12: LATC=0;
  9635  0021CC  6A8B               	clrf	3979,c	;volatile
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;gpio.c: 13: LATD=0;
  9639  0021CE  6A8C               	clrf	3980,c	;volatile
  9640                           
  9641                           ; BSR set to: 0
  9642  0021D0  0012               	return	
  9643  0021D2                     __end_of_gpio_init:
  9644                           	opt stack 0
  9645                           tosu	equ	0xFFF
  9646                           tosh	equ	0xFFE
  9647                           tosl	equ	0xFFD
  9648                           pclath	equ	0xFFA
  9649                           tblptru	equ	0xFF8
  9650                           tblptrh	equ	0xFF7
  9651                           tblptrl	equ	0xFF6
  9652                           tablat	equ	0xFF5
  9653                           prodh	equ	0xFF4
  9654                           prodl	equ	0xFF3
  9655                           intcon	equ	0xFF2
  9656                           indf0	equ	0xFEF
  9657                           postinc0	equ	0xFEE
  9658                           fsr0h	equ	0xFEA
  9659                           fsr0l	equ	0xFE9
  9660                           wreg	equ	0xFE8
  9661                           indf1	equ	0xFE7
  9662                           postinc1	equ	0xFE6
  9663                           postdec1	equ	0xFE5
  9664                           fsr1h	equ	0xFE2
  9665                           fsr1l	equ	0xFE1
  9666                           indf2	equ	0xFDF
  9667                           postinc2	equ	0xFDE
  9668                           postdec2	equ	0xFDD
  9669                           fsr2h	equ	0xFDA
  9670                           fsr2l	equ	0xFD9
  9671                           status	equ	0xFD8
  9672                           
  9673 ;; *************** function _serialport_startup *****************
  9674 ;; Defined at:
  9675 ;;		line 16 in file "src/modules/serialport.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;		None
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  result          1   16[BANK0 ] enum E3389
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      enum E3389
  9682 ;; Registers used:
  9683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : F/0
  9686 ;;		On exit  : F/0
  9687 ;;		Unchanged: FFFFFFF0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9689 ;;      Params:         0       0       0       0       0       0       0
  9690 ;;      Locals:         0       1       0       0       0       0       0
  9691 ;;      Temps:          0       1       0       0       0       0       0
  9692 ;;      Totals:         0       2       0       0       0       0       0
  9693 ;;Total ram usage:        2 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    6
  9696 ;; This function calls:
  9697 ;;		_rd_buffer_init
  9698 ;; This function is called by:
  9699 ;;		_startup
  9700 ;; This function uses a non-reentrant model
  9701 ;;
  9702                           
  9703                           	psect	text44
  9704  001FC8                     __ptext44:
  9705                           	opt stack 0
  9706  001FC8                     _serialport_startup:
  9707                           	opt stack 23
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;serialport.c: 18: result = (ResultSuccess_t) rd_buffer_init(&g_rx_buffer, ((100)))
  9711                           ;serialport.c: 19: | (ResultSuccess_t) rd_buffer_init(&g_tx_buffer, ((100)));
  9712                           
  9713                           ; BSR set to: 0
  9714                           
  9715                           ; BSR set to: 0
  9716  001FC8  0E01               	movlw	high _g_tx_buffer
  9717  001FCA  0100               	movlb	0	; () banked
  9718  001FCC  6F69               	movwf	(?_rd_buffer_init+1)& (0+255),b
  9719  001FCE  0E00               	movlw	low _g_tx_buffer
  9720  001FD0  6F68               	movwf	?_rd_buffer_init& (0+255),b
  9721  001FD2  6B6B               	clrf	(?_rd_buffer_init+3)& (0+255),b
  9722  001FD4  0E64               	movlw	100
  9723  001FD6  6F6A               	movwf	(?_rd_buffer_init+2)& (0+255),b
  9724  001FD8  ECC4  F00E         	call	_rd_buffer_init	;wreg free
  9725  001FDC  6F6F               	movwf	??_serialport_startup& (0+255),b
  9726  001FDE  0E02               	movlw	high _g_rx_buffer
  9727  001FE0  0100               	movlb	0	; () banked
  9728  001FE2  6F69               	movwf	(?_rd_buffer_init+1)& (0+255),b
  9729  001FE4  0E7F               	movlw	low _g_rx_buffer
  9730  001FE6  6F68               	movwf	?_rd_buffer_init& (0+255),b
  9731  001FE8  6B6B               	clrf	(?_rd_buffer_init+3)& (0+255),b
  9732  001FEA  0E64               	movlw	100
  9733  001FEC  6F6A               	movwf	(?_rd_buffer_init+2)& (0+255),b
  9734  001FEE  ECC4  F00E         	call	_rd_buffer_init	;wreg free
  9735  001FF2  116F               	iorwf	??_serialport_startup& (0+255),w,b
  9736  001FF4  6F70               	movwf	serialport_startup@result& (0+255),b
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;serialport.c: 20: return result;
  9740  001FF6  5170               	movf	serialport_startup@result& (0+255),w,b
  9741                           
  9742                           ; BSR set to: 0
  9743  001FF8  0012               	return	
  9744  001FFA                     __end_of_serialport_startup:
  9745                           	opt stack 0
  9746                           tosu	equ	0xFFF
  9747                           tosh	equ	0xFFE
  9748                           tosl	equ	0xFFD
  9749                           pclath	equ	0xFFA
  9750                           tblptru	equ	0xFF8
  9751                           tblptrh	equ	0xFF7
  9752                           tblptrl	equ	0xFF6
  9753                           tablat	equ	0xFF5
  9754                           prodh	equ	0xFF4
  9755                           prodl	equ	0xFF3
  9756                           intcon	equ	0xFF2
  9757                           indf0	equ	0xFEF
  9758                           postinc0	equ	0xFEE
  9759                           fsr0h	equ	0xFEA
  9760                           fsr0l	equ	0xFE9
  9761                           wreg	equ	0xFE8
  9762                           indf1	equ	0xFE7
  9763                           postinc1	equ	0xFE6
  9764                           postdec1	equ	0xFE5
  9765                           fsr1h	equ	0xFE2
  9766                           fsr1l	equ	0xFE1
  9767                           indf2	equ	0xFDF
  9768                           postinc2	equ	0xFDE
  9769                           postdec2	equ	0xFDD
  9770                           fsr2h	equ	0xFDA
  9771                           fsr2l	equ	0xFD9
  9772                           status	equ	0xFD8
  9773                           
  9774 ;; *************** function _rd_buffer_init *****************
  9775 ;; Defined at:
  9776 ;;		line 15 in file "src/modules/rd_buffer.c"
  9777 ;; Parameters:    Size  Location     Type
  9778 ;;  pbuffer         2    8[BANK0 ] PTR struct .
  9779 ;;		 -> g_tx_buffer(107), g_rx_buffer(107), 
  9780 ;;  size            2   10[BANK0 ] int 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  result          1   14[BANK0 ] unsigned char 
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      unsigned char 
  9785 ;; Registers used:
  9786 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9787 ;; Tracked objects:
  9788 ;;		On entry : F/0
  9789 ;;		On exit  : F/0
  9790 ;;		Unchanged: FFFFFFF0/0
  9791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9792 ;;      Params:         0       4       0       0       0       0       0
  9793 ;;      Locals:         0       1       0       0       0       0       0
  9794 ;;      Temps:          0       2       0       0       0       0       0
  9795 ;;      Totals:         0       7       0       0       0       0       0
  9796 ;;Total ram usage:        7 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    5
  9799 ;; This function calls:
  9800 ;;		Nothing
  9801 ;; This function is called by:
  9802 ;;		_serialport_startup
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           	psect	text45
  9807  001D88                     __ptext45:
  9808                           	opt stack 0
  9809  001D88                     _rd_buffer_init:
  9810                           	opt stack 23
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;rd_buffer.c: 16: CHAR result = FALSE;
  9814                           
  9815                           ; BSR set to: 0
  9816  001D88  6B6E               	clrf	rd_buffer_init@result& (0+255),b
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;rd_buffer.c: 17: if(pbuffer != (0) ){
  9820  001D8A  5169               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9821  001D8C  1168               	iorwf	rd_buffer_init@pbuffer& (0+255),w,b
  9822  001D8E  E01F               	bz	l4953
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;rd_buffer.c: 18: pbuffer->head.first = 0;
  9826  001D90  EE20 F002          	lfsr	2,2
  9827  001D94  5168               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9828  001D96  26D9               	addwf	fsr2l,f,c
  9829  001D98  5169               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9830  001D9A  22DA               	addwfc	fsr2h,f,c
  9831  001D9C  6ADE               	clrf	postinc2,c
  9832  001D9E  6ADD               	clrf	postdec2,c
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;rd_buffer.c: 19: pbuffer->head.last = 0;
  9836  001DA0  C068  FFD9         	movff	rd_buffer_init@pbuffer,fsr2l
  9837  001DA4  C069  FFDA         	movff	rd_buffer_init@pbuffer+1,fsr2h
  9838  001DA8  6ADE               	clrf	postinc2,c
  9839  001DAA  6ADD               	clrf	postdec2,c
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;rd_buffer.c: 21: pbuffer->head.size = size+1;
  9843  001DAC  296A               	incf	rd_buffer_init@size& (0+255),w,b
  9844  001DAE  6F6C               	movwf	??_rd_buffer_init& (0+255),b
  9845  001DB0  0E00               	movlw	0
  9846  001DB2  216B               	addwfc	(rd_buffer_init@size+1)& (0+255),w,b
  9847  001DB4  6F6D               	movwf	(??_rd_buffer_init+1)& (0+255),b
  9848  001DB6  EE20 F004          	lfsr	2,4
  9849  001DBA  5168               	movf	rd_buffer_init@pbuffer& (0+255),w,b
  9850  001DBC  26D9               	addwf	fsr2l,f,c
  9851  001DBE  5169               	movf	(rd_buffer_init@pbuffer+1)& (0+255),w,b
  9852  001DC0  22DA               	addwfc	fsr2h,f,c
  9853  001DC2  C06C  FFDE         	movff	??_rd_buffer_init,postinc2
  9854  001DC6  C06D  FFDD         	movff	??_rd_buffer_init+1,postdec2
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;rd_buffer.c: 22: result = TRUE;
  9858  001DCA  0E01               	movlw	1
  9859  001DCC  6F6E               	movwf	rd_buffer_init@result& (0+255),b
  9860  001DCE                     l4953:
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;rd_buffer.c: 23: }
  9864                           ;rd_buffer.c: 24: return result;
  9865  001DCE  516E               	movf	rd_buffer_init@result& (0+255),w,b
  9866                           
  9867                           ; BSR set to: 0
  9868  001DD0  0012               	return	
  9869  001DD2                     __end_of_rd_buffer_init:
  9870                           	opt stack 0
  9871                           tosu	equ	0xFFF
  9872                           tosh	equ	0xFFE
  9873                           tosl	equ	0xFFD
  9874                           pclath	equ	0xFFA
  9875                           tblptru	equ	0xFF8
  9876                           tblptrh	equ	0xFF7
  9877                           tblptrl	equ	0xFF6
  9878                           tablat	equ	0xFF5
  9879                           prodh	equ	0xFF4
  9880                           prodl	equ	0xFF3
  9881                           intcon	equ	0xFF2
  9882                           indf0	equ	0xFEF
  9883                           postinc0	equ	0xFEE
  9884                           fsr0h	equ	0xFEA
  9885                           fsr0l	equ	0xFE9
  9886                           wreg	equ	0xFE8
  9887                           indf1	equ	0xFE7
  9888                           postinc1	equ	0xFE6
  9889                           postdec1	equ	0xFE5
  9890                           fsr1h	equ	0xFE2
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           fsr2h	equ	0xFDA
  9896                           fsr2l	equ	0xFD9
  9897                           status	equ	0xFD8
  9898                           
  9899 ;; *************** function ___awdiv *****************
  9900 ;; Defined at:
  9901 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awdiv.c"
  9902 ;; Parameters:    Size  Location     Type
  9903 ;;  dividend        2    8[BANK0 ] int 
  9904 ;;  divisor         2   10[BANK0 ] int 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  quotient        2   14[BANK0 ] int 
  9907 ;;  sign            1   13[BANK0 ] unsigned char 
  9908 ;;  counter         1   12[BANK0 ] unsigned char 
  9909 ;; Return value:  Size  Location     Type
  9910 ;;                  2    8[BANK0 ] int 
  9911 ;; Registers used:
  9912 ;;		wreg, status,2, status,0
  9913 ;; Tracked objects:
  9914 ;;		On entry : F/0
  9915 ;;		On exit  : F/0
  9916 ;;		Unchanged: FFFFFFF0/0
  9917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9918 ;;      Params:         0       4       0       0       0       0       0
  9919 ;;      Locals:         0       4       0       0       0       0       0
  9920 ;;      Temps:          0       0       0       0       0       0       0
  9921 ;;      Totals:         0       8       0       0       0       0       0
  9922 ;;Total ram usage:        8 bytes
  9923 ;; Hardware stack levels used:    1
  9924 ;; Hardware stack levels required when called:    5
  9925 ;; This function calls:
  9926 ;;		Nothing
  9927 ;; This function is called by:
  9928 ;;		_pd_add_value
  9929 ;; This function uses a non-reentrant model
  9930 ;;
  9931                           
  9932                           	psect	text46
  9933  00196A                     __ptext46:
  9934                           	opt stack 0
  9935  00196A                     ___awdiv:
  9936                           	opt stack 23
  9937                           
  9938                           ; BSR set to: 0
  9939                           
  9940                           ; BSR set to: 0
  9941  00196A  6B6D               	clrf	___awdiv@sign& (0+255),b
  9942  00196C  AF6B               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9943  00196E  D006               	goto	l5859
  9944                           
  9945                           ; BSR set to: 0
  9946  001970  6D6A               	negf	___awdiv@divisor& (0+255),b
  9947  001972  1F6B               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9948  001974  B0D8               	btfsc	status,0,c
  9949  001976  2B6B               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9950                           
  9951                           ; BSR set to: 0
  9952  001978  0E01               	movlw	1
  9953  00197A  6F6D               	movwf	___awdiv@sign& (0+255),b
  9954  00197C                     l5859:
  9955                           
  9956                           ; BSR set to: 0
  9957  00197C  AF69               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9958  00197E  D006               	goto	l5865
  9959                           
  9960                           ; BSR set to: 0
  9961  001980  6D68               	negf	___awdiv@dividend& (0+255),b
  9962  001982  1F69               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9963  001984  B0D8               	btfsc	status,0,c
  9964  001986  2B69               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9965                           
  9966                           ; BSR set to: 0
  9967  001988  0E01               	movlw	1
  9968  00198A  1B6D               	xorwf	___awdiv@sign& (0+255),f,b
  9969  00198C                     l5865:
  9970                           
  9971                           ; BSR set to: 0
  9972  00198C  6B6E               	clrf	___awdiv@quotient& (0+255),b
  9973  00198E  6B6F               	clrf	(___awdiv@quotient+1)& (0+255),b
  9974                           
  9975                           ; BSR set to: 0
  9976  001990  516B               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9977  001992  116A               	iorwf	___awdiv@divisor& (0+255),w,b
  9978  001994  E01B               	bz	l5887
  9979                           
  9980                           ; BSR set to: 0
  9981  001996  0E01               	movlw	1
  9982  001998  6F6C               	movwf	___awdiv@counter& (0+255),b
  9983  00199A  D004               	goto	l5873
  9984  00199C                     l5871:
  9985                           
  9986                           ; BSR set to: 0
  9987  00199C  90D8               	bcf	status,0,c
  9988  00199E  376A               	rlcf	___awdiv@divisor& (0+255),f,b
  9989  0019A0  376B               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9990  0019A2  2B6C               	incf	___awdiv@counter& (0+255),f,b
  9991  0019A4                     l5873:
  9992                           
  9993                           ; BSR set to: 0
  9994  0019A4  AF6B               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9995  0019A6  D7FA               	goto	l5871
  9996  0019A8                     l5875:
  9997                           
  9998                           ; BSR set to: 0
  9999  0019A8  90D8               	bcf	status,0,c
 10000  0019AA  376E               	rlcf	___awdiv@quotient& (0+255),f,b
 10001  0019AC  376F               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10002                           
 10003                           ; BSR set to: 0
 10004  0019AE  516A               	movf	___awdiv@divisor& (0+255),w,b
 10005  0019B0  5D68               	subwf	___awdiv@dividend& (0+255),w,b
 10006  0019B2  516B               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10007  0019B4  5969               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10008  0019B6  E305               	bnc	l5883
 10009                           
 10010                           ; BSR set to: 0
 10011  0019B8  516A               	movf	___awdiv@divisor& (0+255),w,b
 10012  0019BA  5F68               	subwf	___awdiv@dividend& (0+255),f,b
 10013  0019BC  516B               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10014  0019BE  5B69               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10015                           
 10016                           ; BSR set to: 0
 10017  0019C0  816E               	bsf	___awdiv@quotient& (0+255),0,b
 10018  0019C2                     l5883:
 10019                           
 10020                           ; BSR set to: 0
 10021  0019C2  90D8               	bcf	status,0,c
 10022  0019C4  336B               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10023  0019C6  336A               	rrcf	___awdiv@divisor& (0+255),f,b
 10024                           
 10025                           ; BSR set to: 0
 10026  0019C8  2F6C               	decfsz	___awdiv@counter& (0+255),f,b
 10027  0019CA  D7EE               	goto	l5875
 10028  0019CC                     l5887:
 10029                           
 10030                           ; BSR set to: 0
 10031  0019CC  516D               	movf	___awdiv@sign& (0+255),w,b
 10032  0019CE  E004               	bz	l5891
 10033                           
 10034                           ; BSR set to: 0
 10035  0019D0  6D6E               	negf	___awdiv@quotient& (0+255),b
 10036  0019D2  1F6F               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10037  0019D4  B0D8               	btfsc	status,0,c
 10038  0019D6  2B6F               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10039  0019D8                     l5891:
 10040                           
 10041                           ; BSR set to: 0
 10042  0019D8  C06E  F068         	movff	___awdiv@quotient,?___awdiv
 10043  0019DC  C06F  F069         	movff	___awdiv@quotient+1,?___awdiv+1
 10044                           
 10045                           ; BSR set to: 0
 10046  0019E0  0012               	return	
 10047  0019E2                     __end_of___awdiv:
 10048                           	opt stack 0
 10049                           tosu	equ	0xFFF
 10050                           tosh	equ	0xFFE
 10051                           tosl	equ	0xFFD
 10052                           pclath	equ	0xFFA
 10053                           tblptru	equ	0xFF8
 10054                           tblptrh	equ	0xFF7
 10055                           tblptrl	equ	0xFF6
 10056                           tablat	equ	0xFF5
 10057                           prodh	equ	0xFF4
 10058                           prodl	equ	0xFF3
 10059                           intcon	equ	0xFF2
 10060                           indf0	equ	0xFEF
 10061                           postinc0	equ	0xFEE
 10062                           fsr0h	equ	0xFEA
 10063                           fsr0l	equ	0xFE9
 10064                           wreg	equ	0xFE8
 10065                           indf1	equ	0xFE7
 10066                           postinc1	equ	0xFE6
 10067                           postdec1	equ	0xFE5
 10068                           fsr1h	equ	0xFE2
 10069                           fsr1l	equ	0xFE1
 10070                           indf2	equ	0xFDF
 10071                           postinc2	equ	0xFDE
 10072                           postdec2	equ	0xFDD
 10073                           fsr2h	equ	0xFDA
 10074                           fsr2l	equ	0xFD9
 10075                           status	equ	0xFD8
 10076                           
 10077 ;; *************** function ___awmod *****************
 10078 ;; Defined at:
 10079 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\awmod.c"
 10080 ;; Parameters:    Size  Location     Type
 10081 ;;  dividend        2    8[BANK0 ] int 
 10082 ;;  divisor         2   10[BANK0 ] int 
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;  sign            1   13[BANK0 ] unsigned char 
 10085 ;;  counter         1   12[BANK0 ] unsigned char 
 10086 ;; Return value:  Size  Location     Type
 10087 ;;                  2    8[BANK0 ] int 
 10088 ;; Registers used:
 10089 ;;		wreg, status,2, status,0
 10090 ;; Tracked objects:
 10091 ;;		On entry : F/0
 10092 ;;		On exit  : F/0
 10093 ;;		Unchanged: FFFFFFF0/0
 10094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10095 ;;      Params:         0       4       0       0       0       0       0
 10096 ;;      Locals:         0       2       0       0       0       0       0
 10097 ;;      Temps:          0       0       0       0       0       0       0
 10098 ;;      Totals:         0       6       0       0       0       0       0
 10099 ;;Total ram usage:        6 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    5
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_pd_add_value
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text47
 10110  001B36                     __ptext47:
 10111                           	opt stack 0
 10112  001B36                     ___awmod:
 10113                           	opt stack 23
 10114                           
 10115                           ; BSR set to: 0
 10116                           
 10117                           ; BSR set to: 0
 10118  001B36  6B6D               	clrf	___awmod@sign& (0+255),b
 10119  001B38  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10120  001B3A  D006               	goto	l5901
 10121                           
 10122                           ; BSR set to: 0
 10123  001B3C  6D68               	negf	___awmod@dividend& (0+255),b
 10124  001B3E  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
 10125  001B40  B0D8               	btfsc	status,0,c
 10126  001B42  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
 10127                           
 10128                           ; BSR set to: 0
 10129  001B44  0E01               	movlw	1
 10130  001B46  6F6D               	movwf	___awmod@sign& (0+255),b
 10131  001B48                     l5901:
 10132                           
 10133                           ; BSR set to: 0
 10134  001B48  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10135  001B4A  D004               	goto	l5905
 10136                           
 10137                           ; BSR set to: 0
 10138  001B4C  6D6A               	negf	___awmod@divisor& (0+255),b
 10139  001B4E  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
 10140  001B50  B0D8               	btfsc	status,0,c
 10141  001B52  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
 10142  001B54                     l5905:
 10143                           
 10144                           ; BSR set to: 0
 10145  001B54  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
 10146  001B56  116A               	iorwf	___awmod@divisor& (0+255),w,b
 10147  001B58  E017               	bz	l5921
 10148                           
 10149                           ; BSR set to: 0
 10150  001B5A  0E01               	movlw	1
 10151  001B5C  6F6C               	movwf	___awmod@counter& (0+255),b
 10152  001B5E  D004               	goto	l5911
 10153  001B60                     l5909:
 10154                           
 10155                           ; BSR set to: 0
 10156  001B60  90D8               	bcf	status,0,c
 10157  001B62  376A               	rlcf	___awmod@divisor& (0+255),f,b
 10158  001B64  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10159  001B66  2B6C               	incf	___awmod@counter& (0+255),f,b
 10160  001B68                     l5911:
 10161                           
 10162                           ; BSR set to: 0
 10163  001B68  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10164  001B6A  D7FA               	goto	l5909
 10165  001B6C                     l5913:
 10166                           
 10167                           ; BSR set to: 0
 10168  001B6C  516A               	movf	___awmod@divisor& (0+255),w,b
 10169  001B6E  5D68               	subwf	___awmod@dividend& (0+255),w,b
 10170  001B70  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
 10171  001B72  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10172  001B74  E304               	bnc	l5917
 10173                           
 10174                           ; BSR set to: 0
 10175  001B76  516A               	movf	___awmod@divisor& (0+255),w,b
 10176  001B78  5F68               	subwf	___awmod@dividend& (0+255),f,b
 10177  001B7A  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
 10178  001B7C  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10179  001B7E                     l5917:
 10180                           
 10181                           ; BSR set to: 0
 10182  001B7E  90D8               	bcf	status,0,c
 10183  001B80  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10184  001B82  336A               	rrcf	___awmod@divisor& (0+255),f,b
 10185                           
 10186                           ; BSR set to: 0
 10187  001B84  2F6C               	decfsz	___awmod@counter& (0+255),f,b
 10188  001B86  D7F2               	goto	l5913
 10189  001B88                     l5921:
 10190                           
 10191                           ; BSR set to: 0
 10192  001B88  516D               	movf	___awmod@sign& (0+255),w,b
 10193  001B8A  E004               	bz	l5925
 10194                           
 10195                           ; BSR set to: 0
 10196  001B8C  6D68               	negf	___awmod@dividend& (0+255),b
 10197  001B8E  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
 10198  001B90  B0D8               	btfsc	status,0,c
 10199  001B92  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
 10200  001B94                     l5925:
 10201                           
 10202                           ; BSR set to: 0
 10203  001B94  C068  F068         	movff	___awmod@dividend,?___awmod
 10204  001B98  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
 10205                           
 10206                           ; BSR set to: 0
 10207  001B9C  0012               	return	
 10208  001B9E                     __end_of___awmod:
 10209                           	opt stack 0
 10210                           tosu	equ	0xFFF
 10211                           tosh	equ	0xFFE
 10212                           tosl	equ	0xFFD
 10213                           pclath	equ	0xFFA
 10214                           tblptru	equ	0xFF8
 10215                           tblptrh	equ	0xFF7
 10216                           tblptrl	equ	0xFF6
 10217                           tablat	equ	0xFF5
 10218                           prodh	equ	0xFF4
 10219                           prodl	equ	0xFF3
 10220                           intcon	equ	0xFF2
 10221                           indf0	equ	0xFEF
 10222                           postinc0	equ	0xFEE
 10223                           fsr0h	equ	0xFEA
 10224                           fsr0l	equ	0xFE9
 10225                           wreg	equ	0xFE8
 10226                           indf1	equ	0xFE7
 10227                           postinc1	equ	0xFE6
 10228                           postdec1	equ	0xFE5
 10229                           fsr1h	equ	0xFE2
 10230                           fsr1l	equ	0xFE1
 10231                           indf2	equ	0xFDF
 10232                           postinc2	equ	0xFDE
 10233                           postdec2	equ	0xFDD
 10234                           fsr2h	equ	0xFDA
 10235                           fsr2l	equ	0xFD9
 10236                           status	equ	0xFD8
 10237                           
 10238 ;; *************** function ___ftadd *****************
 10239 ;; Defined at:
 10240 ;;		line 87 in file "C:\Program Files\Microchip\xc8\v1.12\sources\ftadd.c"
 10241 ;; Parameters:    Size  Location     Type
 10242 ;;  f1              3   33[BANK0 ] float 
 10243 ;;  f2              3   36[BANK0 ] float 
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;  exp1            1   46[BANK0 ] unsigned char 
 10246 ;;  exp2            1   45[BANK0 ] unsigned char 
 10247 ;;  sign            1   44[BANK0 ] unsigned char 
 10248 ;; Return value:  Size  Location     Type
 10249 ;;                  3   33[BANK0 ] float 
 10250 ;; Registers used:
 10251 ;;		wreg, status,2, status,0, cstack
 10252 ;; Tracked objects:
 10253 ;;		On entry : F/0
 10254 ;;		On exit  : F/0
 10255 ;;		Unchanged: FFFFFFF0/0
 10256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10257 ;;      Params:         0       6       0       0       0       0       0
 10258 ;;      Locals:         0       3       0       0       0       0       0
 10259 ;;      Temps:          0       5       0       0       0       0       0
 10260 ;;      Totals:         0      14       0       0       0       0       0
 10261 ;;Total ram usage:       14 bytes
 10262 ;; Hardware stack levels used:    1
 10263 ;; Hardware stack levels required when called:    6
 10264 ;; This function calls:
 10265 ;;		___ftpack
 10266 ;; This function is called by:
 10267 ;;		_string_utils_atof
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           	psect	text48
 10272  000DC4                     __ptext48:
 10273                           	opt stack 0
 10274  000DC4                     ___ftadd:
 10275                           	opt stack 20
 10276                           
 10277                           ; BSR set to: 0
 10278                           
 10279                           ; BSR set to: 0
 10280  000DC4  0E0F               	movlw	15
 10281  000DC6  6F87               	movwf	??___ftadd& (0+255),b
 10282  000DC8  C081  F088         	movff	___ftadd@f1,??___ftadd+1
 10283  000DCC  C082  F089         	movff	___ftadd@f1+1,??___ftadd+2
 10284  000DD0  C083  F08A         	movff	___ftadd@f1+2,??___ftadd+3
 10285  000DD4  2987               	incf	??___ftadd& (0+255),w,b
 10286  000DD6  6F8B               	movwf	(??___ftadd+4)& (0+255),b
 10287  000DD8  D001               	goto	u6090
 10288  000DDA                     u6095:
 10289  000DDA  D8A9               	call	PL80	;call to abstracted procedure
 10290  000DDC                     u6090:
 10291  000DDC  2F8B               	decfsz	(??___ftadd+4)& (0+255),f,b
 10292  000DDE  D7FD               	goto	u6095
 10293  000DE0  5188               	movf	(??___ftadd+1)& (0+255),w,b
 10294  000DE2  6F8E               	movwf	___ftadd@exp1& (0+255),b
 10295  000DE4  0E0F               	movlw	15
 10296  000DE6  6F87               	movwf	??___ftadd& (0+255),b
 10297  000DE8  C084  F088         	movff	___ftadd@f2,??___ftadd+1
 10298  000DEC  C085  F089         	movff	___ftadd@f2+1,??___ftadd+2
 10299  000DF0  C086  F08A         	movff	___ftadd@f2+2,??___ftadd+3
 10300  000DF4  2987               	incf	??___ftadd& (0+255),w,b
 10301  000DF6  6F8B               	movwf	(??___ftadd+4)& (0+255),b
 10302  000DF8  D001               	goto	u6100
 10303  000DFA                     u6105:
 10304  000DFA  D899               	call	PL80	;call to abstracted procedure
 10305  000DFC                     u6100:
 10306  000DFC  2F8B               	decfsz	(??___ftadd+4)& (0+255),f,b
 10307  000DFE  D7FD               	goto	u6105
 10308  000E00  5188               	movf	(??___ftadd+1)& (0+255),w,b
 10309  000E02  6F8D               	movwf	___ftadd@exp2& (0+255),b
 10310                           
 10311                           ; BSR set to: 0
 10312  000E04  518E               	movf	___ftadd@exp1& (0+255),w,b
 10313  000E06  E009               	bz	l1362
 10314                           
 10315                           ; BSR set to: 0
 10316  000E08  518D               	movf	___ftadd@exp2& (0+255),w,b
 10317  000E0A  618E               	cpfslt	___ftadd@exp1& (0+255),b
 10318  000E0C  D00D               	goto	l5937
 10319                           
 10320                           ; BSR set to: 0
 10321  000E0E  518E               	movf	___ftadd@exp1& (0+255),w,b
 10322  000E10  5D8D               	subwf	___ftadd@exp2& (0+255),w,b
 10323  000E12  6F87               	movwf	??___ftadd& (0+255),b
 10324  000E14  0E19               	movlw	25
 10325  000E16  5D87               	subwf	??___ftadd& (0+255),w,b
 10326  000E18  E307               	bnc	l5937
 10327  000E1A                     l1362:
 10328                           
 10329                           ; BSR set to: 0
 10330  000E1A  C084  F081         	movff	___ftadd@f2,?___ftadd
 10331  000E1E  C085  F082         	movff	___ftadd@f2+1,?___ftadd+1
 10332  000E22  C086  F083         	movff	___ftadd@f2+2,?___ftadd+2
 10333  000E26  0012               	return	
 10334  000E28                     l5937:
 10335                           
 10336                           ; BSR set to: 0
 10337  000E28  518D               	movf	___ftadd@exp2& (0+255),w,b
 10338  000E2A  E009               	bz	l1366
 10339                           
 10340                           ; BSR set to: 0
 10341  000E2C  518E               	movf	___ftadd@exp1& (0+255),w,b
 10342  000E2E  618D               	cpfslt	___ftadd@exp2& (0+255),b
 10343  000E30  D00D               	goto	l5943
 10344                           
 10345                           ; BSR set to: 0
 10346  000E32  518D               	movf	___ftadd@exp2& (0+255),w,b
 10347  000E34  5D8E               	subwf	___ftadd@exp1& (0+255),w,b
 10348  000E36  6F87               	movwf	??___ftadd& (0+255),b
 10349  000E38  0E19               	movlw	25
 10350  000E3A  5D87               	subwf	??___ftadd& (0+255),w,b
 10351  000E3C  E307               	bnc	l5943
 10352  000E3E                     l1366:
 10353                           
 10354                           ; BSR set to: 0
 10355  000E3E  C081  F081         	movff	___ftadd@f1,?___ftadd
 10356  000E42  C082  F082         	movff	___ftadd@f1+1,?___ftadd+1
 10357  000E46  C083  F083         	movff	___ftadd@f1+2,?___ftadd+2
 10358  000E4A  0012               	return	
 10359  000E4C                     l5943:
 10360                           
 10361                           ; BSR set to: 0
 10362  000E4C  0E06               	movlw	6
 10363  000E4E  6F8C               	movwf	___ftadd@sign& (0+255),b
 10364                           
 10365                           ; BSR set to: 0
 10366  000E50  BF83               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10367                           
 10368                           ; BSR set to: 0
 10369  000E52  8F8C               	bsf	___ftadd@sign& (0+255),7,b
 10370                           
 10371                           ; BSR set to: 0
 10372  000E54  BF86               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10373                           
 10374                           ; BSR set to: 0
 10375  000E56  8D8C               	bsf	___ftadd@sign& (0+255),6,b
 10376                           
 10377                           ; BSR set to: 0
 10378  000E58  8F82               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10379                           
 10380                           ; BSR set to: 0
 10381  000E5A  6B83               	clrf	(___ftadd@f1+2)& (0+255),b
 10382  000E5C  8F85               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10383                           
 10384                           ; BSR set to: 0
 10385  000E5E  6B86               	clrf	(___ftadd@f2+2)& (0+255),b
 10386                           
 10387                           ; BSR set to: 0
 10388  000E60  518D               	movf	___ftadd@exp2& (0+255),w,b
 10389  000E62  618E               	cpfslt	___ftadd@exp1& (0+255),b
 10390  000E64  D017               	goto	l5969
 10391  000E66                     l5959:
 10392                           
 10393                           ; BSR set to: 0
 10394  000E66  90D8               	bcf	status,0,c
 10395  000E68  3784               	rlcf	___ftadd@f2& (0+255),f,b
 10396  000E6A  3785               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10397  000E6C  3786               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10398  000E6E  078D               	decf	___ftadd@exp2& (0+255),f,b
 10399                           
 10400                           ; BSR set to: 0
 10401  000E70  518D               	movf	___ftadd@exp2& (0+255),w,b
 10402  000E72  198E               	xorwf	___ftadd@exp1& (0+255),w,b
 10403  000E74  E00B               	bz	l5967
 10404                           
 10405                           ; BSR set to: 0
 10406  000E76  078C               	decf	___ftadd@sign& (0+255),f,b
 10407  000E78  0100               	movlb	0	; () banked
 10408  000E7A  518C               	movf	___ftadd@sign& (0+255),w,b
 10409  000E7C  0B07               	andlw	7
 10410  000E7E  E006               	bz	l5967
 10411  000E80  D7F2               	goto	l5959
 10412  000E82                     l5965:
 10413                           
 10414                           ; BSR set to: 0
 10415  000E82  90D8               	bcf	status,0,c
 10416  000E84  3383               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10417  000E86  3382               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10418  000E88  3381               	rrcf	___ftadd@f1& (0+255),f,b
 10419  000E8A  2B8E               	incf	___ftadd@exp1& (0+255),f,b
 10420  000E8C                     l5967:
 10421                           
 10422                           ; BSR set to: 0
 10423  000E8C  518D               	movf	___ftadd@exp2& (0+255),w,b
 10424  000E8E  638E               	cpfseq	___ftadd@exp1& (0+255),b
 10425  000E90  D7F8               	goto	l5965
 10426  000E92  D019               	goto	l1377
 10427  000E94                     l5969:
 10428                           
 10429                           ; BSR set to: 0
 10430  000E94  518E               	movf	___ftadd@exp1& (0+255),w,b
 10431  000E96  618D               	cpfslt	___ftadd@exp2& (0+255),b
 10432  000E98  D016               	goto	l1377
 10433  000E9A                     l5971:
 10434                           
 10435                           ; BSR set to: 0
 10436  000E9A  90D8               	bcf	status,0,c
 10437  000E9C  3781               	rlcf	___ftadd@f1& (0+255),f,b
 10438  000E9E  3782               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10439  000EA0  3783               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10440  000EA2  078E               	decf	___ftadd@exp1& (0+255),f,b
 10441                           
 10442                           ; BSR set to: 0
 10443  000EA4  518D               	movf	___ftadd@exp2& (0+255),w,b
 10444  000EA6  198E               	xorwf	___ftadd@exp1& (0+255),w,b
 10445  000EA8  E00B               	bz	l5979
 10446                           
 10447                           ; BSR set to: 0
 10448  000EAA  078C               	decf	___ftadd@sign& (0+255),f,b
 10449  000EAC  0100               	movlb	0	; () banked
 10450  000EAE  518C               	movf	___ftadd@sign& (0+255),w,b
 10451  000EB0  0B07               	andlw	7
 10452  000EB2  E006               	bz	l5979
 10453  000EB4  D7F2               	goto	l5971
 10454  000EB6                     l5977:
 10455                           
 10456                           ; BSR set to: 0
 10457  000EB6  90D8               	bcf	status,0,c
 10458  000EB8  3386               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10459  000EBA  3385               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10460  000EBC  3384               	rrcf	___ftadd@f2& (0+255),f,b
 10461  000EBE  2B8D               	incf	___ftadd@exp2& (0+255),f,b
 10462  000EC0                     l5979:
 10463                           
 10464                           ; BSR set to: 0
 10465  000EC0  518D               	movf	___ftadd@exp2& (0+255),w,b
 10466  000EC2  638E               	cpfseq	___ftadd@exp1& (0+255),b
 10467  000EC4  D7F8               	goto	l5977
 10468  000EC6                     l1377:
 10469                           
 10470                           ; BSR set to: 0
 10471  000EC6  AF8C               	btfss	___ftadd@sign& (0+255),7,b
 10472  000EC8  D007               	goto	l1386
 10473                           
 10474                           ; BSR set to: 0
 10475  000ECA  1F81               	comf	___ftadd@f1& (0+255),f,b
 10476  000ECC  1F82               	comf	(___ftadd@f1+1)& (0+255),f,b
 10477  000ECE  1F83               	comf	(___ftadd@f1+2)& (0+255),f,b
 10478  000ED0  2B81               	incf	___ftadd@f1& (0+255),f,b
 10479  000ED2  0E00               	movlw	0
 10480  000ED4  2382               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10481  000ED6  2383               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10482  000ED8                     l1386:
 10483                           
 10484                           ; BSR set to: 0
 10485  000ED8  AD8C               	btfss	___ftadd@sign& (0+255),6,b
 10486  000EDA  D002               	goto	l1387
 10487                           
 10488                           ; BSR set to: 0
 10489  000EDC  1F84               	comf	___ftadd@f2& (0+255),f,b
 10490  000EDE  D820               	call	PL68	;call to abstracted procedure
 10491  000EE0                     l1387:
 10492                           
 10493                           ; BSR set to: 0
 10494  000EE0  6B8C               	clrf	___ftadd@sign& (0+255),b
 10495  000EE2  5181               	movf	___ftadd@f1& (0+255),w,b
 10496  000EE4  2784               	addwf	___ftadd@f2& (0+255),f,b
 10497  000EE6  5182               	movf	(___ftadd@f1+1)& (0+255),w,b
 10498  000EE8  2385               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10499  000EEA  5183               	movf	(___ftadd@f1+2)& (0+255),w,b
 10500  000EEC  2386               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10501  000EEE  AF86               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10502  000EF0  D004               	goto	l5989
 10503                           
 10504                           ; BSR set to: 0
 10505  000EF2  1F84               	comf	___ftadd@f2& (0+255),f,b
 10506  000EF4  D815               	call	PL68	;call to abstracted procedure
 10507                           
 10508                           ; BSR set to: 0
 10509  000EF6  0E01               	movlw	1
 10510  000EF8  6F8C               	movwf	___ftadd@sign& (0+255),b
 10511  000EFA                     l5989:
 10512                           
 10513                           ; BSR set to: 0
 10514  000EFA  C084  F068         	movff	___ftadd@f2,?___ftpack
 10515  000EFE  C085  F069         	movff	___ftadd@f2+1,?___ftpack+1
 10516  000F02  C086  F06A         	movff	___ftadd@f2+2,?___ftpack+2
 10517  000F06  C08E  F06B         	movff	___ftadd@exp1,?___ftpack+3
 10518  000F0A  C08C  F06C         	movff	___ftadd@sign,?___ftpack+4
 10519  000F0E  ECED  F00B         	call	___ftpack	;wreg free
 10520  000F12  C068  F081         	movff	?___ftpack,?___ftadd
 10521  000F16  C069  F082         	movff	?___ftpack+1,?___ftadd+1
 10522  000F1A  C06A  F083         	movff	?___ftpack+2,?___ftadd+2
 10523                           
 10524                           ; BSR set to: 0
 10525  000F1E  0012               	return	
 10526  000F20                     __end_of___ftadd:
 10527                           	opt stack 0
 10528  000F20                     PL68:
 10529                           	opt stack 20
 10530  000F20  1F85               	comf	(___ftadd@f2+1)& (0+255),f,b
 10531  000F22  1F86               	comf	(___ftadd@f2+2)& (0+255),f,b
 10532  000F24  2B84               	incf	___ftadd@f2& (0+255),f,b
 10533  000F26  0E00               	movlw	0
 10534  000F28  2385               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10535  000F2A  2386               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10536  000F2C  0C00               	retlw	0
 10537  000F2E                     __end_ofPL68:
 10538                           	opt stack 0
 10539  000F2E                     PL80:
 10540                           	opt stack 20
 10541  000F2E  90D8               	bcf	status,0,c
 10542  000F30  338A               	rrcf	(??___ftadd+3)& (0+255),f,b
 10543  000F32  3389               	rrcf	(??___ftadd+2)& (0+255),f,b
 10544  000F34  3388               	rrcf	(??___ftadd+1)& (0+255),f,b
 10545  000F36  0012               	return	
 10546  000F38                     __end_ofPL80:
 10547                           	opt stack 0
 10548                           tosu	equ	0xFFF
 10549                           tosh	equ	0xFFE
 10550                           tosl	equ	0xFFD
 10551                           pclath	equ	0xFFA
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           intcon	equ	0xFF2
 10559                           indf0	equ	0xFEF
 10560                           postinc0	equ	0xFEE
 10561                           fsr0h	equ	0xFEA
 10562                           fsr0l	equ	0xFE9
 10563                           wreg	equ	0xFE8
 10564                           indf1	equ	0xFE7
 10565                           postinc1	equ	0xFE6
 10566                           postdec1	equ	0xFE5
 10567                           fsr1h	equ	0xFE2
 10568                           fsr1l	equ	0xFE1
 10569                           indf2	equ	0xFDF
 10570                           postinc2	equ	0xFDE
 10571                           postdec2	equ	0xFDD
 10572                           fsr2h	equ	0xFDA
 10573                           fsr2l	equ	0xFD9
 10574                           status	equ	0xFD8
 10575                           
 10576 ;; *************** function ___lbmod *****************
 10577 ;; Defined at:
 10578 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lbmod.c"
 10579 ;; Parameters:    Size  Location     Type
 10580 ;;  dividend        1    wreg     unsigned char 
 10581 ;;  divisor         1    8[BANK0 ] unsigned char 
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  dividend        1    9[BANK0 ] unsigned char 
 10584 ;;  rem             1   11[BANK0 ] unsigned char 
 10585 ;;  counter         1   10[BANK0 ] unsigned char 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      unsigned char 
 10588 ;; Registers used:
 10589 ;;		wreg, status,2, status,0
 10590 ;; Tracked objects:
 10591 ;;		On entry : F/0
 10592 ;;		On exit  : F/0
 10593 ;;		Unchanged: FFFFFFF0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10595 ;;      Params:         0       1       0       0       0       0       0
 10596 ;;      Locals:         0       3       0       0       0       0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0
 10598 ;;      Totals:         0       4       0       0       0       0       0
 10599 ;;Total ram usage:        4 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    5
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_pd_add_value
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           	psect	text49
 10610  002056                     __ptext49:
 10611                           	opt stack 0
 10612  002056                     ___lbmod:
 10613                           	opt stack 23
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;___lbmod@dividend stored from wreg
 10617  002056  CFE8 F069          	movff	wreg,___lbmod@dividend
 10618                           
 10619                           ; BSR set to: 0
 10620  00205A  0E08               	movlw	8
 10621  00205C  6F6A               	movwf	___lbmod@counter& (0+255),b
 10622                           
 10623                           ; BSR set to: 0
 10624  00205E  6B6B               	clrf	___lbmod@rem& (0+255),b
 10625  002060                     l6041:
 10626                           
 10627                           ; BSR set to: 0
 10628  002060  90D8               	bcf	status,0,c
 10629  002062  0100               	movlb	0	; () banked
 10630  002064  3569               	rlcf	___lbmod@dividend& (0+255),w,b
 10631  002066  356B               	rlcf	___lbmod@rem& (0+255),w,b
 10632  002068  6F6B               	movwf	___lbmod@rem& (0+255),b
 10633                           
 10634                           ; BSR set to: 0
 10635  00206A  90D8               	bcf	status,0,c
 10636  00206C  3769               	rlcf	___lbmod@dividend& (0+255),f,b
 10637                           
 10638                           ; BSR set to: 0
 10639  00206E  5168               	movf	___lbmod@divisor& (0+255),w,b
 10640  002070  5D6B               	subwf	___lbmod@rem& (0+255),w,b
 10641  002072  E302               	bnc	l6049
 10642                           
 10643                           ; BSR set to: 0
 10644  002074  5168               	movf	___lbmod@divisor& (0+255),w,b
 10645  002076  5F6B               	subwf	___lbmod@rem& (0+255),f,b
 10646  002078                     l6049:
 10647                           
 10648                           ; BSR set to: 0
 10649  002078  2F6A               	decfsz	___lbmod@counter& (0+255),f,b
 10650  00207A  D7F2               	goto	l6041
 10651                           
 10652                           ; BSR set to: 0
 10653  00207C  516B               	movf	___lbmod@rem& (0+255),w,b
 10654                           
 10655                           ; BSR set to: 0
 10656  00207E  0012               	return	
 10657  002080                     __end_of___lbmod:
 10658                           	opt stack 0
 10659                           tosu	equ	0xFFF
 10660                           tosh	equ	0xFFE
 10661                           tosl	equ	0xFFD
 10662                           pclath	equ	0xFFA
 10663                           tblptru	equ	0xFF8
 10664                           tblptrh	equ	0xFF7
 10665                           tblptrl	equ	0xFF6
 10666                           tablat	equ	0xFF5
 10667                           prodh	equ	0xFF4
 10668                           prodl	equ	0xFF3
 10669                           intcon	equ	0xFF2
 10670                           indf0	equ	0xFEF
 10671                           postinc0	equ	0xFEE
 10672                           fsr0h	equ	0xFEA
 10673                           fsr0l	equ	0xFE9
 10674                           wreg	equ	0xFE8
 10675                           indf1	equ	0xFE7
 10676                           postinc1	equ	0xFE6
 10677                           postdec1	equ	0xFE5
 10678                           fsr1h	equ	0xFE2
 10679                           fsr1l	equ	0xFE1
 10680                           indf2	equ	0xFDF
 10681                           postinc2	equ	0xFDE
 10682                           postdec2	equ	0xFDD
 10683                           fsr2h	equ	0xFDA
 10684                           fsr2l	equ	0xFD9
 10685                           status	equ	0xFD8
 10686                           
 10687 ;; *************** function ___lwdiv *****************
 10688 ;; Defined at:
 10689 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwdiv.c"
 10690 ;; Parameters:    Size  Location     Type
 10691 ;;  dividend        2    8[BANK0 ] unsigned int 
 10692 ;;  divisor         2   10[BANK0 ] unsigned int 
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;  quotient        2   13[BANK0 ] unsigned int 
 10695 ;;  counter         1   12[BANK0 ] unsigned char 
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  2    8[BANK0 ] unsigned int 
 10698 ;; Registers used:
 10699 ;;		wreg, status,2, status,0
 10700 ;; Tracked objects:
 10701 ;;		On entry : F/0
 10702 ;;		On exit  : F/0
 10703 ;;		Unchanged: FFFFFFF0/0
 10704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10705 ;;      Params:         0       4       0       0       0       0       0
 10706 ;;      Locals:         0       3       0       0       0       0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0
 10708 ;;      Totals:         0       7       0       0       0       0       0
 10709 ;;Total ram usage:        7 bytes
 10710 ;; Hardware stack levels used:    1
 10711 ;; Hardware stack levels required when called:    5
 10712 ;; This function calls:
 10713 ;;		Nothing
 10714 ;; This function is called by:
 10715 ;;		_printf
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719                           	psect	text50
 10720  001DD2                     __ptext50:
 10721                           	opt stack 0
 10722  001DD2                     ___lwdiv:
 10723                           	opt stack 21
 10724                           
 10725                           ; BSR set to: 0
 10726                           
 10727                           ; BSR set to: 0
 10728  001DD2  6B6D               	clrf	___lwdiv@quotient& (0+255),b
 10729  001DD4  6B6E               	clrf	(___lwdiv@quotient+1)& (0+255),b
 10730                           
 10731                           ; BSR set to: 0
 10732  001DD6  516B               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10733  001DD8  116A               	iorwf	___lwdiv@divisor& (0+255),w,b
 10734  001DDA  E01B               	bz	l1537
 10735                           
 10736                           ; BSR set to: 0
 10737  001DDC  0E01               	movlw	1
 10738  001DDE  6F6C               	movwf	___lwdiv@counter& (0+255),b
 10739  001DE0  D004               	goto	l6063
 10740  001DE2                     l6061:
 10741                           
 10742                           ; BSR set to: 0
 10743  001DE2  90D8               	bcf	status,0,c
 10744  001DE4  376A               	rlcf	___lwdiv@divisor& (0+255),f,b
 10745  001DE6  376B               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10746  001DE8  2B6C               	incf	___lwdiv@counter& (0+255),f,b
 10747  001DEA                     l6063:
 10748                           
 10749                           ; BSR set to: 0
 10750  001DEA  AF6B               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10751  001DEC  D7FA               	goto	l6061
 10752  001DEE                     l6065:
 10753                           
 10754                           ; BSR set to: 0
 10755  001DEE  90D8               	bcf	status,0,c
 10756  001DF0  376D               	rlcf	___lwdiv@quotient& (0+255),f,b
 10757  001DF2  376E               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10758                           
 10759                           ; BSR set to: 0
 10760  001DF4  516A               	movf	___lwdiv@divisor& (0+255),w,b
 10761  001DF6  5D68               	subwf	___lwdiv@dividend& (0+255),w,b
 10762  001DF8  516B               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10763  001DFA  5969               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10764  001DFC  E305               	bnc	l6073
 10765                           
 10766                           ; BSR set to: 0
 10767  001DFE  516A               	movf	___lwdiv@divisor& (0+255),w,b
 10768  001E00  5F68               	subwf	___lwdiv@dividend& (0+255),f,b
 10769  001E02  516B               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10770  001E04  5B69               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10771                           
 10772                           ; BSR set to: 0
 10773  001E06  816D               	bsf	___lwdiv@quotient& (0+255),0,b
 10774  001E08                     l6073:
 10775                           
 10776                           ; BSR set to: 0
 10777  001E08  90D8               	bcf	status,0,c
 10778  001E0A  336B               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10779  001E0C  336A               	rrcf	___lwdiv@divisor& (0+255),f,b
 10780                           
 10781                           ; BSR set to: 0
 10782  001E0E  2F6C               	decfsz	___lwdiv@counter& (0+255),f,b
 10783  001E10  D7EE               	goto	l6065
 10784  001E12                     l1537:
 10785                           
 10786                           ; BSR set to: 0
 10787  001E12  C06D  F068         	movff	___lwdiv@quotient,?___lwdiv
 10788  001E16  C06E  F069         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10789                           
 10790                           ; BSR set to: 0
 10791  001E1A  0012               	return	
 10792  001E1C                     __end_of___lwdiv:
 10793                           	opt stack 0
 10794                           tosu	equ	0xFFF
 10795                           tosh	equ	0xFFE
 10796                           tosl	equ	0xFFD
 10797                           pclath	equ	0xFFA
 10798                           tblptru	equ	0xFF8
 10799                           tblptrh	equ	0xFF7
 10800                           tblptrl	equ	0xFF6
 10801                           tablat	equ	0xFF5
 10802                           prodh	equ	0xFF4
 10803                           prodl	equ	0xFF3
 10804                           intcon	equ	0xFF2
 10805                           indf0	equ	0xFEF
 10806                           postinc0	equ	0xFEE
 10807                           fsr0h	equ	0xFEA
 10808                           fsr0l	equ	0xFE9
 10809                           wreg	equ	0xFE8
 10810                           indf1	equ	0xFE7
 10811                           postinc1	equ	0xFE6
 10812                           postdec1	equ	0xFE5
 10813                           fsr1h	equ	0xFE2
 10814                           fsr1l	equ	0xFE1
 10815                           indf2	equ	0xFDF
 10816                           postinc2	equ	0xFDE
 10817                           postdec2	equ	0xFDD
 10818                           fsr2h	equ	0xFDA
 10819                           fsr2l	equ	0xFD9
 10820                           status	equ	0xFD8
 10821                           
 10822 ;; *************** function ___lwmod *****************
 10823 ;; Defined at:
 10824 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwmod.c"
 10825 ;; Parameters:    Size  Location     Type
 10826 ;;  dividend        2   15[BANK0 ] unsigned int 
 10827 ;;  divisor         2   17[BANK0 ] unsigned int 
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;  counter         1   19[BANK0 ] unsigned char 
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  2   15[BANK0 ] unsigned int 
 10832 ;; Registers used:
 10833 ;;		wreg, status,2, status,0
 10834 ;; Tracked objects:
 10835 ;;		On entry : F/0
 10836 ;;		On exit  : F/0
 10837 ;;		Unchanged: FFFFFFF0/0
 10838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10839 ;;      Params:         0       4       0       0       0       0       0
 10840 ;;      Locals:         0       1       0       0       0       0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0
 10842 ;;      Totals:         0       5       0       0       0       0       0
 10843 ;;Total ram usage:        5 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; Hardware stack levels required when called:    5
 10846 ;; This function calls:
 10847 ;;		Nothing
 10848 ;; This function is called by:
 10849 ;;		_printf
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           	psect	text51
 10854  001EA0                     __ptext51:
 10855                           	opt stack 0
 10856  001EA0                     ___lwmod:
 10857                           	opt stack 21
 10858                           
 10859                           ; BSR set to: 0
 10860                           
 10861                           ; BSR set to: 0
 10862  001EA0  5172               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10863  001EA2  1171               	iorwf	___lwmod@divisor& (0+255),w,b
 10864  001EA4  E017               	bz	l1547
 10865                           
 10866                           ; BSR set to: 0
 10867  001EA6  0E01               	movlw	1
 10868  001EA8  6F73               	movwf	___lwmod@counter& (0+255),b
 10869  001EAA  D004               	goto	l6083
 10870  001EAC                     l6081:
 10871                           
 10872                           ; BSR set to: 0
 10873  001EAC  90D8               	bcf	status,0,c
 10874  001EAE  3771               	rlcf	___lwmod@divisor& (0+255),f,b
 10875  001EB0  3772               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10876  001EB2  2B73               	incf	___lwmod@counter& (0+255),f,b
 10877  001EB4                     l6083:
 10878                           
 10879                           ; BSR set to: 0
 10880  001EB4  AF72               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10881  001EB6  D7FA               	goto	l6081
 10882  001EB8                     l6085:
 10883                           
 10884                           ; BSR set to: 0
 10885  001EB8  5171               	movf	___lwmod@divisor& (0+255),w,b
 10886  001EBA  5D6F               	subwf	___lwmod@dividend& (0+255),w,b
 10887  001EBC  5172               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10888  001EBE  5970               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10889  001EC0  E304               	bnc	l6089
 10890                           
 10891                           ; BSR set to: 0
 10892  001EC2  5171               	movf	___lwmod@divisor& (0+255),w,b
 10893  001EC4  5F6F               	subwf	___lwmod@dividend& (0+255),f,b
 10894  001EC6  5172               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10895  001EC8  5B70               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10896  001ECA                     l6089:
 10897                           
 10898                           ; BSR set to: 0
 10899  001ECA  90D8               	bcf	status,0,c
 10900  001ECC  3372               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10901  001ECE  3371               	rrcf	___lwmod@divisor& (0+255),f,b
 10902                           
 10903                           ; BSR set to: 0
 10904  001ED0  2F73               	decfsz	___lwmod@counter& (0+255),f,b
 10905  001ED2  D7F2               	goto	l6085
 10906  001ED4                     l1547:
 10907                           
 10908                           ; BSR set to: 0
 10909  001ED4  C06F  F06F         	movff	___lwmod@dividend,?___lwmod
 10910  001ED8  C070  F070         	movff	___lwmod@dividend+1,?___lwmod+1
 10911                           
 10912                           ; BSR set to: 0
 10913  001EDC  0012               	return	
 10914  001EDE                     __end_of___lwmod:
 10915                           	opt stack 0
 10916                           tosu	equ	0xFFF
 10917                           tosh	equ	0xFFE
 10918                           tosl	equ	0xFFD
 10919                           pclath	equ	0xFFA
 10920                           tblptru	equ	0xFF8
 10921                           tblptrh	equ	0xFF7
 10922                           tblptrl	equ	0xFF6
 10923                           tablat	equ	0xFF5
 10924                           prodh	equ	0xFF4
 10925                           prodl	equ	0xFF3
 10926                           intcon	equ	0xFF2
 10927                           indf0	equ	0xFEF
 10928                           postinc0	equ	0xFEE
 10929                           fsr0h	equ	0xFEA
 10930                           fsr0l	equ	0xFE9
 10931                           wreg	equ	0xFE8
 10932                           indf1	equ	0xFE7
 10933                           postinc1	equ	0xFE6
 10934                           postdec1	equ	0xFE5
 10935                           fsr1h	equ	0xFE2
 10936                           fsr1l	equ	0xFE1
 10937                           indf2	equ	0xFDF
 10938                           postinc2	equ	0xFDE
 10939                           postdec2	equ	0xFDD
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function ___lwtoft *****************
 10945 ;; Defined at:
 10946 ;;		line 29 in file "C:\Program Files\Microchip\xc8\v1.12\sources\lwtoft.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;  c               2   16[BANK0 ] unsigned int 
 10949 ;; Auto vars:     Size  Location     Type
 10950 ;;		None
 10951 ;; Return value:  Size  Location     Type
 10952 ;;                  3   16[BANK0 ] float 
 10953 ;; Registers used:
 10954 ;;		wreg, status,2, status,0, cstack
 10955 ;; Tracked objects:
 10956 ;;		On entry : F/0
 10957 ;;		On exit  : F/0
 10958 ;;		Unchanged: FFFFFFF0/0
 10959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10960 ;;      Params:         0       3       0       0       0       0       0
 10961 ;;      Locals:         0       0       0       0       0       0       0
 10962 ;;      Temps:          0       0       0       0       0       0       0
 10963 ;;      Totals:         0       3       0       0       0       0       0
 10964 ;;Total ram usage:        3 bytes
 10965 ;; Hardware stack levels used:    1
 10966 ;; Hardware stack levels required when called:    6
 10967 ;; This function calls:
 10968 ;;		___ftpack
 10969 ;; This function is called by:
 10970 ;;		_string_utils_atof
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           	psect	text52
 10975  0020A8                     __ptext52:
 10976                           	opt stack 0
 10977  0020A8                     ___lwtoft:
 10978                           	opt stack 20
 10979                           
 10980                           ; BSR set to: 0
 10981                           
 10982                           ; BSR set to: 0
 10983  0020A8  C070  F068         	movff	___lwtoft@c,?___ftpack
 10984  0020AC  C071  F069         	movff	___lwtoft@c+1,?___ftpack+1
 10985  0020B0  6B6A               	clrf	(?___ftpack+2)& (0+255),b
 10986  0020B2  0E8E               	movlw	142
 10987  0020B4  6F6B               	movwf	(?___ftpack+3)& (0+255),b
 10988  0020B6  0E00               	movlw	0
 10989  0020B8  6B6C               	clrf	(?___ftpack+4)& (0+255),b
 10990  0020BA  ECED  F00B         	call	___ftpack	;wreg free
 10991  0020BE  C068  F070         	movff	?___ftpack,?___lwtoft
 10992  0020C2  C069  F071         	movff	?___ftpack+1,?___lwtoft+1
 10993  0020C6  C06A  F072         	movff	?___ftpack+2,?___lwtoft+2
 10994                           
 10995                           ; BSR set to: 0
 10996  0020CA  0012               	return	
 10997  0020CC                     __end_of___lwtoft:
 10998                           	opt stack 0
 10999                           tosu	equ	0xFFF
 11000                           tosh	equ	0xFFE
 11001                           tosl	equ	0xFFD
 11002                           pclath	equ	0xFFA
 11003                           tblptru	equ	0xFF8
 11004                           tblptrh	equ	0xFF7
 11005                           tblptrl	equ	0xFF6
 11006                           tablat	equ	0xFF5
 11007                           prodh	equ	0xFF4
 11008                           prodl	equ	0xFF3
 11009                           intcon	equ	0xFF2
 11010                           indf0	equ	0xFEF
 11011                           postinc0	equ	0xFEE
 11012                           fsr0h	equ	0xFEA
 11013                           fsr0l	equ	0xFE9
 11014                           wreg	equ	0xFE8
 11015                           indf1	equ	0xFE7
 11016                           postinc1	equ	0xFE6
 11017                           postdec1	equ	0xFE5
 11018                           fsr1h	equ	0xFE2
 11019                           fsr1l	equ	0xFE1
 11020                           indf2	equ	0xFDF
 11021                           postinc2	equ	0xFDE
 11022                           postdec2	equ	0xFDD
 11023                           fsr2h	equ	0xFDA
 11024                           fsr2l	equ	0xFD9
 11025                           status	equ	0xFD8
 11026                           
 11027 ;; *************** function ___wmul *****************
 11028 ;; Defined at:
 11029 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v1.12\sources\wmul.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;  multiplier      2    8[BANK0 ] unsigned int 
 11032 ;;  multiplicand    2   10[BANK0 ] unsigned int 
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;  product         2   12[BANK0 ] unsigned int 
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  2    8[BANK0 ] unsigned int 
 11037 ;; Registers used:
 11038 ;;		wreg, status,2, status,0
 11039 ;; Tracked objects:
 11040 ;;		On entry : F/0
 11041 ;;		On exit  : F/0
 11042 ;;		Unchanged: FFFFFFF0/0
 11043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11044 ;;      Params:         0       4       0       0       0       0       0
 11045 ;;      Locals:         0       2       0       0       0       0       0
 11046 ;;      Temps:          0       0       0       0       0       0       0
 11047 ;;      Totals:         0       6       0       0       0       0       0
 11048 ;;Total ram usage:        6 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:    5
 11051 ;; This function calls:
 11052 ;;		Nothing
 11053 ;; This function is called by:
 11054 ;;		_string_utils_atoi
 11055 ;;		_string_utils_atof
 11056 ;;		_pd_add_value
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text53
 11061  00202A                     __ptext53:
 11062                           	opt stack 0
 11063  00202A                     ___wmul:
 11064                           	opt stack 21
 11065                           
 11066                           ; BSR set to: 0
 11067                           
 11068                           ; BSR set to: 0
 11069  00202A  6B6C               	clrf	___wmul@product& (0+255),b
 11070  00202C  6B6D               	clrf	(___wmul@product+1)& (0+255),b
 11071  00202E                     l1573:
 11072                           
 11073                           ; BSR set to: 0
 11074  00202E  A168               	btfss	___wmul@multiplier& (0+255),0,b
 11075  002030  D004               	goto	l6101
 11076                           
 11077                           ; BSR set to: 0
 11078  002032  516A               	movf	___wmul@multiplicand& (0+255),w,b
 11079  002034  276C               	addwf	___wmul@product& (0+255),f,b
 11080  002036  516B               	movf	(___wmul@multiplicand+1)& (0+255),w,b
 11081  002038  236D               	addwfc	(___wmul@product+1)& (0+255),f,b
 11082  00203A                     l6101:
 11083                           
 11084                           ; BSR set to: 0
 11085  00203A  90D8               	bcf	status,0,c
 11086  00203C  376A               	rlcf	___wmul@multiplicand& (0+255),f,b
 11087  00203E  376B               	rlcf	(___wmul@multiplicand+1)& (0+255),f,b
 11088                           
 11089                           ; BSR set to: 0
 11090  002040  90D8               	bcf	status,0,c
 11091  002042  3369               	rrcf	(___wmul@multiplier+1)& (0+255),f,b
 11092  002044  3368               	rrcf	___wmul@multiplier& (0+255),f,b
 11093  002046  5169               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11094  002048  1168               	iorwf	___wmul@multiplier& (0+255),w,b
 11095  00204A  E1F1               	bnz	l1573
 11096                           
 11097                           ; BSR set to: 0
 11098  00204C  C06C  F068         	movff	___wmul@product,?___wmul
 11099  002050  C06D  F069         	movff	___wmul@product+1,?___wmul+1
 11100                           
 11101                           ; BSR set to: 0
 11102  002054  0012               	return	
 11103  002056                     __end_of___wmul:
 11104                           	opt stack 0
 11105                           tosu	equ	0xFFF
 11106                           tosh	equ	0xFFE
 11107                           tosl	equ	0xFFD
 11108                           pclath	equ	0xFFA
 11109                           tblptru	equ	0xFF8
 11110                           tblptrh	equ	0xFF7
 11111                           tblptrl	equ	0xFF6
 11112                           tablat	equ	0xFF5
 11113                           prodh	equ	0xFF4
 11114                           prodl	equ	0xFF3
 11115                           intcon	equ	0xFF2
 11116                           indf0	equ	0xFEF
 11117                           postinc0	equ	0xFEE
 11118                           fsr0h	equ	0xFEA
 11119                           fsr0l	equ	0xFE9
 11120                           wreg	equ	0xFE8
 11121                           indf1	equ	0xFE7
 11122                           postinc1	equ	0xFE6
 11123                           postdec1	equ	0xFE5
 11124                           fsr1h	equ	0xFE2
 11125                           fsr1l	equ	0xFE1
 11126                           indf2	equ	0xFDF
 11127                           postinc2	equ	0xFDE
 11128                           postdec2	equ	0xFDD
 11129                           fsr2h	equ	0xFDA
 11130                           fsr2l	equ	0xFD9
 11131                           status	equ	0xFD8
 11132                           
 11133 ;; *************** function ___asftmul *****************
 11134 ;; Defined at:
 11135 ;;		line 5 in file "../common/asftmul.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;  f1p             1    wreg     PTR float 
 11138 ;;		 -> string_utils_atof@a(3), 
 11139 ;;  f2              3   33[BANK0 ] float 
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;  f1p             1   36[BANK0 ] PTR float 
 11142 ;;		 -> string_utils_atof@a(3), 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;                  3   33[BANK0 ] float 
 11145 ;; Registers used:
 11146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : F/0
 11149 ;;		On exit  : F/0
 11150 ;;		Unchanged: FFFFFFF0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11152 ;;      Params:         0       3       0       0       0       0       0
 11153 ;;      Locals:         0       1       0       0       0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0
 11155 ;;      Totals:         0       4       0       0       0       0       0
 11156 ;;Total ram usage:        4 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    7
 11159 ;; This function calls:
 11160 ;;		___ftmul
 11161 ;; This function is called by:
 11162 ;;		_string_utils_atof
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           	psect	text54
 11167  001EDE                     __ptext54:
 11168                           	opt stack 0
 11169  001EDE                     ___asftmul:
 11170                           	opt stack 19
 11171                           
 11172                           ; BSR set to: 0
 11173                           ;___asftmul@f1p stored from wreg
 11174  001EDE  CFE8 F084          	movff	wreg,___asftmul@f1p
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;	Return value of ___asftmul is never used
 11178  001EE2  5184               	movf	___asftmul@f1p& (0+255),w,b
 11179  001EE4  6ED9               	movwf	fsr2l,c
 11180  001EE6  6ADA               	clrf	fsr2h,c
 11181  001EE8  CFDE F070          	movff	postinc2,?___ftmul
 11182  001EEC  CFDE F071          	movff	postinc2,?___ftmul+1
 11183  001EF0  CFDD F072          	movff	postdec2,?___ftmul+2
 11184  001EF4  C081  F073         	movff	___asftmul@f2,?___ftmul+3
 11185  001EF8  C082  F074         	movff	___asftmul@f2+1,?___ftmul+4
 11186  001EFC  C083  F075         	movff	___asftmul@f2+2,?___ftmul+5
 11187  001F00  ECB0  F009         	call	___ftmul	;wreg free
 11188  001F04  5184               	movf	___asftmul@f1p& (0+255),w,b
 11189  001F06  6ED9               	movwf	fsr2l,c
 11190  001F08  6ADA               	clrf	fsr2h,c
 11191  001F0A  C070  FFDE         	movff	?___ftmul,postinc2
 11192  001F0E  C071  FFDE         	movff	?___ftmul+1,postinc2
 11193  001F12  C072  FFDD         	movff	?___ftmul+2,postdec2
 11194  001F16  52DD               	movf	postdec2,f,c
 11195                           
 11196                           ; BSR set to: 0
 11197  001F18  0012               	return	
 11198  001F1A                     __end_of___asftmul:
 11199                           	opt stack 0
 11200                           tosu	equ	0xFFF
 11201                           tosh	equ	0xFFE
 11202                           tosl	equ	0xFFD
 11203                           pclath	equ	0xFFA
 11204                           tblptru	equ	0xFF8
 11205                           tblptrh	equ	0xFF7
 11206                           tblptrl	equ	0xFF6
 11207                           tablat	equ	0xFF5
 11208                           prodh	equ	0xFF4
 11209                           prodl	equ	0xFF3
 11210                           intcon	equ	0xFF2
 11211                           indf0	equ	0xFEF
 11212                           postinc0	equ	0xFEE
 11213                           fsr0h	equ	0xFEA
 11214                           fsr0l	equ	0xFE9
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           postinc1	equ	0xFE6
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           fsr2h	equ	0xFDA
 11225                           fsr2l	equ	0xFD9
 11226                           status	equ	0xFD8
 11227                           
 11228 ;; *************** function ___ftpack *****************
 11229 ;; Defined at:
 11230 ;;		line 63 in file "C:\Program Files\Microchip\xc8\v1.12\sources\float.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;  arg             3    8[BANK0 ] unsigned um
 11233 ;;  exp             1   11[BANK0 ] unsigned char 
 11234 ;;  sign            1   12[BANK0 ] unsigned char 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  3    8[BANK0 ] float 
 11239 ;; Registers used:
 11240 ;;		wreg, status,2, status,0
 11241 ;; Tracked objects:
 11242 ;;		On entry : F/0
 11243 ;;		On exit  : F/0
 11244 ;;		Unchanged: FFFFFFF0/0
 11245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11246 ;;      Params:         0       5       0       0       0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0
 11248 ;;      Temps:          0       3       0       0       0       0       0
 11249 ;;      Totals:         0       8       0       0       0       0       0
 11250 ;;Total ram usage:        8 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    5
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		___ftadd
 11257 ;;		___ftmul
 11258 ;;		___lwtoft
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           	psect	text55
 11263  0017DA                     __ptext55:
 11264                           	opt stack 0
 11265  0017DA                     ___ftpack:
 11266                           	opt stack 19
 11267                           
 11268                           ; BSR set to: 0
 11269                           
 11270                           ; BSR set to: 0
 11271  0017DA  516B               	movf	___ftpack@exp& (0+255),w,b
 11272  0017DC  E004               	bz	l1324
 11273                           
 11274                           ; BSR set to: 0
 11275  0017DE  5168               	movf	___ftpack@arg& (0+255),w,b
 11276  0017E0  1169               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 11277  0017E2  116A               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 11278  0017E4  E106               	bnz	l5827
 11279  0017E6                     l1324:
 11280                           
 11281                           ; BSR set to: 0
 11282  0017E6  6B68               	clrf	?___ftpack& (0+255),b
 11283  0017E8  6B69               	clrf	(?___ftpack+1)& (0+255),b
 11284  0017EA  6B6A               	clrf	(?___ftpack+2)& (0+255),b
 11285  0017EC  0012               	return	
 11286  0017EE                     l5825:
 11287                           
 11288                           ; BSR set to: 0
 11289  0017EE  2B6B               	incf	___ftpack@exp& (0+255),f,b
 11290  0017F0  D838               	call	PL76	;call to abstracted procedure
 11291  0017F2                     l5827:
 11292                           
 11293                           ; BSR set to: 0
 11294  0017F2  6B6D               	clrf	??___ftpack& (0+255),b
 11295  0017F4  6B6E               	clrf	(??___ftpack+1)& (0+255),b
 11296  0017F6  0EFE               	movlw	254
 11297  0017F8  156A               	andwf	(___ftpack@arg+2)& (0+255),w,b
 11298  0017FA  6F6F               	movwf	(??___ftpack+2)& (0+255),b
 11299  0017FC  516D               	movf	??___ftpack& (0+255),w,b
 11300  0017FE  116E               	iorwf	(??___ftpack+1)& (0+255),w,b
 11301  001800  116F               	iorwf	(??___ftpack+2)& (0+255),w,b
 11302  001802  E007               	bz	l5833
 11303  001804  D7F4               	goto	l5825
 11304  001806                     l5829:
 11305                           
 11306                           ; BSR set to: 0
 11307  001806  2B6B               	incf	___ftpack@exp& (0+255),f,b
 11308                           
 11309                           ; BSR set to: 0
 11310  001808  2B68               	incf	___ftpack@arg& (0+255),f,b
 11311  00180A  0E00               	movlw	0
 11312  00180C  2369               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 11313  00180E  236A               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 11314  001810  D828               	call	PL76	;call to abstracted procedure
 11315  001812                     l5833:
 11316                           
 11317                           ; BSR set to: 0
 11318  001812  6B6D               	clrf	??___ftpack& (0+255),b
 11319  001814  6B6E               	clrf	(??___ftpack+1)& (0+255),b
 11320  001816  516A               	movf	(___ftpack@arg+2)& (0+255),w,b
 11321  001818  6F6F               	movwf	(??___ftpack+2)& (0+255),b
 11322  00181A  516D               	movf	??___ftpack& (0+255),w,b
 11323  00181C  116E               	iorwf	(??___ftpack+1)& (0+255),w,b
 11324  00181E  116F               	iorwf	(??___ftpack+2)& (0+255),w,b
 11325  001820  E006               	bz	l5837
 11326  001822  D7F1               	goto	l5829
 11327  001824                     l5835:
 11328                           
 11329                           ; BSR set to: 0
 11330  001824  076B               	decf	___ftpack@exp& (0+255),f,b
 11331  001826  90D8               	bcf	status,0,c
 11332  001828  3768               	rlcf	___ftpack@arg& (0+255),f,b
 11333  00182A  3769               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 11334  00182C  376A               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 11335  00182E                     l5837:
 11336                           
 11337                           ; BSR set to: 0
 11338  00182E  AF69               	btfss	(___ftpack@arg+1)& (0+255),7,b
 11339  001830  D7F9               	goto	l5835
 11340                           
 11341                           ; BSR set to: 0
 11342  001832  A16B               	btfss	___ftpack@exp& (0+255),0,b
 11343                           
 11344                           ; BSR set to: 0
 11345  001834  9F69               	bcf	(___ftpack@arg+1)& (0+255),7,b
 11346                           
 11347                           ; BSR set to: 0
 11348  001836  90D8               	bcf	status,0,c
 11349  001838  336B               	rrcf	___ftpack@exp& (0+255),f,b
 11350                           
 11351                           ; BSR set to: 0
 11352  00183A  516B               	movf	___ftpack@exp& (0+255),w,b
 11353  00183C  6F6F               	movwf	(??___ftpack+2)& (0+255),b
 11354  00183E  6B6E               	clrf	(??___ftpack+1)& (0+255),b
 11355  001840  6B6D               	clrf	??___ftpack& (0+255),b
 11356  001842  516D               	movf	??___ftpack& (0+255),w,b
 11357  001844  1368               	iorwf	___ftpack@arg& (0+255),f,b
 11358  001846  516E               	movf	(??___ftpack+1)& (0+255),w,b
 11359  001848  1369               	iorwf	(___ftpack@arg+1)& (0+255),f,b
 11360  00184A  516F               	movf	(??___ftpack+2)& (0+255),w,b
 11361  00184C  136A               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 11362                           
 11363                           ; BSR set to: 0
 11364  00184E  516C               	movf	___ftpack@sign& (0+255),w,b
 11365  001850  A4D8               	btfss	status,2,c
 11366                           
 11367                           ; BSR set to: 0
 11368  001852  8F6A               	bsf	(___ftpack@arg+2)& (0+255),7,b
 11369                           
 11370                           ; BSR set to: 0
 11371  001854  C068  F068         	movff	___ftpack@arg,?___ftpack
 11372  001858  C069  F069         	movff	___ftpack@arg+1,?___ftpack+1
 11373  00185C  C06A  F06A         	movff	___ftpack@arg+2,?___ftpack+2
 11374                           
 11375                           ; BSR set to: 0
 11376  001860  0012               	return	
 11377  001862                     __end_of___ftpack:
 11378                           	opt stack 0
 11379  001862                     PL76:
 11380                           	opt stack 19
 11381  001862  90D8               	bcf	status,0,c
 11382  001864  336A               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 11383  001866  3369               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 11384  001868  3368               	rrcf	___ftpack@arg& (0+255),f,b
 11385  00186A  0012               	return	
 11386  00186C                     __end_ofPL76:
 11387                           	opt stack 0
 11388                           tosu	equ	0xFFF
 11389                           tosh	equ	0xFFE
 11390                           tosl	equ	0xFFD
 11391                           pclath	equ	0xFFA
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           indf0	equ	0xFEF
 11400                           postinc0	equ	0xFEE
 11401                           fsr0h	equ	0xFEA
 11402                           fsr0l	equ	0xFE9
 11403                           wreg	equ	0xFE8
 11404                           indf1	equ	0xFE7
 11405                           postinc1	equ	0xFE6
 11406                           postdec1	equ	0xFE5
 11407                           fsr1h	equ	0xFE2
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           postdec2	equ	0xFDD
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function ___ftmul *****************
 11417 ;; Defined at:
 11418 ;;		line 52 in file "C:\Program Files\Microchip\xc8\v1.12\sources\ftmul.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;  f1              3   16[BANK0 ] float 
 11421 ;;  f2              3   19[BANK0 ] float 
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  f3_as_produc    3   28[BANK0 ] unsigned um
 11424 ;;  sign            1   32[BANK0 ] unsigned char 
 11425 ;;  cntr            1   31[BANK0 ] unsigned char 
 11426 ;;  exp             1   27[BANK0 ] unsigned char 
 11427 ;; Return value:  Size  Location     Type
 11428 ;;                  3   16[BANK0 ] float 
 11429 ;; Registers used:
 11430 ;;		wreg, status,2, status,0, cstack
 11431 ;; Tracked objects:
 11432 ;;		On entry : F/0
 11433 ;;		On exit  : F/0
 11434 ;;		Unchanged: FFFFFFF0/0
 11435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11436 ;;      Params:         0       6       0       0       0       0       0
 11437 ;;      Locals:         0       6       0       0       0       0       0
 11438 ;;      Temps:          0       5       0       0       0       0       0
 11439 ;;      Totals:         0      17       0       0       0       0       0
 11440 ;;Total ram usage:       17 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; Hardware stack levels required when called:    6
 11443 ;; This function calls:
 11444 ;;		___ftpack
 11445 ;; This function is called by:
 11446 ;;		_string_utils_atof
 11447 ;;		___asftmul
 11448 ;; This function uses a non-reentrant model
 11449 ;;
 11450                           
 11451                           	psect	text56
 11452  001360                     __ptext56:
 11453                           	opt stack 0
 11454  001360                     ___ftmul:
 11455                           	opt stack 19
 11456                           
 11457                           ; BSR set to: 0
 11458                           
 11459                           ; BSR set to: 0
 11460  001360  0E0F               	movlw	15
 11461  001362  6F76               	movwf	??___ftmul& (0+255),b
 11462  001364  C070  F077         	movff	___ftmul@f1,??___ftmul+1
 11463  001368  C071  F078         	movff	___ftmul@f1+1,??___ftmul+2
 11464  00136C  C072  F079         	movff	___ftmul@f1+2,??___ftmul+3
 11465  001370  2976               	incf	??___ftmul& (0+255),w,b
 11466  001372  6F7A               	movwf	(??___ftmul+4)& (0+255),b
 11467  001374  D001               	goto	u6300
 11468  001376                     u6305:
 11469  001376  D86C               	call	PL78	;call to abstracted procedure
 11470  001378                     u6300:
 11471  001378  2F7A               	decfsz	(??___ftmul+4)& (0+255),f,b
 11472  00137A  D7FD               	goto	u6305
 11473  00137C  5177               	movf	(??___ftmul+1)& (0+255),w,b
 11474  00137E  6F7B               	movwf	___ftmul@exp& (0+255),b
 11475  001380  0100               	movlb	0	; () banked
 11476  001382  677B               	tstfsz	___ftmul@exp& (0+255),b
 11477  001384  D004               	goto	l5997
 11478                           
 11479                           ; BSR set to: 0
 11480  001386  6B70               	clrf	?___ftmul& (0+255),b
 11481  001388  6B71               	clrf	(?___ftmul+1)& (0+255),b
 11482  00138A  6B72               	clrf	(?___ftmul+2)& (0+255),b
 11483  00138C  0012               	return	
 11484  00138E                     l5997:
 11485                           
 11486                           ; BSR set to: 0
 11487  00138E  0E0F               	movlw	15
 11488  001390  6F76               	movwf	??___ftmul& (0+255),b
 11489  001392  C073  F077         	movff	___ftmul@f2,??___ftmul+1
 11490  001396  C074  F078         	movff	___ftmul@f2+1,??___ftmul+2
 11491  00139A  C075  F079         	movff	___ftmul@f2+2,??___ftmul+3
 11492  00139E  2976               	incf	??___ftmul& (0+255),w,b
 11493  0013A0  6F7A               	movwf	(??___ftmul+4)& (0+255),b
 11494  0013A2  D001               	goto	u6320
 11495  0013A4                     u6325:
 11496  0013A4  D855               	call	PL78	;call to abstracted procedure
 11497  0013A6                     u6320:
 11498  0013A6  2F7A               	decfsz	(??___ftmul+4)& (0+255),f,b
 11499  0013A8  D7FD               	goto	u6325
 11500  0013AA  5177               	movf	(??___ftmul+1)& (0+255),w,b
 11501  0013AC  6F80               	movwf	___ftmul@sign& (0+255),b
 11502  0013AE  0100               	movlb	0	; () banked
 11503  0013B0  6780               	tstfsz	___ftmul@sign& (0+255),b
 11504  0013B2  D004               	goto	l6001
 11505                           
 11506                           ; BSR set to: 0
 11507  0013B4  6B70               	clrf	?___ftmul& (0+255),b
 11508  0013B6  6B71               	clrf	(?___ftmul+1)& (0+255),b
 11509  0013B8  6B72               	clrf	(?___ftmul+2)& (0+255),b
 11510  0013BA  0012               	return	
 11511  0013BC                     l6001:
 11512                           
 11513                           ; BSR set to: 0
 11514  0013BC  5180               	movf	___ftmul@sign& (0+255),w,b
 11515  0013BE  0F7B               	addlw	123
 11516  0013C0  277B               	addwf	___ftmul@exp& (0+255),f,b
 11517                           
 11518                           ; BSR set to: 0
 11519  0013C2  C072  F080         	movff	___ftmul@f1+2,___ftmul@sign
 11520  0013C6  0100               	movlb	0	; () banked
 11521  0013C8  5175               	movf	(___ftmul@f2+2)& (0+255),w,b
 11522  0013CA  1B80               	xorwf	___ftmul@sign& (0+255),f,b
 11523  0013CC  0E80               	movlw	128
 11524  0013CE  1780               	andwf	___ftmul@sign& (0+255),f,b
 11525                           
 11526                           ; BSR set to: 0
 11527  0013D0  8F71               	bsf	(___ftmul@f1+1)& (0+255),7,b
 11528                           
 11529                           ; BSR set to: 0
 11530  0013D2  8F74               	bsf	(___ftmul@f2+1)& (0+255),7,b
 11531                           
 11532                           ; BSR set to: 0
 11533  0013D4  0E00               	movlw	0
 11534  0013D6  1775               	andwf	(___ftmul@f2+2)& (0+255),f,b
 11535                           
 11536                           ; BSR set to: 0
 11537  0013D8  6B7C               	clrf	___ftmul@f3_as_product& (0+255),b
 11538  0013DA  6B7D               	clrf	(___ftmul@f3_as_product+1)& (0+255),b
 11539  0013DC  6B7E               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
 11540                           
 11541                           ; BSR set to: 0
 11542  0013DE  0E07               	movlw	7
 11543  0013E0  6F7F               	movwf	___ftmul@cntr& (0+255),b
 11544  0013E2                     l6015:
 11545                           
 11546                           ; BSR set to: 0
 11547  0013E2  A170               	btfss	___ftmul@f1& (0+255),0,b
 11548  0013E4  D002               	goto	l6019
 11549                           
 11550                           ; BSR set to: 0
 11551  0013E6  5173               	movf	___ftmul@f2& (0+255),w,b
 11552  0013E8  D82D               	call	PL74	;call to abstracted procedure
 11553  0013EA                     l6019:
 11554                           
 11555                           ; BSR set to: 0
 11556  0013EA  90D8               	bcf	status,0,c
 11557  0013EC  3372               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11558  0013EE  3371               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11559  0013F0  3370               	rrcf	___ftmul@f1& (0+255),f,b
 11560  0013F2  90D8               	bcf	status,0,c
 11561  0013F4  3773               	rlcf	___ftmul@f2& (0+255),f,b
 11562  0013F6  3774               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 11563  0013F8  3775               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 11564                           
 11565                           ; BSR set to: 0
 11566  0013FA  2F7F               	decfsz	___ftmul@cntr& (0+255),f,b
 11567  0013FC  D7F2               	goto	l6015
 11568                           
 11569                           ; BSR set to: 0
 11570  0013FE  0E09               	movlw	9
 11571  001400  6F7F               	movwf	___ftmul@cntr& (0+255),b
 11572  001402                     l6025:
 11573                           
 11574                           ; BSR set to: 0
 11575  001402  A170               	btfss	___ftmul@f1& (0+255),0,b
 11576  001404  D002               	goto	l6029
 11577                           
 11578                           ; BSR set to: 0
 11579  001406  5173               	movf	___ftmul@f2& (0+255),w,b
 11580  001408  D81D               	call	PL74	;call to abstracted procedure
 11581  00140A                     l6029:
 11582                           
 11583                           ; BSR set to: 0
 11584  00140A  90D8               	bcf	status,0,c
 11585  00140C  3372               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 11586  00140E  3371               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 11587  001410  3370               	rrcf	___ftmul@f1& (0+255),f,b
 11588  001412  90D8               	bcf	status,0,c
 11589  001414  337E               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 11590  001416  337D               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 11591  001418  337C               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 11592                           
 11593                           ; BSR set to: 0
 11594  00141A  2F7F               	decfsz	___ftmul@cntr& (0+255),f,b
 11595  00141C  D7F2               	goto	l6025
 11596                           
 11597                           ; BSR set to: 0
 11598  00141E  C07C  F068         	movff	___ftmul@f3_as_product,?___ftpack
 11599  001422  C07D  F069         	movff	___ftmul@f3_as_product+1,?___ftpack+1
 11600  001426  C07E  F06A         	movff	___ftmul@f3_as_product+2,?___ftpack+2
 11601  00142A  C07B  F06B         	movff	___ftmul@exp,?___ftpack+3
 11602  00142E  C080  F06C         	movff	___ftmul@sign,?___ftpack+4
 11603  001432  ECED  F00B         	call	___ftpack	;wreg free
 11604  001436  C068  F070         	movff	?___ftpack,?___ftmul
 11605  00143A  C069  F071         	movff	?___ftpack+1,?___ftmul+1
 11606  00143E  C06A  F072         	movff	?___ftpack+2,?___ftmul+2
 11607                           
 11608                           ; BSR set to: 0
 11609  001442  0012               	return	
 11610  001444                     __end_of___ftmul:
 11611                           	opt stack 0
 11612  001444                     PL74:
 11613                           	opt stack 19
 11614  001444  277C               	addwf	___ftmul@f3_as_product& (0+255),f,b
 11615  001446  5174               	movf	(___ftmul@f2+1)& (0+255),w,b
 11616  001448  237D               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 11617  00144A  5175               	movf	(___ftmul@f2+2)& (0+255),w,b
 11618  00144C  237E               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 11619  00144E  0012               	return	
 11620  001450                     __end_ofPL74:
 11621                           	opt stack 0
 11622  001450                     PL78:
 11623                           	opt stack 19
 11624  001450  90D8               	bcf	status,0,c
 11625  001452  3379               	rrcf	(??___ftmul+3)& (0+255),f,b
 11626  001454  3378               	rrcf	(??___ftmul+2)& (0+255),f,b
 11627  001456  3377               	rrcf	(??___ftmul+1)& (0+255),f,b
 11628  001458  0012               	return	
 11629  00145A                     __end_ofPL78:
 11630                           	opt stack 0
 11631                           tosu	equ	0xFFF
 11632                           tosh	equ	0xFFE
 11633                           tosl	equ	0xFFD
 11634                           pclath	equ	0xFFA
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           indf0	equ	0xFEF
 11643                           postinc0	equ	0xFEE
 11644                           fsr0h	equ	0xFEA
 11645                           fsr0l	equ	0xFE9
 11646                           wreg	equ	0xFE8
 11647                           indf1	equ	0xFE7
 11648                           postinc1	equ	0xFE6
 11649                           postdec1	equ	0xFE5
 11650                           fsr1h	equ	0xFE2
 11651                           fsr1l	equ	0xFE1
 11652                           indf2	equ	0xFDF
 11653                           postinc2	equ	0xFDE
 11654                           postdec2	equ	0xFDD
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8
 11658                           
 11659 ;; *************** function _isr_high *****************
 11660 ;; Defined at:
 11661 ;;		line 16 in file "src/interrupts.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;		None               void
 11668 ;; Registers used:
 11669 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11675 ;;      Params:         0       0       0       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0       0       0
 11677 ;;      Temps:          8       0       0       0       0       0       0
 11678 ;;      Totals:         8       0       0       0       0       0       0
 11679 ;;Total ram usage:        8 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    4
 11682 ;; This function calls:
 11683 ;;		_delay_interrupt_service
 11684 ;;		_serialport_service
 11685 ;;		_detection_obtain_analog_service
 11686 ;; This function is called by:
 11687 ;;		Interrupt level 2
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691 ;; *************** function interrupts@isr_high *****************
 11692 ;; Defined at:
 11693 ;;		line 16 in file "src/interrupts.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;		None
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;		None               void
 11700 ;; Registers used:
 11701 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11707 ;;      Params:         0       0       0       0       0       0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0
 11709 ;;      Temps:          0       8       0       0       0       0       0
 11710 ;;      Totals:         0       8       0       0       0       0       0
 11711 ;;Total ram usage:        8 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    4
 11714 ;; This function calls:
 11715 ;;		_delay_interrupt_service
 11716 ;;		_serialport_service
 11717 ;;		_detection_obtain_analog_service
 11718 ;; This function is called by:
 11719 ;;		Interrupt level 2
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           	psect	intcode
 11724  000008                     __pintcode:
 11725                           	opt stack 0
 11726  000008                     _isr_high:
 11727                           	opt stack 19
 11728                           
 11729                           ; BSR set to: 0
 11730  000008  CFE9 F013          	movff	fsr0l,??_isr_high
 11731  00000C  CFEA F014          	movff	fsr0h,??_isr_high+1
 11732  000010  CFD9 F015          	movff	fsr2l,??_isr_high+2
 11733  000014  CFDA F016          	movff	fsr2h,??_isr_high+3
 11734  000018  CFF6 F017          	movff	tblptrl,??_isr_high+4
 11735  00001C  CFF7 F018          	movff	tblptrh,??_isr_high+5
 11736  000020  CFF8 F019          	movff	tblptru,??_isr_high+6
 11737  000024  CFF5 F01A          	movff	tablat,??_isr_high+7
 11738  000028                     
 11739                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
 11740  000028  A4F2               	btfss	intcon,2,c	;volatile
 11741  00002A  D001               	goto	i2u364_41
 11742  00002C  D001               	goto	i2u364_40
 11743  00002E                     i2u364_41:
 11744  00002E  D007               	goto	i2l4401
 11745  000030                     i2u364_40:
 11746  000030                     
 11747                           ;interrupts.c: 19: {
 11748                           ;interrupts.c: 20: delay_interrupt_service();
 11749  000030  ECE9  F010         	call	_delay_interrupt_service	;wreg free
 11750  000034                     
 11751                           ; BSR set to: 0
 11752  000034  94F2               	bcf	intcon,2,c	;volatile
 11753  000036                     
 11754                           ; BSR set to: 0
 11755  000036  0EFE               	movlw	254
 11756  000038  6ED7               	movwf	4055,c	;volatile
 11757  00003A  0E0C               	movlw	12
 11758  00003C  6ED6               	movwf	4054,c	;volatile
 11759  00003E                     i2l4401:
 11760                           
 11761                           ;interrupts.c: 23: }
 11762                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 11763  00003E  AA9E               	btfss	3998,5,c	;volatile
 11764  000040  D001               	goto	i2u365_41
 11765  000042  D001               	goto	i2u365_40
 11766  000044                     i2u365_41:
 11767  000044  D003               	goto	i2l4407
 11768  000046                     i2u365_40:
 11769  000046                     
 11770                           ;interrupts.c: 26: {
 11771                           ;interrupts.c: 28: serialport_service();
 11772  000046  EC78  F00E         	call	_serialport_service	;wreg free
 11773  00004A                     
 11774                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 11775  00004A  9A9E               	bcf	3998,5,c	;volatile
 11776  00004C                     i2l4407:
 11777                           
 11778                           ;interrupts.c: 30: }
 11779                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 11780  00004C  AC9E               	btfss	3998,6,c	;volatile
 11781  00004E  D001               	goto	i2u366_41
 11782  000050  D001               	goto	i2u366_40
 11783  000052                     i2u366_41:
 11784  000052  D003               	goto	i2l973
 11785  000054                     i2u366_40:
 11786  000054                     
 11787                           ;interrupts.c: 36: {
 11788                           ;interrupts.c: 38: detection_obtain_analog_service();
 11789  000054  EC40  F010         	call	_detection_obtain_analog_service	;wreg free
 11790  000058                     
 11791                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 11792  000058  9C9E               	bcf	3998,6,c	;volatile
 11793  00005A                     i2l973:
 11794  00005A  C01A  FFF5         	movff	??_isr_high+7,tablat
 11795  00005E  C019  FFF8         	movff	??_isr_high+6,tblptru
 11796  000062  C018  FFF7         	movff	??_isr_high+5,tblptrh
 11797  000066  C017  FFF6         	movff	??_isr_high+4,tblptrl
 11798  00006A  C016  FFDA         	movff	??_isr_high+3,fsr2h
 11799  00006E  C015  FFD9         	movff	??_isr_high+2,fsr2l
 11800  000072  C014  FFEA         	movff	??_isr_high+1,fsr0h
 11801  000076  C013  FFE9         	movff	??_isr_high,fsr0l
 11802  00007A  0011               	retfie		f
 11803  00007C                     __end_of_isr_high:
 11804                           	opt stack 0
 11805  00007C                     interrupts@isr_high:
 11806                           	opt stack 19
 11807  00007C  CFE9 F060          	movff	fsr0l,??interrupts@isr_high
 11808  000080  CFEA F061          	movff	fsr0h,??interrupts@isr_high+1
 11809  000084  CFD9 F062          	movff	fsr2l,??interrupts@isr_high+2
 11810  000088  CFDA F063          	movff	fsr2h,??interrupts@isr_high+3
 11811  00008C  CFF6 F064          	movff	tblptrl,??interrupts@isr_high+4
 11812  000090  CFF7 F065          	movff	tblptrh,??interrupts@isr_high+5
 11813  000094  CFF8 F066          	movff	tblptru,??interrupts@isr_high+6
 11814  000098  CFF5 F067          	movff	tablat,??interrupts@isr_high+7
 11815  00009C                     
 11816                           ;interrupts.c: 18: if ((INTCONbits.TMR0IF) )
 11817  00009C  A4F2               	btfss	intcon,2,c	;volatile
 11818  00009E  D001               	goto	i2u645_41
 11819  0000A0  D001               	goto	i2u645_40
 11820  0000A2                     i2u645_41:
 11821  0000A2  D007               	goto	i2l6117
 11822  0000A4                     i2u645_40:
 11823  0000A4                     
 11824                           ;interrupts.c: 19: {
 11825                           ;interrupts.c: 20: delay_interrupt_service();
 11826  0000A4  ECE9  F010         	call	_delay_interrupt_service	;wreg free
 11827  0000A8                     
 11828                           ; BSR set to: 0
 11829  0000A8  94F2               	bcf	intcon,2,c	;volatile
 11830  0000AA                     
 11831                           ; BSR set to: 0
 11832  0000AA  0EFE               	movlw	254
 11833  0000AC  6ED7               	movwf	4055,c	;volatile
 11834  0000AE  0E0C               	movlw	12
 11835  0000B0  6ED6               	movwf	4054,c	;volatile
 11836  0000B2                     i2l6117:
 11837                           
 11838                           ;interrupts.c: 23: }
 11839                           ;interrupts.c: 25: if(PIR1bits.RCIF)
 11840  0000B2  AA9E               	btfss	3998,5,c	;volatile
 11841  0000B4  D001               	goto	i2u646_41
 11842  0000B6  D001               	goto	i2u646_40
 11843  0000B8                     i2u646_41:
 11844  0000B8  D003               	goto	i2l6123
 11845  0000BA                     i2u646_40:
 11846  0000BA                     
 11847                           ;interrupts.c: 26: {
 11848                           ;interrupts.c: 28: serialport_service();
 11849  0000BA  EC78  F00E         	call	_serialport_service	;wreg free
 11850  0000BE                     
 11851                           ;interrupts.c: 29: PIR1bits.RCIF = 0;
 11852  0000BE  9A9E               	bcf	3998,5,c	;volatile
 11853  0000C0                     i2l6123:
 11854                           
 11855                           ;interrupts.c: 30: }
 11856                           ;interrupts.c: 35: if(PIR1bits.ADIF)
 11857  0000C0  AC9E               	btfss	3998,6,c	;volatile
 11858  0000C2  D001               	goto	i2u647_41
 11859  0000C4  D001               	goto	i2u647_40
 11860  0000C6                     i2u647_41:
 11861  0000C6  D003               	goto	i2l997
 11862  0000C8                     i2u647_40:
 11863  0000C8                     
 11864                           ;interrupts.c: 36: {
 11865                           ;interrupts.c: 38: detection_obtain_analog_service();
 11866  0000C8  EC40  F010         	call	_detection_obtain_analog_service	;wreg free
 11867  0000CC                     
 11868                           ;interrupts.c: 39: PIR1bits.ADIF = 0;
 11869  0000CC  9C9E               	bcf	3998,6,c	;volatile
 11870  0000CE                     i2l997:
 11871  0000CE  C067  FFF5         	movff	??interrupts@isr_high+7,tablat
 11872  0000D2  C066  FFF8         	movff	??interrupts@isr_high+6,tblptru
 11873  0000D6  C065  FFF7         	movff	??interrupts@isr_high+5,tblptrh
 11874  0000DA  C064  FFF6         	movff	??interrupts@isr_high+4,tblptrl
 11875  0000DE  C063  FFDA         	movff	??interrupts@isr_high+3,fsr2h
 11876  0000E2  C062  FFD9         	movff	??interrupts@isr_high+2,fsr2l
 11877  0000E6  C061  FFEA         	movff	??interrupts@isr_high+1,fsr0h
 11878  0000EA  C060  FFE9         	movff	??interrupts@isr_high,fsr0l
 11879  0000EE  0011               	retfie		f
 11880  0000F0                     __end_ofinterrupts@isr_high:
 11881                           	opt stack 0
 11882  0000F0                     tosu	equ	0xFFF
 11883                           tosh	equ	0xFFE
 11884                           tosl	equ	0xFFD
 11885                           pclath	equ	0xFFA
 11886                           tblptru	equ	0xFF8
 11887                           tblptrh	equ	0xFF7
 11888                           tblptrl	equ	0xFF6
 11889                           tablat	equ	0xFF5
 11890                           prodh	equ	0xFF4
 11891                           prodl	equ	0xFF3
 11892                           intcon	equ	0xFF2
 11893                           indf0	equ	0xFEF
 11894                           postinc0	equ	0xFEE
 11895                           fsr0h	equ	0xFEA
 11896                           fsr0l	equ	0xFE9
 11897                           wreg	equ	0xFE8
 11898                           indf1	equ	0xFE7
 11899                           postinc1	equ	0xFE6
 11900                           postdec1	equ	0xFE5
 11901                           fsr1h	equ	0xFE2
 11902                           fsr1l	equ	0xFE1
 11903                           indf2	equ	0xFDF
 11904                           postinc2	equ	0xFDE
 11905                           postdec2	equ	0xFDD
 11906                           fsr2h	equ	0xFDA
 11907                           fsr2l	equ	0xFD9
 11908                           status	equ	0xFD8
 11909                           
 11910 ;; *************** function _delay_interrupt_service *****************
 11911 ;; Defined at:
 11912 ;;		line 60 in file "src/drivers/delay.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;		None
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;		None
 11917 ;; Return value:  Size  Location     Type
 11918 ;;		None               void
 11919 ;; Registers used:
 11920 ;;		wreg, status,2, status,0
 11921 ;; Tracked objects:
 11922 ;;		On entry : 0/0
 11923 ;;		On exit  : F/0
 11924 ;;		Unchanged: FFFFFFF0/0
 11925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11926 ;;      Params:         0       0       0       0       0       0       0
 11927 ;;      Locals:         0       0       0       0       0       0       0
 11928 ;;      Temps:          0       0       0       0       0       0       0
 11929 ;;      Totals:         0       0       0       0       0       0       0
 11930 ;;Total ram usage:        0 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; This function calls:
 11933 ;;		Nothing
 11934 ;; This function is called by:
 11935 ;;		_isr_high
 11936 ;;		interrupts@isr_high
 11937 ;; This function uses a non-reentrant model
 11938 ;;
 11939                           
 11940                           	psect	text58
 11941  0021D2                     __ptext58:
 11942                           	opt stack 0
 11943  0021D2                     _delay_interrupt_service:
 11944                           	opt stack 22
 11945                           
 11946                           ;delay.c: 61: if(this_delay_timer_ms > 0u) {
 11947  0021D2  0100               	movlb	0	; () banked
 11948  0021D4  51F7               	movf	(_this_delay_timer_ms+1)& (0+255),w,b	;volatile
 11949  0021D6  11F6               	iorwf	_this_delay_timer_ms& (0+255),w,b	;volatile
 11950  0021D8  B4D8               	btfsc	status,2,c
 11951  0021DA  0012               	return	
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;delay.c: 62: this_delay_timer_ms--;
 11955  0021DC  07F6               	decf	_this_delay_timer_ms& (0+255),f,b	;volatile
 11956  0021DE  A0D8               	btfss	status,0,c
 11957  0021E0  07F7               	decf	(_this_delay_timer_ms+1)& (0+255),f,b	;volatile
 11958                           
 11959                           ; BSR set to: 0
 11960  0021E2  0012               	return	
 11961  0021E4                     __end_of_delay_interrupt_service:
 11962                           	opt stack 0
 11963                           tosu	equ	0xFFF
 11964                           tosh	equ	0xFFE
 11965                           tosl	equ	0xFFD
 11966                           pclath	equ	0xFFA
 11967                           tblptru	equ	0xFF8
 11968                           tblptrh	equ	0xFF7
 11969                           tblptrl	equ	0xFF6
 11970                           tablat	equ	0xFF5
 11971                           prodh	equ	0xFF4
 11972                           prodl	equ	0xFF3
 11973                           intcon	equ	0xFF2
 11974                           indf0	equ	0xFEF
 11975                           postinc0	equ	0xFEE
 11976                           fsr0h	equ	0xFEA
 11977                           fsr0l	equ	0xFE9
 11978                           wreg	equ	0xFE8
 11979                           indf1	equ	0xFE7
 11980                           postinc1	equ	0xFE6
 11981                           postdec1	equ	0xFE5
 11982                           fsr1h	equ	0xFE2
 11983                           fsr1l	equ	0xFE1
 11984                           indf2	equ	0xFDF
 11985                           postinc2	equ	0xFDE
 11986                           postdec2	equ	0xFDD
 11987                           fsr2h	equ	0xFDA
 11988                           fsr2l	equ	0xFD9
 11989                           status	equ	0xFD8
 11990                           
 11991 ;; *************** function _serialport_service *****************
 11992 ;; Defined at:
 11993 ;;		line 24 in file "src/modules/serialport.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;		None
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  byte            1   43[COMRAM] unsigned char 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;		None               void
 12000 ;; Registers used:
 12001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: FFFFFFF0/0
 12006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12007 ;;      Params:         0       0       0       0       0       0       0
 12008 ;;      Locals:         1       0       0       0       0       0       0
 12009 ;;      Temps:          1       0       0       0       0       0       0
 12010 ;;      Totals:         2       0       0       0       0       0       0
 12011 ;;Total ram usage:        2 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    3
 12014 ;; This function calls:
 12015 ;;		_uart_byte_available
 12016 ;;		_uart_getc
 12017 ;;		i2_rd_buffer_put
 12018 ;; This function is called by:
 12019 ;;		_isr_high
 12020 ;;		interrupts@isr_high
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           	psect	text59
 12025  001CF0                     __ptext59:
 12026                           	opt stack 0
 12027  001CF0                     _serialport_service:
 12028                           	opt stack 19
 12029                           
 12030                           ;serialport.c: 25: UINT8 byte;
 12031                           ;serialport.c: 26: if (uart_byte_available()) {
 12032                           
 12033                           ; BSR set to: 0
 12034  001CF0  EC11  F011         	call	_uart_byte_available	;wreg free
 12035  001CF4  0900               	iorlw	0
 12036  001CF6  B4D8               	btfsc	status,2,c
 12037  001CF8  0012               	return	
 12038                           
 12039                           ;serialport.c: 27: if (uart_getc(&byte) == RESULT_SUCCESS) {
 12040  001CFA  0E2C               	movlw	serialport_service@byte& (0+255)
 12041  001CFC  ECFD  F00F         	call	_uart_getc
 12042  001D00  6E2B               	movwf	??_serialport_service& (0+255),c
 12043  001D02  042B               	decf	??_serialport_service,w,c
 12044  001D04  E110               	bnz	i2l4809
 12045                           
 12046                           ;serialport.c: 28: rd_buffer_put(&g_rx_buffer, &byte);
 12047  001D06  0102               	movlb	2	; () banked
 12048  001D08  0E02               	movlw	high _g_rx_buffer
 12049  001D0A  6E1C               	movwf	?i2_rd_buffer_put+1,c
 12050  001D0C  0E7F               	movlw	low _g_rx_buffer
 12051  001D0E  6E1B               	movwf	?i2_rd_buffer_put,c
 12052  001D10  0E2C               	movlw	low serialport_service@byte
 12053  001D12  6E1D               	movwf	?i2_rd_buffer_put+2,c
 12054  001D14  0E00               	movlw	high serialport_service@byte
 12055  001D16  6E1E               	movwf	?i2_rd_buffer_put+3,c
 12056  001D18  0E0F               	movlw	15
 12057  001D1A  6E1E               	movwf	?i2_rd_buffer_put+3,c
 12058  001D1C  0E5F               	movlw	__accesstop+-1
 12059  001D1E  641D               	cpfsgt	?i2_rd_buffer_put+2,c
 12060  001D20  6A1E               	clrf	?i2_rd_buffer_put+3,c
 12061  001D22  EC32  F009         	call	i2_rd_buffer_put	;wreg free
 12062  001D26                     i2l4809:
 12063                           
 12064                           ;serialport.c: 29: }
 12065                           ;serialport.c: 30: if(byte=='\n' || byte=='\r')
 12066  001D26  502C               	movf	serialport_service@byte,w,c
 12067  001D28  0A0A               	xorlw	10
 12068  001D2A  E004               	bz	i2l4813
 12069  001D2C  502C               	movf	serialport_service@byte,w,c
 12070  001D2E  0A0D               	xorlw	13
 12071  001D30  A4D8               	btfss	status,2,c
 12072  001D32  0012               	return	
 12073  001D34                     i2l4813:
 12074  001D34  0E01               	movlw	1
 12075  001D36  6E3A               	movwf	_pool+5,c	;volatile
 12076  001D38  0E0A               	movlw	10
 12077  001D3A  6E32               	movwf	_event_miss+5,c	;volatile
 12078  001D3C  0C0A               	retlw	10
 12079  001D3E                     __end_of_serialport_service:
 12080                           	opt stack 0
 12081                           tosu	equ	0xFFF
 12082                           tosh	equ	0xFFE
 12083                           tosl	equ	0xFFD
 12084                           pclath	equ	0xFFA
 12085                           tblptru	equ	0xFF8
 12086                           tblptrh	equ	0xFF7
 12087                           tblptrl	equ	0xFF6
 12088                           tablat	equ	0xFF5
 12089                           prodh	equ	0xFF4
 12090                           prodl	equ	0xFF3
 12091                           intcon	equ	0xFF2
 12092                           indf0	equ	0xFEF
 12093                           postinc0	equ	0xFEE
 12094                           fsr0h	equ	0xFEA
 12095                           fsr0l	equ	0xFE9
 12096                           wreg	equ	0xFE8
 12097                           indf1	equ	0xFE7
 12098                           postinc1	equ	0xFE6
 12099                           postdec1	equ	0xFE5
 12100                           fsr1h	equ	0xFE2
 12101                           fsr1l	equ	0xFE1
 12102                           indf2	equ	0xFDF
 12103                           postinc2	equ	0xFDE
 12104                           postdec2	equ	0xFDD
 12105                           fsr2h	equ	0xFDA
 12106                           fsr2l	equ	0xFD9
 12107                           status	equ	0xFD8
 12108                           
 12109 ;; *************** function _uart_getc *****************
 12110 ;; Defined at:
 12111 ;;		line 56 in file "src/drivers/uart.c"
 12112 ;; Parameters:    Size  Location     Type
 12113 ;;  pbyte           1    wreg     PTR unsigned char 
 12114 ;;		 -> serialport_service@byte(1), 
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;  pbyte           1   27[COMRAM] PTR unsigned char 
 12117 ;;		 -> serialport_service@byte(1), 
 12118 ;;  result          1   28[COMRAM] enum E3389
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      enum E3389
 12121 ;; Registers used:
 12122 ;;		wreg, fsr2l, fsr2h, status,2, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 0/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: FFFFFFFF/0
 12127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12128 ;;      Params:         0       0       0       0       0       0       0
 12129 ;;      Locals:         2       0       0       0       0       0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0
 12131 ;;      Totals:         2       0       0       0       0       0       0
 12132 ;;Total ram usage:        2 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    2
 12135 ;; This function calls:
 12136 ;;		_uart_error
 12137 ;;		_uart_reset
 12138 ;;		_uart_byte_available
 12139 ;; This function is called by:
 12140 ;;		_serialport_service
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           	psect	text60
 12145  001FFA                     __ptext60:
 12146                           	opt stack 0
 12147  001FFA                     _uart_getc:
 12148                           	opt stack 19
 12149                           
 12150                           ;uart_getc@pbyte stored from wreg
 12151  001FFA  CFE8 F01C          	movff	wreg,uart_getc@pbyte
 12152                           
 12153                           ;uart.c: 57: ResultSuccess_t result = RESULT_FAIL;
 12154  001FFE  6A1D               	clrf	uart_getc@result,c
 12155                           
 12156                           ;uart.c: 58: if ( uart_error())
 12157  002000  ECFA  F010         	call	_uart_error	;wreg free
 12158  002004  0900               	iorlw	0
 12159  002006  E003               	bz	i2l4791
 12160                           
 12161                           ;uart.c: 59: {
 12162                           ;uart.c: 60: uart_reset();
 12163  002008  EC76  F010         	call	_uart_reset	;wreg free
 12164                           
 12165                           ;uart.c: 61: }
 12166  00200C  D00C               	goto	i2l4799
 12167  00200E                     i2l4791:
 12168                           
 12169                           ;uart.c: 62: else
 12170                           ;uart.c: 63: if( uart_byte_available() )
 12171  00200E  EC11  F011         	call	_uart_byte_available	;wreg free
 12172  002012  0900               	iorlw	0
 12173  002014  E008               	bz	i2l4799
 12174                           
 12175                           ;uart.c: 64: {
 12176                           ;uart.c: 65: *pbyte = RCREG;
 12177  002016  501C               	movf	uart_getc@pbyte,w,c
 12178  002018  6ED9               	movwf	fsr2l,c
 12179  00201A  6ADA               	clrf	fsr2h,c
 12180  00201C  CFAE FFDF          	movff	4014,indf2	;volatile
 12181                           
 12182                           ;uart.c: 66: RCIF = 0;
 12183  002020  9A9E               	bcf	3998,5,c	;volatile
 12184                           
 12185                           ;uart.c: 67: result = RESULT_SUCCESS;
 12186  002022  0E01               	movlw	1
 12187  002024  6E1D               	movwf	uart_getc@result,c
 12188  002026                     i2l4799:
 12189                           
 12190                           ;uart.c: 68: }
 12191                           ;uart.c: 69: return result;
 12192  002026  501D               	movf	uart_getc@result,w,c
 12193  002028  0012               	return	
 12194  00202A                     __end_of_uart_getc:
 12195                           	opt stack 0
 12196                           tosu	equ	0xFFF
 12197                           tosh	equ	0xFFE
 12198                           tosl	equ	0xFFD
 12199                           pclath	equ	0xFFA
 12200                           tblptru	equ	0xFF8
 12201                           tblptrh	equ	0xFF7
 12202                           tblptrl	equ	0xFF6
 12203                           tablat	equ	0xFF5
 12204                           prodh	equ	0xFF4
 12205                           prodl	equ	0xFF3
 12206                           intcon	equ	0xFF2
 12207                           indf0	equ	0xFEF
 12208                           postinc0	equ	0xFEE
 12209                           fsr0h	equ	0xFEA
 12210                           fsr0l	equ	0xFE9
 12211                           wreg	equ	0xFE8
 12212                           indf1	equ	0xFE7
 12213                           postinc1	equ	0xFE6
 12214                           postdec1	equ	0xFE5
 12215                           fsr1h	equ	0xFE2
 12216                           fsr1l	equ	0xFE1
 12217                           indf2	equ	0xFDF
 12218                           postinc2	equ	0xFDE
 12219                           postdec2	equ	0xFDD
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224 ;; *************** function _uart_reset *****************
 12225 ;; Defined at:
 12226 ;;		line 73 in file "src/drivers/uart.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;		None
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;		None
 12231 ;; Return value:  Size  Location     Type
 12232 ;;		None               void
 12233 ;; Registers used:
 12234 ;;		wreg, status,2, cstack
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: FFFFFFFF/0
 12239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12240 ;;      Params:         0       0       0       0       0       0       0
 12241 ;;      Locals:         0       0       0       0       0       0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0
 12243 ;;      Totals:         0       0       0       0       0       0       0
 12244 ;;Total ram usage:        0 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    1
 12247 ;; This function calls:
 12248 ;;		_uart_byte_available
 12249 ;;		_uart_error
 12250 ;; This function is called by:
 12251 ;;		_uart_getc
 12252 ;; This function uses a non-reentrant model
 12253 ;;
 12254                           
 12255                           	psect	text61
 12256  0020EC                     __ptext61:
 12257                           	opt stack 0
 12258  0020EC                     _uart_reset:
 12259                           	opt stack 19
 12260                           
 12261                           ;uart.c: 74: while(uart_error() )
 12262  0020EC  D008               	goto	i2l4779
 12263  0020EE                     i2l110:
 12264                           
 12265                           ;uart.c: 75: {
 12266                           ;uart.c: 76: CREN = 0;
 12267  0020EE  98AB               	bcf	4011,4,c	;volatile
 12268                           
 12269                           ;uart.c: 77: RCREG;
 12270  0020F0  50AE               	movf	4014,w,c	;volatile
 12271                           
 12272                           ;uart.c: 78: RCREG;
 12273  0020F2  50AE               	movf	4014,w,c	;volatile
 12274                           
 12275                           ;uart.c: 79: CREN = 1;
 12276  0020F4  88AB               	bsf	4011,4,c	;volatile
 12277  0020F6                     i2l4777:
 12278  0020F6  EC11  F011         	call	_uart_byte_available	;wreg free
 12279  0020FA  0900               	iorlw	0
 12280  0020FC  E1FC               	bnz	i2l4777
 12281  0020FE                     i2l4779:
 12282  0020FE  ECFA  F010         	call	_uart_error	;wreg free
 12283  002102  0900               	iorlw	0
 12284  002104  B4D8               	btfsc	status,2,c
 12285  002106  0012               	return	
 12286  002108  D7F2               	goto	i2l110
 12287  00210A                     __end_of_uart_reset:
 12288                           	opt stack 0
 12289                           tosu	equ	0xFFF
 12290                           tosh	equ	0xFFE
 12291                           tosl	equ	0xFFD
 12292                           pclath	equ	0xFFA
 12293                           tblptru	equ	0xFF8
 12294                           tblptrh	equ	0xFF7
 12295                           tblptrl	equ	0xFF6
 12296                           tablat	equ	0xFF5
 12297                           prodh	equ	0xFF4
 12298                           prodl	equ	0xFF3
 12299                           intcon	equ	0xFF2
 12300                           indf0	equ	0xFEF
 12301                           postinc0	equ	0xFEE
 12302                           fsr0h	equ	0xFEA
 12303                           fsr0l	equ	0xFE9
 12304                           wreg	equ	0xFE8
 12305                           indf1	equ	0xFE7
 12306                           postinc1	equ	0xFE6
 12307                           postdec1	equ	0xFE5
 12308                           fsr1h	equ	0xFE2
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           postdec2	equ	0xFDD
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function _uart_byte_available *****************
 12318 ;; Defined at:
 12319 ;;		line 52 in file "src/drivers/uart.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;		None
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;		None
 12324 ;; Return value:  Size  Location     Type
 12325 ;;                  1    wreg      unsigned char 
 12326 ;; Registers used:
 12327 ;;		wreg
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: FFFFFFFF/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12333 ;;      Params:         0       0       0       0       0       0       0
 12334 ;;      Locals:         0       0       0       0       0       0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0
 12336 ;;      Totals:         0       0       0       0       0       0       0
 12337 ;;Total ram usage:        0 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; This function calls:
 12340 ;;		Nothing
 12341 ;; This function is called by:
 12342 ;;		_uart_getc
 12343 ;;		_uart_reset
 12344 ;;		_serialport_service
 12345 ;; This function uses a non-reentrant model
 12346 ;;
 12347                           
 12348                           	psect	text62
 12349  002222                     __ptext62:
 12350                           	opt stack 0
 12351  002222                     _uart_byte_available:
 12352                           	opt stack 20
 12353                           
 12354                           ;uart.c: 53: return RC1IF;
 12355  002222  0E00               	movlw	0
 12356  002224  BA9E               	btfsc	3998,5,c	;volatile
 12357  002226  0E01               	movlw	1
 12358  002228  0012               	return	
 12359  00222A                     __end_of_uart_byte_available:
 12360                           	opt stack 0
 12361                           tosu	equ	0xFFF
 12362                           tosh	equ	0xFFE
 12363                           tosl	equ	0xFFD
 12364                           pclath	equ	0xFFA
 12365                           tblptru	equ	0xFF8
 12366                           tblptrh	equ	0xFF7
 12367                           tblptrl	equ	0xFF6
 12368                           tablat	equ	0xFF5
 12369                           prodh	equ	0xFF4
 12370                           prodl	equ	0xFF3
 12371                           intcon	equ	0xFF2
 12372                           indf0	equ	0xFEF
 12373                           postinc0	equ	0xFEE
 12374                           fsr0h	equ	0xFEA
 12375                           fsr0l	equ	0xFE9
 12376                           wreg	equ	0xFE8
 12377                           indf1	equ	0xFE7
 12378                           postinc1	equ	0xFE6
 12379                           postdec1	equ	0xFE5
 12380                           fsr1h	equ	0xFE2
 12381                           fsr1l	equ	0xFE1
 12382                           indf2	equ	0xFDF
 12383                           postinc2	equ	0xFDE
 12384                           postdec2	equ	0xFDD
 12385                           fsr2h	equ	0xFDA
 12386                           fsr2l	equ	0xFD9
 12387                           status	equ	0xFD8
 12388                           
 12389 ;; *************** function _uart_error *****************
 12390 ;; Defined at:
 12391 ;;		line 85 in file "src/drivers/uart.c"
 12392 ;; Parameters:    Size  Location     Type
 12393 ;;		None
 12394 ;; Auto vars:     Size  Location     Type
 12395 ;;		None
 12396 ;; Return value:  Size  Location     Type
 12397 ;;                  1    wreg      unsigned char 
 12398 ;; Registers used:
 12399 ;;		wreg, status,2
 12400 ;; Tracked objects:
 12401 ;;		On entry : 0/0
 12402 ;;		On exit  : 0/0
 12403 ;;		Unchanged: FFFFFFFF/0
 12404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12405 ;;      Params:         0       0       0       0       0       0       0
 12406 ;;      Locals:         1       0       0       0       0       0       0
 12407 ;;      Temps:          0       0       0       0       0       0       0
 12408 ;;      Totals:         1       0       0       0       0       0       0
 12409 ;;Total ram usage:        1 bytes
 12410 ;; Hardware stack levels used:    1
 12411 ;; This function calls:
 12412 ;;		Nothing
 12413 ;; This function is called by:
 12414 ;;		_uart_getc
 12415 ;;		_uart_reset
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419                           	psect	text63
 12420  0021F4                     __ptext63:
 12421                           	opt stack 0
 12422  0021F4                     _uart_error:
 12423                           	opt stack 19
 12424                           
 12425                           ;uart.c: 86: return RCSTAbits.OERR || RCSTAbits.FERR ;
 12426  0021F4  0E01               	movlw	1
 12427  0021F6  6E1B               	movwf	_uart_error$232,c
 12428  0021F8  A2AB               	btfss	4011,1,c	;volatile
 12429  0021FA  B4AB               	btfsc	4011,2,c	;volatile
 12430  0021FC  D001               	goto	i2l3509
 12431  0021FE  6A1B               	clrf	_uart_error$232,c
 12432  002200                     i2l3509:
 12433  002200  501B               	movf	_uart_error$232,w,c
 12434  002202  0012               	return	
 12435  002204                     __end_of_uart_error:
 12436                           	opt stack 0
 12437                           tosu	equ	0xFFF
 12438                           tosh	equ	0xFFE
 12439                           tosl	equ	0xFFD
 12440                           pclath	equ	0xFFA
 12441                           tblptru	equ	0xFF8
 12442                           tblptrh	equ	0xFF7
 12443                           tblptrl	equ	0xFF6
 12444                           tablat	equ	0xFF5
 12445                           prodh	equ	0xFF4
 12446                           prodl	equ	0xFF3
 12447                           intcon	equ	0xFF2
 12448                           indf0	equ	0xFEF
 12449                           postinc0	equ	0xFEE
 12450                           fsr0h	equ	0xFEA
 12451                           fsr0l	equ	0xFE9
 12452                           wreg	equ	0xFE8
 12453                           indf1	equ	0xFE7
 12454                           postinc1	equ	0xFE6
 12455                           postdec1	equ	0xFE5
 12456                           fsr1h	equ	0xFE2
 12457                           fsr1l	equ	0xFE1
 12458                           indf2	equ	0xFDF
 12459                           postinc2	equ	0xFDE
 12460                           postdec2	equ	0xFDD
 12461                           fsr2h	equ	0xFDA
 12462                           fsr2l	equ	0xFD9
 12463                           status	equ	0xFD8
 12464                           
 12465 ;; *************** function _detection_obtain_analog_service *****************
 12466 ;; Defined at:
 12467 ;;		line 142 in file "src/modules/detection.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;		None
 12470 ;; Auto vars:     Size  Location     Type
 12471 ;;  adc_data        1   42[COMRAM] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;		None               void
 12474 ;; Registers used:
 12475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12476 ;; Tracked objects:
 12477 ;;		On entry : 0/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12481 ;;      Params:         0       0       0       0       0       0       0
 12482 ;;      Locals:         1       0       0       0       0       0       0
 12483 ;;      Temps:          0       0       0       0       0       0       0
 12484 ;;      Totals:         1       0       0       0       0       0       0
 12485 ;;Total ram usage:        1 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; Hardware stack levels required when called:    1
 12488 ;; This function calls:
 12489 ;;		i2_adc_read
 12490 ;;		i2_rd_buffer_put
 12491 ;; This function is called by:
 12492 ;;		_isr_high
 12493 ;;		interrupts@isr_high
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text64
 12498  002080                     __ptext64:
 12499                           	opt stack 0
 12500  002080                     _detection_obtain_analog_service:
 12501                           	opt stack 21
 12502                           
 12503                           ;detection.c: 143: UINT8 adc_data;
 12504                           ;detection.c: 144: adc_data = adc_read(0);
 12505  002080  0E00               	movlw	0
 12506  002082  ECC7  F00F         	call	i2_adc_read
 12507  002086  6E2B               	movwf	detection_obtain_analog_service@adc_data,c
 12508                           
 12509                           ;detection.c: 145: rd_buffer_put(&meas_buffer, &adc_data);
 12510  002088  0104               	movlb	4	; () banked
 12511  00208A  0E04               	movlw	high _meas_buffer
 12512  00208C  6E1C               	movwf	?i2_rd_buffer_put+1,c
 12513  00208E  0E50               	movlw	low _meas_buffer
 12514  002090  6E1B               	movwf	?i2_rd_buffer_put,c
 12515  002092  0E2B               	movlw	low detection_obtain_analog_service@adc_data
 12516  002094  6E1D               	movwf	?i2_rd_buffer_put+2,c
 12517  002096  0E00               	movlw	high detection_obtain_analog_service@adc_data
 12518  002098  6E1E               	movwf	?i2_rd_buffer_put+3,c
 12519  00209A  0E0F               	movlw	15
 12520  00209C  6E1E               	movwf	?i2_rd_buffer_put+3,c
 12521  00209E  0E5F               	movlw	__accesstop+-1
 12522  0020A0  641D               	cpfsgt	?i2_rd_buffer_put+2,c
 12523  0020A2  6A1E               	clrf	?i2_rd_buffer_put+3,c
 12524  0020A4  EF32  F009         	goto	i2_rd_buffer_put	;wreg free
 12525  0020A8                     __end_of_detection_obtain_analog_service:
 12526                           	opt stack 0
 12527                           tosu	equ	0xFFF
 12528                           tosh	equ	0xFFE
 12529                           tosl	equ	0xFFD
 12530                           pclath	equ	0xFFA
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           indf0	equ	0xFEF
 12539                           postinc0	equ	0xFEE
 12540                           fsr0h	equ	0xFEA
 12541                           fsr0l	equ	0xFE9
 12542                           wreg	equ	0xFE8
 12543                           indf1	equ	0xFE7
 12544                           postinc1	equ	0xFE6
 12545                           postdec1	equ	0xFE5
 12546                           fsr1h	equ	0xFE2
 12547                           fsr1l	equ	0xFE1
 12548                           indf2	equ	0xFDF
 12549                           postinc2	equ	0xFDE
 12550                           postdec2	equ	0xFDD
 12551                           fsr2h	equ	0xFDA
 12552                           fsr2l	equ	0xFD9
 12553                           status	equ	0xFD8
 12554                           
 12555 ;; *************** function i2_adc_read *****************
 12556 ;; Defined at:
 12557 ;;		line 22 in file "src/drivers/adc.c"
 12558 ;; Parameters:    Size  Location     Type
 12559 ;;  adc_read        1    wreg     unsigned char 
 12560 ;; Auto vars:     Size  Location     Type
 12561 ;;  adc_read        1   27[COMRAM] unsigned char 
 12562 ;; Return value:  Size  Location     Type
 12563 ;;                  1    wreg      unsigned char 
 12564 ;; Registers used:
 12565 ;;		wreg, status,2, status,0
 12566 ;; Tracked objects:
 12567 ;;		On entry : 0/0
 12568 ;;		On exit  : 0/0
 12569 ;;		Unchanged: 0/0
 12570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12571 ;;      Params:         0       0       0       0       0       0       0
 12572 ;;      Locals:         1       0       0       0       0       0       0
 12573 ;;      Temps:          1       0       0       0       0       0       0
 12574 ;;      Totals:         2       0       0       0       0       0       0
 12575 ;;Total ram usage:        2 bytes
 12576 ;; Hardware stack levels used:    1
 12577 ;; This function calls:
 12578 ;;		Nothing
 12579 ;; This function is called by:
 12580 ;;		_detection_obtain_analog_service
 12581 ;; This function uses a non-reentrant model
 12582 ;;
 12583                           
 12584                           	psect	text65
 12585  001F8E                     __ptext65:
 12586                           	opt stack 0
 12587  001F8E                     i2_adc_read:
 12588                           	opt stack 21
 12589                           
 12590                           ;i2adc_read@adc_number stored from wreg
 12591  001F8E  CFE8 F01C          	movff	wreg,i2adc_read@adc_number
 12592                           
 12593                           ;adc.c: 23: if(ADCON0bits.CHS != adc_number)
 12594  001F92  30C2               	rrcf	4034,w,c	;volatile
 12595  001F94  32E8               	rrcf	wreg,f,c
 12596  001F96  0B0F               	andlw	15
 12597  001F98  181C               	xorwf	i2adc_read@adc_number,w,c
 12598  001F9A  E010               	bz	i2l4739
 12599                           
 12600                           ;adc.c: 24: {
 12601                           ;adc.c: 25: ADCON0bits.CHS = adc_number;
 12602  001F9C  C01C  F01B         	movff	i2adc_read@adc_number,??i2_adc_read
 12603  001FA0  461B               	rlncf	??i2_adc_read,f,c
 12604  001FA2  461B               	rlncf	??i2_adc_read,f,c
 12605  001FA4  50C2               	movf	4034,w,c	;volatile
 12606  001FA6  181B               	xorwf	??i2_adc_read,w,c
 12607  001FA8  0BC3               	andlw	-61
 12608  001FAA  181B               	xorwf	??i2_adc_read,w,c
 12609  001FAC  6EC2               	movwf	4034,c	;volatile
 12610  001FAE  F000               	nop		;# 
 12611  001FB0  F000               	nop		;# 
 12612  001FB2  F000               	nop		;# 
 12613  001FB4  F000               	nop		;# 
 12614  001FB6  F000               	nop		;# 
 12615  001FB8  F000               	nop		;# 
 12616  001FBA  F000               	nop		;# 
 12617  001FBC                     i2l4739:
 12618                           
 12619                           ;adc.c: 27: }
 12620                           ;adc.c: 28: ADCON0bits.GO_nDONE = TRUE;
 12621  001FBC  82C2               	bsf	4034,1,c	;volatile
 12622  001FBE                     i2l164:
 12623  001FBE  B2C2               	btfsc	4034,1,c	;volatile
 12624  001FC0  D7FE               	goto	i2l164
 12625                           
 12626                           ;adc.c: 30: ADIF = FALSE;
 12627  001FC2  9C9E               	bcf	3998,6,c	;volatile
 12628                           
 12629                           ;adc.c: 31: return ADRESL;
 12630  001FC4  50C3               	movf	4035,w,c	;volatile
 12631  001FC6  0012               	return	
 12632  001FC8                     __end_ofi2_adc_read:
 12633                           	opt stack 0
 12634                           tosu	equ	0xFFF
 12635                           tosh	equ	0xFFE
 12636                           tosl	equ	0xFFD
 12637                           pclath	equ	0xFFA
 12638                           tblptru	equ	0xFF8
 12639                           tblptrh	equ	0xFF7
 12640                           tblptrl	equ	0xFF6
 12641                           tablat	equ	0xFF5
 12642                           prodh	equ	0xFF4
 12643                           prodl	equ	0xFF3
 12644                           intcon	equ	0xFF2
 12645                           indf0	equ	0xFEF
 12646                           postinc0	equ	0xFEE
 12647                           fsr0h	equ	0xFEA
 12648                           fsr0l	equ	0xFE9
 12649                           wreg	equ	0xFE8
 12650                           indf1	equ	0xFE7
 12651                           postinc1	equ	0xFE6
 12652                           postdec1	equ	0xFE5
 12653                           fsr1h	equ	0xFE2
 12654                           fsr1l	equ	0xFE1
 12655                           indf2	equ	0xFDF
 12656                           postinc2	equ	0xFDE
 12657                           postdec2	equ	0xFDD
 12658                           fsr2h	equ	0xFDA
 12659                           fsr2l	equ	0xFD9
 12660                           status	equ	0xFD8
 12661                           
 12662 ;; *************** function i2_rd_buffer_put *****************
 12663 ;; Defined at:
 12664 ;;		line 151 in file "src/modules/rd_buffer.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;  rd_buffer_pu    2   26[COMRAM] PTR struct .
 12667 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 12668 ;;  rd_buffer_pu    2   28[COMRAM] PTR unsigned char 
 12669 ;;		 -> STR_35(5), STR_34(6), STR_29(6), STR_28(5), 
 12670 ;;		 -> detection_obtain_analog_service@adc_data(1), parameter_text(127), putch@byte(1), serialport_service@byte(1), 
 12671 ;; Auto vars:     Size  Location     Type
 12672 ;;  rd_buffer_pu    2   40[COMRAM] int 
 12673 ;;  rd_buffer_pu    2   38[COMRAM] int 
 12674 ;;  rd_buffer_pu    2   36[COMRAM] PTR volatile unsigned ch
 12675 ;;		 -> meas_buffer(107), g_tx_buffer(107), g_rx_buffer(107), 
 12676 ;;  rd_buffer_pu    1    0        unsigned char 
 12677 ;; Return value:  Size  Location     Type
 12678 ;;                  1    wreg      unsigned char 
 12679 ;; Registers used:
 12680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12681 ;; Tracked objects:
 12682 ;;		On entry : 9/2
 12683 ;;		On exit  : 0/0
 12684 ;;		Unchanged: FFFFFFF0/0
 12685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12686 ;;      Params:         4       0       0       0       0       0       0
 12687 ;;      Locals:         7       0       0       0       0       0       0
 12688 ;;      Temps:          5       0       0       0       0       0       0
 12689 ;;      Totals:        16       0       0       0       0       0       0
 12690 ;;Total ram usage:       16 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		_serialport_service
 12696 ;;		_detection_obtain_analog_service
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           	psect	text66
 12701  001264                     __ptext66:
 12702                           	opt stack 0
 12703  001264                     i2_rd_buffer_put:
 12704                           	opt stack 21
 12705                           
 12706                           ;rd_buffer.c: 153: SIZE sz ;
 12707                           ;rd_buffer.c: 154: sz = pbuffer->head.last - pbuffer->head.first;
 12708  001264  EE20 F002          	lfsr	2,2
 12709  001268  D872               	call	PL52	;call to abstracted procedure
 12710  00126A  C01B  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12711  00126E  C01C  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12712  001272  CFDE F021          	movff	postinc2,??i2_rd_buffer_put+2
 12713  001276  CFDD F022          	movff	postdec2,??i2_rd_buffer_put+3
 12714  00127A  501F               	movf	??i2_rd_buffer_put,w,c
 12715  00127C  5C21               	subwf	??i2_rd_buffer_put+2,w,c
 12716  00127E  6E27               	movwf	i2rd_buffer_put@sz,c
 12717  001280  5020               	movf	??i2_rd_buffer_put+1,w,c
 12718  001282  5822               	subwfb	??i2_rd_buffer_put+3,w,c
 12719  001284  6E28               	movwf	i2rd_buffer_put@sz+1,c
 12720                           
 12721                           ;rd_buffer.c: 156: if(sz < 0 ) {
 12722  001286  AE28               	btfss	i2rd_buffer_put@sz+1,7,c
 12723  001288  D00A               	goto	i2l221
 12724                           
 12725                           ;rd_buffer.c: 157: sz += pbuffer->head.size;
 12726  00128A  EE20 F004          	lfsr	2,4
 12727  00128E  501B               	movf	i2rd_buffer_put@pbuffer,w,c
 12728  001290  26D9               	addwf	fsr2l,f,c
 12729  001292  501C               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12730  001294  22DA               	addwfc	fsr2h,f,c
 12731  001296  50DE               	movf	postinc2,w,c
 12732  001298  2627               	addwf	i2rd_buffer_put@sz,f,c
 12733  00129A  50DD               	movf	postdec2,w,c
 12734  00129C  2228               	addwfc	i2rd_buffer_put@sz+1,f,c
 12735  00129E                     i2l221:
 12736                           
 12737                           ;rd_buffer.c: 158: }
 12738                           ;rd_buffer.c: 159: if(sz < (pbuffer->head.size - 1))
 12739  00129E  EE20 F004          	lfsr	2,4
 12740  0012A2  D855               	call	PL52	;call to abstracted procedure
 12741  0012A4  0EFF               	movlw	255
 12742  0012A6  241F               	addwf	??i2_rd_buffer_put,w,c
 12743  0012A8  6E21               	movwf	(??i2_rd_buffer_put+2)& (0+255),c
 12744  0012AA  0EFF               	movlw	255
 12745  0012AC  2020               	addwfc	??i2_rd_buffer_put+1,w,c
 12746  0012AE  6E22               	movwf	(??i2_rd_buffer_put+3)& (0+255),c
 12747  0012B0  5028               	movf	i2rd_buffer_put@sz+1,w,c
 12748  0012B2  0A80               	xorlw	128
 12749  0012B4  6E23               	movwf	(??i2_rd_buffer_put+4)& (0+255),c
 12750  0012B6  5021               	movf	??i2_rd_buffer_put+2,w,c
 12751  0012B8  5C27               	subwf	i2rd_buffer_put@sz,w,c
 12752  0012BA  5022               	movf	??i2_rd_buffer_put+3,w,c
 12753  0012BC  0A80               	xorlw	128
 12754  0012BE  5823               	subwfb	(??i2_rd_buffer_put+4)& (0+255),w,c
 12755  0012C0  B0D8               	btfsc	status,0,c
 12756  0012C2  0012               	return	
 12757                           
 12758                           ;rd_buffer.c: 160: {
 12759                           ;rd_buffer.c: 161: INT ind = pbuffer->head.last;
 12760  0012C4  C01B  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12761  0012C8  C01C  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12762  0012CC  CFDE F029          	movff	postinc2,i2rd_buffer_put@ind
 12763  0012D0  CFDD F02A          	movff	postdec2,i2rd_buffer_put@ind+1
 12764                           
 12765                           ;rd_buffer.c: 162: volatile UINT8 *mes_rec=(volatile UINT8*)&pbuffer->list[ind];
 12766  0012D4  C01B  F01F         	movff	i2rd_buffer_put@pbuffer,??i2_rd_buffer_put
 12767  0012D8  C01C  F020         	movff	i2rd_buffer_put@pbuffer+1,??i2_rd_buffer_put+1
 12768  0012DC  5029               	movf	i2rd_buffer_put@ind,w,c
 12769  0012DE  261F               	addwf	??i2_rd_buffer_put,f,c
 12770  0012E0  502A               	movf	i2rd_buffer_put@ind+1,w,c
 12771  0012E2  2220               	addwfc	??i2_rd_buffer_put+1,f,c
 12772  0012E4  0E06               	movlw	6
 12773  0012E6  261F               	addwf	??i2_rd_buffer_put,f,c
 12774  0012E8  0E00               	movlw	0
 12775  0012EA  2220               	addwfc	??i2_rd_buffer_put+1,f,c
 12776  0012EC  C01F  F025         	movff	??i2_rd_buffer_put,i2rd_buffer_put@mes_rec
 12777  0012F0  C020  F026         	movff	??i2_rd_buffer_put+1,i2rd_buffer_put@mes_rec+1
 12778                           
 12779                           ;rd_buffer.c: 163: (*mes_rec) = (*prec);
 12780  0012F4  C01D  FFF6         	movff	i2rd_buffer_put@prec,tblptrl
 12781  0012F8  C01E  FFF7         	movff	i2rd_buffer_put@prec+1,tblptrh
 12782  0012FC  6AF8               	clrf	tblptru,c
 12783  0012FE  C025  FFD9         	movff	i2rd_buffer_put@mes_rec,fsr2l
 12784  001302  C026  FFDA         	movff	i2rd_buffer_put@mes_rec+1,fsr2h
 12785  001306  0E05               	movlw	(high __ramtop+-1)
 12786  001308  64F7               	cpfsgt	tblptrh,c
 12787  00130A  D003               	bra	i2u435_47
 12788  00130C  0008               	tblrd		*
 12789  00130E  50F5               	movf	tablat,w,c
 12790  001310  D002               	bra	i2u435_40
 12791  001312                     i2u435_47:
 12792  001312  ECAD  F008         	call	PL10	;call to abstracted procedure
 12793  001316                     i2u435_40:
 12794  001316  6EDF               	movwf	indf2,c
 12795                           
 12796                           ;rd_buffer.c: 164: ind++;
 12797  001318  4A29               	infsnz	i2rd_buffer_put@ind,f,c
 12798  00131A  2A2A               	incf	i2rd_buffer_put@ind+1,f,c
 12799                           
 12800                           ;rd_buffer.c: 166: if(ind == pbuffer->head.size ) {
 12801  00131C  EE20 F004          	lfsr	2,4
 12802  001320  501B               	movf	i2rd_buffer_put@pbuffer,w,c
 12803  001322  26D9               	addwf	fsr2l,f,c
 12804  001324  501C               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12805  001326  22DA               	addwfc	fsr2h,f,c
 12806  001328  52DE               	movf	postinc2,f,c
 12807  00132A  502A               	movf	i2rd_buffer_put@ind+1,w,c
 12808  00132C  18DD               	xorwf	postdec2,w,c
 12809  00132E  C029  FFE8         	movff	i2rd_buffer_put@ind,wreg
 12810  001332  B4D8               	btfsc	status,2,c
 12811  001334  18DF               	xorwf	indf2,w,c
 12812  001336  E102               	bnz	i2l4765
 12813                           
 12814                           ;rd_buffer.c: 167: ind = 0;
 12815  001338  6A29               	clrf	i2rd_buffer_put@ind,c
 12816  00133A  6A2A               	clrf	i2rd_buffer_put@ind+1,c
 12817  00133C                     i2l4765:
 12818                           
 12819                           ;rd_buffer.c: 168: }
 12820                           ;rd_buffer.c: 169: pbuffer->head.last = ind;
 12821  00133C  C01B  FFD9         	movff	i2rd_buffer_put@pbuffer,fsr2l
 12822  001340  C01C  FFDA         	movff	i2rd_buffer_put@pbuffer+1,fsr2h
 12823  001344  C029  FFDE         	movff	i2rd_buffer_put@ind,postinc2
 12824  001348  C02A  FFDD         	movff	i2rd_buffer_put@ind+1,postdec2
 12825  00134C  0012               	return	
 12826  00134E                     __end_ofi2_rd_buffer_put:
 12827                           	opt stack 0
 12828  00134E                     PL52:
 12829                           	opt stack 21
 12830  00134E  501B               	movf	i2rd_buffer_put@pbuffer,w,c
 12831  001350  26D9               	addwf	fsr2l,f,c
 12832  001352  501C               	movf	i2rd_buffer_put@pbuffer+1,w,c
 12833  001354  22DA               	addwfc	fsr2h,f,c
 12834  001356  CFDE F01F          	movff	postinc2,??i2_rd_buffer_put
 12835  00135A  CFDD F020          	movff	postdec2,??i2_rd_buffer_put+1
 12836  00135E  0012               	return	
 12837  001360                     __end_ofPL52:
 12838                           	opt stack 0
 12839                           tosu	equ	0xFFF
 12840                           tosh	equ	0xFFE
 12841                           tosl	equ	0xFFD
 12842                           pclath	equ	0xFFA
 12843                           tblptru	equ	0xFF8
 12844                           tblptrh	equ	0xFF7
 12845                           tblptrl	equ	0xFF6
 12846                           tablat	equ	0xFF5
 12847                           prodh	equ	0xFF4
 12848                           prodl	equ	0xFF3
 12849                           intcon	equ	0xFF2
 12850                           indf0	equ	0xFEF
 12851                           postinc0	equ	0xFEE
 12852                           fsr0h	equ	0xFEA
 12853                           fsr0l	equ	0xFE9
 12854                           wreg	equ	0xFE8
 12855                           indf1	equ	0xFE7
 12856                           postinc1	equ	0xFE6
 12857                           postdec1	equ	0xFE5
 12858                           fsr1h	equ	0xFE2
 12859                           fsr1l	equ	0xFE1
 12860                           indf2	equ	0xFDF
 12861                           postinc2	equ	0xFDE
 12862                           postdec2	equ	0xFDD
 12863                           fsr2h	equ	0xFDA
 12864                           fsr2l	equ	0xFD9
 12865                           status	equ	0xFD8
 12866                           tosu	equ	0xFFF
 12867                           tosh	equ	0xFFE
 12868                           tosl	equ	0xFFD
 12869                           pclath	equ	0xFFA
 12870                           tblptru	equ	0xFF8
 12871                           tblptrh	equ	0xFF7
 12872                           tblptrl	equ	0xFF6
 12873                           tablat	equ	0xFF5
 12874                           prodh	equ	0xFF4
 12875                           prodl	equ	0xFF3
 12876                           intcon	equ	0xFF2
 12877                           indf0	equ	0xFEF
 12878                           postinc0	equ	0xFEE
 12879                           fsr0h	equ	0xFEA
 12880                           fsr0l	equ	0xFE9
 12881                           wreg	equ	0xFE8
 12882                           indf1	equ	0xFE7
 12883                           postinc1	equ	0xFE6
 12884                           postdec1	equ	0xFE5
 12885                           fsr1h	equ	0xFE2
 12886                           fsr1l	equ	0xFE1
 12887                           indf2	equ	0xFDF
 12888                           postinc2	equ	0xFDE
 12889                           postdec2	equ	0xFDD
 12890                           fsr2h	equ	0xFDA
 12891                           fsr2l	equ	0xFD9
 12892                           status	equ	0xFD8
 12893                           
 12894                           	psect	param0
 12895  0000                     tosu	equ	0xFFF
 12896                           tosh	equ	0xFFE
 12897                           tosl	equ	0xFFD
 12898                           pclath	equ	0xFFA
 12899                           tblptru	equ	0xFF8
 12900                           tblptrh	equ	0xFF7
 12901                           tblptrl	equ	0xFF6
 12902                           tablat	equ	0xFF5
 12903                           prodh	equ	0xFF4
 12904                           prodl	equ	0xFF3
 12905                           intcon	equ	0xFF2
 12906                           indf0	equ	0xFEF
 12907                           postinc0	equ	0xFEE
 12908                           fsr0h	equ	0xFEA
 12909                           fsr0l	equ	0xFE9
 12910                           wreg	equ	0xFE8
 12911                           indf1	equ	0xFE7
 12912                           postinc1	equ	0xFE6
 12913                           postdec1	equ	0xFE5
 12914                           fsr1h	equ	0xFE2
 12915                           fsr1l	equ	0xFE1
 12916                           indf2	equ	0xFDF
 12917                           postinc2	equ	0xFDE
 12918                           postdec2	equ	0xFDD
 12919                           fsr2h	equ	0xFDA
 12920                           fsr2l	equ	0xFD9
 12921                           status	equ	0xFD8
 12922                           tosu	equ	0xFFF
 12923                           tosh	equ	0xFFE
 12924                           tosl	equ	0xFFD
 12925                           pclath	equ	0xFFA
 12926                           tblptru	equ	0xFF8
 12927                           tblptrh	equ	0xFF7
 12928                           tblptrl	equ	0xFF6
 12929                           tablat	equ	0xFF5
 12930                           prodh	equ	0xFF4
 12931                           prodl	equ	0xFF3
 12932                           intcon	equ	0xFF2
 12933                           indf0	equ	0xFEF
 12934                           postinc0	equ	0xFEE
 12935                           fsr0h	equ	0xFEA
 12936                           fsr0l	equ	0xFE9
 12937                           wreg	equ	0xFE8
 12938                           indf1	equ	0xFE7
 12939                           postinc1	equ	0xFE6
 12940                           postdec1	equ	0xFE5
 12941                           fsr1h	equ	0xFE2
 12942                           fsr1l	equ	0xFE1
 12943                           indf2	equ	0xFDF
 12944                           postinc2	equ	0xFDE
 12945                           postdec2	equ	0xFDD
 12946                           fsr2h	equ	0xFDA
 12947                           fsr2l	equ	0xFD9
 12948                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    631
    Data        0
    BSS         1074
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      66
    BANK0           160     81     152
    BANK1           256     15     223
    BANK2           256      0     234
    BANK3           256      0     227
    BANK4           256      0     187
    BANK5           256      0     127

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___awmod	int  size(1) Largest target is 0

    ?___awdiv	int  size(1) Largest target is 0

    ?_syntax_as_integer	int  size(1) Largest target is 0

    ?_syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    on_parameter_found@p	PTR const void  size(3) Largest target is 32767
		 -> parameter_value(BANK2[127]), parameter_text(BANK3[127]), ROM(CODE[32767]), 

    ?_string_utils_atof	float  size(1) Largest target is 0

    ?___asftmul	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?___lwtoft	float  size(1) Largest target is 0

    ?_string_utils_atoi	int  size(1) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 0

    ?_string_utils_from_hex	int  size(1) Largest target is 0

    ?_string_utils_strchr	int  size(1) Largest target is 0

    ?_string_utils_split	int  size(1) Largest target is 0

    ?_string_utils_copy	int  size(1) Largest target is 0

    ?_string_utils_strlen	int  size(1) Largest target is 0

    ?_rd_buffer_cnt	int  size(1) Largest target is 0

    __asftmul@f1p	PTR float  size(1) Largest target is 3
		 -> string_utils_atof@a(BANK0[3]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_33(CODE[4]), STR_32(CODE[5]), STR_31(CODE[4]), STR_30(CODE[5]), 

    ?_printf	int  size(1) Largest target is 0

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    S1691$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    events	volatile PTR FTN()void [8] size(2) Largest target is 0
		 -> detection_task(), serialport_task(), 

    pd_add_value@d	PTR volatile struct . size(2) Largest target is 101
		 -> pd_detector(BANK1[101]), 

    cla_add_value@d	PTR volatile struct . size(1) Largest target is 21
		 -> cla_detector(BANK0[21]), 

    sp__syntax_as_bytearray	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    sp__syntax_get_text	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    syntax_string@pchain	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    syntax_string@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    this_parse_item@pitem	PTR char  size(1) Largest target is 1
		 -> parameter_id(BANK0[1]), command_id(BANK0[1]), 

    this_parse_item@pval	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    this_parse_item@pvar	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    this_parse_item@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_atof@s	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_atoi@c	PTR const unsigned char  size(3) Largest target is 32767
		 -> this_buf(BANK5[127]), ROM(CODE[32767]), 

    string_utils_from_hex@pdata	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_from_hex@phex_str	PTR const unsigned char  size(2) Largest target is 127
		 -> parameter_value(BANK2[127]), 

    string_utils_strncmp@pstr2	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strncmp@pstr1	PTR const unsigned char  size(2) Largest target is 621
		 -> syntax@syntax_data(CODE[621]), 

    string_utils_strchr@pbuf	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pbuf	PTR unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_split@pstr	PTR const unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    string_utils_copy@pdst	PTR unsigned char  size(2) Largest target is 127
		 -> parameter_text(BANK3[127]), 

    string_utils_copy@psrc	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), 

    string_utils_strlen@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> this_buf(BANK5[127]), parameter_value(BANK2[127]), 

    serialport_write@pstr	PTR const unsigned char  size(2) Largest target is 127
		 -> STR_35(CODE[5]), STR_34(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), 
		 -> parameter_text(BANK3[127]), 

    S466$callback_function	PTR FTN()void  size(1) Largest target is 0

    timers_list.callback_function	PTR FTN()void  size(1) Largest target is 0

    rd_buffer_put@prec	PTR unsigned char  size(2) Largest target is 127
		 -> STR_35(CODE[5]), STR_34(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), 
		 -> detection_obtain_analog_service@adc_data(COMRAM[1]), parameter_text(BANK3[127]), putch@byte(BANK0[1]), serialport_service@byte(COMRAM[1]), 

    rd_buffer_put@mes_rec	PTR volatile unsigned char  size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_put@pbuffer	PTR struct . size(2) Largest target is 107
		 -> meas_buffer(BANK4[107]), g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_get@prec	PTR unsigned char  size(2) Largest target is 1
		 -> serialport_task@byte(BANK1[1]), rd_buffer_readline@ch(BANK0[1]), 

    rd_buffer_get@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    rd_buffer_cnt@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), 

    rd_buffer_readline@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_rx_buffer(BANK2[107]), 

    rd_buffer_readline@pdata	PTR unsigned char  size(2) Largest target is 100
		 -> serialport_buffer(BANK3[100]), 

    rd_buffer_readline@psize	PTR int  size(2) Largest target is 2
		 -> serialport_task@size(BANK1[2]), 

    rd_buffer_init@pbuffer	PTR struct . size(2) Largest target is 107
		 -> g_tx_buffer(BANK1[107]), g_rx_buffer(BANK2[107]), 

    uart_getc@pbyte	PTR unsigned char  size(1) Largest target is 1
		 -> serialport_service@byte(COMRAM[1]), 

    uart_puts@pstr	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_36(CODE[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr_high in COMRAM

    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put
    interrupts@isr_high->_serialport_service
    _serialport_service->i2_rd_buffer_put
    _uart_getc->_uart_error
    _uart_reset->_uart_error
    _detection_obtain_analog_service->i2_rd_buffer_put

Critical Paths under _main in BANK0

    _serialport_task->_syntax_string
    _rd_buffer_readline->_rd_buffer_get
    _syntax_string->_this_parse_item
    _this_parse_item->_string_utils_atof
    _string_utils_strncmp->_string_utils_is_upper_case
    _string_utils_from_hex->_string_utils_strlen
    _string_utils_strlen->_string_utils_is_symbol
    _string_utils_atoi->___wmul
    _string_utils_atof->___ftadd
    _on_parameter_found->_printf
    _serialport_write->_rd_buffer_put
    _detection_task->_pd_add_value
    _pd_add_value->___awdiv
    _printf->_putch
    _putch->_rd_buffer_put
    _startup->_serialport_startup
    _sysclk_init->_sysclk_setup_intosc
    _uart_init->_uart_set_baudrate
    _uart_puts->_uart_putc
    _serialport_startup->_rd_buffer_init
    ___ftadd->___ftmul
    ___lwmod->___lwdiv
    ___lwtoft->___ftpack
    ___asftmul->___ftmul
    ___ftmul->___ftpack

Critical Paths under _isr_high in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_serialport_task
    _serialport_task->_syntax_string

Critical Paths under _isr_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr_high in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   19290
                                             80 BANK0      1     1      0
                                             12 BANK1      3     3      0
                           _delay_ms
                            _startup
                     _detection_task
                    _serialport_task
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             2     0      2      31
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _serialport_task                                      3     3      0   13311
                                              9 BANK1      3     3      0
                      _syntax_string
                 _rd_buffer_readline
                      _rd_buffer_get
                          _uart_putc
                      _rd_buffer_cnt
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_readline                                   7     1      6     737
                                             19 BANK0      7     1      6
                      _rd_buffer_get
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_get                                       11     7      4     418
                                              8 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (2) _rd_buffer_cnt                                        8     6      2     161
                                              8 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _syntax_string                                       10     6      4   11822
                                             79 BANK0      1     1      0
                                              0 BANK1      9     5      4
                 _string_utils_split
                    _this_parse_item
                 _on_parameter_found
                _string_utils_strlen
 ---------------------------------------------------------------------------------
 (3) _string_utils_split                                  13     6      7     467
                                              8 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _this_parse_item                                     16    13      3    8191
                                             63 BANK0     16    13      3
                _string_utils_strlen
                _string_utils_strchr
                  _string_utils_copy
               _string_utils_strncmp
                  _string_utils_atoi
                  _string_utils_atof
              _string_utils_from_hex
 ---------------------------------------------------------------------------------
 (4) _string_utils_copy                                    8     2      6     177
                                              8 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _string_utils_strchr                                  7     4      3     291
                                              8 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (4) _string_utils_strncmp                                14     7      7     591
                                             10 BANK0     14     7      7
         _string_utils_is_upper_case
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_upper_case                           2     2      0      99
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _string_utils_from_hex                               13     9      4     716
                                             14 BANK0     13     9      4
                _string_utils_strlen
               _symb_from_hex_to_bin
 ---------------------------------------------------------------------------------
 (3) _string_utils_strlen                                  4     2      2     291
                                             10 BANK0      4     2      2
             _string_utils_is_symbol
 ---------------------------------------------------------------------------------
 (4) _string_utils_is_symbol                               2     2      0      99
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _symb_from_hex_to_bin                                 1     1      0     124
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _string_utils_atoi                                   10     7      3     504
                                             14 BANK0     10     7      3
                             ___wmul
              _string_utils_is_digit
 ---------------------------------------------------------------------------------
 (4) _string_utils_atof                                   16    13      3    4720
                                             47 BANK0     16    13      3
                            ___ftmul
                           ___lwtoft
                            ___ftadd
              _string_utils_is_digit
                             ___wmul
                          ___asftmul
 ---------------------------------------------------------------------------------
 (5) _string_utils_is_digit                                2     2      0      99
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _on_parameter_found                                   6     1      5    2504
                                             40 BANK0      6     1      5
                  _syntax_as_integer
                  _potentiometer_set
              _detection_profile_set
             _detection_defaults_set
                    _syntax_get_text
                   _serialport_write
                           _adc_read
                             _printf
 ---------------------------------------------------------------------------------
 (4) _adc_read                                             2     2      0      62
                                              8 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _serialport_write                                     2     0      2     592
                                             24 BANK0      2     0      2
                      _rd_buffer_put
                    _syntax_get_text (ARG)
 ---------------------------------------------------------------------------------
 (4) _syntax_get_text                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _syntax_as_integer                                    2     0      2       0
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _detection_profile_set                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _detection_task                                       3     3      0    5072
                                             39 BANK0      3     3      0
                       _pd_add_value
                      _cla_add_value
 ---------------------------------------------------------------------------------
 (2) _cla_add_value                                       13     9      4    1283
                                              8 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _pd_add_value                                        23    19      4    3755
                                             16 BANK0     23    19      4
                            ___lbmod
                            ___awdiv
                             ___wmul
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) _detection_defaults_set                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _potentiometer_set                                    1     1      0      93
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _printf                                              15    11      4    1571
                                             25 BANK0     15    11      4
                              _putch
                            ___lwdiv
                            ___lwmod
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     535
                                             24 BANK0      1     1      0
                      _rd_buffer_put
 ---------------------------------------------------------------------------------
 (6) _rd_buffer_put                                       16    12      4     496
                                              8 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _startup                                              1     1      0     424
                                             17 BANK0      1     1      0
                          _gpio_init
                        _sysclk_init
                           _adc_init
                          _uart_init
                          _uart_puts
                 _serialport_startup
 ---------------------------------------------------------------------------------
 (2) _sysclk_init                                          0     0      0      31
                _sysclk_setup_intosc
 ---------------------------------------------------------------------------------
 (3) _sysclk_setup_intosc                                  1     1      0      31
                                              8 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uart_init                                            0     0      0       0
                  _uart_set_baudrate
 ---------------------------------------------------------------------------------
 (3) _uart_set_baudrate                                    3     0      3       0
                                              8 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _uart_puts                                            4     0      4     127
                                              9 BANK0      4     0      4
                          _uart_putc
 ---------------------------------------------------------------------------------
 (2) _uart_putc                                            1     1      0      31
                                              8 BANK0      1     1      0
                     _uart_byte_sent
 ---------------------------------------------------------------------------------
 (3) _uart_byte_sent                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpio_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialport_startup                                   2     2      0     229
                                             15 BANK0      2     2      0
                     _rd_buffer_init
 ---------------------------------------------------------------------------------
 (3) _rd_buffer_init                                       7     3      4     192
                                              8 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     445
                                              8 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     433
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             14     8      6    1537
                                             33 BANK0     14     8      6
                           ___ftpack
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     232
                                              8 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              8 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             15 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3     343
                                             16 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     136
                                              8 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___asftmul                                            4     1      3     893
                                             33 BANK0      4     1      3
                            ___ftmul
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             17    11      6     800
                                             16 BANK0     17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5     312
                                              8 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr_high                                             8     8      0    2625
                                             18 COMRAM     8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    1320
                                             42 COMRAM     2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0      94
                                             27 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0      24
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0      24
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    1305
                                             42 COMRAM     1     1      0
                         i2_adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) i2_adc_read                                          2     2      0     146
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    16    12      4    1133
                                             26 COMRAM    16    12      4
 ---------------------------------------------------------------------------------
 (8) interrupts@isr_high                                   8     8      0    2625
                                              0 BANK0      8     8      0
            _delay_interrupt_service
                 _serialport_service
    _detection_obtain_analog_service
 ---------------------------------------------------------------------------------
 (9) _delay_interrupt_service                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _serialport_service                                   2     2      0    1320
                                             42 COMRAM     2     2      0
                _uart_byte_available
                          _uart_getc
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) _uart_getc                                           2     2      0      94
                                             27 COMRAM     2     2      0
                         _uart_error
                         _uart_reset
                _uart_byte_available
 ---------------------------------------------------------------------------------
 (11) _uart_reset                                          0     0      0      24
                _uart_byte_available
                         _uart_error
 ---------------------------------------------------------------------------------
 (11) _uart_byte_available                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _uart_error                                          1     1      0      24
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _detection_obtain_analog_service                      1     1      0    1305
                                             42 COMRAM     1     1      0
                         i2_adc_read
                    i2_rd_buffer_put
 ---------------------------------------------------------------------------------
 (10) i2_adc_read                                          2     2      0     146
                                             26 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2_rd_buffer_put                                    16    12      4    1133
                                             26 COMRAM    16    12      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _startup
     _gpio_init
     _sysclk_init
       _sysclk_setup_intosc
     _adc_init
     _uart_init
       _uart_set_baudrate
     _uart_puts
       _uart_putc
         _uart_byte_sent
     _serialport_startup
       _rd_buffer_init
   _detection_task
     _pd_add_value
       ___lbmod
       ___awdiv
       ___wmul
       ___awmod
     _cla_add_value
   _serialport_task
     _syntax_string
       _string_utils_split
       _this_parse_item
         _string_utils_strlen
           _string_utils_is_symbol
         _string_utils_strchr
         _string_utils_copy
         _string_utils_strncmp
           _string_utils_is_upper_case
         _string_utils_atoi
           ___wmul
           _string_utils_is_digit
         _string_utils_atof
           ___ftmul
             ___ftpack
           ___lwtoft
             ___ftpack
           ___ftadd
             ___ftpack
             ___ftmul (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _string_utils_is_digit
           ___wmul
           ___asftmul
             ___ftmul
               ___ftpack
         _string_utils_from_hex
           _string_utils_strlen
             _string_utils_is_symbol
           _symb_from_hex_to_bin
       _on_parameter_found
         _syntax_as_integer
         _potentiometer_set
         _detection_profile_set
         _detection_defaults_set
         _syntax_get_text
         _serialport_write
           _rd_buffer_put
           _syntax_get_text (ARG)
         _adc_read
         _printf
           _putch
             _rd_buffer_put
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _adc_read (ARG)
       _string_utils_strlen
         _string_utils_is_symbol
     _rd_buffer_readline
       _rd_buffer_get
     _rd_buffer_get
     _uart_putc
       _uart_byte_sent
     _rd_buffer_cnt

 _isr_high (ROOT)
   _delay_interrupt_service
   _serialport_service
     _uart_byte_available
     _uart_getc
       _uart_error
       _uart_reset
         _uart_byte_available
         _uart_error
       _uart_byte_available
     i2_rd_buffer_put
   _detection_obtain_analog_service
     i2_adc_read
     i2_rd_buffer_put

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0      7F      14       49.6%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      BB      13       73.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      E3      11       88.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      EA       9       91.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      F      DF       7       87.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     51      98       5       95.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      42       1       69.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      11       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     4C0      15        0.0%
DATA                 0      0     4D1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Thu Oct 22 23:48:03 2015

                ?_delay_interrupt_service 0001                  __size_of_this_parse_item 01B8  
                   __end_of_syntax_string 105E                          ?i2_rd_buffer_put 001B  
                                      PL2 04B6                                        PL4 04DE  
                                      PL6 04F2                                        PL8 0504  
                            ___awdiv@sign 006D                                        _ok 00C5  
                     ___wmul@multiplicand 006A                  string_utils_from_hex@len 0075  
                            ___asftmul@f2 0081             string_utils_from_hex@phex_str 0070  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 008E                              ___ftadd@exp2 008D  
                              i2_adc_read 1F8E                                       PL10 115A  
                                     PL20 0A20                                       PL12 051A  
                                     PL30 07F8                                       PL22 0A30  
                                     PL14 09EE                                       PL40 057A  
                                     PL32 0554                                       PL24 0C08  
                                     PL16 0A04                                       PL50 1536  
                                     PL42 0A42                                       PL34 0808  
                                     PL26 0536                                       PL18 0A12  
                                     PL60 05C8                                       PL52 134E  
                                     PL44 0590                                       PL36 1520  
                                     PL28 07DE                                       PL70 05E8  
                                     PL62 05D8                                       PL54 0834  
                                     PL46 05A2                                       PL38 0564  
                                     PL80 0F2E                                       PL72 05F6  
                                     PL64 15FA                                       PL56 05B6  
                                     PL48 0820                                       PL82 0602  
                                     PL74 1444                                       PL66 1C92  
                                     PL58 1252                                       PL76 1862  
                                     PL68 0F20                                       PL78 1450  
                            ___ftadd@sign 008C                                       l221 11A0  
                                     l164 1F4A                                       l426 1C88  
                                     l437 213C                                       l447 2156  
                                     l721 0248                                       l625 0ACE  
                                     l810 1A30                                       l811 1A36  
                                     l732 032A                                       l724 03D6  
                                     l557 111A                                       l389 1E96  
                                     l485 172A                                       l494 2122  
                                     l639 0BD2                                       l736 0382  
                                     l808 1A2C                                       l685 08DE  
                                     l952 1E5E                                       l883 0CB8  
                                     l886 0D92                              __CFG_CPB$OFF 000000  
              __size_of_string_utils_atof 01D4                __size_of_string_utils_atoi 00FC  
              __size_of_string_utils_copy 0050                              __CFG_CPD$OFF 000000  
                            __CFG_BORV$27 000000                              ___awmod@sign 006D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                             ___asftmul@f1p 0084  
                   __end_of_cla_add_value 09EE                              __CFG_LVP$OFF 000000  
                                    l1021 15CA                                      l1014 1564  
                                    l1024 15F6                                      l1059 146E  
                                    l1324 17E6                                      l1362 0E1A  
                                    l1366 0E3E                                      l1537 1E12  
                                    l1377 0EC6                                      l5001 16A8  
                                    l1386 0ED8                                      l1547 1ED4  
                                    l1387 0EE0                                      l5003 16AC  
                                    l1573 202E                                      l5013 1C44  
                                    l5103 104C                                      l6001 13BC  
                                    l5113 1D5A                                      l6101 203A  
                                    l5037 1240                                      l5109 1D40  
                                    l5213 1C5E                                      l5061 194A  
                                    l5053 18F2                                      l6015 13E2  
                                    l5127 1E6E                                      l5151 1CAE  
                                    l5055 1908                                      l6025 1402  
                                    l6041 2060                                      l5401 07B6  
                                    l5313 17B8                                      l5241 16C4  
                                    l5217 1C70                                      l5057 192C  
                                    l6019 13EA                                      l5323 10A0  
                                    l5307 1764                                      l5251 1704  
                                    l5219 1C74                                      l5163 1CEA  
                                    l5171 1878                                      l6029 140A  
                                    l6061 1DE2                                      l5501 0D20  
                                    l5405 07CC                                      l5341 0616  
                                    l5261 1724                                      l5421 0AD6  
                                    l5093 0FFA                                      l6063 1DEA  
                                    l5351 066A                                      l5343 063E  
                                    l5327 10C2                                      l5263 172E  
                                    l5255 1712                                      l5159 1CCE  
                                    l5431 0B06                                      l5095 1014  
                                    l5087 0FB0                                      l5079 0F82  
                                    l6081 1EAC                                      l6073 1E08  
                                    l6065 1DEE                                      l6049 2078  
                                    l5513 0D9E                                      l5329 10CE  
                                    l5265 1732                                      l5185 18B0  
                                    l5177 1894                                      l5089 0FC4  
                                    l5097 1028                                      l6083 1EB4  
                                    l5611 029A                                      l5507 0D34  
                                    l5515 0DAC                                      l5363 06CA  
                                    l5355 0698                                      l5347 0660  
                                    l5291 1A6A                                      l5283 1A5E  
                                    l5267 1742                                      l5443 0B82  
                                    l5451 0BDA                                      l5099 1030  
                                    l6085 1EB8                                      l5541 08B0  
                                    l5533 0864                                      l5373 06F8  
                                    l5445 0B9C                                      l5453 0BF2  
                                    l5189 18C0                                      l4903 1F6A  
                                    l5631 0370                                      l5535 0884  
                                    l5471 0C3C                                      l5391 0768  
                                    l5359 06BA                                      l5287 1A64  
                                    l5447 0BBA                                      l5439 0B6A  
                                    l5455 0BFA                                      l5199 18D6  
                                    l6089 1ECA                                      l5625 0314  
                                    l5617 02CE                                      l5473 0C48  
                                    l5385 0740                                      l5377 0716  
                                    l5297 1A70                                      l5635 039A  
                                    l5619 02E4                                      l5563 09AC  
                                    l5491 0CE6                                      l5467 0C28  
                                    l5395 0790                                      l5459 0C04  
                                    l5803 158C                                      l5901 1B48  
                                    l4909 21A0                                      l5741 14A6  
                                    l5717 1460                                      l5661 0488  
                                    l5653 0438                                      l5645 03F2  
                                    l4925 1F48                                      l5493 0CEC  
                                    l5485 0CB0                                      l5477 0C50  
                                    l5805 1596                                      l5911 1B68  
                                    l5735 14A2                                      l5647 0408  
                                    l5639 03C0                                      l5591 0178  
                                    l5567 09EC                                      l5559 098E  
                                    l5479 0C90                                      l5399 07A6  
                                    _ADIF 007CF6                                      l5833 1812  
                                    l5825 17EE                                      l5913 1B6C  
                                    l5921 1B88                                      l5905 1B54  
                                    l4953 1DCE                                      l5753 14D2  
                                    l5761 1518                                      l5665 0496  
                                    l5497 0D06                                      l5489 0CCE  
                                    l5809 159C                                      l5835 1824  
                                    l5827 17F2                                      l5755 14D8  
                                    l5587 0172                                      l4963 1AE0  
                                    l5837 182E                                      l5829 1806  
                                    l5925 1B94                                      l5917 1B7E  
                                    l5909 1B60                                      l5749 14C6  
                                    l5669 04B4                                      l4877 2192  
                                    l5943 0E4C                                      l5871 199C  
                                    l5759 1510                                      l5599 0232  
                                    l4967 1AEC                                      l4975 1B1C  
                                    l5687 1A3C                                      l5791 1556  
                                    l5937 0E28                                      l5873 19A4  
                                    l5865 198C                                      l4969 1AFE  
                                    l5689 1A4A                                      l5971 0E9A  
                                    l5891 19D8                                      l5883 19C2  
                                    l5875 19A8                                      l5859 197C  
                                    l4899 1F56                                      l5965 0E82  
                                    l5797 156C                                      l5789 154A  
                                    l5967 0E8C                                      l5959 0E66  
                                    l5887 19CC                                      l5977 0EB6  
                                    l5969 0E94                                      l5979 0EC0  
                                    l5997 138E                                      l5989 0EFA  
                                    _CREN 007D5C                                      _LATC 000F8B  
                                    _LATD 000F8C                                      u5110 10B8  
                                    u5200 06AC                                      u5130 1100  
                                    u6100 0DFC                                      u5140 1134  
                                    u5117 10B6                                      u5070 1080  
                                    u5207 06A8                                      u5160 0652  
                                    u6105 0DFA                                      u5137 10FE  
                                    u5250 06EE                                      u5090 109C  
                                    u5147 1132                                      u6300 1378  
                                    u5077 107E                                      u5270 0712  
                                    u5167 064E                                      u6320 13A6  
                                    u4640 1218                                      u6305 1376  
                                    u5257 06EA                                      u5097 109A  
                                    u6090 0DDC                                      u5290 0738  
                                    u5515 099C                                      _RCIF 007CF5  
                                    u6325 13A4                                      u5525 09BE  
                                    u5277 070E                                      u5365 0B24  
                                    u4750 1D80                                      u6095 0DDA  
                                    u4647 1214                                      u5297 0734  
                                    u5475 08A8                                      u4595 1638  
                                    u4757 1D7A                                      u5495 092A  
                                    u5878 15B0                                      u5879 15C4  
                                    u5898 15D6                                      u5899 15EA  
                                    _TMR0 000FD6                                      _TXIF 007CF4  
          string_utils_is_upper_case@symb 0069              __end_of_symb_from_hex_to_bin 1ACC  
                            __CFG_PWRT$ON 000000                          ??_uart_byte_sent 0068  
             __size_of_string_utils_split 0084                          ??_rd_buffer_init 006C  
                                    _main 1548                              ___ftpack@arg 0068  
                            ___ftpack@exp 006B                                      _pool 0035  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    indf0 000FEF                                      fsr0l 000FE9  
                                    fsr2h 000FDA                                      indf1 000FE7  
                                    fsr1l 000FE1                                      indf2 000FDF  
                                    fsr2l 000FD9                         rd_buffer_get@last 006E  
                       rd_buffer_get@prec 006A                                      prodh 000FF4  
                                    prodl 000FF3                           _serialport_task 18F0  
                                    start 00F0                             __CFG_IESO$OFF 000000  
                           __CFG_MCLRE$ON 000000                              ___ftmul@cntr 007F  
                 ??_detection_profile_set 0068                              ___ftmul@sign 0080  
                                   ?_main 0001                           __end_of___awdiv 19E2  
                         __end_of___ftadd 0F20                                     STR_30 7FEB  
                                   STR_31 7FFA                                     STR_32 7FEB  
                                   STR_33 7FFA                                     STR_34 7FE5  
                                   STR_35 7FF0                                     STR_28 7FF5  
                                   STR_36 7FDF                           __end_of___awmod 1B9E  
                                   STR_29 7FE5                           __end_of___lbmod 2080  
                                   _ANSEL 000F7E                           __end_of___ftmul 1444  
                         ___awdiv@divisor 006A                             ?_pd_add_value 0070  
                                   _RC1IF 007CF5                           __end_of___lwdiv 1E1C  
                                   i2l110 20EE                           __end_of___lwmod 1EDE  
                                   i2l221 129E                                     i2l164 1FBE  
                           __CFG_WDTEN$ON 000000                           ___awdiv@counter 006C  
                                   i2l973 005A                                     i2l997 00CE  
                                   _RCREG 000FAE                                     _RCSTA 000FAB  
                     this_parse_item@pval 00A9                                     _SPBRG 000FAF  
                     this_parse_item@pvar 00A5                       this_parse_item@pstr 009F  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                       rd_buffer_put@prec 006A                                     _TXREG 000FAD  
                                   _TXSTA 000FAC                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                           __CFG_WRT3$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000   __end_of_detection_obtain_analog_service 20A8  
__size_of_detection_obtain_analog_service 0028         ??_detection_obtain_analog_service 002B  
        ?_detection_obtain_analog_service 0001                            __CFG_EBTR1$OFF 000000  
         _detection_obtain_analog_service 2080                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000              __size_of_string_utils_strchr 0044  
            __size_of_string_utils_strlen 003E                         _cla_add_value$964 0070  
                       _cla_add_value$965 0072                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                string_utils_is_symbol@symb 0069  
                         __end_of_dpowers 7D72                               _sysclk_init 222A  
                           ___ftpack@sign 006C                                     _putch 215A  
                                   main@i 01DE                            __CFG_BOREN$OFF 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                      rd_buffer_get@first 0071                                     status 000FD8  
                         __end_of_startup 1E62                          ?_syntax_get_text 0001  
                        _serialport_write 1D3E                            __CFG_HFOFST$ON 000000  
              __end_ofinterrupts@isr_high 00F0                           __initialization 1B9E  
                symb_from_hex_to_bin@symb 0068                 uart_set_baudrate@baudrate 0068  
                 rd_buffer_readline@pdata 0075                              __end_of_main 218A  
                 rd_buffer_readline@psize 0077                 rd_buffer_readline@pbuffer 0073  
             __size_of_rd_buffer_readline 006A                        rd_buffer_init@size 006A  
                          ??_pd_add_value 0074                               ?i2_adc_read 0001  
                                  ??_main 00B0                             __activetblptr 000002  
                       ??_this_parse_item 00A2              __size_of_uart_byte_available 0008  
                     serialport_task@byte 01D9            _string_utils_is_upper_case$747 0068  
                     serialport_task@size 01DA                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  _ADRESL 000FC3                          ___awdiv@dividend 0068  
                 __end_of_serialport_task 196A                                    ?_putch 0001  
                        __end_of___ftpack 1862                                    _ANSELH 000F7F  
                        __end_of_adc_init 21C0                          __end_of_adc_read 1F54  
              __end_of_serialport_service 1D3E                                    i2l4401 003E  
                                  i2l4411 0058                                    i2l4403 0046  
                                  i2l3509 2200                                    i2l4405 004A  
                                  i2l6111 00A4                                    i2l4407 004C  
                                  i2l6121 00BE                                    i2l6113 00A8  
                                  i2l4409 0054                                    i2l6123 00C0  
                                  i2l6115 00AA                                    i2l6125 00C8  
                                  i2l6117 00B2                                    i2l6109 009C  
                                  i2l6127 00CC                                    i2l6119 00BA  
                                  i2l4393 0028                                    i2l4395 0030  
                                  i2l4813 1D34                                    i2l4397 0034  
                                  i2l4399 0036                                    i2l4809 1D26  
                                  i2l4739 1FBC                                    i2l4765 133C  
                                  i2l4791 200E                                    i2l4777 20F6  
                                  i2l4779 20FE                                    i2l4799 2026  
             string_utils_split@delimeter 006E                          __end_of___lwtoft 20CC  
                                  _OSCCON 000FD3                     rd_buffer_init@pbuffer 0068  
              __end_of_serialport_startup 1FFA                      this_parse_item@pitem 00A1  
                                  _STATUS 000FD8                             main@event_old 01DC  
                        __end_of_delay_ms 219C                            __CFG_XINST$OFF 000000  
           __size_of_string_utils_strncmp 0096                                    ___wmul 202A  
                               ??___awdiv 006C                                 ??___ftadd 0087  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___lbmod 0069                                 ??___ftmul 0076  
                               ??___lwdiv 006C                                 ??___lwmod 0073  
             __end_of_sysclk_setup_intosc 21F4                                    _events 00B1  
                                  clear_0 1BA4                                    clear_1 1BB0  
                                  clear_2 1BBC                                    clear_3 1BC8  
                                  clear_4 1BD4                                    clear_5 1BE0  
                                  clear_6 1BEC                          ___awdiv@quotient 006E  
                         ___awmod@divisor 006A                           ___awmod@counter 006C  
                                  _printf 145A                          __end_of_isr_high 007C  
                    _symb_from_hex_to_bin 1A58                  serialport_startup@result 0070  
                   ___ftmul@f3_as_product 007C                         _serialport_buffer 037F  
                            __mediumconst 7D68                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                     rd_buffer_get@result 0070                    __size_of_rd_buffer_get 00A8  
                  __size_of_rd_buffer_cnt 0052                    __size_of_rd_buffer_put 00EC  
                               ??_startup 0071                   string_utils_strchr@pbuf 0068  
                      __size_of___asftmul 003C                           ___lbmod@divisor 0068  
                              __accesstop 0060                   __end_of__initialization 1BF2  
                         ___lbmod@counter 006A                           __CFG_PBADEN$OFF 000000  
                              ___ftadd@f1 0081                                ___ftadd@f2 0084  
                     __size_ofi2_adc_read 003A                   string_utils_strlen@pstr 006A  
                 string_utils_strncmp@len 006E                   string_utils_strncmp@pos 0074  
                              ___ftmul@f1 0070                                ___ftmul@f2 0073  
                          __pcstackCOMRAM 0001                              _cla_detector 00CB  
                        cla_add_value@val 0068                   detection_task@alarm_cla 00C9  
                 detection_task@alarm_wav 00CA                             __end_of_putch 2174  
                              __end_ofPL2 04DE                                __end_ofPL4 04F2  
                              __end_ofPL6 0504                                __end_ofPL8 051A  
                   ?_symb_from_hex_to_bin 0001                                ___lwtoft@c 0070  
        __size_of_delay_interrupt_service 0012               __size_of_on_parameter_found 01A8  
                   _string_utils_is_digit 210A                     _string_utils_from_hex 1746  
                         __CFG_LPT1OSC$ON 000000                                   ??_putch 0078  
                        ?_serialport_task 0001                                __pbssBANK0 00B1  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                              __pbssBANK3 0300                                __pbssBANK4 0400  
                              __pbssBANK5 0500                        __size_of_gpio_init 0012  
                    __end_of_pd_add_value 04B6                   __size_of_detection_task 0076  
                       fp__detection_task 00F0                       _string_utils_strchr 1C4E  
                     _string_utils_strlen 1E62                             _rd_buffer_get 1608  
                           _rd_buffer_cnt 1BFC                             _rd_buffer_put 1166  
                                 ?___wmul 0068            __size_of_detection_profile_set 0002  
           __end_of_detection_profile_set 2238                                   _BAUDCON 000FB8  
                                 _BAUDCTL 000FB8                    i2rd_buffer_put@mes_rec 0025  
                       __end_of___asftmul 1F1A                                 ?___ftpack 0068  
                  i2rd_buffer_put@pbuffer 001B   detection_obtain_analog_service@adc_data 002B  
                                 ?_printf 0079                                 ?_adc_init 0001  
                               ?_adc_read 0001                  __end_of_serialport_write 1D88  
                     syntax_string@chains 01D8                                 ?___lwtoft 0070  
                      __size_of_uart_getc 0030                        __size_of_uart_init 0020  
                      __size_of_uart_putc 0012                       syntax_string@pchain 01D6  
                      __size_of_uart_puts 003A                  __size_ofi2_rd_buffer_put 00EA  
                     syntax_string@result 01D4                      ?_string_utils_strchr 0068  
                               ?_delay_ms 0068                      ?_string_utils_strlen 006A  
                         __CFG_WDTPS$1024 000000                                _command_id 00F4  
                   this_parse_item@result 00A4                              ?_sysclk_init 0001  
              __end_of_string_utils_split 18F0                    __size_of_syntax_string 0126  
                string_utils_split@chains 0071                  ??_string_utils_is_symbol 0068  
                     _uart_byte_available 2222                                 ?_isr_high 0001  
                    i2adc_read@adc_number 001C                                   __Hparam 0000  
                                 __Lparam 0000                         _potentiometer_set 2174  
                          ?_rd_buffer_get 0068                            ?_rd_buffer_cnt 0068  
                          ?_rd_buffer_put 0068                           _this_parse_item 0A50  
                      ?_potentiometer_set 0001                                   ___awdiv 196A  
                                 ___ftadd 0DC4                                   ___awmod 1B36  
                                 ___lbmod 2056                                _event_miss 002D  
                         __size_of___wmul 002C                    __size_of_cla_add_value 01A8  
                                 ___ftmul 1360                                   ___lwdiv 1DD2  
                                 ___lwmod 1EA0                    ??_symb_from_hex_to_bin 0068  
                  serialport_service@byte 002C                      serialport_write@pstr 0078  
                                 __pcinit 1B9E                                ??___ftpack 006D  
                                 __ramtop 0600                              ??i2_adc_read 001B  
                              ??_adc_init 0068                                ??_adc_read 0068  
                                 __ptext0 1548                                   __ptext1 218A  
                                 __ptext2 19E2                                   __ptext3 18F0  
                                 __ptext4 1ACC                                   __ptext5 1608  
                                 __ptext6 1BFC                                   __ptext7 0F38  
                                 __ptext8 186C                                   __ptext9 0A50  
                         __size_of_printf 00C6                         __end_of_gpio_init 21D2  
                              ??___lwtoft 0073                       ??_potentiometer_set 0068  
                    ?_uart_byte_available 0001                                   _dpowers 7D68  
                      interrupts@isr_high 007C                          ___awmod@dividend 0068  
                   ??_string_utils_strchr 006B                     ??_string_utils_strlen 006C  
                  ?_string_utils_is_digit 0001                                ??_delay_ms 006A  
                  ?_string_utils_from_hex 006E                 _string_utils_is_digit$783 0068  
                                 _startup 1E1C                       ?interrupts@isr_high 0001  
                    end_of_initialization 1BF2                         _syntax_as_integer 2210  
                       i2rd_buffer_put@sz 0027                  ??_detection_defaults_set 0068  
                           __Lmediumconst 7D68                    string_utils_atoi@value 0076  
                      ?_syntax_as_integer 0068                 __end_of_potentiometer_set 218A  
                              ??_isr_high 0013                         __end_of_uart_getc 202A  
                       __end_of_uart_init 20EC                        __end_ofi2_adc_read 1FC8  
                       __end_of_uart_putc 21AE                         __end_of_uart_puts 1F8E  
                    rd_buffer_get@pbuffer 0068                __end_of_rd_buffer_readline 1B36  
                     ??_syntax_as_integer 006A                                 _RCSTAbits 000FAB  
                                 printf@c 0087                                   printf@f 0079  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                   __size_of_uart_byte_sent 0008  
                      _serialport_service 1CF0                      rd_buffer_cnt@pbuffer 0068  
                __size_of_syntax_get_text 000C                      ??interrupts@isr_high 0060  
                 __size_of_rd_buffer_init 004A                             _syntax_string 0F38  
                      _serialport_startup 1FC8                                _this_alarm 00C7  
                              _uart_error 21F4                                _uart_reset 20EC  
            ??_string_utils_is_upper_case 0068                     ??_uart_byte_available 001B  
                     ?_serialport_service 0001                   _delay_interrupt_service 21D2  
                     ?_serialport_startup 0001                          ___lbmod@dividend 0069  
            __end_of_string_utils_strncmp 1746                             pd_add_value@d 0070  
                           pd_add_value@i 0086                    string_utils_from_hex@i 0079  
                  string_utils_from_hex@j 0077                 __end_of_syntax_as_integer 221A  
                           _cla_add_value 0846                     __size_of_pd_add_value 03C2  
                       ??i2_rd_buffer_put 001F                               ___lbmod@rem 006B  
                 __end_of_this_parse_item 0C08                      ??_serialport_service 002B  
         __size_of_string_utils_is_symbol 001A                           ??_rd_buffer_get 006C  
                         ??_rd_buffer_cnt 006A                      ??_serialport_startup 006F  
                         ??_rd_buffer_put 006C       __size_of_string_utils_is_upper_case 001A  
                          _detection_task 19E2                               ___ftmul@exp 007B  
                           startup@result 0071                            ?_syntax_string 01D0  
                      detection_task@zero 0087                         cla_add_value@zero 006A  
                           delay_ms@delay 0068                            __end_of___wmul 2056  
                        rd_buffer_put@ind 0076                 string_utils_is_digit@symb 0069  
                            _pd_add_value 00F4                            __end_of_printf 1520  
                             __end_ofPL10 1166                               __end_ofPL20 0A30  
                             __end_ofPL12 0536                               __end_ofPL30 0808  
                             __end_ofPL22 0A42                               __end_ofPL14 0A04  
                             __end_ofPL40 0590                               __end_ofPL32 0564  
                             __end_ofPL24 0C1C                               __end_ofPL16 0A12  
                             __end_ofPL50 1548                               __end_ofPL42 0A50  
                             __end_ofPL34 0820                               __end_ofPL26 0554  
                             __end_ofPL18 0A20                               __end_ofPL60 05D8  
                             __end_ofPL52 1360                               __end_ofPL44 05A2  
                             __end_ofPL36 1536                               __end_ofPL28 07F8  
                             __end_ofPL70 05F6                               __end_ofPL62 05E8  
                             __end_ofPL54 0846                               __end_ofPL46 05B6  
                             __end_ofPL38 057A                               __end_ofPL80 0F38  
                             __end_ofPL72 0602                               __end_ofPL64 1608  
                             __end_ofPL56 05C8                               __end_ofPL48 0834  
                             __end_ofPL82 060A                               __end_ofPL74 1450  
                             __end_ofPL66 1CA0                               __end_ofPL58 1264  
                             __end_ofPL76 186C                               __end_ofPL68 0F2E  
                             __end_ofPL78 145A                       start_initialization 1B9E  
               string_utils_strchr@result 006B              __size_of_sysclk_setup_intosc 0010  
                         _parameter_value 0200                         _uart_set_baudrate 2230  
                          cla_add_value@d 0074                                 _u16_value 00C3  
                          ?_cla_add_value 0068                        ?_uart_set_baudrate 0068  
                    __size_of_sysclk_init 0006           __size_of_detection_defaults_set 0002  
                  __end_of_detection_task 1A58              sysclk_setup_intosc@frequency 0068  
              __size_of_potentiometer_set 0016                       ??_uart_set_baudrate 006B  
                       syntax@syntax_data 7D72                         syntax_string@pstr 01D0  
                    rd_buffer_init@result 006E                    string_utils_split@pbuf 0068  
                  string_utils_split@prev 0073                    string_utils_split@pstr 006A  
                  string_utils_split@symb 0074                                  ??___wmul 006C  
                             ?_uart_error 0001                               ?_uart_reset 0001  
               ??_delay_interrupt_service 001B                                  ??_printf 007D  
                  _string_utils_is_symbol 2140                    string_utils_strchr@pos 006D  
                       ??_syntax_get_text 0068                         ?_serialport_write 0078  
                       __size_of___ftpack 0088                 __end_of_uart_set_baudrate 2236  
                               ___asftmul 1EDE                __end_of_on_parameter_found 0DC4  
                       __size_of_adc_init 0012                         __size_of_adc_read 003A  
                             __pbssCOMRAM 002D                         __size_of___lwtoft 0024  
                           __pcstackBANK0 0060                             __pcstackBANK1 01D0  
                      ??_serialport_write 007A                       __end_of__stringdata 7FFE  
              __size_of_syntax_as_integer 000A                           uart_getc@result 001D  
                    rd_buffer_readline@ch 0079                         __size_of_delay_ms 0012  
               __end_ofsyntax@syntax_data 7FDF                 string_utils_strncmp@pstr1 006A  
               string_utils_strncmp@pstr2 006C                 string_utils_strncmp@symb1 0076  
               string_utils_strncmp@symb2 0077                          ?_this_parse_item 009F  
                         ?_detection_task 0001                                 _g_analog0 00C1  
                               _g_analog1 003F                                 _g_analog2 0041  
                               __pnvBANK0 00F6                            _uart_error$232 001B  
                __size_of_serialport_task 007A                          ___lwdiv@dividend 0068  
                      fp__serialport_task 00F0                        _string_utils_split 186C  
                         ??_syntax_string 00AF                         __CFG_CCP2MX$PORTC 000000  
                       __size_of_isr_high 0074                      _string_utils_strncmp 16B0  
                               __pintcode 0008                            _uart_byte_sent 221A  
                           __pmediumconst 7D68                            _rd_buffer_init 1D88  
                                ?___awdiv 0068                                  ?___ftadd 0081  
                                ?___awmod 0068                                  ?___lbmod 0068  
                                ?___ftmul 0070                _string_utils_is_symbol$753 0068  
      __end_of_string_utils_is_upper_case 2140                _string_utils_is_upper_case 2126  
                                ?___lwdiv 0068                                  ?___lwmod 006F  
                     ?_string_utils_split 0068                    _detection_defaults_set 2238  
                   _detection_profile_set 2236                   ??_string_utils_is_digit 0068  
                 ??_string_utils_from_hex 0072                                ?___asftmul 0081  
     detection_profile_set@profile_number 0001                              _parameter_id 00F5  
                         ??_cla_add_value 006C                                 _gpio_init 21C0  
                        ___lwdiv@quotient 006D                                  ?_startup 0001  
                             _g_rx_buffer 027F                            __size_of_putch 001A  
         __end_of_delay_interrupt_service 21E4                      ??_string_utils_split 006F  
                     __size_of_uart_error 0010                       __size_of_uart_reset 001E  
                             _g_tx_buffer 0100                            ___wmul@product 006C  
                   string_utils_atof@sign 0094                                  _PIE1bits 000F9D  
                   string_utils_atoi@sign 0074                    on_parameter_found@p_id 0089  
                  __end_of_uart_byte_sent 2222                       _this_delay_timer_ms 00F6  
                  __end_of_rd_buffer_init 1DD2                                  _PIR1bits 000F9E  
                                i2u435_40 1316                                  i2u435_47 1312  
                                i2u364_40 0030                                  i2u364_41 002E  
                                i2u365_40 0046                                  i2u365_41 0044  
                                i2u366_40 0054                                  i2u366_41 0052  
                   ?_string_utils_strncmp 006A                     string_utils_copy@pdst 0068  
                                i2u645_40 00A4                                  i2u645_41 00A2  
                                i2u646_40 00BA                                  i2u646_41 00B8  
                                i2u647_40 00C8                                  i2u647_41 00C6  
                   string_utils_copy@psrc 006A                      syntax_string@str_len 01D2  
                               _uart_getc 1FFA                                 _uart_init 20CC  
                  this_parse_item@var_len 00AD                                 _uart_putc 219C  
                               _uart_puts 1F54                    this_parse_item@str_len 00A7  
             __end_of_string_utils_strchr 1C92               __end_of_string_utils_strlen 1EA0  
                    rd_buffer_put@mes_rec 0072             __size_of_symb_from_hex_to_bin 0074  
                              _ADCON0bits 000FC2                      rd_buffer_put@pbuffer 0068  
                             __stringdata 7FDF                         ___wmul@multiplier 0068  
                         i2_rd_buffer_put 1264                                printf@_val 0082  
                              printf@flag 0080                __size_of_uart_set_baudrate 0006  
                      _rd_buffer_readline 1ACC                                printf@prec 0081  
                        this_parse_item@i 00AC                           rd_buffer_cnt@sz 006E  
                              ?_gpio_init 0001                           rd_buffer_put@sz 0074  
                     ?_rd_buffer_readline 0073                               _meas_buffer 0450  
                  potentiometer_set@value 0068                            _parameter_text 0300  
                          _parameter_type 00C6                                  __Hparam0 0000  
                     i2rd_buffer_put@prec 001D                               _pd_detector 016B  
                        syntax_string@pos 01D5                                  __Lparam0 0000  
                         ?_uart_byte_sent 0001                                  _g_CONFIG 00E0  
                   string_utils_split@len 006C                           ?_rd_buffer_init 0068  
                     _sysclk_setup_intosc 21E4                                ?_uart_getc 0001  
                              ?_uart_init 0001               __end_of_uart_byte_available 222A  
                                _g_STATUS 003D                      ??_rd_buffer_readline 0079  
                              ?_uart_putc 0001                                ?_uart_puts 0069  
             __size_ofinterrupts@isr_high 0074                          __size_of___awdiv 0078  
                        __size_of___ftadd 015C                          __size_of___awmod 0068  
                        __size_of___lbmod 002A                    ?_detection_profile_set 0001  
                       _pd_add_value$1080 007E                          __size_of___ftmul 00E4  
                       _pd_add_value$1081 0080                         _pd_add_value$1082 0082  
                       _pd_add_value$1078 007A                         _pd_add_value$1079 007C  
                        __size_of___lwdiv 004A                         ??_serialport_task 00B0  
                        __size_of___lwmod 003E                                  ___ftpack 17DA  
                                _adc_init 21AE                                  _adc_read 1F1A  
                          uart_getc@pbyte 001C                                  ___lwtoft 20A8  
                             ??___asftmul 0084                      ?_sysclk_setup_intosc 0001  
              string_utils_from_hex@pdata 006E                         _string_utils_atof 060A  
                       _string_utils_atoi 105E                         _string_utils_copy 1CA0  
                                _delay_ms 218A                           ___lwdiv@divisor 006A  
                         ___lwdiv@counter 006C                                  __ptext10 1CA0  
                                __ptext11 1C4E                                  __ptext20 210A  
                                __ptext12 16B0                                  __ptext21 0C1C  
                                __ptext13 2126                                  __ptext30 2174  
                                __ptext22 1F1A                                  __ptext14 1746  
                                __ptext31 145A                                  __ptext23 1D3E  
                                __ptext15 1E62                                  __ptext40 219C  
                                __ptext32 215A                                  __ptext24 2204  
                                __ptext16 2140                                  __ptext41 221A  
                                __ptext33 1166                                  __ptext25 2210  
                                __ptext17 1A58                                  __ptext50 1DD2  
                                __ptext42 21AE                                  __ptext34 1E1C  
                                __ptext26 2236                                  __ptext18 105E  
                                __ptext51 1EA0                                  __ptext43 21C0  
                                __ptext35 222A                                  __ptext27 0846  
                                __ptext19 060A                                  __ptext60 1FFA  
                                __ptext52 20A8                                  __ptext44 1FC8  
                                __ptext36 21E4                                  __ptext28 00F4  
                                __ptext61 20EC                                  __ptext53 202A  
                                __ptext45 1D88                                  __ptext37 20CC  
                                __ptext29 2238                                  __ptext62 2222  
                                __ptext54 1EDE                                  __ptext46 196A  
                                __ptext38 2230                                  __ptext63 21F4  
                                __ptext55 17DA                                  __ptext47 1B36  
                                __ptext39 1F54                                  __ptext64 2080  
                                __ptext56 1360                                  __ptext48 0DC4  
                                __ptext65 1F8E                                  __ptext49 2056  
                                __ptext66 1264                                  __ptext58 21D2  
                                __ptext59 1CF0                        ?_string_utils_atof 008F  
                      ?_string_utils_atoi 006E                        ?_string_utils_copy 0068  
                        __size_of_startup 0046               on_parameter_found@operation 008D  
                           __size_of_main 0C42                       ??_string_utils_atof 0092  
                     ??_string_utils_atoi 0071                       ??_string_utils_copy 006E  
             __size_of_serialport_service 004E                                  _isr_high 0008  
                  ??_string_utils_strncmp 0071               __size_of_serialport_startup 0032  
                   __end_of_rd_buffer_get 16B0                     __end_of_rd_buffer_cnt 1C4E  
                   __end_of_rd_buffer_put 1252                           _syntax_get_text 2204  
                                _this_buf 0500                   __end_ofi2_rd_buffer_put 134E  
                 ?_string_utils_is_symbol 0001        string_utils_strncmp@case_sensitive 0070  
                            ??_uart_error 001B                              ??_uart_reset 001C  
               __end_of_string_utils_atof 07DE                 __end_of_string_utils_atoi 115A  
               __end_of_string_utils_copy 1CF0                string_utils_strncmp@result 0073  
                               putch@byte 0078                     ??_sysclk_setup_intosc 0068  
                              _INTCONbits 000FF2                        i2rd_buffer_put@ind 0029  
                             ??_gpio_init 0068                             ??_sysclk_init 0069  
                on_parameter_found@cmd_id 0088                          ??_detection_task 0087  
                    string_utils_strlen@i 006C                                  intlevel2 0000  
                        ___lwmod@dividend 006F                        _on_parameter_found 0C1C  
                      __end_of_uart_error 2204                 __size_of_serialport_write 004A  
                      __end_of_uart_reset 210A                              _this_warning 00C8  
                 string_utils_copy@maxlen 006C            __end_of_string_utils_is_symbol 215A  
                     ?_on_parameter_found 0088                   string_utils_copy@result 006E  
                 ?_detection_defaults_set 0001                               ??_uart_getc 001C  
                             ??_uart_init 006B                                  printf@ap 007F  
                             ??_uart_putc 0068                               ??_uart_puts 006D  
             ?_string_utils_is_upper_case 0001                       string_utils_split@i 006F  
          __size_of_string_utils_is_digit 001C                           ___lwmod@divisor 0071  
           __end_of_string_utils_is_digit 2126            __size_of_string_utils_from_hex 0094  
                         ___lwmod@counter 0073             __end_of_string_utils_from_hex 17DA  
                      string_utils_atof@a 009A                        string_utils_atof@c 009D  
                      string_utils_atof@e 0098                        string_utils_atof@i 0096  
                      string_utils_atoi@c 006E                        string_utils_atof@s 008F  
                     on_parameter_found@p 008A                      ??_on_parameter_found 008D  
            string_utils_strchr@delimeter 006A                               _timers_list 0400  
                           uart_putc@byte 0068                   __end_of_syntax_get_text 2210  
                       __CFG_FOSC$INTIO67 000000                       __end_of_sysclk_init 2230  
                           uart_puts@size 006B                             uart_puts@pstr 0069  
                      adc_read@adc_number 0069                        main@event_priority 01DD  
          __end_of_detection_defaults_set 223A                           pd_add_value@val 0072  
                         pd_add_value@tmp 0084  
